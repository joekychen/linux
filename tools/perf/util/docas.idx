f | header.c | s | 53K | 2014 | Arnaldo Carvalho de Melo | acme@redhat.com | 1339511289 |  | perf tools: Fix synthesizing tracepoint names from the perf.data headers  We need to use the per event info snapshoted at record time to synthesize the events name, so do it just after reading the perf.data headers, when we already processed the /sys events data, otherwise we'll end up using the local /sys that only by sheer luck will have the same tracepoint ID -> real event association.  Example:    # uname -a   Linux felicio.ghostprotocols.net 3.4.0-rc5+ #1 SMP Sat May 19 15:27:11 BRT 2012 x86_64 x86_64 x86_64 GNU/Linux   # perf record -e sched:sched_switch usleep 1   [ perf record: Woken up 1 times to write data ]   [ perf record: Captured and wrote 0.015 MB perf.data (~648 samples) ]   # cat /t/events/sched/sched_switch/id   279   # perf evlist -v   sched:sched_switch: sample_freq=1, type: 2, config: 279, size: 80, sample_type: 1159, read_format: 7, disabled: 1, inherit: 1, mmap: 1, comm: 1, enable_on_exec: 1, sample_id_all: 1, exclude_guest: 1   #  So on the above machine the sched:sched_switch has tracepoint id 279, but on the machine were we'll analyse it it has a different id:    $ cat /t/events/sched/sched_switch/id   56   $ perf evlist -i /tmp/perf.data   kmem:mm_balancedirty_writeout   $ cat /t/events/kmem/mm_balancedirty_writeout/id   279  With this fix:    $ perf evlist -i /tmp/perf.data   sched:sched_switch  Reported-by: Dmitry Antipov <dmitry.antipov@linaro.org> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Jiri Olsa <jolsa@redhat.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-auwks8fpuhmrdpiefs55o5oz@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | thread_map.h | s | 621B | 17 | Robert Richter | robert.richter@amd.com | 1334176730 |  | perf tools: Fix thread map that is type pid_t  Thread map is actually type pid_t and not int.  Signed-off-by: Robert Richter <robert.richter@amd.com> Cc: Ingo Molnar <mingo@kernel.org> Link: http://lkml.kernel.org/r/1333643188-26895-3-git-send-email-robert.richter@amd.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | string.c | s | 5.8K | 281 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1310760047 |  | perf probe: Move strtailcmp to string.c  Since strtailcmp() is enough generic, it should be defined in string.c.  Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Ingo Molnar <mingo@elte.hu> Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Link: http://lkml.kernel.org/r/20110627072715.6528.10677.stgit@fedora15 Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | path.c | s | 3.3K | 138 | Kirill A. Shutemov | kirill@shutemov.name | 1282400567 |  | perf tools: add test for strlcpy()  Some Linux distributions like ALT Linux provides patched glibc with contains strlcpy(). It's confilcts with strlcpy() from perf.  Let's add check for strlcpy().  Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Paul Mackerras <paulus@samba.org> Cc: Ingo Molnar <mingo@elte.hu> LKML-Reference: <1282351101-8879-1-git-send-email-kirill@shutemov.name> Signed-off-by: Kirill A. Shutemov <kirill@shutemov.name> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | header.h | s | 3.7K | 114 | Stephane Eranian | eranian@google.com | 1337702266 |  | perf tools: rename HEADER_TRACE_INFO to HEADER_TRACING_DATA  To match the PERF_RECORD_HEADER_TRACING_DATA record type.  This is the same info as the one used for pipe mode whereas the other one is for regular file output. This will help in the later patch to add meta-data infos in pipe mode.  Signed-off-by: Stephane Eranian <eranian@google.com> Cc: David Ahern <dsahern@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/1337081295-10303-4-git-send-email-eranian@google.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | python-ext-sources | g | 354B |  | David Ahern | dsahern@gmail.com | 1329180851 |  | perf tools: Allow multiple threads or processes in record, stat, top  Allow a user to collect events for multiple threads or processes using a comma separated list.  e.g., collect data on a VM and its vhost thread:   perf top -p 21483,21485   perf stat -p 21483,21485 -ddd   perf record -p 21483,21485  or monitoring vcpu threads   perf top -t 21488,21489   perf stat -t 21488,21489 -ddd   perf record -t 21488,21489  Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Thomas Gleixner <tglx@linutronix.de> Link: http://lkml.kernel.org/r/1328718772-16688-1-git-send-email-dsahern@gmail.com Signed-off-by: David Ahern <dsahern@gmail.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | debug.h | s | 977B | 27 | Namhyung Kim | namhyung@gmail.com | 1334175400 |  | perf tools: Move UI bits to tools/perf/ui directory  Move those files to new directory in order to be prepared to further UI work. Makefile and header file pathes are adjusted accordingly.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Suggested-by: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Acked-by: Pekka Enberg <penberg@kernel.org> Cc: Ingo Molnar <mingo@elte.hu> Cc: Namhyung Kim <namhyung.kim@lge.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Pekka Enberg <penberg@kernel.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl Link: http://lkml.kernel.org/r/1333523666-12057-1-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | color.h | s | 1.7K | 38 | Arnaldo Carvalho de Melo | acme@redhat.com | 1270236495 |  | perf hist: Replace ->print() routines by ->snprintf() equivalents  Then hist_entry__fprintf will just us the newly introduced hist_entry__snprintf, add the newline and fprintf it to the supplied FILE descriptor.  This allows us to remove the use_browser checking in the color_printf routines, that now got color_snprintf variants too.  The newt TUI browser (and other GUIs that may come in the future) don't have to worry about stdio specific stuff in the strings they get from the se->snprintf routines and instead use whatever means to do the equivalent.  Also the newt TUI browser don't have to use the fmemopen() hack, instead it can use the se->snprintf routines directly. For now tho use the hist_entry__snprintf routine to reduce the patch size.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Paul Mackerras <paulus@samba.org> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | parse-events.c | s | 25K | 923 | Arnaldo Carvalho de Melo | acme@redhat.com | 1337974691 |  | perf tools: Reconstruct event with modifiers from perf_event_attr  The modifiers:    k		kernel space   u		user space   h		hypervisor   G		guest   H		host   p, pp, ppp    precision level (PEBS)  that can be suffixed to an event were lost when tools used event_name() to reconstruct them from the perf_event_attr entries in a perf.data file.  Fix it by following the defaults used for these modifiers in the current codebase, so:   $ perf record -e instructions:u usleep 1 2> /dev/null  $ perf evlist  instructions:u  $ perf record -e cycles:k usleep 1 2> /dev/null  $ perf evlist  cycles:k  $ perf record -e cycles:kh usleep 1 2> /dev/null  $ perf evlist  cycles:kh  $ perf record -e cache-misses:G usleep 1 2> /dev/null  $ perf evlist  cache-misses:G  $ perf record -e cycles:ppk usleep 1 2> /dev/null  $ perf evlist  cycles:kpp  $  Also works with 'top', 'report', etc.  More work needed to cover tracepoints and software events while not dragging lots of baggage to the python binding, this is a minimal fix for v3.5.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-4hl5glle0hxlklw4usva1mkt@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | color.c | s | 6.6K | 284 | Arnaldo Carvalho de Melo | acme@redhat.com | 1331739379 |  | perf tools: Use scnprintf where applicable  Several places were expecting that the value returned was the number of characters printed, not what would be printed if there was space.  Fix it by using the scnprintf and vscnprintf variants we inherited from the kernel sources.  Some corner cases where the number of printed characters were not accounted were fixed too.  Reported-by: Anton Blanchard <anton@samba.org> Cc: Anton Blanchard <anton@samba.org> Cc: Eric B Munson <emunson@mgebm.net> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Cc: Yanmin Zhang <yanmin_zhang@linux.intel.com> Cc: stable@kernel.org Link: http://lkml.kernel.org/n/tip-kwxo2eh29cxmd8ilixi2005x@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | values.c | s | 6.5K | 199 | Namhyung Kim | namhyung@gmail.com | 1324395694 |  | perf tools: Fix a memory leak on perf_read_values_destroy  After freeing each elements of the @values->value, we should free itself too.  Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1323703017-6060-5-git-send-email-namhyung@gmail.com Signed-off-by: Namhyung Kim <namhyung@gmail.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | levenshtein.c | s | 2.5K | 78 | Ingo Molnar | mingo@elte.hu | 1244313223 |  | perf_counter tools: Move from Documentation/perf_counter/ to tools/perf/  Several people have suggested that 'perf' has become a full-fledged tool that should be moved out of Documentation/. Move it to the (new) tools/ directory.  Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Arnaldo Carvalho de Melo <acme@redhat.com> LKML-Reference: <new-submission> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | annotate.c | s | 25K | 905 | Arnaldo Carvalho de Melo | acme@redhat.com | 1336839980 |  | perf annotate: Introduce ->free() method in ins_ops  So that we don't special case disasm_line__free, allowing each instruction class to provide an specialized destructor, like is needed for 'lock'.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-xxw4vs5n077tf35jsvjzylhb@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | pmu.c | s | 9.7K | 395 | Jiri Olsa | jolsa@redhat.com | 1337698074 |  | perf tools: Add hardcoded name term for pmu events  Adding a new hardcoded term 'name' allowing to specify a name for the pmu event. The term is defined along with standard pmu terms. If no 'name' term is given, the event name follows following template:      "raw 0x<perf_event_attr::config>"  running:     perf stat -e cpu/config=1,name=krava1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 krava1     ...  running:     perf stat -e cpu/config=1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 raw 0x1     ...  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1337584373-2741-6-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | quote.h | s | 924B | 25 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | ctype.c | s | 1.4K | 34 | Namhyung Kim | namhyung.kim@lge.com | 1329182260 |  | perf tools: ctype.c only wants util.h  The implementation of sane ctype macros only depends on symbols in util.h not cache.h.  Cc: Ingo Molnar <mingo@elte.hu> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1328836217-9118-2-git-send-email-namhyung.kim@lge.com Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | trace-event-parse.c | s | 7.4K | 290 | Steven Rostedt | srostedt@redhat.com | 1335353748 |  | parse-events: Rename struct record to struct pevent_record  As libtraceevent will be a library, having struct record is far too generic of a name to use. Renaming it to be consistent with the rest of the functions will be a better long term solution.  Signed-off-by: Steven Rostedt <rostedt@goodmis.org> Cc: Ingo Molnar <mingo@kernel.org> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Arnaldo Carvalho de Melo <acme@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Borislav Petkov <bp@alien8.de> Cc: Jiri Olsa <jolsa@redhat.com> Cc: Arun Sharma <asharma@fb.com> Cc: Namhyung Kim <namhyung.kim@lge.com> Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
f | exec_cmd.c | s | 2.7K | 114 | Michael Witten | mfwitten@gmail.com | 1298022186 |  | perf tools: Makefile: Remove various and sundry cruft  This commit squashes several commits that remove:   unnecessary uname calls  `sh -c'  BUILT_INS and QUIET_BUILT_IN      They have no effect, and the `fixup-builtins' and `check-builtins.sh'     scripts don't even exist.   RUNTIME_PREFIX      It's currently never anything but unset, and it's apparently     only meaningful when Microsoft Windows is the operating system     (according to the source for git).   TEST_PROGRAMS  EXTRA_PROGRAMS  unused SHELL_PATH_SQ portions  unused test for V=2  useless exports      Only when `V' is undefined (that is, only when the value of `V'     is empty) is `export V' performed, which just has the effect of     placing the empty-valued variable `V' in the environment.      The only other script to make use of `V' is `Documentation/Makefile',     which only checks whether `V' is undefined (that is, whether the value     of `V' is empty); hence, the `export V' has no effect whatsoever.      Similarly, `export QUIET_GEN' is useless because it will only have     a non-empty value when `V' has an empty-value, and when `V' has     an empty-value, `QUIET_GEN' is always explicitly set in every     script in which it is used.      `DESTDIR' is only ever defined by the user via the environment     or the command line, both of which are automatically exported     to sub-make processes. Furthermore, no non-make sub-scripts     make use of `DESTDIR' as an environment variable.      No other scripts use `perfexec_instdir'.   unused QUIET_SUBDIR{0,1}  TAR and RPMBUILD  PTHREAD_LIBS  Maintainer's dist rules and commands  distclean target  Test suite coverage testing  PRINT_DIR and NO_SUBDIR  `configure' target  NO_CURL  @@PERF_VERSION@@ substitution      Without the sed command, all of the rule's commands can be reduced     to a single line that copies a file and sets the permissions properly     in the process.   `make test' echo line  template_instdir  PERF-BUILD-OPTIONS  double-colon rules      The use of double-colon rules seems misguided or vestigial git.   Essentially hard-coded $(SCRIPTS) expansion  Signed-off-by: Michael Witten <mfwitten@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | help.h | s | 781B | 25 | John Kacur | jkacur@redhat.com | 1253820471 |  | perf tools: Protect header files with a consistent style  There was a colorful mix of header guards - standardize them.  Signed-off-by: John Kacur <jkacur@redhat.com> LKML-Reference: <alpine.LFD.2.00.0909241756530.11383@localhost.localdomain> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | pmu.l | s | 571B | 33 | Jiri Olsa | jolsa@redhat.com | 1331918975 |  | perf tools: Add perf pmu object to access pmu format definition  Adding pmu object which provides interface to pmu's sysfs event format definition located at:   ${sysfs_mount}/bus/event_source/devices/${pmu}/format  Following interface is exported:   struct perf_pmu* perf_pmu__find(char *name);   - this function returns pmu object, which is then     passed as a handle to other interface functions    int perf_pmu__config(struct perf_pmu *pmu, struct perf_event_attr *attr,                        struct list_head *head_terms);   - this function configures perf_event_attr struct based     on pmu's format definitions and config terms data,     containined in head_terms list.  Parser generator is used to retrive the pmu's format definition. The generated parser is part of the patch. Added makefile rule 'pmu-parser' to generate the parser code out of the bison/flex sources.  Added builtin test 'Test perf pmu format parsing', which could be run like: 	perf test pmu  Acked-by: Peter Zijlstra <peterz@infradead.org> Signed-off-by: Jiri Olsa <jolsa@redhat.com> Link: http://lkml.kernel.org/n/tip-errz96u1668gj9wlop1zhpht@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | hist.c | s | 32K | 1130 | Namhyung Kim | namhyung.kim@lge.com | 1338472032 |  | perf callchain: Make callchain cursors TLS  perf top -G has a race on callchain cursor between main thread and display thread. Since the callchain cursors are used locally make them thread-local data would solve the problem.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Reported-by: Sunjin Yang <fan4326@gmail.com> Suggested-by: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Sunjin Yang <fan4326@gmail.com> Link: http://lkml.kernel.org/r/1338443007-24857-1-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | build-id.c | s | 2.2K | 75 | Stephane Eranian | eranian@google.com | 1337702634 |  | perf buildid-list: Work better with pipe mode  In order for perf buildid-list to work with pipe-mode files, it needs to process buildids and event attr structs.  $ perf record -o - noploop 2 || ./perf inject -b || perf buildid-list -i - -H noploop for 2 seconds [ perf record: Woken up 1 times to write data ] [ perf record: Captured and wrote 0.084 MB - (~3678 samples) ] 0000000000000000000000000000000000000000 [kernel.kallsyms] 3a0d0629efe74a8da3eeba372cdbd74ad9b8f5d5 /usr/local/bin/noploop  The reason [kernel.kallsyms] shows a 0 build-id comes from the way buildids are injected in the stream.  The buildid for the kernel is provided by a BUILD_ID record. The [kernel.kallsyms] is provided by a MMAP record. There is no clean and obvious way to link the two, unfortunately.  In regular mode, the kernel buildid is generated from reading the ELF image or kallsyms and perf knows to associate [kernel.kallsyms] to it. Later on, when perf processes the [kernel.kallsyms] MMAP record, it will already have a dso for it.  So for now, make sure perf buildid-list shows the buildids for everything but the kernel image.  Signed-off-by: Stephane Eranian <eranian@google.com> Cc: David Ahern <dsahern@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/1337081295-10303-6-git-send-email-eranian@google.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
d | include |  | 3 items |  | David Ahern | dsahern@gmail.com | 1339424401 |  | perf tools: Fix endianity swapping for adds_features bitmask  Based on Jiri's latest attempt: https://lkml.org/lkml/2012/5/16/61  Basically, adds_features should be byte swapped assuming unsigned longs are either 8-bytes (u64) or 4-bytes (u32).      Fixes 32-bit ppc dumping 64-bit x86 feature data:      ========      captured on: Sun May 20 19:23:23 2012      hostname : nxos-vdc-dev3      os release : 3.4.0-rc7+      perf version : 3.4.rc4.137.g978da3      arch : x86_64      nrcpus online : 16      nrcpus avail : 16      cpudesc : Intel(R) Xeon(R) CPU E5540 @ 2.53GHz      cpuid : GenuineIntel,6,26,5      total memory : 24680324 kB     ...  Verified 64-bit x86 can still dump feature data for 32-bit ppc.  Signed-off-by: David Ahern <dsahern@gmail.com> Reviewed-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/4FBBB539.5010805@gmail.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | xyarray.h | s | 432B | 15 | Arnaldo Carvalho de Melo | acme@redhat.com | 1294079944 |  | perf tools: Introduce event selectors  Out of ad-hoc code and global arrays with hard coded sizes.  This is the first step on having a library that will be first used on regression tests in the 'perf test' tool.  [acme@felicio linux]$ size /tmp/perf.before    text	   data	    bss	    dec	    hex	filename 1273776	  97384	5104416	6475576	 62cf38	/tmp/perf.before [acme@felicio linux]$ size /tmp/perf.new    text	   data	    bss	    dec	    hex	filename 1275422	  97416	1392416	2765254	 2a31c6	/tmp/perf.new  Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | debug.c | s | 2.1K | 87 | Namhyung Kim | namhyung.kim@lge.com | 1336422621 |  | perf tools: Introduce perf_target__strerror()  The perf_target__strerror() sets @buf to a string that describes the (perf_target-specific) error condition that is passed via @errnum.  This is similar to strerror_r() and does same thing if @errnum has a standard errno value.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Suggested-by: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Reviewed-by: David Ahern <dsahern@gmail.com> Cc: David Ahern <dsahern@gmail.com> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1336367344-28071-6-git-send-email-namhyung.kim@lge.com [ committer note: No need to use PERF_ERRNO_TARGET__SUCCESS, use shorter idiom ] Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | python.c | s | 29K | 888 | Arnaldo Carvalho de Melo | acme@redhat.com | 1327441657 |  | perf tools: Introduce per user view  The new --uid command line option will show only the tasks for a given user, using the proc interface to figure out the existing tasks.  Kernel work is needed to close races at startup, but this should already be useful in many use cases.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-bdnspm000gw2l984a2t53o8z@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | strfilter.c | s | 4.1K | 177 | Frederic Weisbecker | fweisbec@gmail.com | 1299197838 |  | perf: Fix missing strndup declaration  <ctype.h> is included first without _GNU_SOURCE, so it ends up including <string.h> without declaring strndup(). And further <string.h> declarations, even with _GNU_SOURCE defined, are of course without effect.  Therefore:  	util/strfilter.c: Dans la fonction «strfilter_node__new» : 	util/strfilter.c:134: attention : déclaration implicite de la fonction « «strndup» » 	util/strfilter.c:134: attention : incompatible implicit declaration of built-in function «strndup» 	make: *** [util/strfilter.o] Erreur 1  Just don't include ctype.h as it doesn't appear to be necessary anyway.  Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Cc: Tom Zanussi <tzanussi@gmail.com> Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
f | help.c | s | 7.8K | 274 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | util.c | s | 2.4K | 128 | Arnaldo Carvalho de Melo | acme@redhat.com | 1334852124 |  | perf annotate browser: Align jump labels  Find out at browser startup the max width and use it when rendering jump labels on the screen.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-7dxjiwqb77wz6f5lc05e0i0x@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | debugfs.h | s | 329B | 9 | Jiri Olsa | jolsa@redhat.com | 1329182738 |  | perf tools: Remove unused functions from debugfs object  Following debugfs object functions are not referenced within the code:    int debugfs_valid_entry(const char *path);   int debugfs_umount(void);   int debugfs_write(const char *entry, const char *value);   int debugfs_read(const char *entry, char *buffer, size_t size);   void debugfs_force_cleanup(void);   int debugfs_make_path(const char *element, char *buffer, int size);  Removing them.  Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1327674868-10486-3-git-send-email-jolsa@redhat.com Signed-off-by: Jiri Olsa <jolsa@redhat.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | dwarf-aux.c | s | 21K | 737 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1313152475 |  | perf probe: Filter out redundant inline-instances  With gcc4.6, some instances of concrete inlined function looks redundant and broken, because it appears inside of a concrete instance and its call_file and call_line are same as the original abstruct's decl_file and decl_line respectively.  e.g.  [  d1aa]    subprogram              external             (flag) Yes              name                 (strp) "add_timer"              decl_file            (data1) 2		;here is original              decl_line            (data2) 847		;line and file              prototyped           (flag) Yes              inline               (data1) inlined (1)              sibling              (ref4) [  d1c6] ...  [ 11d84]    subprogram              abstract_origin      (ref4) [  d1aa]	; concrete instance              low_pc               (addr) .text+0x000000000000246f <add_timer>              high_pc              (addr) .text+0x000000000000248b <mod_timer_pending>              frame_base           (block1)               [   0] call_frame_cfa              sibling              (ref4) [ 11dd9]  [ 11d9f]      formal_parameter                abstract_origin      (ref4) [  d1b9]                location             (data4) location list [  701b]  [ 11da8]      inlined_subroutine                abstract_origin      (ref4) [  d1aa]	; redundant instance                low_pc               (addr) .text+0x000000000000247e <add_timer+0xf>                high_pc              (addr) .text+0x0000000000002480 <add_timer+0x11>                call_file            (data1) 2		; call line and file                call_line            (data2) 847		; are same as above  Those redundant instances leads unwilling results;  e.g. find probe points inside of functions even if we specify a function entry as below;  $ perf probe -V add_timer Available variables at add_timer         @<add_timer+0>                 struct timer_list*      timer         @<add_timer+15>                 (No matched variables)  So, this filters out those redundant instances based on call-site and decl-site information.  Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Pekka Enberg <penberg@kernel.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: yrl.pp-manager.tt@hitachi.com Link: http://lkml.kernel.org/r/20110811110317.19900.59525.stgit@fedora15 Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | generate-cmdlist.sh | s | 447B | 21 | Ingo Molnar | mingo@elte.hu | 1244313223 |  | perf_counter tools: Move from Documentation/perf_counter/ to tools/perf/  Several people have suggested that 'perf' has become a full-fledged tool that should be moved out of Documentation/. Move it to the (new) tools/ directory.  Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Arnaldo Carvalho de Melo <acme@redhat.com> LKML-Reference: <new-submission> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | target.c | s | 3.2K | 114 | Namhyung Kim | namhyung.kim@lge.com | 1336422621 |  | perf tools: Introduce perf_target__strerror()  The perf_target__strerror() sets @buf to a string that describes the (perf_target-specific) error condition that is passed via @errnum.  This is similar to strerror_r() and does same thing if @errnum has a standard errno value.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Suggested-by: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Reviewed-by: David Ahern <dsahern@gmail.com> Cc: David Ahern <dsahern@gmail.com> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1336367344-28071-6-git-send-email-namhyung.kim@lge.com [ committer note: No need to use PERF_ERRNO_TARGET__SUCCESS, use shorter idiom ] Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | map.h | s | 7.3K | 212 | Arnaldo Carvalho de Melo | acme@redhat.com | 1333666274 |  | perf annotate: Validate addr in symbol__inc_addr_samples  This routine was checking only if the provided address was after sym->end, not if it was before sym->start.  Fix that by checking for both and return in both cases -ERANGE, so that tools can communicate this to the user properly, or if they chose so, to abort.  This problem was reported previously but the fixes involved either doing what was being done for the > end case, i.e. silently drop the sample, returning 0, or aborting at this function, which is in a lib (or better, is slated to be at some point) and shouldn't abort.  The 'report' tool already checks this value and uses pr_debug to warn the user.  This patch makes the 'top' tool check it too and warn once per map where such range problem takes place.  Reported-by: David Miller <davem@davemloft.net> Reported-by: Sorin Dumitru <dumitru.sorin87@gmail.com> Reported-by: Stephane Eranian <eranian@google.com> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/n/tip-lw8gs7p9i9nhldilo82tzpne@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | thread.c | s | 2.7K | 116 | Arnaldo Carvalho de Melo | acme@redhat.com | 1322483731 |  | perf session: Move threads to struct machine  The 'machine' abstraction was introduced with 'perf kvm' where we could have samples for the host and multiple guests, but at the time we ended up keeping the list of all machines threads all in session->host_machine.  Move the threads rb_tree to struct machine to separate the namespaces.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-mdg7sm6j3va09vtgj49gbsrp@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | pmu.y | s | 1.3K | 78 | Jiri Olsa | jolsa@redhat.com | 1331918975 |  | perf tools: Add perf pmu object to access pmu format definition  Adding pmu object which provides interface to pmu's sysfs event format definition located at:   ${sysfs_mount}/bus/event_source/devices/${pmu}/format  Following interface is exported:   struct perf_pmu* perf_pmu__find(char *name);   - this function returns pmu object, which is then     passed as a handle to other interface functions    int perf_pmu__config(struct perf_pmu *pmu, struct perf_event_attr *attr,                        struct list_head *head_terms);   - this function configures perf_event_attr struct based     on pmu's format definitions and config terms data,     containined in head_terms list.  Parser generator is used to retrive the pmu's format definition. The generated parser is part of the patch. Added makefile rule 'pmu-parser' to generate the parser code out of the bison/flex sources.  Added builtin test 'Test perf pmu format parsing', which could be run like: 	perf test pmu  Acked-by: Peter Zijlstra <peterz@infradead.org> Signed-off-by: Jiri Olsa <jolsa@redhat.com> Link: http://lkml.kernel.org/n/tip-errz96u1668gj9wlop1zhpht@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | probe-finder.h | s | 2.9K | 85 | Arnaldo Carvalho de Melo | acme@redhat.com | 1322482264 |  | perf tools: Eliminate duplicate code and use PATH_MAX consistently  No need for multiple definitions for STR() and die(), also use SuSv2's PATH_MAX instead of adding MAX_PATH.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-qpujjkw7u0bf0tr4wt55cr9y@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | types.h | s | 494B | 20 | Jiri Olsa | jolsa@redhat.com | 1337701825 |  | perf tools: Add union u64_swap type for swapping u64 data  The following union:   union {         u64 val64;         u32 val32[2];   } u;  is used on more than one place in perf code and will be used more in upcomming patches.  Adding union u64_swap to have it defined globaly so we dont need to redefine it all the time.  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Reviewed-by: David Ahern <dsahern@gmail.com> Tested-by: David Ahern <dsahern@gmail.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1337151548-2396-4-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | levenshtein.h | s | 242B | 6 | John Kacur | jkacur@redhat.com | 1253820471 |  | perf tools: Protect header files with a consistent style  There was a colorful mix of header guards - standardize them.  Signed-off-by: John Kacur <jkacur@redhat.com> LKML-Reference: <alpine.LFD.2.00.0909241756530.11383@localhost.localdomain> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | svghelper.h | s | 1.0K | 20 | John Kacur | jkacur@redhat.com | 1253820471 |  | perf tools: Protect header files with a consistent style  There was a colorful mix of header guards - standardize them.  Signed-off-by: John Kacur <jkacur@redhat.com> LKML-Reference: <alpine.LFD.2.00.0909241756530.11383@localhost.localdomain> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | evsel.h | s | 4.7K | 155 | Arnaldo Carvalho de Melo | acme@redhat.com | 1337974691 |  | perf tools: Reconstruct event with modifiers from perf_event_attr  The modifiers:    k		kernel space   u		user space   h		hypervisor   G		guest   H		host   p, pp, ppp    precision level (PEBS)  that can be suffixed to an event were lost when tools used event_name() to reconstruct them from the perf_event_attr entries in a perf.data file.  Fix it by following the defaults used for these modifiers in the current codebase, so:   $ perf record -e instructions:u usleep 1 2> /dev/null  $ perf evlist  instructions:u  $ perf record -e cycles:k usleep 1 2> /dev/null  $ perf evlist  cycles:k  $ perf record -e cycles:kh usleep 1 2> /dev/null  $ perf evlist  cycles:kh  $ perf record -e cache-misses:G usleep 1 2> /dev/null  $ perf evlist  cache-misses:G  $ perf record -e cycles:ppk usleep 1 2> /dev/null  $ perf evlist  cycles:kpp  $  Also works with 'top', 'report', etc.  More work needed to cover tracepoints and software events while not dragging lots of baggage to the python binding, this is a minimal fix for v3.5.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-4hl5glle0hxlklw4usva1mkt@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | probe-finder.c | s | 38K | 1377 | Prashanth Nageshappa | prashanth@linux.vnet.ibm.com | 1332946609 |  | perf probe: Finder fails to resolve function name to address  If DIE entries corresponding to declarations appear before definition entry, probe finder returns error instead of continuing to look further for a definition entry.  This patch ensures we reach to the DIE entry corresponding to the definition and get the function address.  V2: A simpler solution based on Masami's suggestion.  Signed-off-by: Prashanth Nageshappa <prashanth@linux.vnet.ibm.com> Acked-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Cc: Steven Rostedt <rostedt@goodmis.org> Link: http://lkml.kernel.org/r/4F703FB9.9020407@linux.vnet.ibm.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | event.c | s | 22K | 770 | David Ahern | dsahern@gmail.com | 1330550985 |  | perf tools: Ensure comm string is properly terminated  If threads in a multi-threaded process have names shorter than the main thread the comm for the named threads is not properly terminated.  E.g., for the process 'namedthreads' where each thread is named noploop%d where %d is the thread number:  Before:     perf script -f comm,tid,ip,sym,dso     noploop:4ads 21616  400a49 noploop (/tmp/namedthreads) The 'ads' in the thread comm bleeds over from the process name.  After:     perf script -f comm,tid,ip,sym,dso        noploop:4 21616  400a49 noploop (/tmp/namedthreads)  Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Thomas Gleixner <tglx@linutronix.de> Link: http://lkml.kernel.org/r/1330111898-68071-1-git-send-email-dsahern@gmail.com Signed-off-by: David Ahern <dsahern@gmail.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | config.c | s | 9.7K | 450 | Arnaldo Carvalho de Melo | acme@redhat.com | 1338339542 |  | perf config: Allow '_' in config file variable names  For annotate I want to be able to have variables that are the same as the ones representing feature toggles.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-7rhhf6m0a72p2wja4tgv1itg@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | trace-event-scripting.c | s | 4.3K | 139 | Namhyung Kim | namhyung@gmail.com | 1327955855 |  | perf tools: Remove unnecessary ctype.h inclusion  There are unnecessary #include <ctype.h> out there, and they might cause a nasty build failure in some environment. As we already have most of ctype macros in util.h, just get rid of them.  A few of exceptions are util/symbol.c which needs isupper() macro util.h doesn't provide and perl scripting support code which includes ctype.h internally.  Suggested-by: Ingo Molnar <mingo@elte.hu> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1327827356-8786-4-git-send-email-namhyung@gmail.com Signed-off-by: Namhyung Kim <namhyung@gmail.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | alias.c | s | 1.4K | 67 | Ingo Molnar | mingo@elte.hu | 1246445388 |  | perf_counter tools: Add more warnings and fix/annotate them  Enable -Wextra. This found a few real bugs plus a number of signed/unsigned type mismatches/uncleanlinesses. It also required a few annotations  All things considered it was still worth it so lets try with this enabled for now.  Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Arnaldo Carvalho de Melo <acme@redhat.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | values.h | s | 618B | 21 | John Kacur | jkacur@redhat.com | 1253820471 |  | perf tools: Protect header files with a consistent style  There was a colorful mix of header guards - standardize them.  Signed-off-by: John Kacur <jkacur@redhat.com> LKML-Reference: <alpine.LFD.2.00.0909241756530.11383@localhost.localdomain> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | pmu.h | s | 940B | 32 | Jiri Olsa | jolsa@redhat.com | 1331918975 |  | perf tools: Add perf pmu object to access pmu format definition  Adding pmu object which provides interface to pmu's sysfs event format definition located at:   ${sysfs_mount}/bus/event_source/devices/${pmu}/format  Following interface is exported:   struct perf_pmu* perf_pmu__find(char *name);   - this function returns pmu object, which is then     passed as a handle to other interface functions    int perf_pmu__config(struct perf_pmu *pmu, struct perf_event_attr *attr,                        struct list_head *head_terms);   - this function configures perf_event_attr struct based     on pmu's format definitions and config terms data,     containined in head_terms list.  Parser generator is used to retrive the pmu's format definition. The generated parser is part of the patch. Added makefile rule 'pmu-parser' to generate the parser code out of the bison/flex sources.  Added builtin test 'Test perf pmu format parsing', which could be run like: 	perf test pmu  Acked-by: Peter Zijlstra <peterz@infradead.org> Signed-off-by: Jiri Olsa <jolsa@redhat.com> Link: http://lkml.kernel.org/n/tip-errz96u1668gj9wlop1zhpht@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | parse-events.h | s | 2.9K | 83 | Jiri Olsa | jolsa@redhat.com | 1337698074 |  | perf tools: Add hardcoded name term for pmu events  Adding a new hardcoded term 'name' allowing to specify a name for the pmu event. The term is defined along with standard pmu terms. If no 'name' term is given, the event name follows following template:      "raw 0x<perf_event_attr::config>"  running:     perf stat -e cpu/config=1,name=krava1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 krava1     ...  running:     perf stat -e cpu/config=1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 raw 0x1     ...  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1337584373-2741-6-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | cache.h | s | 3.0K | 93 | Namhyung Kim | namhyung.kim@lge.com | 1335986257 |  | perf ui: Change fallback policy of setup_browser()  If gtk2 support is not enabled (or failed for some reason) try TUI again instead of falling directly back to the stdio interface.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Acked-by: Pekka Enberg <penberg@kernel.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Pekka Enberg <penberg@kernel.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1335761711-31403-6-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | cpumap.h | s | 335B | 12 | Arnaldo Carvalho de Melo | acme@redhat.com | 1327441608 |  | perf tools: Add fprintf methods for thread_map and cpu_map classes  For helping with debugging.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-m06n4rp7pwr6dlzwoq89cl69@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | bitmap.c | s | 699B | 25 | Jiri Olsa | jolsa@redhat.com | 1329182890 |  | perf tools: Add bitmap_or function into bitmap object  Adding implementation os bitmap_or function to the bitmap object. It is stolen from the kernel lib/bitmap.o object.  It is used in upcomming patches.  Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1327674868-10486-5-git-send-email-jolsa@redhat.com Signed-off-by: Jiri Olsa <jolsa@redhat.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
d | scripting-engines |  | 2 items |  | Frederic Weisbecker | fweisbec@gmail.com | 1337700749 |  | perf script: Rename struct event to struct event_format in perl engine  While migrating to the libtraceevent, the perl scripting engine missed this structure rename.  This fixes:       util/scripting-engines/trace-event-perl.c: In function "find_cache_event":      util/scripting-engines/trace-event-perl.c:244: error: assignment from incompatible pointer type      util/scripting-engines/trace-event-perl.c:248: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:248: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:250: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c: In function "perl_process_tracepoint":      util/scripting-engines/trace-event-perl.c:286: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:286: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:307: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c: In function "perl_generate_script":      util/scripting-engines/trace-event-perl.c:498: error: passing argument 1 of "trace_find_next_event" from incompatible pointer type      util/scripting-engines/../trace-event.h:56: note: expected "struct event_format *" but argument is of type "struct event *"      util/scripting-engines/trace-event-perl.c:498: error: assignment from incompatible pointer type      util/scripting-engines/trace-event-perl.c:499: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:499: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:513: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:532: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:556: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:569: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:570: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:579: error: dereferencing pointer to incomplete type      util/scripting-engines/trace-event-perl.c:580: error: dereferencing pointer to incomplete type  Reported-by: Arnaldo Carvalho de Melo <acme@redhat.com> Signed-off-by: Frederic Weisbecker <fweisbec@redhat.com> Cc: Frederic Weisbecker <fweisbec@redhat.com> Cc: Ingo Molnar <mingo@kernel.org> Cc: Namhyung Kim <namhyung.kim@lge.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Tom Zanussi <tzanussi@gmail.com> Link: http://lkml.kernel.org/r/1337697049-30251-2-git-send-email-fweisbec@gmail.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | trace-event-info.c | s | 10K | 442 | Steven Rostedt | srostedt@redhat.com | 1335353328 |  | perf: Have perf use the new libtraceevent.a library  The event parsing code in perf was originally copied from trace-cmd but never was kept up-to-date with the changes that was done there. The trace-cmd libtraceevent.a code is much more mature than what is currently in perf.  This updates the code to use wrappers to handle the calls to the new event parsing code. The new code requires a handle to be pass around, which removes the global event variables and allows more than one event structure to be read from different files (and different machines).  But perf still has the old global events and the code throughout perf does not yet have a nice way to pass around a handle. A global 'pevent' has been made for perf and the old calls have been created as wrappers to the new event parsing code that uses the global pevent.  With this change, perf can later incorporate the pevent handle into the perf structures and allow more than one file to be read and compared, that contains different events.  Signed-off-by: Steven Rostedt <rostedt@goodmis.org> Cc: Ingo Molnar <mingo@kernel.org> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Arnaldo Carvalho de Melo <acme@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Borislav Petkov <bp@alien8.de> Cc: Jiri Olsa <jolsa@redhat.com> Cc: Arun Sharma <asharma@fb.com> Cc: Namhyung Kim <namhyung.kim@lge.com> Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
f | sort.c | s | 13K | 430 | Linus Torvalds | torvalds@linux-foundation.org | 1332264555 |  | Merge branch 'perf-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull perf events changes for v3.4 from Ingo Molnar:   - New "hardware based branch profiling" feature both on the kernel and    the tooling side, on CPUs that support it.  (modern x86 Intel CPUs    with the 'LBR' hardware feature currently.)     This new feature is basically a sophisticated 'magnifying glass' for    branch execution - something that is pretty difficult to extract from    regular, function histogram centric profiles.     The simplest mode is activated via 'perf record -b', and the result    looks like this in perf report:  	$ perf record -b any_call,u -e cycles:u branchy  	$ perf report -b --sort=symbol 	    52.34%  [.] main                   [.] f1 	    24.04%  [.] f1                     [.] f3 	    23.60%  [.] f1                     [.] f2 	     0.01%  [k] _IO_new_file_xsputn    [k] _IO_file_overflow 	     0.01%  [k] _IO_vfprintf_internal  [k] _IO_new_file_xsputn 	     0.01%  [k] _IO_vfprintf_internal  [k] strchrnul 	     0.01%  [k] __printf               [k] _IO_vfprintf_internal 	     0.01%  [k] main                   [k] __printf     This output shows from/to branch columns and shows the highest    percentage (from,to) jump combinations - i.e.  the most likely taken    branches in the system.  "branches" can also include function calls    and any other synchronous and asynchronous transitions of the    instruction pointer that are not 'next instruction' - such as system    calls, traps, interrupts, etc.     This feature comes with (hopefully intuitive) flat ascii and TUI    support in perf report.   - Various 'perf annotate' visual improvements for us assembly junkies.    It will now recognize function calls in the TUI and by hitting enter    you can follow the call (recursively) and back, amongst other    improvements.   - Multiple threads/processes recording support in perf record, perf    stat, perf top - which is activated via a comma-list of PIDs:  	perf top -p 21483,21485 	perf stat -p 21483,21485 -ddd 	perf record -p 21483,21485   - Support for per UID views, via the --uid paramter to perf top, perf    report, etc.  For example 'perf top --uid mingo' will only show the    tasks that I am running, excluding other users, root, etc.   - Jump label restructurings and improvements - this includes the    factoring out of the (hopefully much clearer) include/linux/static_key.h    generic facility:  	struct static_key key = STATIC_KEY_INIT_FALSE;  	...  	if (static_key_false(&key)) 	        do unlikely code 	else 	        do likely code  	... 	static_key_slow_inc(); 	... 	static_key_slow_inc(); 	...     The static_key_false() branch will be generated into the code with as    little impact to the likely code path as possible.  the    static_key_slow_*() APIs flip the branch via live kernel code patching.     This facility can now be used more widely within the kernel to    micro-optimize hot branches whose likelihood matches the static-key    usage and fast/slow cost patterns.   - SW function tracer improvements: perf support and filtering support.   - Various hardenings of the perf.data ABI, to make older perf.data's    smoother on newer tool versions, to make new features integrate more    smoothly, to support cross-endian recording/analyzing workflows    better, etc.   - Restructuring of the kprobes code, the splitting out of 'optprobes',    and a corner case bugfix.   - Allow the tracing of kernel console output (printk).   - Improvements/fixes to user-space RDPMC support, allowing user-space    self-profiling code to extract PMU counts without performing any    system calls, while playing nice with the kernel side.   - 'perf bench' improvements   - ... and lots of internal restructurings, cleanups and fixes that made    these features possible.  And, as usual this list is incomplete as    there were also lots of other improvements  * 'perf-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (120 commits)   perf report: Fix annotate double quit issue in branch view mode   perf report: Remove duplicate annotate choice in branch view mode   perf/x86: Prettify pmu config literals   perf report: Enable TUI in branch view mode   perf report: Auto-detect branch stack sampling mode   perf record: Add HEADER_BRANCH_STACK tag   perf record: Provide default branch stack sampling mode option   perf tools: Make perf able to read files from older ABIs   perf tools: Fix ABI compatibility bug in print_event_desc()   perf tools: Enable reading of perf.data files from different ABI rev   perf: Add ABI reference sizes   perf report: Add support for taken branch sampling   perf record: Add support for sampling taken branch   perf tools: Add code to support PERF_SAMPLE_BRANCH_STACK   x86/kprobes: Split out optprobe related code to kprobes-opt.c   x86/kprobes: Fix a bug which can modify kernel code permanently   x86/kprobes: Fix instruction recovery on optimized path   perf: Add callback to flush branch_stack on context switch   perf: Disable PERF_SAMPLE_BRANCH_* when not supported   perf/x86: Add LBR software filter support for Intel CPUs   ...
f | session.h | s | 4.7K | 133 | David Ahern | dsahern@gmail.com | 1339424401 |  | perf tools: Fix endianity swapping for adds_features bitmask  Based on Jiri's latest attempt: https://lkml.org/lkml/2012/5/16/61  Basically, adds_features should be byte swapped assuming unsigned longs are either 8-bytes (u64) or 4-bytes (u32).      Fixes 32-bit ppc dumping 64-bit x86 feature data:      ========      captured on: Sun May 20 19:23:23 2012      hostname : nxos-vdc-dev3      os release : 3.4.0-rc7+      perf version : 3.4.rc4.137.g978da3      arch : x86_64      nrcpus online : 16      nrcpus avail : 16      cpudesc : Intel(R) Xeon(R) CPU E5540 @ 2.53GHz      cpuid : GenuineIntel,6,26,5      total memory : 24680324 kB     ...  Verified 64-bit x86 can still dump feature data for 32-bit ppc.  Signed-off-by: David Ahern <dsahern@gmail.com> Reviewed-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/4FBBB539.5010805@gmail.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | parse-events.l | s | 4.6K | 127 | Jiri Olsa | jolsa@redhat.com | 1337698074 |  | perf tools: Add hardcoded name term for pmu events  Adding a new hardcoded term 'name' allowing to specify a name for the pmu event. The term is defined along with standard pmu terms. If no 'name' term is given, the event name follows following template:      "raw 0x<perf_event_attr::config>"  running:     perf stat -e cpu/config=1,name=krava1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 krava1     ...  running:     perf stat -e cpu/config=1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 raw 0x1     ...  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1337584373-2741-6-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | tool.h | s | 1.2K | 41 | Arnaldo Carvalho de Melo | acme@redhat.com | 1322510260 |  | perf tools: Save some loops using perf_evlist__id2evsel  Since we already ask for PERF_SAMPLE_ID and use it to quickly find the associated evsel, add handler func + data to struct perf_evsel to avoid using chains of if(strcmp(event_name)) and also to avoid all the linear list searches via trace_event_find.  To demonstrate the technique convert 'perf sched' to it:   # perf sched record sleep 5m  And then:   Performance counter stats for '/tmp/oldperf sched lat':          646.929438 task-clock                #    0.999 CPUs utilized                  9 context-switches          #    0.000 M/sec                  0 CPU-migrations            #    0.000 M/sec             20,901 page-faults               #    0.032 M/sec      1,290,144,450 cycles                    #    1.994 GHz    <not supported> stalled-cycles-frontend    <not supported> stalled-cycles-backend      1,606,158,439 instructions              #    1.24  insns per cycle        339,088,395 branches                  #  524.151 M/sec          4,550,735 branch-misses             #    1.34% of all branches         0.647524759 seconds time elapsed  Versus:   Performance counter stats for 'perf sched lat':          473.564691 task-clock                #    0.999 CPUs utilized                  9 context-switches          #    0.000 M/sec                  0 CPU-migrations            #    0.000 M/sec             20,903 page-faults               #    0.044 M/sec        944,367,984 cycles                    #    1.994 GHz    <not supported> stalled-cycles-frontend    <not supported> stalled-cycles-backend      1,442,385,571 instructions              #    1.53  insns per cycle        308,383,106 branches                  #  651.195 M/sec          4,481,784 branch-misses             #    1.45% of all branches         0.474215751 seconds time elapsed  [root@emilia ~]#  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-1kbzpl74lwi6lavpqke2u2p3@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | strlist.h | s | 2.2K | 65 | Masami Hiramatsu | mhiramat@redhat.com | 1260904922 |  | perf tools: Add for_each macros for strlist  Add for_each iteration macros for strlist. This patch introduces strlist__for_each() and strlist__for_each_safe(), both are similar to list_for_each() and list_for_each_safe().  Signed-off-by: Masami Hiramatsu <mhiramat@redhat.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Arnaldo Carvalho de Melo <acme@redhat.com> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Jim Keniston <jkenisto@us.ibm.com> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: Christoph Hellwig <hch@infradead.org> Cc: Frank Ch. Eigler <fche@redhat.com> Cc: Jason Baron <jbaron@redhat.com> Cc: K.Prasad <prasad@linux.vnet.ibm.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Cc: systemtap <systemtap@sources.redhat.com> Cc: DLE <dle-develop@lists.sourceforge.net> Cc: Frederic Weisbecker <fweisbec@gmail.com> LKML-Reference: <20091215153156.17436.49157.stgit@dhcp-100-2-132.bos.redhat.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | environment.c | s | 256B | 8 | Ingo Molnar | mingo@elte.hu | 1244313223 |  | perf_counter tools: Move from Documentation/perf_counter/ to tools/perf/  Several people have suggested that 'perf' has become a full-fledged tool that should be moved out of Documentation/. Move it to the (new) tools/ directory.  Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Arnaldo Carvalho de Melo <acme@redhat.com> LKML-Reference: <new-submission> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | target.h | s | 1.7K | 51 | Namhyung Kim | namhyung.kim@lge.com | 1337268774 |  | perf target: Add uses_mmap field  If perf doesn't mmap on event (like perf stat), it should not create per-task-per-cpu events. So just use a dummy cpu map to create a per-task event for this case.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1337161549-9870-3-git-send-email-namhyung.kim@lge.com [ committer note: renamed .need_mmap to .uses_mmap ] Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | run-command.h | s | 1.8K | 53 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | pager.c | s | 1.9K | 82 | Avik Sil | avik.sil@linaro.org | 1338401439 |  | perf tools: Fix pager on minimal-install embedded systems  Some Distributions may lack "less" package being included by default, e.g., Linaro nano rootfs. In those cases use the portable "pager" command instead of "less".  Signed-off-by: Avik Sil <avik.sil@linaro.org> Acked-by: Ingo Molnar <mingo@kernel.org> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1338287725-26382-1-git-send-email-avik.sil@linaro.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | strlist.c | s | 3.6K | 161 | Masami Hiramatsu | mhiramat@redhat.com | 1260904921 |  | perf probe: Fix --del to update current event list  Fix --del option to update current existing event list after perf probe deleted an event.  Signed-off-by: Masami Hiramatsu <mhiramat@redhat.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Arnaldo Carvalho de Melo <acme@redhat.com> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Jim Keniston <jkenisto@us.ibm.com> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: Christoph Hellwig <hch@infradead.org> Cc: Frank Ch. Eigler <fche@redhat.com> Cc: Jason Baron <jbaron@redhat.com> Cc: K.Prasad <prasad@linux.vnet.ibm.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Cc: systemtap <systemtap@sources.redhat.com> Cc: DLE <dle-develop@lists.sourceforge.net> Cc: Frederic Weisbecker <fweisbec@gmail.com> LKML-Reference: <20091215153149.17436.61265.stgit@dhcp-100-2-132.bos.redhat.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | probe-event.h | s | 4.3K | 117 | Srikar Dronamraju | srikar@linux.vnet.ibm.com | 1336755497 |  | perf probe: Provide perf interface for uprobes  - Enhances perf to probe user space executables and libraries. - Enhances -F/--funcs option of "perf probe" to list possible probe points in   an executable file or library. - Documents userspace probing support in perf.  [ Probing a function in the executable using function name  ] perf probe -x /bin/zsh zfree  [ Probing a library function using function name ] perf probe -x /lib64/libc.so.6 malloc  [ list probe-able functions in an executable ] perf probe -F -x /bin/zsh  [ list probe-able functions in an library] perf probe -F -x /lib/libc.so.6  Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: Andi Kleen <andi@firstfloor.org> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Anton Arapov <anton@redhat.com> Cc: Christoph Hellwig <hch@infradead.org> Cc: Ingo Molnar <mingo@elte.hu> Cc: Jim Keniston <jkenisto@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Linux-mm <linux-mm@kvack.org> Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Thomas Gleixner <tglx@linutronix.de> Link: http://lkml.kernel.org/r/20120416120909.30661.99781.sendpatchset@srdronam.in.ibm.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | cgroup.c | s | 3.1K | 150 | Arnaldo Carvalho de Melo | acme@redhat.com | 1322482264 |  | perf tools: Eliminate duplicate code and use PATH_MAX consistently  No need for multiple definitions for STR() and die(), also use SuSv2's PATH_MAX instead of adding MAX_PATH.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-qpujjkw7u0bf0tr4wt55cr9y@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | sysfs.h | s | 110B | 4 | Jiri Olsa | jolsa@redhat.com | 1329182835 |  | perf tools: Add sysfs mountpoint interface  Adding sysfs object to provide sysfs mount information in the same way as debugfs object does.  The object provides following function:   sysfs_find_mountpoint  which returns the sysfs mount mount.  Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1327674868-10486-4-git-send-email-jolsa@redhat.com Signed-off-by: Jiri Olsa <jolsa@redhat.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | hweight.c | s | 896B | 28 | Arnaldo Carvalho de Melo | acme@redhat.com | 1272812444 |  | perf tools: Don't use code surrounded by __KERNEL__  We need to refactor code to be explicitely shared by the kernel and at least the tools/ userspace programs, so, till we do that, copy the bare minimum bitmap/bitops code needed by tools/perf.  Reported-by: "H. Peter Anvin" <hpa@zytor.com> Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | trace-event-read.c | s | 10.0K | 434 | Steven Rostedt | srostedt@redhat.com | 1335353748 |  | parse-events: Rename struct record to struct pevent_record  As libtraceevent will be a library, having struct record is far too generic of a name to use. Renaming it to be consistent with the rest of the functions will be a better long term solution.  Signed-off-by: Steven Rostedt <rostedt@goodmis.org> Cc: Ingo Molnar <mingo@kernel.org> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Arnaldo Carvalho de Melo <acme@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Borislav Petkov <bp@alien8.de> Cc: Jiri Olsa <jolsa@redhat.com> Cc: Arun Sharma <asharma@fb.com> Cc: Namhyung Kim <namhyung.kim@lge.com> Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
f | setup.py | s | 1.3K | 34 | Namhyung Kim | namhyung@gmail.com | 1329163285 |  | perf tools: Fix build dependency of perf python extension  The perf python extention (perf.so) file lacks its dependencies in the Makefile so that it cannot be refreshed if one of source files it depends is changed. Fix it by putting them in a separate file and processing it in both of Makefile and setup.py.  Reported-by: Arnaldo Carvalho de Melo <acme@redhat.com> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Thomas Gleixner <tglx@linutronix.de> Link: http://lkml.kernel.org/r/1329043524-12470-1-git-send-email-namhyung@gmail.com Signed-off-by: Namhyung Kim <namhyung@gmail.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | svghelper.c | s | 14K | 399 | Thomas Renninger | trenn@suse.de | 1298879774 |  | perf timechart: Fix black idle boxes in the title  This fix is needed for eye of gnome and firefox svg viewers. Only Inkscape can handle the broken case.  Compare with the other svg_legenda_box declarations, looks like a typo slipped in at this place.  Signed-off-by: Thomas Renninger <trenn@suse.de> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Cc: lenb@kernel.org LKML-Reference: <1298842606-55712-5-git-send-email-trenn@suse.de> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | cgroup.h | s | 341B | 12 | Stephane Eranian | eranian@google.com | 1297859448 |  | perf tool: Add cgroup support  This patch adds the ability to filter monitoring based on container groups (cgroups) for both perf stat and perf record. It is possible to monitor multiple cgroup in parallel. There is one cgroup per event. The cgroups to monitor are passed via a new -G option followed by a comma separated list of cgroup names.  The cgroup filesystem has to be mounted. Given a cgroup name, the perf tool finds the corresponding directory in the cgroup filesystem and opens it. It then passes that file descriptor to the kernel.  Example:  $ perf stat -B -a -e cycles:u,cycles:u,cycles:u -G test1,,test2 -- sleep 1  Performance counter stats for 'sleep 1':        2,368,667,414  cycles                   test1       2,369,661,459  cycles       <not counted>  cycles                   test2          1.001856890  seconds time elapsed  Signed-off-by: Stephane Eranian <eranian@google.com> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> LKML-Reference: <4d590290.825bdf0a.7d0a.4890@mx.google.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | probe-event.c | s | 50K | 2040 | Srikar Dronamraju | srikar@linux.vnet.ibm.com | 1338476929 |  | perf uprobes: Remove unnecessary check before strlist__delete  Since strlist__delete() itself checks, the additional check before calling strlist__delete() is redundant.  No Functional change.  Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Suggested-by: Arnaldo Carvalho de Melo <acme@infradead.org> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: Anton Arapov <anton@redhat.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Link: http://lkml.kernel.org/r/20120531114643.23691.38666.sendpatchset@srdronam.in.ibm.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | hist.h | s | 4.9K | 143 | Namhyung Kim | namhyung.kim@lge.com | 1338472032 |  | perf callchain: Make callchain cursors TLS  perf top -G has a race on callchain cursor between main thread and display thread. Since the callchain cursors are used locally make them thread-local data would solve the problem.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Reported-by: Sunjin Yang <fan4326@gmail.com> Suggested-by: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Sunjin Yang <fan4326@gmail.com> Link: http://lkml.kernel.org/r/1338443007-24857-1-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | build-id.h | s | 207B | 6 | Arnaldo Carvalho de Melo | acme@redhat.com | 1322483968 |  | perf tools: Rename perf_event_ops to perf_tool  To better reflect that it became the base class for all tools, that must be in each tool struct and where common stuff will be put.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-qgpc4msetqlwr8y2k7537cxe@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | abspath.c | s | 883B | 34 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | session.c | s | 41K | 1357 | David Ahern | dsahern@gmail.com | 1339424401 |  | perf tools: Fix endianity swapping for adds_features bitmask  Based on Jiri's latest attempt: https://lkml.org/lkml/2012/5/16/61  Basically, adds_features should be byte swapped assuming unsigned longs are either 8-bytes (u64) or 4-bytes (u32).      Fixes 32-bit ppc dumping 64-bit x86 feature data:      ========      captured on: Sun May 20 19:23:23 2012      hostname : nxos-vdc-dev3      os release : 3.4.0-rc7+      perf version : 3.4.rc4.137.g978da3      arch : x86_64      nrcpus online : 16      nrcpus avail : 16      cpudesc : Intel(R) Xeon(R) CPU E5540 @ 2.53GHz      cpuid : GenuineIntel,6,26,5      total memory : 24680324 kB     ...  Verified 64-bit x86 can still dump feature data for 32-bit ppc.  Signed-off-by: David Ahern <dsahern@gmail.com> Reviewed-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/4FBBB539.5010805@gmail.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | parse-events-test.c | s | 19K | 524 | Jiri Olsa | jolsa@redhat.com | 1337698074 |  | perf tools: Add hardcoded name term for pmu events  Adding a new hardcoded term 'name' allowing to specify a name for the pmu event. The term is defined along with standard pmu terms. If no 'name' term is given, the event name follows following template:      "raw 0x<perf_event_attr::config>"  running:     perf stat -e cpu/config=1,name=krava1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 krava1     ...  running:     perf stat -e cpu/config=1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 raw 0x1     ...  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1337584373-2741-6-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | thread_map.c | s | 5.8K | 236 | Franck Bui-Huu | fbuihuu@gmail.com | 1337956859 |  | perf tools: fix thread_map__new_by_pid_str() memory leak in error path  The namelist array (including its content) was not freed if we fail to realloc a new 'threads' structure.  Signed-off-by: Franck Bui-Huu <fbuihuu@gmail.com> Cc: David Ahern <dsahern@gmail.com> Link: http://lkml.kernel.org/r/1337952109-31995-1-git-send-email-fbuihuu@gmail.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | pstack.c | s | 1.4K | 64 | Arnaldo Carvalho de Melo | acme@redhat.com | 1273878321 |  | perf newt: Make <- zoom out filters  After we use the filters to zoom into DSOs or threads, we can use <- (left arrow) to zoom out from the last filter applied.  It is still possible to zoom out of order by using the popup menu.  With this we now have the zoom out operation on the browsing fast path, by allowing fast navigation using just the four arrors and the enter key to expand collapse callchains.  Suggested-by: Ingo Molnar <mingo@elte.hu> Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | evsel.c | s | 16K | 635 | Jiri Olsa | jolsa@redhat.com | 1338476341 |  | perf evsel: Fix 32 bit values endianity swap for sample_id_all header  We swap the sample_id_all header by u64 pointers. Some members of the header happen to be 32 bit values. We need to handle them separatelly.  Together with other endianity patches, this change fixies perf report discrepancies on origin and target systems as described in test 1 below, e.g. following perf report diff:  ...       0.12%               ps  [kernel.kallsyms]    [k] clear_page -     0.12%              awk  bash                 [.] alloc_word_desc +     0.12%              awk  bash                 [.] yyparse       0.11%   beah-rhts-task  libpython2.6.so.1.0  [.] 0x5560e       0.10%             perf  libc-2.12.so         [.] __ctype_toupper_loc -     0.09%  rhts-test-runne  bash                 [.] maybe_make_export_env +     0.09%  rhts-test-runne  bash                 [.] 0x385a0       0.09%               ps  [kernel.kallsyms]    [k] page_fault ...  Note, running following to test perf endianity handling: test 1)   - origin system:     # perf record -a -- sleep 10 (any perf record will do)     # perf report > report.origin     # perf archive perf.data    - copy the perf.data, report.origin and perf.data.tar.bz2     to a target system and run:     # tar xjvf perf.data.tar.bz2 -C ~/.debug     # perf report > report.target     # diff -u report.origin report.target    - the diff should produce no output     (besides some white space stuff and possibly different      date/TZ output)  test 2)   - origin system:     # perf record -ag -fo /tmp/perf.data -- sleep 1   - mount origin system root to the target system on /mnt/origin   - target system:     # perf script --symfs /mnt/origin -I -i /mnt/origin/tmp/perf.data \      --kallsyms /mnt/origin/proc/kallsyms   - complete perf.data header is displayed  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Reviewed-by: David Ahern <dsahern@gmail.com> Tested-by: David Ahern <dsahern@gmail.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1338380624-7443-4-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | PERF-VERSION-GEN | s | 797B | 34 | Arnaldo Carvalho de Melo | acme@redhat.com | 1338474059 |  | perf tools: Make --version show kernel version instead of pull req tag  Before:    $ perf --version   perf version perf.urgent.for.mingo.5.g37da28  After:    $ perf --version   perf version 3.4.8941.g37da28.dirty  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Jiri Olsa <jolsa@redhat.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-vc9b4e6023iegz9kabr3yvyv@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | callchain.h | s | 3.3K | 122 | Namhyung Kim | namhyung.kim@lge.com | 1338472032 |  | perf callchain: Make callchain cursors TLS  perf top -G has a race on callchain cursor between main thread and display thread. Since the callchain cursors are used locally make them thread-local data would solve the problem.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Reported-by: Sunjin Yang <fan4326@gmail.com> Suggested-by: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Sunjin Yang <fan4326@gmail.com> Link: http://lkml.kernel.org/r/1338443007-24857-1-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | pstack.h | s | 402B | 11 | Arnaldo Carvalho de Melo | acme@redhat.com | 1281467468 |  | perf ui: Move hists browser to util/ui/browsers/  LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | trace-event.h | s | 2.7K | 74 | Steven Rostedt | srostedt@redhat.com | 1335353748 |  | parse-events: Rename struct record to struct pevent_record  As libtraceevent will be a library, having struct record is far too generic of a name to use. Renaming it to be consistent with the rest of the functions will be a better long term solution.  Signed-off-by: Steven Rostedt <rostedt@goodmis.org> Cc: Ingo Molnar <mingo@kernel.org> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Arnaldo Carvalho de Melo <acme@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Borislav Petkov <bp@alien8.de> Cc: Jiri Olsa <jolsa@redhat.com> Cc: Arun Sharma <asharma@fb.com> Cc: Namhyung Kim <namhyung.kim@lge.com> Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
f | usage.c | s | 1.7K | 70 | Namhyung Kim | namhyung.kim@lge.com | 1336420008 |  | perf target: Introduce perf_target__parse_uid()  Add and use the modern perf_target__parse_uid() and get rid of the old parse_target_uid().  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Reviewed-by: David Ahern <dsahern@gmail.com> Cc: David Ahern <dsahern@gmail.com> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1336367344-28071-5-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | strbuf.c | s | 2.9K | 118 | Arnaldo Carvalho de Melo | acme@redhat.com | 1331739379 |  | perf tools: Use scnprintf where applicable  Several places were expecting that the value returned was the number of characters printed, not what would be printed if there was space.  Fix it by using the scnprintf and vscnprintf variants we inherited from the kernel sources.  Some corner cases where the number of printed characters were not accounted were fixed too.  Reported-by: Anton Blanchard <anton@samba.org> Cc: Anton Blanchard <anton@samba.org> Cc: Eric B Munson <emunson@mgebm.net> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Cc: Yanmin Zhang <yanmin_zhang@linux.intel.com> Cc: stable@kernel.org Link: http://lkml.kernel.org/n/tip-kwxo2eh29cxmd8ilixi2005x@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | parse-options.h | s | 7.4K | 169 | Akihiro Nagai | akihiro.nagai.hw@hitachi.com | 1291656809 |  | perf options: add OPT_CALLBACK_DEFAULT_NOOPT  Add new macro OPT_CALLBACK_DEFAULT_NOOPT for parse_options.  It enables to pass the default value (opt->defval) to the callback function processing options require no argument.  Reviewed-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> LKML-Reference: <20101203035853.7827.17502.stgit@localhost6.localdomain6> Signed-off-by: Akihiro Nagai <akihiro.nagai.hw@hitachi.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | evlist.c | s | 20K | 713 | Namhyung Kim | namhyung.kim@lge.com | 1338475156 |  | perf evlist: Pass third argument to ioctl explicitly  The ioctl on perf event fd wants 3 arguments but we only passed 2. As the only user of the functions is perf record and it calls them for every event (regardless of group setting), just pass 0 for now.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1338443506-25009-3-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | evlist.h | s | 4.1K | 102 | Arnaldo Carvalho de Melo | acme@redhat.com | 1338397358 |  | perf stat: Initialize default events wrt exclude_{guest,host}  When no event is specified the tools use perf_evlist__add_default(), that will call event_attr_init to initialize the KVM exclusion bits.  When the change was made to the tools so that by default guest samples would be excluded, the changes were made just to the parsing routines and to perf_evlist__add_default(), not to perf_evlist__add_attrs, that is used so far just by perf stat to add multiple events, according to the level of detail specified.  Recently the tools were changed to reconstruct the event name from all the details in perf_event_attr, not just from .type and .config, but taking into account all the feature bits (.exclude_{guest,host,user,kernel,etc}, .precise_ip, etc).  That is when we noticed that the default for perf stat wasn't the one for the rest of the tools, i.e. the .exclude_guest bit wasn't being set.  I.e. the default, that doesn't call event_attr_init was showing the :HG modifier:    $ perf stat usleep 1     Performance counter stats for 'usleep 1':              0.942119 task-clock                #    0.454 CPUs utilized                    1 context-switches          #    0.001 M/sec                    0 CPU-migrations            #    0.000 K/sec                  126 page-faults               #    0.134 M/sec              693,193 cycles:HG                 #    0.736 GHz                     [40.11%]              407,461 stalled-cycles-frontend:HG #   58.78% frontend cycles idle    [72.29%]              365,403 stalled-cycles-backend:HG #   52.71% backend  cycles idle              465,982 instructions:HG           #    0.67  insns per cycle                                                #    0.87  stalled cycles per insn               89,760 branches:HG               #   95.275 M/sec                6,178 branch-misses:HG          #    6.88% of all branches           0.002077228 seconds time elapsed  While if one explicitely specifies the same events, which will make the parsing code to be called and thus event_attr_init is called:    $ perf stat -e task-clock,context-switches,migrations,page-faults,cycles,stalled-cycles-frontend,stalled-cycles-backend,instructions,branches,branch-misses usleep 1     Performance counter stats for 'usleep 1':              1.040349 task-clock                #    0.500 CPUs utilized                    2 context-switches          #    0.002 M/sec                    0 CPU-migrations            #    0.000 K/sec                  127 page-faults               #    0.122 M/sec              587,966 cycles                    #    0.565 GHz                     [13.18%]              459,167 stalled-cycles-frontend   #   78.09% frontend cycles idle              390,249 stalled-cycles-backend    #   66.37% backend  cycles idle              504,006 instructions              #    0.86  insns per cycle                                                #    0.91  stalled cycles per insn               96,455 branches                  #   92.714 M/sec                6,522 branch-misses             #    6.76% of all branches         [96.12%]           0.002078681 seconds time elapsed  Fix it by introducing a perf_evlist__add_default_attrs method that will call evlist_attr_init in all the perf_event_attr entries before adding the events.  Reported-by: Ingo Molnar <mingo@kernel.org> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Jiri Olsa <jolsa@redhat.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-4eysr236r0pgiyum9epwxw7s@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | parse-events.y | s | 4.9K | 230 | Jiri Olsa | jolsa@redhat.com | 1337698074 |  | perf tools: Add hardcoded name term for pmu events  Adding a new hardcoded term 'name' allowing to specify a name for the pmu event. The term is defined along with standard pmu terms. If no 'name' term is given, the event name follows following template:      "raw 0x<perf_event_attr::config>"  running:     perf stat -e cpu/config=1,name=krava1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 krava1     ...  running:     perf stat -e cpu/config=1/u ls  will produce following output:     ...     Performance counter stats for 'ls':                  0 raw 0x1     ...  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1337584373-2741-6-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | debugfs.c | s | 2.5K | 91 | Jiri Olsa | jolsa@redhat.com | 1329182738 |  | perf tools: Remove unused functions from debugfs object  Following debugfs object functions are not referenced within the code:    int debugfs_valid_entry(const char *path);   int debugfs_umount(void);   int debugfs_write(const char *entry, const char *value);   int debugfs_read(const char *entry, char *buffer, size_t size);   void debugfs_force_cleanup(void);   int debugfs_make_path(const char *element, char *buffer, int size);  Removing them.  Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1327674868-10486-3-git-send-email-jolsa@redhat.com Signed-off-by: Jiri Olsa <jolsa@redhat.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | symbol.c | s | 63K | 2343 | Srikar Dronamraju | srikar@linux.vnet.ibm.com | 1338476902 |  | perf symbols: Check for valid dso before creating map  dso__new() can return NULL. Hence verify dso before creating a new map.  Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Suggested-by: Arnaldo Carvalho de Melo <acme@infradead.org> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: Anton Arapov <anton@redhat.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Link: http://lkml.kernel.org/r/20120531114656.23691.54223.sendpatchset@srdronam.in.ibm.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | thread.h | s | 1.1K | 36 | Arnaldo Carvalho de Melo | acme@redhat.com | 1322483952 |  | perf tools: Resolve machine earlier and pass it to perf_event_ops  Reducing the exposure of perf_session further, so that we can use the classes in cases where no perf.data file is created.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-stua66dcscsezzrcdugvbmvd@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | run-command.c | s | 4.0K | 191 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | sysfs.c | s | 1.1K | 46 | Jiri Olsa | jolsa@redhat.com | 1329182835 |  | perf tools: Add sysfs mountpoint interface  Adding sysfs object to provide sysfs mount information in the same way as debugfs object does.  The object provides following function:   sysfs_find_mountpoint  which returns the sysfs mount mount.  Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1327674868-10486-4-git-send-email-jolsa@redhat.com Signed-off-by: Jiri Olsa <jolsa@redhat.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | wrapper.c | s | 790B | 37 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234728 |  | perf tools: remove xstrndup, xmalloc, xzalloc  All the functions that call this can handle the equivalent, non panic'ing wrapped routines.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | exec_cmd.h | s | 445B | 10 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | strbuf.h | s | 3.0K | 78 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | xyarray.c | s | 364B | 16 | Arnaldo Carvalho de Melo | acme@redhat.com | 1294079944 |  | perf tools: Introduce event selectors  Out of ad-hoc code and global arrays with hard coded sizes.  This is the first step on having a library that will be first used on regression tests in the 'perf test' tool.  [acme@felicio linux]$ size /tmp/perf.before    text	   data	    bss	    dec	    hex	filename 1273776	  97384	5104416	6475576	 62cf38	/tmp/perf.before [acme@felicio linux]$ size /tmp/perf.new    text	   data	    bss	    dec	    hex	filename 1275422	  97416	1392416	2765254	 2a31c6	/tmp/perf.new  Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | util.h | s | 6.1K | 222 | Ingo Molnar | mingo@kernel.org | 1336716835 |  | 
f | top.h | s | 1.3K | 47 | Namhyung Kim | namhyung.kim@lge.com | 1335982830 |  | perf top: Convert to struct perf_target  Use struct perf_target as it is introduced by previous patch.  This is a preparation of further changes.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Reviewed-by: David Ahern <dsahern@gmail.com> Cc: David Ahern <dsahern@gmail.com> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1335417327-11796-4-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | sort.h | s | 2.7K | 106 | Stephane Eranian | eranian@google.com | 1331277968 |  | perf report: Enable TUI in branch view mode  This patch updates perf report to support TUI mode when the perf.data file contains samples with branch stacks.  For each row in the report, it is possible to annotate either the source or target of each branch.  Signed-off-by: Stephane Eranian <eranian@google.com> Cc: peterz@infradead.org Cc: acme@redhat.com Cc: asharma@fb.com Cc: ravitillo@lbl.gov Cc: vweaver1@eecs.utk.edu Cc: khandual@linux.vnet.ibm.com Cc: dsahern@gmail.com Link: http://lkml.kernel.org/r/1331246868-19905-5-git-send-email-eranian@google.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | event.h | s | 5.0K | 180 | Roberto Agostino Vitillo | ravitillo@lbl.gov | 1331277964 |  | perf tools: Add code to support PERF_SAMPLE_BRANCH_STACK  This patch adds:   - ability to parse samples with PERF_SAMPLE_BRANCH_STACK  - sort on branches (dso_from, symbol_from, dso_to, symbol_to, mispredict)  - build histograms on branches  Signed-off-by: Roberto Agostino Vitillo <ravitillo@lbl.gov> Signed-off-by: Stephane Eranian <eranian@google.com> Cc: peterz@infradead.org Cc: acme@redhat.com Cc: robert.richter@amd.com Cc: ming.m.lin@intel.com Cc: andi@firstfloor.org Cc: asharma@fb.com Cc: vweaver1@eecs.utk.edu Cc: khandual@linux.vnet.ibm.com Cc: dsahern@gmail.com Link: http://lkml.kernel.org/r/1328826068-11713-12-git-send-email-eranian@google.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | map.c | s | 15K | 597 | Arnaldo Carvalho de Melo | acme@redhat.com | 1333666274 |  | perf annotate: Validate addr in symbol__inc_addr_samples  This routine was checking only if the provided address was after sym->end, not if it was before sym->start.  Fix that by checking for both and return in both cases -ERANGE, so that tools can communicate this to the user properly, or if they chose so, to abort.  This problem was reported previously but the fixes involved either doing what was being done for the > end case, i.e. silently drop the sample, returning 0, or aborting at this function, which is in a lib (or better, is slated to be at some point) and shouldn't abort.  The 'report' tool already checks this value and uses pr_debug to warn the user.  This patch makes the 'top' tool check it too and warn once per map where such range problem takes place.  Reported-by: David Miller <davem@davemloft.net> Reported-by: Sorin Dumitru <dumitru.sorin87@gmail.com> Reported-by: Stephane Eranian <eranian@google.com> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/n/tip-lw8gs7p9i9nhldilo82tzpne@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | cpumap.c | s | 3.7K | 163 | Arnaldo Carvalho de Melo | acme@redhat.com | 1327441608 |  | perf tools: Add fprintf methods for thread_map and cpu_map classes  For helping with debugging.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-m06n4rp7pwr6dlzwoq89cl69@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | callchain.c | s | 10K | 380 | Namhyung Kim | namhyung.kim@lge.com | 1338472032 |  | perf callchain: Make callchain cursors TLS  perf top -G has a race on callchain cursor between main thread and display thread. Since the callchain cursors are used locally make them thread-local data would solve the problem.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Reported-by: Sunjin Yang <fan4326@gmail.com> Suggested-by: Arnaldo Carvalho de Melo <acme@ghostprotocols.net> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Sunjin Yang <fan4326@gmail.com> Link: http://lkml.kernel.org/r/1338443007-24857-1-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | sigchain.h | s | 192B | 6 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | top.c | s | 3.2K | 93 | Namhyung Kim | namhyung.kim@lge.com | 1335982830 |  | perf top: Convert to struct perf_target  Use struct perf_target as it is introduced by previous patch.  This is a preparation of further changes.  Signed-off-by: Namhyung Kim <namhyung.kim@lge.com> Reviewed-by: David Ahern <dsahern@gmail.com> Cc: David Ahern <dsahern@gmail.com> Cc: Ingo Molnar <mingo@redhat.com> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1335417327-11796-4-git-send-email-namhyung.kim@lge.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | annotate.h | s | 4.1K | 134 | Arnaldo Carvalho de Melo | acme@redhat.com | 1336839980 |  | perf annotate: Introduce ->free() method in ins_ops  So that we don't special case disasm_line__free, allowing each instruction class to provide an specialized destructor, like is needed for 'lock'.  Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Namhyung Kim <namhyung@gmail.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Stephane Eranian <eranian@google.com> Link: http://lkml.kernel.org/n/tip-xxw4vs5n077tf35jsvjzylhb@git.kernel.org Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | quote.c | s | 1.2K | 48 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | strfilter.h | s | 1.3K | 41 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1296213578 |  | perf tools: Add strfilter for general purpose string filter  Add strfilter for general purpose string filter.  Every filter rules are descrived by glob matching pattern and '!' prefix which means Logical NOT.  A strfilter consists of those filter rules connected with '&' and '||'.  A set of rules can be folded by using '(' and ')'.  It also accepts spaces around rules and those operators.  Format: <rule> ::= <glob-exp> || "!" <rule> || <rule> <op> <rule> || "(" <rule> ")" <op> ::= "&" || "||"  e.g.:   "(add* || del*) & *timer" filter rules pass strings which start with add  or del and end with timer.  This will be used by perf probe --filter.  Changes in V2:  - Fix to check result of strdup() and strfilter__alloc().  - Encapsulate and simplify interfaces as like regex(3).  Cc: 2nddept-manager@sdl.hitachi.co.jp Cc: Franck Bui-Huu <fbuihuu@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Cc: Steven Rostedt <rostedt@goodmis.org> LKML-Reference: <20110120141530.25915.12673.stgit@ltc236.sdl.hitachi.co.jp> Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | symbol.h | s | 7.7K | 266 | Jiri Olsa | jolsa@redhat.com | 1338476136 |  | perf symbols: Handle different endians properly during symbol load  Currently we dont care about the file object's endianness. It's possible we read buildid file object from different architecture than we are currentlly running on. So we need to care about properly reading such object's data - handle different endianness properly.  Adding: 	needs_swap DSO field 	dso__swap_init function to initialize DSO's needs_swap 	DSO__SWAP to read the data with proper swaps  Together with other endianity patches, this change fixies perf report discrepancies on origin and target systems as described in test 1 below, e.g. following perf report diff:  ...       0.12%               ps  [kernel.kallsyms]    [k] clear_page -     0.12%              awk  bash                 [.] alloc_word_desc +     0.12%              awk  bash                 [.] yyparse       0.11%   beah-rhts-task  libpython2.6.so.1.0  [.] 0x5560e       0.10%             perf  libc-2.12.so         [.] __ctype_toupper_loc -     0.09%  rhts-test-runne  bash                 [.] maybe_make_export_env +     0.09%  rhts-test-runne  bash                 [.] 0x385a0       0.09%               ps  [kernel.kallsyms]    [k] page_fault ...  Note, running following to test perf endianity handling: test 1)   - origin system:     # perf record -a -- sleep 10 (any perf record will do)     # perf report > report.origin     # perf archive perf.data    - copy the perf.data, report.origin and perf.data.tar.bz2     to a target system and run:     # tar xjvf perf.data.tar.bz2 -C ~/.debug     # perf report > report.target     # diff -u report.origin report.target    - the diff should produce no output     (besides some white space stuff and possibly different      date/TZ output)  test 1)   - origin system:     # perf record -ag -fo /tmp/perf.data -- sleep 1   - mount origin system root to the target system on /mnt/origin   - target system:     # perf script --symfs /mnt/origin -I -i /mnt/origin/tmp/perf.data \      --kallsyms /mnt/origin/proc/kallsyms   - complete perf.data header is displayed  Signed-off-by: Jiri Olsa <jolsa@redhat.com> Cc: Corey Ashford <cjashfor@linux.vnet.ibm.com> Cc: David Ahern <dsahern@gmail.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1338380624-7443-2-git-send-email-jolsa@redhat.com Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | dwarf-aux.h | s | 4.0K | 88 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1313152330 |  | perf probe: Search concrete out-of-line instances  gcc 4.6 generates a concrete out-of-line instance when there is a function which is implicitly inlined somewhere but also has its own instance. The concrete out-of-line instance means that it has an abstract origin of the function which is referred by not only inlined-subroutines but also a concrete subprogram.  Since current dwarf_func_inline_instances() can find only instances of inlined-subroutines, this introduces new die_walk_instances() to find both of subprogram and inlined-subroutines.  e.g. without this, Available variables at sched_group_rt_period         @<cpu_rt_period_read_uint+9>                 struct task_group*      tg  perf probe failed to find actual subprogram instance of sched_group_rt_period().  With this,  Available variables at sched_group_rt_period         @<cpu_rt_period_read_uint+9>                 struct task_group*      tg         @<sched_group_rt_period+0>                 struct task_group*      tg  Now it found the sched_group_rt_period() itself.  Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Paul Mackerras <paulus@samba.org> Cc: Pekka Enberg <penberg@kernel.org> Cc: Peter Zijlstra <peterz@infradead.org> Cc: yrl.pp-manager.tt@hitachi.com Link: http://lkml.kernel.org/r/20110811110311.19900.63997.stgit@fedora15 Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | parse-options.c | s | 13K | 520 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274124161 |  | perf options: Type check all the remaining OPT_ variants  OPT_SET_INT was renamed to OPT_SET_UINT since the only use in these tools is to set something that has an enum type, that is builtin compatible with unsigned int.  Several string constifications were done to make OPT_STRING require a const char * type.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Stephane Eranian <eranian@google.com> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
f | sigchain.c | s | 976B | 44 | Arnaldo Carvalho de Melo | acme@redhat.com | 1274234615 |  | perf tools: Remove some unused functions  Without the bloated cplus_demangle from binutils, i.e building with:  $ make NO_DEMANGLE=1 O=~acme/git/build/perf -j3 -C tools/perf/ install  Before:     text	   data	    bss	    dec	    hex	filename  471851	  29280	4025056	4526187	 45106b	/home/acme/bin/perf  After:  [acme@doppio linux-2.6-tip]$ size ~/bin/perf    text	   data	    bss	    dec	    hex	filename  446886	  29232	4008576	4484694	 446e56	/home/acme/bin/perf  So its a 5.3% size reduction in code, but the interesting part is in the git diff --stat output:   19 files changed, 20 insertions(+), 1909 deletions(-)  If we ever need some of the things we got from git but weren't using, we just have to go to the git repo and get fresh, uptodate source code bits.  Cc: Frédéric Weisbecker <fweisbec@gmail.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Paul Mackerras <paulus@samba.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Tom Zanussi <tzanussi@gmail.com> LKML-Reference: <new-submission> Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
