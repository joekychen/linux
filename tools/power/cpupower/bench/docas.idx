f | parse.c | s | 5.3K | 183 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: bench - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | Makefile | g | 1.1K |  | Franck Bui-Huu | fbuihuu@gmail.com | 1330782010 |  | cpupower tool: allow to build in a separate directory  This patch allows cpupower tool to generate its output files in a seperate directory. This is now possible by passing the 'O=<path>' to the command line.  This can be usefull for a normal user if the kernel source code is located in a read only location.  This is patch stole some bits of the perf makefile.  [linux@dominikbrodowski.net: fix commit message] Signed-off-by: Franck Bui-Huu <fbuihuu@gmail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | parse.h | s | 1.9K | 47 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: bench - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | cpufreq-bench_plot.sh | s | 3.1K | 88 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | benchmark.c | s | 5.5K | 164 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: bench - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | system.c | s | 4.2K | 153 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: bench - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | example.cfg | g | 175B |  | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | cpufreq-bench_script.sh | s | 4.0K | 86 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | benchmark.h | s | 1.2K | 26 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: bench - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | config.h | s | 1.2K | 31 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: bench - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | README-BENCH | g | 4.6K |  | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | system.h | s | 1.1K | 25 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | main.c | s | 5.3K | 182 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: bench - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
