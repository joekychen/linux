f | pci.c | s | 1.4K | 48 | Thomas Renninger | trenn@suse.de | 1330782008 |  | cpupower: Better interface for accessing AMD pci registers  AMD's BKDG (Bios and Kernel Developers Guide) talks in the CPU spec of their CPU families about PCI registers defined by "device" (slot) and func(tion).  Assuming that CPU specific configuration PCI devices are always on domain and bus zero a pci_slot_func_init() func which gets the slot and func of the desired PCI device passed looks like the most convenient way.  This also obsoletes the PCI device id maintenance.  Signed-off-by: Thomas Renninger <trenn@suse.de> CC: Andreas Herrmann <herrmann.der.user@googlemail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | msr.c | s | 2.3K | 98 | Thomas Renninger | trenn@suse.de | 1311961047 |  | cpupower: Do detect IDA (opportunistic processor performance) via cpuid  IA32-Intel Devel guide Volume 3A - 14.3.2.1 ------------------------------------------- ... Opportunistic processor performance operation can be disabled by setting bit 38 of IA32_MISC_ENABLES. This mechanism is intended for BIOS only. If IA32_MISC_ENABLES[38] is set, CPUID.06H:EAX[1] will return 0.  Better detect things via cpuid, this cleans up the code a bit and the MSR parts were not working correctly anyway.  Signed-off-by: Thomas Renninger <trenn@suse.de> CC: lenb@kernel.org CC: linux@dominikbrodowski.net CC: cpufreq@vger.kernel.org Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | topology.c | s | 3.0K | 99 | Thomas Renninger | trenn@suse.de | 1313431390 |  | cpupower: Better detect offlined CPUs  Before, checking for offlined CPUs was done dirty and it was checked whether topology parsing returned -1 values. But this is a valid case on a Xen (and possibly other) kernels.  Do proper online/offline checking, also take CONFIG_HOTPLUG_CPU option into account (no /sys/devices/../cpuX/online file).  Signed-off-by: Thomas Renninger <trenn@suse.de> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | bitmask.c | s | 7.3K | 261 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957339 |  | cpupowerutils: helpers - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | helpers.h | s | 5.8K | 154 | Thomas Renninger | trenn@suse.de | 1330782011 |  | cpupower: Fix broken mask values  Signed-off-by: Thomas Renninger <trenn@suse.de> Tested-by: Dave Jones <davej@redhat.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | misc.c | s | 635B | 22 | Thomas Renninger | trenn@suse.de | 1311961047 |  | cpupower: Do detect IDA (opportunistic processor performance) via cpuid  IA32-Intel Devel guide Volume 3A - 14.3.2.1 ------------------------------------------- ... Opportunistic processor performance operation can be disabled by setting bit 38 of IA32_MISC_ENABLES. This mechanism is intended for BIOS only. If IA32_MISC_ENABLES[38] is set, CPUID.06H:EAX[1] will return 0.  Better detect things via cpuid, this cleans up the code a bit and the MSR parts were not working correctly anyway.  Signed-off-by: Thomas Renninger <trenn@suse.de> CC: lenb@kernel.org CC: linux@dominikbrodowski.net CC: cpufreq@vger.kernel.org Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | sysfs.h | s | 1.0K | 23 | Thomas Renninger | trenn@suse.de | 1313431390 |  | cpupower: Better detect offlined CPUs  Before, checking for offlined CPUs was done dirty and it was checked whether topology parsing returned -1 values. But this is a valid case on a Xen (and possibly other) kernels.  Do proper online/offline checking, also take CONFIG_HOTPLUG_CPU option into account (no /sys/devices/../cpuX/online file).  Signed-off-by: Thomas Renninger <trenn@suse.de> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | bitmask.h | s | 1.0K | 24 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | sysfs.c | s | 8.0K | 303 | Peter Zijlstra | peterz@infradead.org | 1337255336 |  | sched: Remove stale power aware scheduling remnants and dysfunctional knobs  It's been broken forever (i.e. it's not scheduling in a power aware fashion), as reported by Suresh and others sending patches, and nobody cares enough to fix it properly ... so remove it to make space free for something better.  There's various problems with the code as it stands today, first and foremost the user interface which is bound to topology levels and has multiple values per level. This results in a state explosion which the administrator or distro needs to master and almost nobody does.  Furthermore large configuration state spaces aren't good, it means the thing doesn't just work right because it's either under so many impossibe to meet constraints, or even if there's an achievable state workloads have to be aware of it precisely and can never meet it for dynamic workloads.  So pushing this kind of decision to user-space was a bad idea even with a single knob - it's exponentially worse with knobs on every node of the topology.  There is a proposal to replace the user interface with a single 3 state knob:   sched_balance_policy := { performance, power, auto }  where 'auto' would be the preferred default which looks at things like Battery/AC mode and possible cpufreq state or whatever the hw exposes to show us power use expectations - but there's been no progress on it in the past many months.  Aside from that, the actual implementation of the various knobs is known to be broken. There have been sporadic attempts at fixing things but these always stop short of reaching a mergable state.  Therefore this wholesale removal with the hopes of spurring people who care to come forward once again and work on a coherent replacement.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Suresh Siddha <suresh.b.siddha@intel.com> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: Vincent Guittot <vincent.guittot@linaro.org> Cc: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/1326104915.2442.53.camel@twins Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | amd.c | s | 2.8K | 111 | Thomas Renninger | trenn@suse.de | 1330782008 |  | cpupower: Better interface for accessing AMD pci registers  AMD's BKDG (Bios and Kernel Developers Guide) talks in the CPU spec of their CPU families about PCI registers defined by "device" (slot) and func(tion).  Assuming that CPU specific configuration PCI devices are always on domain and bus zero a pci_slot_func_init() func which gets the slot and func of the desired PCI device passed looks like the most convenient way.  This also obsoletes the PCI device id maintenance.  Signed-off-by: Thomas Renninger <trenn@suse.de> CC: Andreas Herrmann <herrmann.der.user@googlemail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | cpuid.c | s | 4.3K | 152 | Thomas Renninger | trenn@suse.de | 1311961047 |  | cpupower: Do detect IDA (opportunistic processor performance) via cpuid  IA32-Intel Devel guide Volume 3A - 14.3.2.1 ------------------------------------------- ... Opportunistic processor performance operation can be disabled by setting bit 38 of IA32_MISC_ENABLES. This mechanism is intended for BIOS only. If IA32_MISC_ENABLES[38] is set, CPUID.06H:EAX[1] will return 0.  Better detect things via cpuid, this cleans up the code a bit and the MSR parts were not working correctly anyway.  Signed-off-by: Thomas Renninger <trenn@suse.de> CC: lenb@kernel.org CC: linux@dominikbrodowski.net CC: cpufreq@vger.kernel.org Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
