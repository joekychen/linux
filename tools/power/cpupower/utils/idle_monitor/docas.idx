f | cpupower-monitor.c | s | 9.7K | 381 | Dominik Brodowski | linux@dominikbrodowski.net | 1313766836 |  | cpupower: use man(1) when calling "cpupower help subcommand"  Instead of printing something non-formatted to stdout, call man(1) to show the man page for the proper subcommand.  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | nhm_idle.c | s | 4.8K | 179 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: idle_monitor - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | idle_monitors.def | s | 128B | 7 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | cpupower-monitor.h | s | 1.7K | 56 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | cpuidle_sysfs.c | s | 4.5K | 172 | Thomas Renninger | trenn@suse.de | 1313431385 |  | cpupower: Do not show an empty Idle_Stats monitor if no idle driver is available  By taking error values of: sysfs_get_idlestate_count(..); into account.  Signed-off-by: Thomas Renninger <trenn@suse.de> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | snb_idle.c | s | 4.3K | 161 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957338 |  | cpupowerutils: idle_monitor - ConfigStyle bugfixes  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | mperf_monitor.c | s | 9.2K | 286 | Thomas Renninger | trenn@suse.de | 1313431379 |  | cpupower: mperf monitor - Use TSC to calculate max frequency if possible  Which makes the implementation independent from cpufreq drivers. Therefore this would also work on a Xen kernel where the hypervisor is doing frequency switching and idle entering.  Signed-off-by: Thomas Renninger <trenn@suse.de> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | idle_monitors.h | s | 460B | 15 | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | amd_fam14h_idle.c | s | 8.4K | 283 | Thomas Renninger | trenn@suse.de | 1330782008 |  | cpupower: AMD fam14h/Ontario monitor can also be used by fam12h cpus  The name of the monitor is updated at runtime to the name of the CPU type.  Signed-off-by: Thomas Renninger <trenn@suse.de> CC: Andreas Herrmann <herrmann.der.user@googlemail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
