f | Makefile | g | 9.5K |  | Franck Bui-Huu | fbuihuu@gmail.com | 1330782010 |  | cpupower tool: allow to build in a separate directory  This patch allows cpupower tool to generate its output files in a seperate directory. This is now possible by passing the 'O=<path>' to the command line.  This can be usefull for a normal user if the kernel source code is located in a read only location.  This is patch stole some bits of the perf makefile.  [linux@dominikbrodowski.net: fix commit message] Signed-off-by: Franck Bui-Huu <fbuihuu@gmail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
d | utils |  | 10 items |  | Peter Zijlstra | peterz@infradead.org | 1337255336 |  | sched: Remove stale power aware scheduling remnants and dysfunctional knobs  It's been broken forever (i.e. it's not scheduling in a power aware fashion), as reported by Suresh and others sending patches, and nobody cares enough to fix it properly ... so remove it to make space free for something better.  There's various problems with the code as it stands today, first and foremost the user interface which is bound to topology levels and has multiple values per level. This results in a state explosion which the administrator or distro needs to master and almost nobody does.  Furthermore large configuration state spaces aren't good, it means the thing doesn't just work right because it's either under so many impossibe to meet constraints, or even if there's an achievable state workloads have to be aware of it precisely and can never meet it for dynamic workloads.  So pushing this kind of decision to user-space was a bad idea even with a single knob - it's exponentially worse with knobs on every node of the topology.  There is a proposal to replace the user interface with a single 3 state knob:   sched_balance_policy := { performance, power, auto }  where 'auto' would be the preferred default which looks at things like Battery/AC mode and possible cpufreq state or whatever the hw exposes to show us power use expectations - but there's been no progress on it in the past many months.  Aside from that, the actual implementation of the various knobs is known to be broken. There have been sporadic attempts at fixing things but these always stop short of reaching a mergable state.  Therefore this wholesale removal with the hopes of spurring people who care to come forward once again and work on a coherent replacement.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Suresh Siddha <suresh.b.siddha@intel.com> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: Vincent Guittot <vincent.guittot@linaro.org> Cc: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/1326104915.2442.53.camel@twins Signed-off-by: Ingo Molnar <mingo@kernel.org>
d | debug |  | 3 items |  | Franck Bui-Huu | fbuihuu@gmail.com | 1330782011 |  | cpupower tools: add install target to the debug tools' makefiles  Signed-off-by: Franck Bui-Huu <fbuihuu@gmail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
d | bench |  | 13 items |  | Franck Bui-Huu | fbuihuu@gmail.com | 1330782010 |  | cpupower tool: allow to build in a separate directory  This patch allows cpupower tool to generate its output files in a seperate directory. This is now possible by passing the 'O=<path>' to the command line.  This can be usefull for a normal user if the kernel source code is located in a read only location.  This is patch stole some bits of the perf makefile.  [linux@dominikbrodowski.net: fix commit message] Signed-off-by: Franck Bui-Huu <fbuihuu@gmail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
d | man |  | 7 items |  | Peter Zijlstra | peterz@infradead.org | 1337255336 |  | sched: Remove stale power aware scheduling remnants and dysfunctional knobs  It's been broken forever (i.e. it's not scheduling in a power aware fashion), as reported by Suresh and others sending patches, and nobody cares enough to fix it properly ... so remove it to make space free for something better.  There's various problems with the code as it stands today, first and foremost the user interface which is bound to topology levels and has multiple values per level. This results in a state explosion which the administrator or distro needs to master and almost nobody does.  Furthermore large configuration state spaces aren't good, it means the thing doesn't just work right because it's either under so many impossibe to meet constraints, or even if there's an achievable state workloads have to be aware of it precisely and can never meet it for dynamic workloads.  So pushing this kind of decision to user-space was a bad idea even with a single knob - it's exponentially worse with knobs on every node of the topology.  There is a proposal to replace the user interface with a single 3 state knob:   sched_balance_policy := { performance, power, auto }  where 'auto' would be the preferred default which looks at things like Battery/AC mode and possible cpufreq state or whatever the hw exposes to show us power use expectations - but there's been no progress on it in the past many months.  Aside from that, the actual implementation of the various knobs is known to be broken. There have been sporadic attempts at fixing things but these always stop short of reaching a mergable state.  Therefore this wholesale removal with the hopes of spurring people who care to come forward once again and work on a coherent replacement.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Suresh Siddha <suresh.b.siddha@intel.com> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: Vincent Guittot <vincent.guittot@linaro.org> Cc: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/1326104915.2442.53.camel@twins Signed-off-by: Ingo Molnar <mingo@kernel.org>
d | lib |  | 4 items |  | Roman Vasiyarov | rvasiyarov@gmail.com | 1311957340 |  | cpupowerutils: increase MAX_LINE_LEN  larger sysfs data (>255 bytes) was truncated and thus used improperly  [linux@dominikbrodowski.net: adapted to cpupowerutils] Signed-off-by: Roman Vasiyarov <rvasiyarov@gmail.com> Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | ToDo | g | 462B |  | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | README | g | 1.6K |  | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
d | po |  | 5 items |  | Dominik Brodowski | linux@dominikbrodowski.net | 1311957336 |  | cpupowerutils - cpufrequtils extended with quite some features  CPU power consumption vs performance tuning is no longer limited to CPU frequency switching anymore: deep sleep states, traditional dynamic frequency scaling and hidden turbo/boost frequencies are tied close together and depend on each other. The first two exist on different architectures like PPC, Itanium and ARM, the latter (so far) only on X86. On X86 the APU (CPU+GPU) will only run most efficiently if CPU and GPU has proper power management in place.  Users and Developers want to have *one* tool to get an overview what their system supports and to monitor and debug CPU power management in detail. The tool should compile and work on as many architectures as possible.  Once this tool stabilizes a bit, it is intended to replace the Intel-specific tools in tools/power/x86  Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
