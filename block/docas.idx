f | blk-cgroup.h | s | 10K | 328 | Tejun Heo | tj@kernel.org | 1334909200 |  | blkcg: use radix tree to index blkgs from blkcg  blkg lookup is currently performed by traversing linked list anchored at blkcg->blkg_list.  This is very unscalable and with blk-throttle enabled and enough request queues on the system, this can get very ugly quickly (blk-throttle performs look up on every bio submission).  This patch makes blkcg use radix tree to index blkgs combined with simple last-looked-up hint.  This is mostly identical to how icqs are indexed from ioc.  Note that because __blkg_lookup() may be invoked without holding queue lock, hint is only updated from __blkg_lookup_create().  Due to cfq's cfqq caching, this makes hint updates overly lazy.  This will be improved with scheduled blkcg aware request allocation.  Signed-off-by: Tejun Heo <tj@kernel.org> Cc: Vivek Goyal <vgoyal@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | Makefile | g | 720B |  | Al Viro | viro@zeniv.linux.org.uk | 1325649246 |  | separate partition format handling from generic code  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | compat_ioctl.c | s | 20K | 699 | Martin K. Petersen | martin.petersen@oracle.com | 1326295771 |  | block: Add BLKROTATIONAL ioctl  Introduce an ioctl which permits applications to query whether a block device is rotational.  Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-merge.c | s | 12K | 422 | Tejun Heo | tj@kernel.org | 1328689178 |  | block: separate out blk_rq_merge_ok() and blk_try_merge() from elevator functions  blk_rq_merge_ok() is the elevator-neutral part of merge eligibility test.  blk_try_merge() determines merge direction and expects the caller to have tested elv_rq_merge_ok() previously.  elv_rq_merge_ok() now wraps blk_rq_merge_ok() and then calls elv_iosched_allow_merge().  elv_try_merge() is removed and the two callers are updated to call elv_rq_merge_ok() explicitly followed by blk_try_merge().  While at it, make rq_merge_ok() functions return bool.  This is to prepare for plug merge update and doesn't introduce any behavior change.  This is based on Jens' patch to skip elevator_allow_merge_fn() from plug merge.  Signed-off-by: Tejun Heo <tj@kernel.org> LKML-Reference: <4F16F3CA.90904@kernel.dk> Original-patch-by: Jens Axboe <axboe@kernel.dk> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-ioc.c | s | 10K | 348 | Eric Dumazet | edumazet@google.com | 1338464345 |  | block: avoid infinite loop in get_task_io_context()  Calling get_task_io_context() on a exiting task which isn't %current can loop forever. This triggers at boot time on my dev machine.  BUG: soft lockup - CPU#3 stuck for 22s ! [mountall.1603]  Fix this by making create_task_io_context() returns -EBUSY in this case to break the loop.  Signed-off-by: Eric Dumazet <edumazet@google.com> Cc: Tejun Heo <tj@kernel.org> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Alan Cox <alan@linux.intel.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-map.c | s | 8.2K | 283 | majianpeng | majianpeng@gmail.com | 1324477644 |  | block: re-use existing 'reading' variable instead of checking direction again  Signed-off-by: majianpeng <majianpeng@gmail.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | noop-iosched.c | s | 2.5K | 92 | Tejun Heo | tj@kernel.org | 1331065641 |  | elevator: make elevator_init_fn() return 0/-errno  elevator_ops->elevator_init_fn() has a weird return value.  It returns a void * which the caller should assign to q->elevator->elevator_data and %NULL return denotes init failure.  Update such that it returns integer 0/-errno and sets elevator_data directly as necessary.  This makes the interface more conventional and eases further cleanup.  Signed-off-by: Tejun Heo <tj@kernel.org> Cc: Vivek Goyal <vgoyal@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-iopoll.c | s | 5.9K | 196 | André Goddard Rosa | andre.goddard@gmail.com | 1259937595 |  | tree-wide: fix assorted typos all over the place  That is "success", "unknown", "through", "performance", "[re||un]mapping" , "access", "default", "reasonable", "[con]currently", "temperature" , "channel", "[un]used", "application", "example","hierarchy", "therefore" , "[over||under]flow", "contiguous", "threshold", "enough" and others.  Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | elevator.c | s | 23K | 844 | Tejun Heo | tj@kernel.org | 1334909166 |  | blkcg: implement per-queue policy activation  All blkcg policies were assumed to be enabled on all request_queues. Due to various implementation obstacles, during the recent blkcg core updates, this was temporarily implemented as shooting down all !root blkgs on elevator switch and policy [de]registration combined with half-broken in-place root blkg updates.  In addition to being buggy and racy, this meant losing all blkcg configurations across those events.  Now that blkcg is cleaned up enough, this patch replaces the temporary implementation with proper per-queue policy activation.  Each blkcg policy should call the new blkcg_[de]activate_policy() to enable and disable the policy on a specific queue.  blkcg_activate_policy() allocates and installs policy data for the policy for all existing blkgs.  blkcg_deactivate_policy() does the reverse.  If a policy is not enabled for a given queue, blkg printing / config functions skip the respective blkg for the queue.  blkcg_activate_policy() also takes care of root blkg creation, and cfq_init_queue() and blk_throtl_init() are updated accordingly.  This replaces blkcg_bypass_{start||end}() and update_root_blkg_pd() unnecessary.  Dropped.  v2: cfq_init_queue() was returning uninitialized @ret on root_group     alloc failure if !CONFIG_CFQ_GROUP_IOSCHED.  Fixed.  Signed-off-by: Tejun Heo <tj@kernel.org> Cc: Vivek Goyal <vgoyal@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-lib.c | s | 3.9K | 151 | Jens Axboe | jaxboe@fusionio.com | 1311446099 |  | block: fix patch import error in max_discard_sectors check  A '!' snuck in before the unlikely, rendering it useless.  Reported-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Jens Axboe <jaxboe@fusionio.com>
f | blk-softirq.c | s | 4.5K | 157 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1327667328 |  | sched, block: Unify cache detection  The block layer has some code trying to determine if two CPUs share a cache, the scheduler has a similar function. Expose the function used by the scheduler and make the block layer use it, thereby removing the block layers usage of CONFIG_SCHED* and topology bits.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Acked-by: Jens Axboe <axboe@kernel.dk> Link: http://lkml.kernel.org/r/1327579450.2446.95.camel@twins
f | genhd.c | s | 43K | 1520 | Tejun Heo | tj@kernel.org | 1337062924 |  | block: fix buffer overflow when printing partition UUIDs  6d1d8050b4bc8 "block, partition: add partition_meta_info to hd_struct" added part_unpack_uuid() which assumes that the passed in buffer has enough space for sprintfing "%pU" - 37 characters including '\0'.  Unfortunately, b5af921ec0233 "init: add support for root devices specified by partition UUID" supplied 33 bytes buffer to the function leading to the following panic with stackprotector enabled.    Kernel panic - not syncing: stack-protector: Kernel stack corrupted in: ffffffff81b14c7e    [<ffffffff815e226b>] panic+0xba/0x1c6   [<ffffffff81b14c7e>] ? printk_all_partitions+0x259/0x26xb   [<ffffffff810566bb>] __stack_chk_fail+0x1b/0x20   [<ffffffff81b15c7e>] printk_all_paritions+0x259/0x26xb   [<ffffffff81aedfe0>] mount_block_root+0x1bc/0x27f   [<ffffffff81aee0fa>] mount_root+0x57/0x5b   [<ffffffff81aee23b>] prepare_namespace+0x13d/0x176   [<ffffffff8107eec0>] ? release_tgcred.isra.4+0x330/0x30   [<ffffffff81aedd60>] kernel_init+0x155/0x15a   [<ffffffff81087b97>] ? schedule_tail+0x27/0xb0   [<ffffffff815f4d24>] kernel_thread_helper+0x5/0x10   [<ffffffff81aedc0b>] ? start_kernel+0x3c5/0x3c5   [<ffffffff815f4d20>] ? gs_change+0x13/0x13  Increase the buffer size, remove the dangerous part_unpack_uuid() and use snprintf() directly from printk_all_partitions().  Signed-off-by: Tejun Heo <tj@kernel.org> Reported-by: Szymon Gruszczynski <sz.gruszczynski@googlemail.com> Cc: Will Drewry <wad@chromium.org> Cc: stable@vger.kernel.org Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | ioctl.c | s | 8.7K | 315 | Linus Torvalds | torvalds@linux-foundation.org | 1326659085 |  | Merge branch 'for-3.3/core' of git://git.kernel.dk/linux-block  * 'for-3.3/core' of git://git.kernel.dk/linux-block: (37 commits)   Revert "block: recursive merge requests"   block: Stop using macro stubs for the bio data integrity calls   blockdev: convert some macros to static inlines   fs: remove unneeded plug in mpage_readpages()   block: Add BLKROTATIONAL ioctl   block: Introduce blk_set_stacking_limits function   block: remove WARN_ON_ONCE() in exit_io_context()   block: an exiting task should be allowed to create io_context   block: ioc_cgroup_changed() needs to be exported   block: recursive merge requests   block, cfq: fix empty queue crash caused by request merge   block, cfq: move icq creation and rq->elv.icq association to block core   block, cfq: restructure io_cq creation path for io_context interface cleanup   block, cfq: move io_cq exit/release to blk-ioc.c   block, cfq: move icq cache management to block core   block, cfq: move io_cq lookup to blk-ioc.c   block, cfq: move cfqd->icq_list to request_queue and add request->elv.icq   block, cfq: reorganize cfq_io_context into generic and cfq specific parts   block: remove elevator_queue->ops   block: reorder elevator switch sequence   ...  Fix up conflicts in:  - block/blk-cgroup.c 	Switch from can_attach_task to can_attach  - block/cfq-iosched.c 	conflict with now removed cic index changes (we now use q->id instead)
f | Kconfig | g | 3.3K |  | Al Viro | viro@zeniv.linux.org.uk | 1325649246 |  | move fs/partitions to block/  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | blk-cgroup.c | s | 22K | 774 | Tejun Heo | tj@kernel.org | 1338964531 |  | blkcg: drop local variable @q from blkg_destroy()  blkg_destroy() caches @blkg->q in local variable @q.  While there are two places which needs @blkg->q, only lockdep_assert_held() used the local variable leading to unused local variable warning if lockdep is configured out.  Drop the local variable and just use @blkg->q directly.  Signed-off-by: Tejun Heo <tj@kernel.org> Reported-by: Rakesh Iyer <rni@google.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | cfq-iosched.c | s | 108K | 3596 | Tejun Heo | tj@kernel.org | 1338796949 |  | block: blkcg_policy_cfq shouldn't be used if !CONFIG_CFQ_GROUP_IOSCHED  cfq may be built w/ or w/o blkcg support depending on CONFIG_CFQ_CGROUP_IOSCHED.  If blkcg support is disabled, most of related code is ifdef'd out but some part is left dangling - blkcg_policy_cfq is left zero-filled and blkcg_policy_[un]register() calls are made on it.  Feeding zero filled policy to blkcg_policy_register() is incorrect and triggers the following WARN_ON() if CONFIG_BLK_CGROUP && !CONFIG_CFQ_GROUP_IOSCHED.   ------------[ cut here ]------------  WARNING: at block/blk-cgroup.c:867  Modules linked in:  Modules linked in:  CPU: 3 Not tainted 3.4.0-09547-gfb21aff #1  Process swapper/0 (pid: 1, task: 000000003ff80000, ksp: 000000003ff7f8b8)  Krnl PSW : 0704100180000000 00000000003d76ca (blkcg_policy_register+0xca/0xe0) 	    R:0 T:1 IO:1 EX:1 Key:0 M:1 W:0 P:0 AS:0 CC:1 PM:0 EA:3  Krnl GPRS: 0000000000000000 00000000014b85ec 00000000014b85b0 0000000000000000 	    000000000096fb60 0000000000000000 00000000009a8e78 0000000000000048 	    000000000099c070 0000000000b6f000 0000000000000000 000000000099c0b8 	    00000000014b85b0 0000000000667580 000000003ff7fd98 000000003ff7fd70  Krnl Code: 00000000003d76be: a7280001           lhi     %r2,1 	    00000000003d76c2: a7f4ffdf           brc     15,3d7680 	   #00000000003d76c6: a7f40001           brc     15,3d76c8 	   >00000000003d76ca: a7c8ffea           lhi     %r12,-22 	    00000000003d76ce: a7f4ffce           brc     15,3d766a 	    00000000003d76d2: a7f40001           brc     15,3d76d4 	    00000000003d76d6: a7c80000           lhi     %r12,0 	    00000000003d76da: a7f4ffc2           brc     15,3d765e  Call Trace:  ([<0000000000b6f000>] initcall_debug+0x0/0x4)   [<0000000000989e8a>] cfq_init+0x62/0xd4   [<00000000001000ba>] do_one_initcall+0x3a/0x170   [<000000000096fb60>] kernel_init+0x214/0x2bc   [<0000000000623202>] kernel_thread_starter+0x6/0xc   [<00000000006231fc>] kernel_thread_starter+0x0/0xc  no locks held by swapper/0/1.  Last Breaking-Event-Address:   [<00000000003d76c6>] blkcg_policy_register+0xc6/0xe0  ---[ end trace b8ef4903fcbf9dd3 ]---  This patch fixes the problem by ensuring all blkcg support code is inside CONFIG_CFQ_GROUP_IOSCHED.  * blkcg_policy_cfq declaration and blkg_to_cfqg() definition are moved   inside the first CONFIG_CFQ_GROUP_IOSCHED block.  __maybe_unused is   dropped from blkcg_policy_cfq decl.  * blkcg_deactivate_poilcy() invocation is moved inside ifdef.  This   also makes the activation logic match cfq_init_queue().  * All blkcg_policy_[un]register() invocations are moved inside ifdef.  Signed-off-by: Tejun Heo <tj@kernel.org> Reported-by: Heiko Carstens <heiko.carstens@de.ibm.com> LKML-Reference: <20120601112954.GC3535@osiris.boeblingen.de.ibm.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
d | partitions |  | 32 items |  | Stefan Haberland | stefan.haberland@de.ibm.com | 1337172171 |  | s390/dasd: re-prioritize partition detection message  To avoid confusion while formatting a DASD device change the level of the "Expected VOL1 label not found" message from warning to info.  Signed-off-by: Stefan Haberland <stefan.haberland@de.ibm.com> Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
f | partition-generic.c | s | 13K | 484 | Jun'ichi Nomura | j-nomura@ce.jp.nec.com | 1330681113 |  | block: Fix NULL pointer dereference in sd_revalidate_disk  Since 2.6.39 (1196f8b), when a driver returns -ENOMEDIUM for open(), __blkdev_get() calls rescan_partitions() to remove in-kernel partition structures and raise KOBJ_CHANGE uevent.  However it ends up calling driver's revalidate_disk without open and could cause oops.  In the case of SCSI:    process A                  process B   ----------------------------------------------   sys_open     __blkdev_get       sd_open         returns -ENOMEDIUM                              scsi_remove_device                                <scsi_device torn down>       rescan_partitions         sd_revalidate_disk           <oops> Oopses are reported here: http://marc.info/?l=linux-scsi&m=132388619710052  This patch separates the partition invalidation from rescan_partitions() and use it for -ENOMEDIUM case.  Reported-by: Huajun Li <huajun.li.lee@gmail.com> Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com> Acked-by: Tejun Heo <tj@kernel.org> Cc: stable@kernel.org Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | bsg-lib.c | s | 7.6K | 264 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103873 |  | block: Change module.h -> export.h in bsg-lib.c  This file isn't using full modular functionality, and hence can be "downgraded" to just using the export.h header.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | blk-timeout.c | s | 4.7K | 165 | Asias He | asias@redhat.com | 1339742783 |  | block: Drop dead function blk_abort_queue()  This function was only used by btrfs code in btrfs_abort_devices() (seems in a wrong way).  It was removed in commit d07eb9117050c9ed3f78296ebcc06128b52693be, So, Let's remove the dead code to avoid any confusion.  Changes in v2: update commit log, btrfs_abort_devices() was removed already.  Cc: Jens Axboe <axboe@kernel.dk> Cc: linux-kernel@vger.kernel.org Cc: Chris Mason <chris.mason@oracle.com> Cc: linux-btrfs@vger.kernel.org Cc: David Sterba <dave@jikos.cz> Signed-off-by: Asias He <asias@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-core.c | s | 80K | 2597 | Asias He | asias@redhat.com | 1339742782 |  | block: Mitigate lock unbalance caused by lock switching  Commit 777eb1bf15b8532c396821774bf6451e563438f5 disconnects externally supplied queue_lock before blk_drain_queue(). Switching the lock would introduce lock unbalance because theads which have taken the external lock might unlock the internal lock in the during the queue drain. This patch mitigate this by disconnecting the lock after the queue draining since queue draining makes a lot of request_queue users go away.  However, please note, this patch only makes the problem less likely to happen. Anyone who still holds a ref might try to issue a new request on a dead queue after the blk_cleanup_queue() finishes draining, the lock unbalance might still happen in this case.   =====================================  [ BUG: bad unlock balance detected! ]  3.4.0+ #288 Not tainted  -------------------------------------  fio/17706 is trying to release lock (&(&q->__queue_lock)->rlock) at:  [<ffffffff81329372>] blk_queue_bio+0x2a2/0x380  but there are no more locks to release!   other info that might help us debug this:  1 lock held by fio/17706:   #0:  (&(&vblk->lock)->rlock){......}, at: [<ffffffff81327f1a>]  get_request_wait+0x19a/0x250   stack backtrace:  Pid: 17706, comm: fio Not tainted 3.4.0+ #288  Call Trace:   [<ffffffff81329372>] ? blk_queue_bio+0x2a2/0x380   [<ffffffff810dea49>] print_unlock_inbalance_bug+0xf9/0x100   [<ffffffff810dfe4f>] lock_release_non_nested+0x1df/0x330   [<ffffffff811dae24>] ? dio_bio_end_aio+0x34/0xc0   [<ffffffff811d6935>] ? bio_check_pages_dirty+0x85/0xe0   [<ffffffff811daea1>] ? dio_bio_end_aio+0xb1/0xc0   [<ffffffff81329372>] ? blk_queue_bio+0x2a2/0x380   [<ffffffff81329372>] ? blk_queue_bio+0x2a2/0x380   [<ffffffff810e0079>] lock_release+0xd9/0x250   [<ffffffff81a74553>] _raw_spin_unlock_irq+0x23/0x40   [<ffffffff81329372>] blk_queue_bio+0x2a2/0x380   [<ffffffff81328faa>] generic_make_request+0xca/0x100   [<ffffffff81329056>] submit_bio+0x76/0xf0   [<ffffffff8115470c>] ? set_page_dirty_lock+0x3c/0x60   [<ffffffff811d69e1>] ? bio_set_pages_dirty+0x51/0x70   [<ffffffff811dd1a8>] do_blockdev_direct_IO+0xbf8/0xee0   [<ffffffff811d8620>] ? blkdev_get_block+0x80/0x80   [<ffffffff811dd4e5>] __blockdev_direct_IO+0x55/0x60   [<ffffffff811d8620>] ? blkdev_get_block+0x80/0x80   [<ffffffff811d92e7>] blkdev_direct_IO+0x57/0x60   [<ffffffff811d8620>] ? blkdev_get_block+0x80/0x80   [<ffffffff8114c6ae>] generic_file_aio_read+0x70e/0x760   [<ffffffff810df7c5>] ? __lock_acquire+0x215/0x5a0   [<ffffffff811e9924>] ? aio_run_iocb+0x54/0x1a0   [<ffffffff8114bfa0>] ? grab_cache_page_nowait+0xc0/0xc0   [<ffffffff811e82cc>] aio_rw_vect_retry+0x7c/0x1e0   [<ffffffff811e8250>] ? aio_fsync+0x30/0x30   [<ffffffff811e9936>] aio_run_iocb+0x66/0x1a0   [<ffffffff811ea9b0>] do_io_submit+0x6f0/0xb80   [<ffffffff8134de2e>] ? trace_hardirqs_on_thunk+0x3a/0x3f   [<ffffffff811eae50>] sys_io_submit+0x10/0x20   [<ffffffff81a7c9e9>] system_call_fastpath+0x16/0x1b  Changes since v2: Update commit log to explain how the code is still                   broken even if we delay the lock switching after the drain. Changes since v1: Update commit log as Tejun suggested.  Acked-by: Tejun Heo <tj@kernel.org> Signed-off-by: Asias He <asias@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-sysfs.c | s | 14K | 468 | Tejun Heo | tj@kernel.org | 1331065643 |  | blkcg: unify blkg's for blkcg policies  Currently, blkg is per cgroup-queue-policy combination.  This is unnatural and leads to various convolutions in partially used duplicate fields in blkg, config / stat access, and general management of blkgs.  This patch make blkg's per cgroup-queue and let them serve all policies.  blkgs are now created and destroyed by blkcg core proper. This will allow further consolidation of common management logic into blkcg core and API with better defined semantics and layering.  As a transitional step to untangle blkg management, elvswitch and policy [de]registration, all blkgs except the root blkg are being shot down during elvswitch and bypass.  This patch adds blkg_root_update() to update root blkg in place on policy change.  This is hacky and racy but should be good enough as interim step until we get locking simplified and switch over to proper in-place update for all blkgs.  -v2: Root blkgs need to be updated on elvswitch too and blkg_alloc()      comment wasn't updated according to the function change.  Fixed.      Both pointed out by Vivek.  -v3: v2 updated blkg_destroy_all() to invoke update_root_blkg_pd() for      all policies.  This freed root pd during elvswitch before the      last queue finished exiting and led to oops.  Directly invoke      update_root_blkg_pd() only on BLKIO_POLICY_PROP from      cfq_exit_queue().  This also is closer to what will be done with      proper in-place blkg update.  Reported by Vivek.  Signed-off-by: Tejun Heo <tj@kernel.org> Cc: Vivek Goyal <vgoyal@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-settings.c | s | 25K | 735 | Martin K. Petersen | martin.petersen@oracle.com | 1326295631 |  | block: Introduce blk_set_stacking_limits function  Stacking driver queue limits are typically bounded exclusively by the capabilities of the low level devices, not by the stacking driver itself.  This patch introduces blk_set_stacking_limits() which has more liberal metrics than the default queue limits function. This allows us to inherit topology parameters from bottom devices without manually tweaking the default limits in each driver prior to calling the stacking function.  Since there is now a clear distinction between stacking and low-level devices, blk_set_default_limits() has been modified to carry the more conservative values that we used to manually set in blk_queue_make_request().  Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-integrity.c | s | 11K | 370 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103872 |  | block: add export.h to files using EXPORT_SYMBOL/THIS_MODULE macros  These files were getting <linux/module.h> via an implicit include path, but we want to crush those out of existence since they cost time during compiles of processing thousands of lines of headers for no reason.  Give them the lightweight header that just contains the EXPORT_SYMBOL infrastructure.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | deadline-iosched.c | s | 11K | 389 | Tejun Heo | tj@kernel.org | 1331065641 |  | elevator: make elevator_init_fn() return 0/-errno  elevator_ops->elevator_init_fn() has a weird return value.  It returns a void * which the caller should assign to q->elevator->elevator_data and %NULL return denotes init failure.  Update such that it returns integer 0/-errno and sets elevator_data directly as necessary.  This makes the interface more conventional and eases further cleanup.  Signed-off-by: Tejun Heo <tj@kernel.org> Cc: Vivek Goyal <vgoyal@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-throttle.c | s | 31K | 1027 | Tejun Heo | tj@kernel.org | 1337768181 |  | blkcg: tg_stats_alloc_lock is an irq lock  tg_stats_alloc_lock nests inside queue lock and should always be held with irq disabled.  throtl_pd_{init||exit}() were using non-irqsafe spinlock ops which triggered inverse lock ordering via irq warning via RCU freeing of blkg invoking throtl_pd_exit() w/o disabling IRQ.  Update both functions to use irq safe operations.  Signed-off-by: Tejun Heo <tj@kernel.org> Reported-by: Sasha Levin <sasha.levin@oracle.com> LKML-Reference: <1335339396.16988.80.camel@lappy> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-tag.c | s | 9.8K | 347 | Dan Williams | dan.j.williams@intel.com | 1325146588 |  | block: fix blk_queue_end_tag()  Commit 5e081591 "block: warn if tag is greater than real_max_depth" cleaned up blk_queue_end_tag() to warn when the tag is truly invalid (greater than real_max_depth).  However, it changed behavior in the tag < max_depth case to not end the request.  Leading to triggering of BUG_ON(blk_queued_rq(rq)) in the request completion path:    http://marc.info/?l=linux-kernel&m=132204370518629&w=2  In order to allow blk_queue_resize_tags() to shrink the tag space blk_queue_end_tag() must always complete tags with a value less than real_max_depth regardless of the current max_depth.  The comment about "handling the shrink case" seems to be what prompted changes in this space, so remove it and BUG on all invalid tags (made even simpler by Matthew's suggestion to use an unsigned compare).  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Cc: Tao Ma <boyu.mt@taobao.com> Cc: Matthew Wilcox <matthew@wil.cx> Reported-by: Meelis Roos <mroos@ut.ee> Reported-by: Ed Nadolski <edmund.nadolski@intel.com> Cc: Tejun Heo <tj@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-flush.c | s | 13K | 402 | Jeff Moyer | jmoyer@redhat.com | 1319466271 |  | blk-flush: move the queue kick into  A dm-multipath user reported[1] a problem when trying to boot a kernel with commit 4853abaae7e4a2af938115ce9071ef8684fb7af4 (block: fix flush machinery for stacking drivers with differring flush flags) applied.  It turns out that an empty flush request can be sent into blk_insert_flush.  When the BUG_ON was fixed to allow for this, I/O on the underlying device would stall.  The reason is that blk_insert_cloned_request does not kick the queue. In the aforementioned commit, I had added a special case to kick the queue if data was sent down but the queue flags did not require a flush.  A better solution is to push the queue kick up into blk_insert_cloned_request.  This patch, along with a follow-on which fixes the BUG_ON, fixes the issue reported.  [1] http://www.redhat.com/archives/dm-devel/2011-September/msg00154.html  Reported-by: Christophe Saout <christophe@saout.de> Signed-off-by: Jeff Moyer <jmoyer@redhat.com> Acked-by: Tejun Heo <tj@kernel.org>  Stable note: 3.1 Cc: stable@vger.kernel.org Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk.h | s | 7.1K | 199 | Tejun Heo | tj@kernel.org | 1333310100 |  | Merge branch 'for-3.5' of ../cgroup into block/for-3.5/core-merged  cgroup/for-3.5 contains the following changes which blk-cgroup needs to proceed with the on-going cleanup.  * Dynamic addition and removal of cftypes to make config/stat file   handling modular for policies.  * cgroup removal update to not wait for css references to drain to fix   blkcg removal hang caused by cfq caching cfqgs.  Pull in cgroup/for-3.5 into block/for-3.5/core.  This causes the following conflicts in block/blk-cgroup.c.  * 761b3ef50e "cgroup: remove cgroup_subsys argument from callbacks"   conflicts with blkiocg_pre_destroy() addition and blkiocg_attach()   removal.  Resolved by removing @subsys from all subsys methods.  * 676f7c8f84 "cgroup: relocate cftype and cgroup_subsys definitions in   controllers" conflicts with ->pre_destroy() and ->attach() updates   and removal of modular config.  Resolved by dropping forward   declarations of the methods and applying updates to the relocated   blkio_subsys.  * 4baf6e3325 "cgroup: convert all non-memcg controllers to the new   cftype interface" builds upon the previous item.  Resolved by adding   ->base_cftypes to the relocated blkio_subsys.  Signed-off-by: Tejun Heo <tj@kernel.org>
f | bsg.c | s | 23K | 924 | Stanislaw Gruszka | sgruszka@redhat.com | 1328727723 |  | bsg: fix sysfs link remove warning  We create "bsg" link if q->kobj.sd is not NULL, so remove it only when the same condition is true.  Fixes:  WARNING: at fs/sysfs/inode.c:323 sysfs_hash_and_remove+0x2b/0x77() sysfs: can not remove 'bsg', no directory Call Trace:   [<c0429683>] warn_slowpath_common+0x6a/0x7f   [<c0537a68>] ? sysfs_hash_and_remove+0x2b/0x77   [<c042970b>] warn_slowpath_fmt+0x2b/0x2f   [<c0537a68>] sysfs_hash_and_remove+0x2b/0x77   [<c053969a>] sysfs_remove_link+0x20/0x23   [<c05d88f1>] bsg_unregister_queue+0x40/0x6d   [<c0692263>] __scsi_remove_device+0x31/0x9d   [<c069149f>] scsi_forget_host+0x41/0x52   [<c0689fa9>] scsi_remove_host+0x71/0xe0   [<f7de5945>] quiesce_and_remove_host+0x51/0x83 [usb_storage]   [<f7de5a1e>] usb_stor_disconnect+0x18/0x22 [usb_storage]   [<c06c29de>] usb_unbind_interface+0x4e/0x109   [<c067a80f>] __device_release_driver+0x6b/0xa6   [<c067a861>] device_release_driver+0x17/0x22   [<c067a46a>] bus_remove_device+0xd6/0xe6   [<c06785e2>] device_del+0xf2/0x137   [<c06c101f>] usb_disable_device+0x94/0x1a0  Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | blk-exec.c | s | 3.0K | 105 | Tejun Heo | tj@kernel.org | 1323819217 |  | block: add missing blk_queue_dead() checks  blk_insert_cloned_request(), blk_execute_rq_nowait() and blk_flush_plug_list() either didn't check whether the queue was dead or did it without holding queue_lock.  Update them so that dead state is checked while holding queue_lock.  AFAICS, this plugs all holes (requeue doesn't matter as the request is transitioning atomically from in_flight to queued).  Signed-off-by: Tejun Heo <tj@kernel.org> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | Kconfig.iosched | g | 1.6K |  | Tejun Heo | tj@kernel.org | 1331065641 |  | blkcg: make CONFIG_BLK_CGROUP bool  Block cgroup core can be built as module; however, it isn't too useful as blk-throttle can only be built-in and cfq-iosched is usually the default built-in scheduler.  Scheduled blkcg cleanup requires calling into blkcg from block core.  To simplify that, disallow building blkcg as module by making CONFIG_BLK_CGROUP bool.  If building blkcg core as module really matters, which I doubt, we can revisit it after blkcg API cleanup.  -v2: Vivek pointed out that IOSCHED_CFQ was incorrectly updated to      depend on BLK_CGROUP.  Fixed.  Signed-off-by: Tejun Heo <tj@kernel.org> Cc: Vivek Goyal <vgoyal@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | scsi_ioctl.c | s | 19K | 652 | Jan Kara | jack@suse.cz | 1339757566 |  | scsi: Silence unnecessary warnings about ioctl to partition  Sometimes, warnings about ioctls to partition happen often enough that they form majority of the warnings in the kernel log and users complain. In some cases warnings are about ioctls such as SG_IO so it's not good to get rid of the warnings completely as they can ease debugging of userspace problems when ioctl is refused.  Since I have seen warnings from lots of commands, including some proprietary userspace applications, I don't think disallowing the ioctls for processes with CAP_SYS_RAWIO will happen in the near future if ever. So lets just stop warning for processes with CAP_SYS_RAWIO for which ioctl is allowed.  CC: Paolo Bonzini <pbonzini@redhat.com> CC: James Bottomley <JBottomley@parallels.com> CC: linux-scsi@vger.kernel.org Acked-by: Paolo Bonzini <pbonzini@redhat.com> Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Jens Axboe <axboe@kernel.dk>
