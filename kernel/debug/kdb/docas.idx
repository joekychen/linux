f | kdb_io.c | s | 19K | 794 | Jason Wessel | jason.wessel@windriver.com | 1333060883 |  | kdb: Fix smatch warning on dbg_io_ops->is_console  The Smatch tool warned that the change from commit b8adde8dd (kdb: Avoid using dbg_io_ops until it is initialized) should add another null check later in the kdb_printf().  It is worth noting that the second use of dbg_io_ops->is_console is protected by the KDB_PAGER state variable which would only get set when kdb is fully active and initialized.  If we ever encounter changes or defects in the KDB_PAGER state we do not want to crash the kernel in a kdb_printf/printk.  CC: Tim Bird <tim.bird@am.sony.com> Reported-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
f | kdb_bp.c | s | 11K | 494 | Jason Wessel | jason.wessel@windriver.com | 1332446836 |  | kdb: Add message about CONFIG_DEBUG_RODATA on failure to install breakpoint  On x86, if CONFIG_DEBUG_RODATA is set, one cannot set breakpoints via KDB.  Apparently this is a well-known problem, as at least one distribution now ships with both KDB enabled and CONFIG_DEBUG_RODATA=y for security reasons.  This patch adds an printk message to the breakpoint failure case, in order to provide suggestions about how to use the debugger.  Reported-by: Tim Bird <tim.bird@am.sony.com> Signed-off-by: Jason Wessel <jason.wessel@windriver.com> Acked-by: Tim Bird <tim.bird@am.sony.com>
f | kdb_keyboard.c | s | 5.5K | 229 | Andrei Warkentin | andrey.warkentin@gmail.com | 1332446835 |  | KDB: Fix usability issues relating to the 'enter' key.  This fixes the following problems: 1) Typematic-repeat of 'enter' gives warning message    and leaks make/break if KDB exits. Repeats    look something like 0x1c 0x1c .... 0x9c 2) Use of 'keypad enter' gives warning message and    leaks the ENTER break/make code out if KDB exits.    KP ENTER repeats look someting like 0xe0 0x1c    0xe0 0x1c ... 0xe0 0x9c. 3) Lag on the order of seconds between "break" and "make" when    expecting the enter "break" code. Seen under virtualized    environments such as VMware ESX.  The existing special enter handler tries to glob the enter break code, but this fails if the other (KP) enter was used, or if there was a key repeat. It also fails if you mashed some keys along with enter, and you ended up with a non-enter make or non-enter break code coming after the enter make code. So first, we modify the handler to handle these cases. But performing these actions on every enter is annoying since now you can't hold ENTER down to scroll <more>d messages in KDB. Since this special behaviour is only necessary to handle the exiting KDB ('g' + ENTER) without leaking scancodes to the OS.  This cleanup needs to get executed anytime the kdb_main loop exits.  Tested on QEMU. Set a bp on atkbd.c to verify no scan code was leaked.  Cc: Andrei Warkentin <andreiw@vmware.com> [jason.wessel@windriver.com: move cleanup calls to kdb_main.c] Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com> Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
f | Makefile | g | 1.1K |  | Jason Wessel | jason.wessel@windriver.com | 1274407464 |  | kgdboc,keyboard: Keyboard driver for kdb with kgdb  This patch adds in the kdb PS/2 keyboard driver.  This was mostly a direct port from the original kdb where I cleaned up the code against checkpatch.pl and added the glue to stitch it into kgdb.  This patch also enables early kdb debug via kgdbwait and the keyboard.  All the access to configure kdb using either a serial console or the keyboard is done via kgdboc.  If you want to use only the keyboard and want to break in early you would add to your kernel command arguments:      kgdboc=kbd kgdbwait  If you wanted serial and or the keyboard access you could use:      kgdboc=kbd,ttyS0  You can also configure kgdboc as a kernel module or at run time with the sysfs where you can activate and deactivate kgdb.  Turn it on:     echo kbd,ttyS0 > /sys/module/kgdboc/parameters/kgdboc  Turn it off:     echo "" > /sys/module/kgdboc/parameters/kgdboc  Signed-off-by: Jason Wessel <jason.wessel@windriver.com> Reviewed-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
f | kdb_main.c | s | 69K | 2673 | Andrei Warkentin | andrey.warkentin@gmail.com | 1332446835 |  | KDB: Fix usability issues relating to the 'enter' key.  This fixes the following problems: 1) Typematic-repeat of 'enter' gives warning message    and leaks make/break if KDB exits. Repeats    look something like 0x1c 0x1c .... 0x9c 2) Use of 'keypad enter' gives warning message and    leaks the ENTER break/make code out if KDB exits.    KP ENTER repeats look someting like 0xe0 0x1c    0xe0 0x1c ... 0xe0 0x9c. 3) Lag on the order of seconds between "break" and "make" when    expecting the enter "break" code. Seen under virtualized    environments such as VMware ESX.  The existing special enter handler tries to glob the enter break code, but this fails if the other (KP) enter was used, or if there was a key repeat. It also fails if you mashed some keys along with enter, and you ended up with a non-enter make or non-enter break code coming after the enter make code. So first, we modify the handler to handle these cases. But performing these actions on every enter is annoying since now you can't hold ENTER down to scroll <more>d messages in KDB. Since this special behaviour is only necessary to handle the exiting KDB ('g' + ENTER) without leaking scancodes to the OS.  This cleanup needs to get executed anytime the kdb_main loop exits.  Tested on QEMU. Set a bp on atkbd.c to verify no scan code was leaked.  Cc: Andrei Warkentin <andreiw@vmware.com> [jason.wessel@windriver.com: move cleanup calls to kdb_main.c] Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com> Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
f | kdb_private.h | s | 9.6K | 222 | Andrei Warkentin | andrey.warkentin@gmail.com | 1332446835 |  | KDB: Fix usability issues relating to the 'enter' key.  This fixes the following problems: 1) Typematic-repeat of 'enter' gives warning message    and leaks make/break if KDB exits. Repeats    look something like 0x1c 0x1c .... 0x9c 2) Use of 'keypad enter' gives warning message and    leaks the ENTER break/make code out if KDB exits.    KP ENTER repeats look someting like 0xe0 0x1c    0xe0 0x1c ... 0xe0 0x9c. 3) Lag on the order of seconds between "break" and "make" when    expecting the enter "break" code. Seen under virtualized    environments such as VMware ESX.  The existing special enter handler tries to glob the enter break code, but this fails if the other (KP) enter was used, or if there was a key repeat. It also fails if you mashed some keys along with enter, and you ended up with a non-enter make or non-enter break code coming after the enter make code. So first, we modify the handler to handle these cases. But performing these actions on every enter is annoying since now you can't hold ENTER down to scroll <more>d messages in KDB. Since this special behaviour is only necessary to handle the exiting KDB ('g' + ENTER) without leaking scancodes to the OS.  This cleanup needs to get executed anytime the kdb_main loop exits.  Tested on QEMU. Set a bp on atkbd.c to verify no scan code was leaked.  Cc: Andrei Warkentin <andreiw@vmware.com> [jason.wessel@windriver.com: move cleanup calls to kdb_main.c] Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com> Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
f | kdb_debugger.c | s | 4.2K | 153 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103805 |  | kernel: Fix files explicitly needing EXPORT_SYMBOL infrastructure  These files were getting <linux/module.h> via an implicit non-obvious path, but we want to crush those out of existence since they cost time during compiles of processing thousands of lines of headers for no reason.  Give them the lightweight header that just contains the EXPORT_SYMBOL infrastructure.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | kdb_cmds | g | 769B |  | Jason Wessel | jason.wessel@windriver.com | 1312223038 |  | kdb: cleanup unused variables missed in the original kdb merge  The BTARGS and BTSYMARG variables do not have any function in the mainline version of kdb.  Reported-by: Tim Bird <tim.bird@am.sony.com> Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
f | kdb_support.c | s | 23K | 880 | Cong Wang | amwang@redhat.com | 1332251306 |  | kdb: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | kdb_bt.c | s | 5.1K | 199 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
