f | rcutree.c | s | 84K | 2396 | Paul E. McKenney | paul.mckenney@linaro.org | 1340652925 |  | rcu: Stop rcu_do_batch() from multiplexing the "count" variable  Commit b1420f1c (Make rcu_barrier() less disruptive) rearranged the code in rcu_do_batch(), moving the ->qlen manipulation to follow the requeueing of the callbacks.  Unfortunately, this rearrangement clobbered the value of the "count" local variable before the value of rdp->qlen was adjusted, resulting in the value of rdp->qlen being inaccurate.  This commit therefore introduces an index variable "i", avoiding the inadvertent multiplexing.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Reviewed-by: Josh Triplett <josh@joshtriplett.org>
f | utsname.c | s | 2.5K | 100 | Eric W. Biederman | ebiederm@xmission.com | 1333842951 |  | userns: Use cred->user_ns instead of cred->user->user_ns  Optimize performance and prepare for the removal of the user_ns reference from user_struct.  Remove the slow long walk through cred->user->user_ns and instead go straight to cred->user_ns.  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | audit_tree.c | s | 21K | 821 | Lai Jiangshan | laijs@cn.fujitsu.com | 1311196211 |  | audit_tree,rcu: Convert call_rcu(__put_tree) to kfree_rcu()  The rcu callback __put_tree() just calls a kfree(), so we use kfree_rcu() instead of the call_rcu(__put_tree).  Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Eric Paris <eparis@redhat.com> Reviewed-by: Josh Triplett <josh@joshtriplett.org>
f | up.c | s | 413B | 17 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | srcu.c | s | 19K | 579 | Lai Jiangshan | laijs@cn.fujitsu.com | 1335808105 |  | rcu: Implement per-domain single-threaded call_srcu() state machine  This commit implements an SRCU state machine in support of call_srcu(). The state machine is preemptible, light-weight, and single-threaded, minimizing synchronization overhead.  In particular, there is no longer any need for synchronize_srcu() to be guarded by a mutex.  Expedited processing is handled, at least in the absence of concurrent grace-period operations on that same srcu_struct structure, by having the synchronize_srcu_expedited() thread take on the role of the workqueue thread for one iteration.  There is a reasonable probability that a given SRCU callback will be invoked on the same CPU that registered it, however, there is no guarantee.  Concurrent SRCU grace-period primitives can cause callbacks to be executed elsewhere, even in absence of CPU-hotplug operations.  Callbacks execute in process context, but under the influence of local_bh_disable(), so it is illegal to sleep in an SRCU callback function.  Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com> Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | tracepoint.c | s | 19K | 689 | Ingo Molnar | mingo@elte.hu | 1330074359 |  | static keys: Introduce 'struct static_key', static_key_true()/false() and static_key_slow_[inc||dec]()  So here's a boot tested patch on top of Jason's series that does all the cleanups I talked about and turns jump labels into a more intuitive to use facility. It should also address the various misconceptions and confusions that surround jump labels.  Typical usage scenarios:          #include <linux/static_key.h>          struct static_key key = STATIC_KEY_INIT_TRUE;          if (static_key_false(&key))                 do unlikely code         else                 do likely code  Or:          if (static_key_true(&key))                 do likely code         else                 do unlikely code  The static key is modified via:          static_key_slow_inc(&key);         ...         static_key_slow_dec(&key);  The 'slow' prefix makes it abundantly clear that this is an expensive operation.  I've updated all in-kernel code to use this everywhere. Note that I (intentionally) have not pushed through the rename blindly through to the lowest levels: the actual jump-label patching arch facility should be named like that, so we want to decouple jump labels from the static-key facility a bit.  On non-jump-label enabled architectures static keys default to likely()/unlikely() branches.  Signed-off-by: Ingo Molnar <mingo@elte.hu> Acked-by: Jason Baron <jbaron@redhat.com> Acked-by: Steven Rostedt <rostedt@goodmis.org> Cc: a.p.zijlstra@chello.nl Cc: mathieu.desnoyers@efficios.com Cc: davem@davemloft.net Cc: ddaney.cavm@gmail.com Cc: Linus Torvalds <torvalds@linux-foundation.org> Link: http://lkml.kernel.org/r/20120222085809.GA26397@elte.hu Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | audit_watch.c | s | 14K | 457 | Al Viro | viro@zeniv.linux.org.uk | 1300108523 |  | kill path_lookup()  all remaining callers pass LOOKUP_PARENT to it, so flags argument can die; renamed to kern_path_parent()  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | mutex-debug.h | s | 1.7K | 50 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1302763953 |  | mutex: Use p->on_cpu for the adaptive spin  Since we now have p->on_cpu unconditionally available, use it to re-implement mutex_spin_on_owner.  Requested-by: Thomas Gleixner <tglx@linutronix.de> Reviewed-by: Frank Rowand <frank.rowand@am.sony.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Nick Piggin <npiggin@kernel.dk> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/20110405152728.826338173@chello.nl
d | debug |  | 5 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1333585568 |  | 
f | semaphore.c | s | 7.2K | 232 | Lucia Rosculete | luciarosculete@gmail.com | 1333671355 |  | semaphore: fix improper comment reference to mutex  Replace "mutex" with "semaphore" in down_trylock comment  Signed-off-by: Lucia Rosculete <luciarosculete@gmail.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | audit.h | s | 5.5K | 144 | Eric Paris | eparis@redhat.com | 1326835017 |  | audit: remove AUDIT_SETUP_CONTEXT as it isn't used  Audit contexts have 3 states.  Disabled, which doesn't collect anything, build, which collects info but might not emit it, and record, which collects and emits.  There is a 4th state, setup, which isn't used.  Get rid of it.  Signed-off-by: Eric Paris <eparis@redhat.com>
f | task_work.c | s | 2.0K | 73 | Oleg Nesterov | oleg@redhat.com | 1337825361 |  | task_work_add: generic process-context callbacks  Provide a simple mechanism that allows running code in the (nonatomic) context of the arbitrary task.  The caller does task_work_add(task, task_work) and this task executes task_work->func() either from do_notify_resume() or from do_exit().  The callback can rely on PF_EXITING to detect the latter case.  "struct task_work" can be embedded in another struct, still it has "void *data" to handle the most common/simple case.  This allows us to kill the ->replacement_session_keyring hack, and potentially this can have more users.  Performance-wise, this adds 2 "unlikely(!hlist_empty())" checks into tracehook_notify_resume() and do_exit().  But at the same time we can remove the "replacement_session_keyring != NULL" checks from arch/*/signal.c and exit_creds().  Note: task_work_add/task_work_run abuses ->pi_lock.  This is only because this lock is already used by lookup_pi_state() to synchronize with do_exit() setting PF_EXITING.  Fortunately the scope of this lock in task_work.c is really tiny, and the code is unlikely anyway.  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Acked-by: David Howells <dhowells@redhat.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Richard Kuo <rkuo@codeaurora.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Alexander Gordeev <agordeev@redhat.com> Cc: Chris Zankel <chris@zankel.net> Cc: David Smith <dsmith@redhat.com> Cc: "Frank Ch. Eigler" <fche@redhat.com> Cc: Geert Uytterhoeven <geert@linux-m68k.org> Cc: Larry Woodman <lwoodman@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Tejun Heo <tj@kernel.org> Cc: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | Makefile | g | 4.5K |  | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
f | res_counter.c | s | 4.7K | 187 | Frederic Weisbecker | fweisbec@gmail.com | 1338333747 |  | rescounters: add res_counter_uncharge_until()  When killing a res_counter which is a child of other counter, we need to do  	res_counter_uncharge(child, xxx) 	res_counter_charge(parent, xxx)  This is not atomic and wastes CPU.  This patch adds res_counter_uncharge_until().  This function's uncharge propagates to ancestors until specified res_counter.  	res_counter_uncharge_until(child, parent, xxx)  Now the operation is atomic and efficient.  Signed-off-by: Frederic Weisbecker <fweisbec@redhat.com> Signed-off-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com> Cc: Michal Hocko <mhocko@suse.cz> Cc: Johannes Weiner <hannes@cmpxchg.org> Cc: Ying Han <yinghan@google.com> Cc: Glauber Costa <glommer@parallels.com> Reviewed-by: Tejun Heo <tj@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | rtmutex-tester.c | s | 8.7K | 333 | Kay Sievers | kay.sievers@vrfy.org | 1323903262 |  | rtmutex-tester: convert sysdev_class to a regular subsystem  After all sysdev classes are ported to regular driver core entities, the sysdev implementation will be entirely removed from the kernel.  Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Paul Gortmaker <paul.gortmaker@windriver.com> Cc: Arnd Bergmann <arnd@arndb.de> Signed-off-by: Kay Sievers <kay.sievers@vrfy.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | Kconfig.freezer | g | 52B |  | Matt Helsley | matthltc@us.ibm.com | 1224517954 |  | container freezer: implement freezer cgroup subsystem  This patch implements a new freezer subsystem in the control groups framework.  It provides a way to stop and resume execution of all tasks in a cgroup by writing in the cgroup filesystem.  The freezer subsystem in the container filesystem defines a file named freezer.state.  Writing "FROZEN" to the state file will freeze all tasks in the cgroup.  Subsequently writing "RUNNING" will unfreeze the tasks in the cgroup.  Reading will return the current state.  * Examples of usage :     # mkdir /containers/freezer    # mount -t cgroup -ofreezer freezer  /containers    # mkdir /containers/0    # echo $some_pid > /containers/0/tasks  to get status of the freezer subsystem :     # cat /containers/0/freezer.state    RUNNING  to freeze all tasks in the container :     # echo FROZEN > /containers/0/freezer.state    # cat /containers/0/freezer.state    FREEZING    # cat /containers/0/freezer.state    FROZEN  to unfreeze all tasks in the container :     # echo RUNNING > /containers/0/freezer.state    # cat /containers/0/freezer.state    RUNNING  This is the basic mechanism which should do the right thing for user space task in a simple scenario.  It's important to note that freezing can be incomplete.  In that case we return EBUSY.  This means that some tasks in the cgroup are busy doing something that prevents us from completely freezing the cgroup at this time.  After EBUSY, the cgroup will remain partially frozen -- reflected by freezer.state reporting "FREEZING" when read.  The state will remain "FREEZING" until one of these things happens:  	1) Userspace cancels the freezing operation by writing "RUNNING" to 		the freezer.state file 	2) Userspace retries the freezing operation by writing "FROZEN" to 		the freezer.state file (writing "FREEZING" is not legal 		and returns EIO) 	3) The tasks that blocked the cgroup from entering the "FROZEN" 		state disappear from the cgroup's set of tasks.  [akpm@linux-foundation.org: coding-style fixes] [akpm@linux-foundation.org: export thaw_process] Signed-off-by: Cedric Le Goater <clg@fr.ibm.com> Signed-off-by: Matt Helsley <matthltc@us.ibm.com> Acked-by: Serge E. Hallyn <serue@us.ibm.com> Tested-by: Matt Helsley <matthltc@us.ibm.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | sched |  | 16 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1339192769 |  | Merge branch 'sched-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull scheduler fixes from Ingo Molnar.  * 'sched-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   sched: Fix the relax_domain_level boot parameter   sched: Validate assumptions in sched_init_numa()   sched: Always initialize cpu-power   sched: Fix domain iteration   sched/rt: Fix lockdep annotation within find_lock_lowest_rq()   sched/numa: Load balance between remote nodes   sched/x86: Calculate booted cores after construction of sibling_mask
f | smpboot.c | s | 1.3K | 57 | Srivatsa S. Bhat | srivatsa.bhat@linux.vnet.ibm.com | 1337893088 |  | smpboot, idle: Fix comment mismatch over idle_threads_init()  The comment over idle_threads_init() really talks about the functionality of idle_init(). Move that comment to idle_init(), and add a suitable comment over idle_threads_init().  Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com> Cc: suresh.b.siddha@intel.com Cc: venki@google.com Cc: nikunj@linux.vnet.ibm.com Link: http://lkml.kernel.org/r/20120524151100.2549.66501.stgit@srivatsabhat.in.ibm.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | softirq.c | s | 22K | 783 | Linus Torvalds | torvalds@linux-foundation.org | 1332264729 |  | Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull timer changes for v3.4 from Ingo Molnar  * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (32 commits)   ntp: Fix integer overflow when setting time   math: Introduce div64_long   cs5535-clockevt: Allow the MFGPT IRQ to be shared   cs5535-clockevt: Don't ignore MFGPT on SMP-capable kernels   x86/time: Eliminate unused irq0_irqs counter   clocksource: scx200_hrt: Fix the build   x86/tsc: Reduce the TSC sync check time for core-siblings   timer: Fix bad idle check on irq entry   nohz: Remove ts->Einidle checks before restarting the tick   nohz: Remove update_ts_time_stat from tick_nohz_start_idle   clockevents: Leave the broadcast device in shutdown mode when not needed   clocksource: Load the ACPI PM clocksource asynchronously   clocksource: scx200_hrt: Convert scx200 to use clocksource_register_hz   clocksource: Get rid of clocksource_calc_mult_shift()   clocksource: dbx500: convert to clocksource_register_hz()   clocksource: scx200_hrt:  use pr_<level> instead of printk   time: Move common updates to a function   time: Reorder so the hot data is together   time: Remove most of xtime_lock usage in timekeeping.c   ntp: Add ntp_lock to replace xtime_locking   ...
f | exec_domain.c | s | 4.3K | 158 | Oleg Nesterov | oleg@redhat.com | 1281411905 |  | sys_personality: remove the bogus checks in sys_personality()->__set_personality() path  Cleanup, no functional changes.  - __set_personality() always changes ->exec_domain/personality, the   special case when ->exec_domain remains the same buys nothing but   complicates the code. Unify both cases to simplify the code.  - The -EINVAL check in sys_personality() was never right. If we assume   that set_personality() can fail we should check the value it returns   instead of verifying that task->personality was actually changed.    Remove it. Before the previous patch it was possible to hit this case   due to overflow problems, but this -EINVAL just indicated the kernel   bug.  OTOH, probably it makes sense to change lookup_exec_domain() to return ERR_PTR() instead of default_exec_domain if the search in exec_domains list fails, and report this error to the user-space.  But this means another user-space change, and we have in-kernel users which need fixes. For example, PER_OSF4 falls into PER_MASK for unkown reason and nobody cares to register this domain.  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Cc: Wenming Zhang <wezhang@redhat.com> Cc: "H. Peter Anvin" <hpa@zytor.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | irq |  | 19 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338835011 |  | Merge branches 'irq-urgent-for-linus' and 'smp-hotplug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull irq and smpboot updates from Thomas Gleixner:  "Just cleanup patches with no functional change and a fix for suspend   issues."  * 'irq-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   genirq: Introduce irq_do_set_affinity() to reduce duplicated code   genirq: Add IRQS_PENDING for nested and simple irq  * 'smp-hotplug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   smpboot, idle: Fix comment mismatch over idle_threads_init()   smpboot, idle: Optimize calls to smp_processor_id() in idle_threads_init()
f | kfifo.c | s | 12K | 508 | Srinivas Kandagatla | srinivas.kandagatla@st.com | 1334179477 |  | [media] kernel:kfifo: export __kfifo_max_r symbol  kfifo_avail expands to __kfifo_max_r which is not an exported symbol. Any kernel module using kfifo_avail will result in build failures because of this. This patch just exports __kfifo_max_r symbol to fix such problems in future.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@st.com> Acked-by: Stefani Seibold <stefani@seibold.net> Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>
f | cgroup_freezer.c | s | 9.1K | 325 | Tejun Heo | tj@kernel.org | 1333307395 |  | cgroup: convert all non-memcg controllers to the new cftype interface  Convert debug, freezer, cpuset, cpu_cgroup, cpuacct, net_prio, blkio, net_cls and device controllers to use the new cftype based interface. Termination entry is added to cftype arrays and populate callbacks are replaced with cgroup_subsys->base_cftypes initializations.  This is functionally identical transformation.  There shouldn't be any visible behavior change.  memcg is rather special and will be converted separately.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: Li Zefan <lizf@cn.fujitsu.com> Cc: Paul Menage <paul@paulmenage.org> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <peterz@infradead.org> Cc: "David S. Miller" <davem@davemloft.net> Cc: Vivek Goyal <vgoyal@redhat.com>
f | mutex.c | s | 13K | 427 | Thomas Gleixner | tglx@linutronix.de | 1330594083 |  | sched/rt: Use schedule_preempt_disabled()  Coccinelle based conversion.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/n/tip-24swm5zut3h9c4a6s46x8rws@git.kernel.org Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | uid16.c | s | 6.0K | 208 | Eric W. Biederman | ebiederm@xmission.com | 1336040921 |  | userns: Convert setting and getting uid and gid system calls to use kuid and kgid  Convert setregid, setgid, setreuid, setuid, setresuid, getresuid, setresgid, getresgid, setfsuid, setfsgid, getuid, geteuid, getgid, getegid, waitpid, waitid, wait4.  Convert userspace uids and gids into kuids and kgids before being placed on struct cred.  Convert struct cred kuids and kgids into userspace uids and gids when returning them.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | rcutorture.c | s | 61K | 1946 | Lai Jiangshan | laijs@cn.fujitsu.com | 1335808106 |  | rcu: Add rcutorture test for call_srcu()  Add srcu_torture_deferred_free() for srcu_ops so as to test the new call_srcu().  Rename the original srcu_ops to srcu_sync_ops.  Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | time.c | s | 18K | 636 | Thomas Gleixner | tglx@linutronix.de | 1331860675 |  | time: Remove bogus comments  There is no global irq lock which makes a syscall magically SMP safe. Remove the outdated comment concerning do_settimeofday() as well.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: John Stultz <john.stultz@linaro.org>
f | range.c | s | 2.9K | 129 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067211 |  | range: fix bogus misuse of module.h to get printk()  This file isn't doing anything with modules and so it should not be including <linux/module.h> just to get basic stuff like printk() and min/max.  Revector it to <linux/kernel.h>.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | panic.c | s | 10K | 417 | Seiji Aguchi | seiji.aguchi@hds.com | 1337342530 |  | kdump: Execute kmsg_dump(KMSG_DUMP_PANIC) after smp_send_stop()  This patch moves kmsg_dump(KMSG_DUMP_PANIC) below smp_send_stop(), to serialize the crash-logging process via smp_send_stop() and to thus retrieve a more stable crash image of all CPUs stopped.  Signed-off-by: Seiji Aguchi <seiji.aguchi@hds.com> Acked-by: Don Zickus <dzickus@redhat.com> Cc: dle-develop@lists.sourceforge.net <dle-develop@lists.sourceforge.net> Cc: Satoru Moriya <satoru.moriya@hds.com> Cc: Tony Luck <tony.luck@intel.com> Cc: a.p.zijlstra@chello.nl <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/5C4C569E8A4B9B42A84A977CF070A35B2E4D7A5CE2@USINDEVS01.corp.hds.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | hrtimer.c | s | 46K | 1577 | Linus Torvalds | torvalds@linux-foundation.org | 1322498632 |  | Merge branch 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  * 'timers-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   hrtimer: Fix extra wakeups from __remove_hrtimer()   timekeeping: add arch_offset hook to ktime_get functions   clocksource: Avoid selecting mult values that might overflow when adjusted   time: Improve documentation of timekeeeping_adjust()
f | bounds.c | s | 600B | 19 | Johannes Weiner | hannes@cmpxchg.org | 1300934788 |  | memcg: remove direct page_cgroup-to-page pointer  In struct page_cgroup, we have a full word for flags but only a few are reserved.  Use the remaining upper bits to encode, depending on configuration, the node or the section, to enable page_cgroup-to-page lookups without a direct pointer.  This saves a full word for every page in a system with memory cgroups enabled.  Signed-off-by: Johannes Weiner <hannes@cmpxchg.org> Acked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp> Cc: Balbir Singh <balbir@linux.vnet.ibm.com> Cc: Minchan Kim <minchan.kim@gmail.com> Cc: Randy Dunlap <randy.dunlap@oracle.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | test_kprobes.c | s | 8.5K | 346 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1287039327 |  | kprobes: Fix selftest to clear flags field for reusing probes  Fix selftest to clear flags field for reusing probes because the flags field can be modified by Kprobes. This also set NULL to kprobe.addr instead of 0.  Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Rusty Russell <rusty@rustcorp.com.au> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: 2nddept-manager@sdl.hitachi.co.jp LKML-Reference: <20101014031024.4100.50107.stgit@ltc236.sdl.hitachi.co.jp> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | user.c | s | 5.0K | 184 | Eric W. Biederman | ebiederm@xmission.com | 1337463880 |  | userns:  Silence silly gcc warning.  On 32bit builds gcc says: kernel/user.c:30:4: warning: this decimal constant is unsigned only in ISO C90 [enabled by default] kernel/user.c:38:4: warning: this decimal constant is unsigned only in ISO C90 [enabled by default]  Silence gcc by changing the constant 4294967295 to 4294967295U.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | rcutiny_plugin.h | s | 33K | 963 | Paul E. McKenney | paul.mckenney@linaro.org | 1335995307 |  | rcu: Make exit_rcu() more precise and consolidate  When running preemptible RCU, if a task exits in an RCU read-side critical section having blocked within that same RCU read-side critical section, the task must be removed from the list of tasks blocking a grace period (perhaps the current grace period, perhaps the next grace period, depending on timing).  The exit() path invokes exit_rcu() to do this cleanup.  However, the current implementation of exit_rcu() needlessly does the cleanup even if the task did not block within the current RCU read-side critical section, which wastes time and needlessly increases the size of the state space.  Fix this by only doing the cleanup if the current task is actually on the list of tasks blocking some grace period.  While we are at it, consolidate the two identical exit_rcu() functions into a single function.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Tested-by: Linus Torvalds <torvalds@linux-foundation.org>  Conflicts:  	kernel/rcupdate.c
f | watchdog.c | s | 15K | 523 | Don Zickus | dzickus@redhat.com | 1339669250 |  | watchdog: Quiet down the boot messages  A bunch of bugzillas have complained how noisy the nmi_watchdog is during boot-up especially with its expected failure cases (like virt and bios resource contention).  This is my attempt to quiet them down and keep it less confusing for the end user.  What I did is print the message for cpu0 and save it for future comparisons.  If future cpus have an identical message as cpu0, then don't print the redundant info. However, if a future cpu has a different message, happily print that loudly.  Before the change, you would see something like:      ..TIMER: vector=0x30 apic1=0 pin1=2 apic2=-1 pin2=-1     CPU0: Intel(R) Core(TM)2 Quad CPU    Q9550  @ 2.83GHz stepping 0a     Performance Events: PEBS fmt0+, Core2 events, Intel PMU driver.     ... version:                2     ... bit width:              40     ... generic registers:      2     ... value mask:             000000ffffffffff     ... max period:             000000007fffffff     ... fixed-purpose events:   3     ... event mask:             0000000700000003     NMI watchdog enabled, takes one hw-pmu counter.     Booting Node   0, Processors  #1     NMI watchdog enabled, takes one hw-pmu counter.      #2     NMI watchdog enabled, takes one hw-pmu counter.      #3 Ok.     NMI watchdog enabled, takes one hw-pmu counter.     Brought up 4 CPUs     Total of 4 processors activated (22607.24 BogoMIPS).  After the change, it is simplified to:      ..TIMER: vector=0x30 apic1=0 pin1=2 apic2=-1 pin2=-1     CPU0: Intel(R) Core(TM)2 Quad CPU    Q9550  @ 2.83GHz stepping 0a     Performance Events: PEBS fmt0+, Core2 events, Intel PMU driver.     ... version:                2     ... bit width:              40     ... generic registers:      2     ... value mask:             000000ffffffffff     ... max period:             000000007fffffff     ... fixed-purpose events:   3     ... event mask:             0000000700000003     NMI watchdog: enabled on all CPUs, permanently consumes one hw-PMU counter.     Booting Node   0, Processors  #1 #2 #3 Ok.     Brought up 4 CPUs  V2: little changes based on Joe Perches' feedback V3: printk cleanup based on Ingo's feedback; checkpatch fix V4: keep printk as one long line V5: Ingo fix ups  Reported-and-tested-by: Nathan Zimmer <nzimmer@sgi.com> Signed-off-by: Don Zickus <dzickus@redhat.com> Cc: nzimmer@sgi.com Cc: joe@perches.com Link: http://lkml.kernel.org/r/1339594548-17227-1-git-send-email-dzickus@redhat.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | rwsem.c | s | 2.3K | 99 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | fork.c | s | 44K | 1612 | Linus Torvalds | torvalds@linux-foundation.org | 1339116847 |  | Revert "mm: correctly synchronize rss-counters at exit/exec"  This reverts commit 40af1bbdca47e5c8a2044039bb78ca8fd8b20f94.  It's horribly and utterly broken for at least the following reasons:   - calling sync_mm_rss() from mmput() is fundamentally wrong, because    there's absolutely no reason to believe that the task that does the    mmput() always does it on its own VM.  Example: fork, ptrace, /proc -    you name it.   - calling it *after* having done mmdrop() on it is doubly insane, since    the mm struct may well be gone now.   - testing mm against NULL before you call it is insane too, since a NULL mm there would have caused oopses long before.  .. and those are just the three bugs I found before I decided to give up looking for me and revert it asap.  I should have caught it before I even took it, but I trusted Andrew too much.  Cc: Konstantin Khlebnikov <khlebnikov@openvz.org> Cc: Markus Trippelsdorf <markus@trippelsdorf.de> Cc: Hugh Dickins <hughd@google.com> Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | trace |  | 39 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1341355510 |  | Merge branch 'for-linus' of git://git.kernel.dk/linux-block  Pull block bits from Jens Axboe:  "As vacation is coming up, thought I'd better get rid of my pending   changes in my for-linus branch for this iteration.  It contains:     - Two patches for mtip32xx.  Killing a non-compliant sysfs interface      and moving it to debugfs, where it belongs.     - A few patches from Asias.  Two legit bug fixes, and one killing an      interface that is no longer in use.     - A patch from Jan, making the annoying partition ioctl warning a bit      less annoying, by restricting it to !CAP_SYS_RAWIO only.     - Three bug fixes for drbd from Lars Ellenberg.     - A fix for an old regression for umem, it hasn't really worked since      the plugging scheme was changed in 3.0.     - A few fixes from Tejun.     - A splice fix from Eric Dumazet, fixing an issue with pipe      resizing."  * 'for-linus' of git://git.kernel.dk/linux-block:   scsi: Silence unnecessary warnings about ioctl to partition   block: Drop dead function blk_abort_queue()   block: Mitigate lock unbalance caused by lock switching   block: Avoid missed wakeup in request waitqueue   umem: fix up unplugging   splice: fix racy pipe->buffers uses   drbd: fix null pointer dereference with on-congestion policy when diskless   drbd: fix list corruption by failing but already aborted reads   drbd: fix access of unallocated pages and kernel panic   xen/blkfront: Add WARN to deal with misbehaving backends.   blkcg: drop local variable @q from blkg_destroy()   mtip32xx: Create debugfs entries for troubleshooting   mtip32xx: Remove 'registers' and 'flags' from sysfs   blkcg: fix blkg_alloc() failure path   block: blkcg_policy_cfq shouldn't be used if !CONFIG_CFQ_GROUP_IOSCHED   block: fix return value on cfq_init() failure   mtip32xx: Remove version.h header file inclusion   xen/blkback: Copy id field when doing BLKIF_DISCARD.
f | posix-cpu-timers.c | s | 41K | 1441 | Martin Schwidefsky | schwidefsky@de.ibm.com | 1323957379 |  | [S390] cputime: add sparse checking and cleanup  Make cputime_t and cputime64_t nocast to enable sparse checking to detect incorrect use of cputime. Drop the cputime macros for simple scalar operations. The conversion macros are still needed.  Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
f | dma.c | s | 3.6K | 129 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | cred.c | s | 22K | 764 | Oleg Nesterov | oleg@redhat.com | 1337825501 |  | keys: kill task_struct->replacement_session_keyring  Kill the no longer used task_struct->replacement_session_keyring, update copy_creds() and exit_creds().  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Acked-by: David Howells <dhowells@redhat.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Richard Kuo <rkuo@codeaurora.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Alexander Gordeev <agordeev@redhat.com> Cc: Chris Zankel <chris@zankel.net> Cc: David Smith <dsmith@redhat.com> Cc: "Frank Ch. Eigler" <fche@redhat.com> Cc: Geert Uytterhoeven <geert@linux-m68k.org> Cc: Larry Woodman <lwoodman@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Tejun Heo <tj@kernel.org> Cc: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | power |  | 17 items |  | Minho Ban | mhban@samsung.com | 1337366699 |  | PM / Hibernate: Use get_gendisk to verify partition if resume_file is integer format  Sometimes resume= parameter comes in integer style (e.g. major:minor) and then name_to_dev_t can not detect partition properly. (especially async device like usb, mmc).  This patch calls get_gendisk() if resumewait is true and resume_file is in integer format to work around this problem.  Signed-off-by: Minho Ban <mhban@samsung.com> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | freezer.c | s | 4.2K | 144 | Marcos Paulo de Souza | marcos.mage@gmail.com | 1330898934 |  | PM / Freezer: Remove references to TIF_FREEZE in comments  This patch removes all the references in the code about the TIF_FREEZE flag removed by commit a3201227f803ad7fd43180c5195dbe5a2bf998aa      freezer: make freezing() test freeze conditions in effect instead of TIF_FREEZE  There still are some references to TIF_FREEZE in Documentation/power/freezing-of-tasks.txt, but it looks like that documentation needs more thorough work to reflect how the new freezer works, and hence merely removing the references to TIF_FREEZE won't really help. So I have not touched that part in this patch.  Suggested-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com> Signed-off-by: Marcos Paulo de Souza <marcos.mage@gmail.com> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | lockdep_internals.h | s | 4.5K | 145 | Frederic Weisbecker | fweisbec@gmail.com | 1272944296 |  | lockdep: No need to disable preemption in debug atomic ops  No need to disable preemption in the debug_atomic_* ops, as we ensure interrupts are disabled already.  So let's use the __this_cpu_ops() rather than this_cpu_ops() that enclose the ops in a preempt disabled section.  Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com> Cc: Peter Zijlstra <peterz@infradead.org>
f | rcupdate.c | s | 10K | 328 | Paul E. McKenney | paul.mckenney@linaro.org | 1335995307 |  | rcu: Make exit_rcu() more precise and consolidate  When running preemptible RCU, if a task exits in an RCU read-side critical section having blocked within that same RCU read-side critical section, the task must be removed from the list of tasks blocking a grace period (perhaps the current grace period, perhaps the next grace period, depending on timing).  The exit() path invokes exit_rcu() to do this cleanup.  However, the current implementation of exit_rcu() needlessly does the cleanup even if the task did not block within the current RCU read-side critical section, which wastes time and needlessly increases the size of the state space.  Fix this by only doing the cleanup if the current task is actually on the list of tasks blocking some grace period.  While we are at it, consolidate the two identical exit_rcu() functions into a single function.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Tested-by: Linus Torvalds <torvalds@linux-foundation.org>  Conflicts:  	kernel/rcupdate.c
f | pid.c | s | 14K | 495 | Tim Bird | tim.bird@am.sony.com | 1337833701 |  | mm: add a low limit to alloc_large_system_hash  UDP stack needs a minimum hash size value for proper operation and also uses alloc_large_system_hash() for proper NUMA distribution of its hash tables and automatic sizing depending on available system memory.  On some low memory situations, udp_table_init() must ignore the alloc_large_system_hash() result and reallocs a bigger memory area.  As we cannot easily free old hash table, we leak it and kmemleak can issue a warning.  This patch adds a low limit parameter to alloc_large_system_hash() to solve this problem.  We then specify UDP_HTABLE_SIZE_MIN for UDP/UDPLite hash table allocation.  Reported-by: Mark Asselstine <mark.asselstine@windriver.com> Reported-by: Tim Bird <tim.bird@am.sony.com> Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Cc: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | ksysfs.c | s | 5.1K | 195 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067213 |  | kernel: ksysfs.c is implicitly using stat.h  With the module.h usage cleanup, we'll get this:  kernel/ksysfs.c:161: error: ‘S_IRUGO’ undeclared here (not in a function) make[2]: *** [kernel/ksysfs.o] Error 1  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | spinlock.c | s | 9.5K | 345 | Raghavendra K T | raghavendra.kt@linux.vnet.ibm.com | 1332505137 |  | locking/kconfig: Simplify INLINE_SPIN_UNLOCK usage  Get rid of INLINE_SPIN_UNLOCK entirely replacing it with UNINLINE_SPIN_UNLOCK instead of the reverse meaning.  Whoever wants to change the default spinlock inlining behavior and uninline the spinlocks for some weird reason, such as spinlock debugging, paravirt etc. can now all just select UNINLINE_SPIN_UNLOCK  Original discussion at: https://lkml.org/lkml/2012/3/21/357  Suggested-by: Linus Torvalds <torvalds@linux-foundation.org> Signed-off-by: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Ralf Baechle <ralf@linux-mips.org> Cc: Chris Metcalf <cmetcalf@tilera.com> Cc: Chris Zankel <chris@zankel.net> Cc: linux-mips@linux-mips.org Link: http://lkml.kernel.org/r/20120322095502.30866.75756.sendpatchset@codeblue [ tidied up the changelog a bit ] Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | sys.c | s | 52K | 1950 | Cyrill Gorcunov | gorcunov@openvz.org | 1340228376 |  | c/r: prctl: Move PR_GET_TID_ADDRESS to a proper place  During merging of PR_GET_TID_ADDRESS patch the code has been misplaced (it happened to appear under PR_MCE_KILL) in result noone can use this option.  Fix it by moving code snippet to a proper place.  Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org> Acked-by: Kees Cook <keescook@chromium.org> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Pavel Emelyanov <xemul@parallels.com> Cc: Andrey Vagin <avagin@openvz.org> Cc: Serge Hallyn <serge.hallyn@canonical.com> Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | compat.c | s | 30K | 1040 | Al Viro | viro@zeniv.linux.org.uk | 1337658750 |  | new helper: sigsuspend()  guts of saved_sigmask-based sigsuspend/rt_sigsuspend.  Takes kernel sigset_t *.  Open-coded instances replaced with calling it.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | profile.c | s | 16K | 560 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | workqueue_sched.h | s | 311B | 9 | Tejun Heo | tj@kernel.org | 1277798834 |  | workqueue: implement concurrency managed dynamic worker pool  Instead of creating a worker for each cwq and putting it into the shared pool, manage per-cpu workers dynamically.  Works aren't supposed to be cpu cycle hogs and maintaining just enough concurrency to prevent work processing from stalling due to lack of processing context is optimal.  gcwq keeps the number of concurrent active workers to minimum but no less.  As long as there's one or more running workers on the cpu, no new worker is scheduled so that works can be processed in batch as much as possible but when the last running worker blocks, gcwq immediately schedules new worker so that the cpu doesn't sit idle while there are works to be processed.  gcwq always keeps at least single idle worker around.  When a new worker is necessary and the worker is the last idle one, the worker assumes the role of "manager" and manages the worker pool - ie. creates another worker.  Forward-progress is guaranteed by having dedicated rescue workers for workqueues which may be necessary while creating a new worker.  When the manager is having problem creating a new worker, mayday timer activates and rescue workers are summoned to the cpu and execute works which might be necessary to create new workers.  Trustee is expanded to serve the role of manager while a CPU is being taken down and stays down.  As no new works are supposed to be queued on a dead cpu, it just needs to drain all the existing ones.  Trustee continues to try to create new workers and summon rescuers as long as there are pending works.  If the CPU is brought back up while the trustee is still trying to drain the gcwq from the previous offlining, the trustee will kill all idles ones and tell workers which are still busy to rebind to the cpu, and pass control over to gcwq which assumes the manager role as necessary.  Concurrency managed worker pool reduces the number of workers drastically.  Only workers which are necessary to keep the processing going are created and kept.  Also, it reduces cache footprint by avoiding unnecessarily switching contexts between different workers.  Please note that this patch does not increase max_active of any workqueue.  All workqueues can still only process one work per cpu.  Signed-off-by: Tejun Heo <tj@kernel.org>
f | ptrace.c | s | 26K | 907 | Eric W. Biederman | ebiederm@xmission.com | 1336040931 |  | userns: Convert ptrace, kill, set_priority permission checks to work with kuids and kgids  Update the permission checks to use the new uid_eq and gid_eq helpers and remove the now unnecessary user_ns equality comparison.  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | rcutree_trace.c | s | 13K | 448 | Paul E. McKenney | paul.mckenney@linaro.org | 1336598874 |  | rcu: Make rcu_barrier() less disruptive  The rcu_barrier() primitive interrupts each and every CPU, registering a callback on every CPU.  Once all of these callbacks have been invoked, rcu_barrier() knows that every callback that was registered before the call to rcu_barrier() has also been invoked.  However, there is no point in registering a callback on a CPU that currently has no callbacks, most especially if that CPU is in a deep idle state.  This commit therefore makes rcu_barrier() avoid interrupting CPUs that have no callbacks.  Doing this requires reworking the handling of orphaned callbacks, otherwise callbacks could slip through rcu_barrier()'s net by being orphaned from a CPU that rcu_barrier() had not yet interrupted to a CPU that rcu_barrier() had already interrupted. This reworking was needed anyway to take a first step towards weaning RCU from the CPU_DYING notifier's use of stop_cpu().  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | mutex-debug.c | s | 2.9K | 97 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | configs.c | s | 2.8K | 83 | Stephen Boyd | bebarino@gmail.com | 1311652635 |  | kernel/configs.c: include MODULE_*() when CONFIG_IKCONFIG_PROC=n  If CONFIG_IKCONFIG=m but CONFIG_IKCONFIG_PROC=n we get a module that has no MODULE_LICENSE definition.  Move the MODULE_*() definitions outside the CONFIG_IKCONFIG_PROC #ifdef to prevent this configuration from tainting the kernel.  Signed-off-by: Stephen Boyd <bebarino@gmail.com> Acked-by: Randy Dunlap <rdunlap@xenotime.net> Acked-by: WANG Cong <xiyou.wangcong@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | rtmutex-debug.c | s | 4.7K | 158 | Ben Hutchings | ben@decadent.org.uk | 1323155809 |  | lockdep, rtmutex, bug: Show taint flags on error  Show the taint flags in all lockdep and rtmutex-debug error messages.  Signed-off-by: Ben Hutchings <ben@decadent.org.uk> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1319773015.6759.30.camel@deadeye Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | notifier.c | s | 16K | 503 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | rtmutex.c | s | 26K | 879 | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1323628398 |  | Revert "rcu: Permit rt_mutex_unlock() with irqs disabled"  This reverts commit 5342e269b2b58ee0b0b4168a94087faaa60d0567.  The approach taken in this patch was deemed too abusive to mutexes, and thus too likely to result in maintenance problems in the future. Instead, we will disallow RCU read-side critical sections that partially overlap with interrupt-disbled code segments.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | taskstats.c | s | 15K | 602 | Linus Torvalds | torvalds@linux-foundation.org | 1316477077 |  | Make TASKSTATS require root access  Ok, this isn't optimal, since it means that 'iotop' needs admin capabilities, and we may have to work on this some more.  But at the same time it is very much not acceptable to let anybody just read anybody elses IO statistics quite at this level.  Use of the GENL_ADMIN_PERM suggested by Johannes Berg as an alternative to checking the capabilities by hand.  Reported-by: Vasiliy Kulikov <segoon@openwall.com> Cc: Johannes Berg <johannes.berg@intel.com> Acked-by: Balbir Singh <bsingharora@gmail.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | rcutree_plugin.h | s | 68K | 2102 | Paul E. McKenney | paul.mckenney@linaro.org | 1339040608 |  | rcu: Precompute RCU_FAST_NO_HZ timer offsets  When a CPU is entering dyntick-idle mode, tick_nohz_stop_sched_tick() calls rcu_needs_cpu() see if RCU needs that CPU, and, if not, computes the next wakeup time based on the timer wheels.  Only later, when actually entering the idle loop, rcu_prepare_for_idle() will be invoked.  In some cases, rcu_prepare_for_idle() will post timers to wake the CPU back up. But all for naught: The next wakeup time for the CPU has already been computed, and posting a timer afterwards does not force that wakeup time to be recomputed.  This means that rcu_prepare_for_idle()'s have no effect.  This is not a problem on a busy system because something else will wake up the CPU soon enough.  However, on lightly loaded systems, the CPU might stay asleep for a considerable length of time.  If that CPU has a callback that the rest of the system is waiting on, the system might run very slowly or (in theory) even hang.  This commit avoids this problem by having rcu_needs_cpu() give tick_nohz_stop_sched_tick() an estimate of when RCU will need the CPU to wake back up, which tick_nohz_stop_sched_tick() takes into account when programming the CPU's wakeup time.  An alternative approach is for rcu_prepare_for_idle() to use hrtimers instead of normal timers, but timers are much more efficient than are hrtimers for frequently and repeatedly posting and cancelling a given timer, which is exactly what RCU_FAST_NO_HZ does.  Reported-by: Pascal Chapperon <pascal.chapperon@wanadoo.fr> Reported-by: Heiko Carstens <heiko.carstens@de.ibm.com> Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Tested-by: Heiko Carstens <heiko.carstens@de.ibm.com> Tested-by: Pascal Chapperon <pascal.chapperon@wanadoo.fr>
f | futex_compat.c | s | 4.5K | 169 | Kees Cook | keescook@chromium.org | 1333013837 |  | futex: Mark get_robust_list as deprecated  Notify get_robust_list users that the syscall is going away.  Suggested-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Kees Cook <keescook@chromium.org> Cc: Randy Dunlap <rdunlap@xenotime.net> Cc: Darren Hart <dvhart@linux.intel.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Jiri Kosina <jkosina@suse.cz> Cc: Eric W. Biederman <ebiederm@xmission.com> Cc: David Howells <dhowells@redhat.com> Cc: Serge E. Hallyn <serge.hallyn@canonical.com> Cc: kernel-hardening@lists.openwall.com Cc: spender@grsecurity.net Link: http://lkml.kernel.org/r/20120323190855.GA27213@www.outflux.net Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | audit.c | s | 40K | 1358 | Al Viro | viro@zeniv.linux.org.uk | 1332293380 |  | constify path argument of audit_log_d_path()  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | timeconst.pl | s | 7.2K | 338 | H. Peter Anvin | hpa@zytor.com | 1209770322 |  | Make constants in kernel/timeconst.h fixed 64 bits  Force constants in kernel/timeconst.h (except shift counts) to be 64 bits, using U64_C() constructor macros, and eliminate constants that cannot be represented at all in 64 bits.  This avoids warnings with some gcc versions.  Drop generating 64-bit constants, since we have no real hope of getting a full set (operation on 64-bit values requires a 128-bit intermediate result, which gcc only supports on 64-bit platforms, and only with libgcc support on some.)  Note that the use of these constants does not depend on if we are on a 32- or 64-bit architecture.  This resolves Bugzilla 10153.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | cpuset.c | s | 72K | 2258 | Linus Torvalds | torvalds@linux-foundation.org | 1337733619 |  | Merge branch 'for-3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/cgroup  Pull cgroup updates from Tejun Heo:  "cgroup file type addition / removal is updated so that file types are   added and removed instead of individual files so that dynamic file   type addition / removal can be implemented by cgroup and used by   controllers.  blkio controller changes which will come through block   tree are dependent on this.  Other changes include res_counter cleanup   and disallowing kthread / PF_THREAD_BOUND threads to be attached to   non-root cgroups.    There's a reported bug with the file type addition / removal handling   which can lead to oops on cgroup umount.  The issue is being looked   into.  It shouldn't cause problems for most setups and isn't a   security concern."  Fix up trivial conflict in Documentation/feature-removal-schedule.txt  * 'for-3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/cgroup: (21 commits)   res_counter: Account max_usage when calling res_counter_charge_nofail()   res_counter: Merge res_counter_charge and res_counter_charge_nofail   cgroups: disallow attaching kthreadd or PF_THREAD_BOUND threads   cgroup: remove cgroup_subsys->populate()   cgroup: get rid of populate for memcg   cgroup: pass struct mem_cgroup instead of struct cgroup to socket memcg   cgroup: make css->refcnt clearing on cgroup removal optional   cgroup: use negative bias on css->refcnt to block css_tryget()   cgroup: implement cgroup_rm_cftypes()   cgroup: introduce struct cfent   cgroup: relocate __d_cgrp() and __d_cft()   cgroup: remove cgroup_add_file[s]()   cgroup: convert memcg controller to the new cftype interface   memcg: always create memsw files if CONFIG_CGROUP_MEM_RES_CTLR_SWAP   cgroup: convert all non-memcg controllers to the new cftype interface   cgroup: relocate cftype and cgroup_subsys definitions in controllers   cgroup: merge cft_release_agent cftype array into the base files array   cgroup: implement cgroup_add_cftypes() and friends   cgroup: build list of all cgroups under a given cgroupfs_root   cgroup: move cgroup_clear_directory() call out of cgroup_populate_dir()   ...
f | sysctl.c | s | 56K | 2381 | Kees Cook | keescook@chromium.org | 1333601503 |  | sysctl: fix write access to dmesg_restrict/kptr_restrict  Commit bfdc0b4 adds code to restrict access to dmesg_restrict, however, it incorrectly alters kptr_restrict rather than dmesg_restrict.  The original patch from Richard Weinberger (https://lkml.org/lkml/2011/3/14/362) alters dmesg_restrict as expected, and so the patch seems to have been misapplied.  This adds the CAP_SYS_ADMIN check to both dmesg_restrict and kptr_restrict, since both are sensitive.  Reported-by: Phillip Lougher <plougher@redhat.com> Signed-off-by: Kees Cook <keescook@chromium.org> Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Acked-by: Richard Weinberger <richard@nod.at> Cc: stable@vger.kernel.org Signed-off-by: James Morris <james.l.morris@oracle.com>
f | latencytop.c | s | 7.6K | 248 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Kconfig.hz | g | 1.7K |  | OGAWA Hirofumi | hirofumi@mail.parknet.co.jp | 1217248658 |  | sched: fix SCHED_HRTICK dependency  Currently, it seems SCHED_HRTICK allowed for !SMP. But, it seems to have no dependency of it. Fix it.  Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | padata.c | s | 27K | 912 | Steffen Klassert | steffen.klassert@secunet.com | 1333021966 |  | padata: Fix cpu hotplug  We don't remove the cpu that went offline from our cpumasks on cpu hotplug. This got lost somewhere along the line, so restore it. This fixes a hang of the padata instance on cpu hotplug.  Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com> Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
f | tsacct.c | s | 4.3K | 142 | Martin Schwidefsky | schwidefsky@de.ibm.com | 1323957379 |  | [S390] cputime: add sparse checking and cleanup  Make cputime_t and cputime64_t nocast to enable sparse checking to detect incorrect use of cputime. Drop the cputime macros for simple scalar operations. The conversion macros are still needed.  Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
f | kthread.c | s | 12K | 407 | Tejun Heo | tj@kernel.org | 1322069297 |  | freezer: kill unused set_freezable_with_signal()  There's no in-kernel user of set_freezable_with_signal() left.  Mixing TIF_SIGPENDING with kernel threads can lead to nasty corner cases as kernel threads never travel signal delivery path on their own.  e.g. the current implementation is buggy in the cancelation path of __thaw_task().  It calls recalc_sigpending_and_wake() in an attempt to clear TIF_SIGPENDING but the function never clears it regardless of sigpending state.  This means that signallable freezable kthreads may continue executing with !freezing() && stuck TIF_SIGPENDING, which can be troublesome.  This patch removes set_freezable_with_signal() along with PF_FREEZER_NOSIG and recalc_sigpending*() calls in freezer.  User tasks get TIF_SIGPENDING, kernel tasks get woken up and the spurious sigpending is dealt with in the usual signal delivery path.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: Oleg Nesterov <oleg@redhat.com>
f | crash_dump.c | s | 1.2K | 41 | Linus Torvalds | torvalds@linux-foundation.org | 1320637487 |  | Merge branch 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux  * 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux: (230 commits)   Revert "tracing: Include module.h in define_trace.h"   irq: don't put module.h into irq.h for tracking irqgen modules.   bluetooth: macroize two small inlines to avoid module.h   ip_vs.h: fix implicit use of module_get/module_put from module.h   nf_conntrack.h: fix up fallout from implicit moduleparam.h presence   include: replace linux/module.h with "struct module" wherever possible   include: convert various register fcns to macros to avoid include chaining   crypto.h: remove unused crypto_tfm_alg_modname() inline   uwb.h: fix implicit use of asm/page.h for PAGE_SIZE   pm_runtime.h: explicitly requires notifier.h   linux/dmaengine.h: fix implicit use of bitmap.h and asm/page.h   miscdevice.h: fix up implicit use of lists and types   stop_machine.h: fix implicit use of smp.h for smp_processor_id   of: fix implicit use of errno.h in include/linux/of.h   of_platform.h: delete needless include <linux/module.h>   acpi: remove module.h include from platform/aclinux.h   miscdevice.h: delete unnecessary inclusion of module.h   device_cgroup.h: delete needless include <linux/module.h>   net: sch_generic remove redundant use of <linux/module.h>   net: inet_timewait_sock doesnt need <linux/module.h>   ...  Fix up trivial conflicts (other header files, and  removal of the ab3550 mfd driver) in  - drivers/media/dvb/frontends/dibx000_common.c  - drivers/media/video/{mt9m111.c,ov6650.c}  - drivers/mfd/ab3550-core.c  - include/linux/dmaengine.h
f | kprobes.c | s | 56K | 1944 | Prashanth Nageshappa | prashanth@linux.vnet.ibm.com | 1330991382 |  | kprobes: return proper error code from register_kprobe()  register_kprobe() aborts if the address of the new request falls in a prohibited area (such as ftrace pouch, __kprobes annotated functions, non-kernel text addresses, jump label text).  We however don't return the right error on this abort, resulting in a silent failure - incorrect adding/reporting of kprobes ('perf probe do_fork+18' or 'perf probe mcount' for instance).  In V2 we are incorporating Masami Hiramatsu's  feedback.  This patch fixes it by returning -EINVAL upon failure.  While we are here, rename the label used for exit to be more appropriate.  Signed-off-by: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Signed-off-by: Prashanth K Nageshappa <prashanth@linux.vnet.ibm.com> Acked-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Jason Baron <jbaron@redhat.com> Cc: <stable@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | extable.c | s | 3.9K | 122 | David Daney | david.daney@cavium.com | 1334873215 |  | extable: Skip sorting if sorted at build time.  If the build program sortextable has already sorted the exception table, don't sort it again.  Signed-off-by: David Daney <david.daney@cavium.com> Link: http://lkml.kernel.org/r/1334872799-14589-3-git-send-email-ddaney.cavm@gmail.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | nsproxy.c | s | 5.9K | 236 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | backtracetest.c | s | 2.1K | 74 | Vegard Nossum | vegard.nossum@gmail.com | 1214582956 |  | backtrace: replace timer with tasklet + completions  On qemu, the backtrace would show up _after_ the "end of backtrace testing" message.  This patch changes it to use completions instead, which will guarantee that no such race exists.  Cc: Arjan van de Ven <arjan@infradead.org> Signed-off-by: Vegard Nossum <vegard.nossum@gmail.com> Cc: Arjan van de Ven <arjan@infradead.org> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | rcutree.h | s | 19K | 466 | Paul E. McKenney | paul.mckenney@linaro.org | 1339040608 |  | rcu: Move RCU_FAST_NO_HZ per-CPU variables to rcu_dynticks structure  The RCU_FAST_NO_HZ code relies on a number of per-CPU variables. This works, but is hidden from someone scanning the data structures in rcutree.h.  This commit therefore converts these per-CPU variables to fields in the per-CPU rcu_dynticks structures.  Suggested-by: Peter Zijlstra <peterz@infradead.org> Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Tested-by: Heiko Carstens <heiko.carstens@de.ibm.com> Tested-by: Pascal Chapperon <pascal.chapperon@wanadoo.fr>
f | futex.c | s | 70K | 2390 | Kees Cook | keescook@chromium.org | 1333013837 |  | futex: Mark get_robust_list as deprecated  Notify get_robust_list users that the syscall is going away.  Suggested-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Kees Cook <keescook@chromium.org> Cc: Randy Dunlap <rdunlap@xenotime.net> Cc: Darren Hart <dvhart@linux.intel.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Jiri Kosina <jkosina@suse.cz> Cc: Eric W. Biederman <ebiederm@xmission.com> Cc: David Howells <dhowells@redhat.com> Cc: Serge E. Hallyn <serge.hallyn@canonical.com> Cc: kernel-hardening@lists.openwall.com Cc: spender@grsecurity.net Link: http://lkml.kernel.org/r/20120323190855.GA27213@www.outflux.net Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | jump_label.c | s | 10K | 376 | Jason Baron | jbaron@redhat.com | 1330455668 |  | static keys: Inline the static_key_enabled() function  In the jump label enabled case, calling static_key_enabled() results in a function call. The function returns the results of a compare, so it really doesn't need the overhead of a full function call. Let's make it 'static inline' for both the jump label enabled and disabled cases.  Signed-off-by: Jason Baron <jbaron@redhat.com> Cc: a.p.zijlstra@chello.nl Cc: rostedt@goodmis.org Cc: mathieu.desnoyers@polymtl.ca Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Link: http://lkml.kernel.org/r/201202281849.q1SIn1p2023270@int-mx10.intmail.prod.int.phx2.redhat.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | kallsyms.c | s | 14K | 514 | Stephen Boyd | sboyd@codeaurora.org | 1338333752 |  | vsprintf: fix %ps on non symbols when using kallsyms  Using %ps in a printk format will sometimes fail silently and print the empty string if the address passed in does not match a symbol that kallsyms knows about.  But using %pS will fall back to printing the full address if kallsyms can't find the symbol.  Make %ps act the same as %pS by falling back to printing the address.  While we're here also make %ps print the module that a symbol comes from so that it matches what %pS already does.  Take this simple function for example (in a module):  	static void test_printk(void) 	{ 		int test; 		pr_info("with pS: %pS\n", &test); 		pr_info("with ps: %ps\n", &test); 	}  Before this patch:   with pS: 0xdff7df44  with ps:  After this patch:   with pS: 0xdff7df44  with ps: 0xdff7df44  Signed-off-by: Stephen Boyd <sboyd@codeaurora.org> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | cgroup.c | s | 145K | 4866 | Salman Qazi | sqazi@google.com | 1340059082 |  | cgroups: Account for CSS_DEACT_BIAS in __css_put  When we fixed the race between atomic_dec and css_refcnt, we missed the fact that css_refcnt internally subtracts CSS_DEACT_BIAS to get the actual reference count.  This can potentially cause a refcount leak if __css_put races with cgroup_clear_css_refs.  Signed-off-by: Salman Qazi <sqazi@google.com> Acked-by: Li Zefan <lizefan@huawei.com> Signed-off-by: Tejun Heo <tj@kernel.org>
f | kexec.c | s | 39K | 1387 | Linus Torvalds | torvalds@linux-foundation.org | 1332980368 |  | Merge branch 'akpm' (Andrew's patch-bomb)  Merge third batch of patches from Andrew Morton:  - Some MM stragglers  - core SMP library cleanups (on_each_cpu_mask)  - Some IPI optimisations  - kexec  - kdump  - IPMI  - the radix-tree iterator work  - various other misc bits.   "That'll do for -rc1.  I still have ~10 patches for 3.4, will send   those along when they've baked a little more."  * emailed from Andrew Morton <akpm@linux-foundation.org>: (35 commits)   backlight: fix typo in tosa_lcd.c   crc32: add help text for the algorithm select option   mm: move hugepage test examples to tools/testing/selftests/vm   mm: move slabinfo.c to tools/vm   mm: move page-types.c from Documentation to tools/vm   selftests/Makefile: make `run_tests' depend on `all'   selftests: launch individual selftests from the main Makefile   radix-tree: use iterators in find_get_pages* functions   radix-tree: rewrite gang lookup using iterator   radix-tree: introduce bit-optimized iterator   fs/proc/namespaces.c: prevent crash when ns_entries[] is empty   nbd: rename the nbd_device variable from lo to nbd   pidns: add reboot_pid_ns() to handle the reboot syscall   sysctl: use bitmap library functions   ipmi: use locks on watchdog timeout set on reboot   ipmi: simplify locking   ipmi: fix message handling during panics   ipmi: use a tasklet for handling received messages   ipmi: increase KCS timeouts   ipmi: decrease the IPMI message transaction time in interrupt mode   ...
f | async.c | s | 9.0K | 253 | Rusty Russell | rusty@rustcorp.com.au | 1326409338 |  | kernel/async: remove redundant declaration.  It's in linux/init.h, and I'm about to change it to a bool.  Cc: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
f | Kconfig.preempt | g | 2.1K |  | Raghavendra K T | raghavendra.kt@linux.vnet.ibm.com | 1332505137 |  | locking/kconfig: Simplify INLINE_SPIN_UNLOCK usage  Get rid of INLINE_SPIN_UNLOCK entirely replacing it with UNINLINE_SPIN_UNLOCK instead of the reverse meaning.  Whoever wants to change the default spinlock inlining behavior and uninline the spinlocks for some weird reason, such as spinlock debugging, paravirt etc. can now all just select UNINLINE_SPIN_UNLOCK  Original discussion at: https://lkml.org/lkml/2012/3/21/357  Suggested-by: Linus Torvalds <torvalds@linux-foundation.org> Signed-off-by: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Ralf Baechle <ralf@linux-mips.org> Cc: Chris Metcalf <cmetcalf@tilera.com> Cc: Chris Zankel <chris@zankel.net> Cc: linux-mips@linux-mips.org Link: http://lkml.kernel.org/r/20120322095502.30866.75756.sendpatchset@codeblue [ tidied up the changelog a bit ] Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | timer.c | s | 49K | 1619 | Linus Torvalds | torvalds@linux-foundation.org | 1337820159 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace  Pull user namespace enhancements from Eric Biederman:  "This is a course correction for the user namespace, so that we can   reach an inexpensive, maintainable, and reasonably complete   implementation.    Highlights:    - Config guards make it impossible to enable the user namespace and      code that has not been converted to be user namespace safe.     - Use of the new kuid_t type ensures the if you somehow get past the      config guards the kernel will encounter type errors if you enable      user namespaces and attempt to compile in code whose permission      checks have not been updated to be user namespace safe.     - All uids from child user namespaces are mapped into the initial      user namespace before they are processed.  Removing the need to add      an additional check to see if the user namespace of the compared      uids remains the same.     - With the user namespaces compiled out the performance is as good or      better than it is today.     - For most operations absolutely nothing changes performance or      operationally with the user namespace enabled.     - The worst case performance I could come up with was timing 1      billion cache cold stat operations with the user namespace code      enabled.  This went from 156s to 164s on my laptop (or 156ns to      164ns per stat operation).     - (uid_t)-1 and (gid_t)-1 are reserved as an internal error value.      Most uid/gid setting system calls treat these value specially      anyway so attempting to use -1 as a uid would likely cause      entertaining failures in userspace.     - If setuid is called with a uid that can not be mapped setuid fails.      I have looked at sendmail, login, ssh and every other program I      could think of that would call setuid and they all check for and      handle the case where setuid fails.     - If stat or a similar system call is called from a context in which      we can not map a uid we lie and return overflowuid.  The LFS      experience suggests not lying and returning an error code might be      better, but the historical precedent with uids is different and I      can not think of anything that would break by lying about a uid we      can't map.     - Capabilities are localized to the current user namespace making it      safe to give the initial user in a user namespace all capabilities.    My git tree covers all of the modifications needed to convert the core   kernel and enough changes to make a system bootable to runlevel 1."  Fix up trivial conflicts due to nearby independent changes in fs/stat.c  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace: (46 commits)   userns:  Silence silly gcc warning.   cred: use correct cred accessor with regards to rcu read lock   userns: Convert the move_pages, and migrate_pages permission checks to use uid_eq   userns: Convert cgroup permission checks to use uid_eq   userns: Convert tmpfs to use kuid and kgid where appropriate   userns: Convert sysfs to use kgid/kuid where appropriate   userns: Convert sysctl permission checks to use kuid and kgids.   userns: Convert proc to use kuid/kgid where appropriate   userns: Convert ext4 to user kuid/kgid where appropriate   userns: Convert ext3 to use kuid/kgid where appropriate   userns: Convert ext2 to use kuid/kgid where appropriate.   userns: Convert devpts to use kuid/kgid where appropriate   userns: Convert binary formats to use kuid/kgid where appropriate   userns: Add negative depends on entries to avoid building code that is userns unsafe   userns: signal remove unnecessary map_cred_ns   userns: Teach inode_capable to understand inodes whose uids map to other namespaces.   userns: Fail exec for suid and sgid binaries with ids outside our user namespace.   userns: Convert stat to return values mapped from kuids and kgids   userns: Convert user specfied uids and gids in chown into kuids and kgid   userns: Use uid_eq gid_eq helpers when comparing kuids and kgids in the vfs   ...
f | lockdep_proc.c | s | 16K | 574 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | user-return-notifier.c | s | 1.3K | 38 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | stacktrace.c | s | 1.1K | 38 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | module.c | s | 89K | 3043 | David Howells | dhowells@redhat.com | 1337777933 |  | Guard check in module loader against integer overflow  The check:  	if (len < hdr->e_shoff + hdr->e_shnum * sizeof(Elf_Shdr))  may not work if there's an overflow in the right-hand side of the condition.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
f | auditfilter.c | s | 33K | 1229 | Eric Paris | eparis@redhat.com | 1326835021 |  | audit: allow interfield comparison in audit rules  We wish to be able to audit when a uid=500 task accesses a file which is uid=0.  Or vice versa.  This patch introduces a new audit filter type AUDIT_FIELD_COMPARE which takes as an 'enum' which indicates which fields should be compared.  At this point we only define the task->uid vs inode->uid, but other comparisons can be added.  Signed-off-by: Eric Paris <eparis@redhat.com>
f | relay.c | s | 32K | 1183 | Eric Dumazet | edumazet@google.com | 1339615002 |  | splice: fix racy pipe->buffers uses  Dave Jones reported a kernel BUG at mm/slub.c:3474! triggered by splice_shrink_spd() called from vmsplice_to_pipe()  commit 35f3d14dbbc5 (pipe: add support for shrinking and growing pipes) added capability to adjust pipe->buffers.  Problem is some paths don't hold pipe mutex and assume pipe->buffers doesn't change for their duration.  Fix this by adding nr_pages_max field in struct splice_pipe_desc, and use it in place of pipe->buffers where appropriate.  splice_shrink_spd() loses its struct pipe_inode_info argument.  Reported-by: Dave Jones <davej@redhat.com> Signed-off-by: Eric Dumazet <edumazet@google.com> Cc: Jens Axboe <axboe@kernel.dk> Cc: Alexander Viro <viro@zeniv.linux.org.uk> Cc: Tom Herbert <therbert@google.com> Cc: stable <stable@vger.kernel.org> # 2.6.35 Tested-by: Dave Jones <davej@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | mutex.h | s | 1.3K | 42 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1302763953 |  | mutex: Use p->on_cpu for the adaptive spin  Since we now have p->on_cpu unconditionally available, use it to re-implement mutex_spin_on_owner.  Requested-by: Thomas Gleixner <tglx@linutronix.de> Reviewed-by: Frank Rowand <frank.rowand@am.sony.com> Cc: Mike Galbraith <efault@gmx.de> Cc: Nick Piggin <npiggin@kernel.dk> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/20110405152728.826338173@chello.nl
f | kmod.c | s | 17K | 582 | Randy Dunlap | rdunlap@xenotime.net | 1338511768 |  | kmod.c: fix kernel-doc warning  Warning(kernel/kmod.c:419): No description found for parameter 'depth'  Signed-off-by: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | itimer.c | s | 7.3K | 256 | Thomas Gleixner | tglx@linutronix.de | 1334048430 |  | itimer: Use printk_once instead of WARN_ONCE  David pointed out, that WARN_ONCE() to report usage of an deprecated misfeature make folks unhappy. Use printk_once() instead.  Andrew told me to stop grumbling and to remove the silly typecast while touching the file.  Reported-by: David Rientjes <rientjes@google.com> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | user_namespace.c | s | 15K | 518 | Eric W. Biederman | ebiederm@xmission.com | 1336040918 |  | userns: Store uid and gid values in struct cred with kuid_t and kgid_t types  cred.h and a few trivial users of struct cred are changed.  The rest of the users of struct cred are left for other patches as there are too many changes to make in one go and leave the change reviewable.  If the user namespace is disabled and CONFIG_UIDGID_STRICT_TYPE_CHECKS are disabled the code will contiue to compile and behave correctly.  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | cpu_pm.c | s | 6.5K | 204 | Nicolas Pitre | nico@fluxnic.net | 1338511767 |  | kernel/cpu_pm.c: fix various typos  Signed-off-by: Nicolas Pitre <nico@linaro.org> Acked-by: Colin Cross <ccross@android.com> Acked-by: Santosh Shilimkar <santosh.shilimkar@ti.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | cpu.c | s | 17K | 608 | Anton Vorontsov | anton.vorontsov@linaro.org | 1338511770 |  | kernel/cpu.c: document clear_tasks_mm_cpumask()  Add more comments on clear_tasks_mm_cpumask, plus adds a runtime check: the function is only suitable for offlined CPUs, and if called inappropriately, the kernel should scream aloud.  [akpm@linux-foundation.org: tweak comment: s/walks up/walks/, use 80 cols] Suggested-by: Andrew Morton <akpm@linux-foundation.org> Suggested-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | rcu.h | s | 3.8K | 99 | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1329843972 |  | rcu: Allow nesting of rcu_idle_enter() and rcu_idle_exit()  Use of RCU in the idle loop is incorrect, quite a few instances of just that have made their way into mainline, primarily event tracing. The problem with RCU read-side critical sections on CPUs that RCU believes to be idle is that RCU is completely ignoring the CPU, along with any attempts and RCU read-side critical sections.  The approaches of eliminating the offending uses and of pushing the definition of idle down beyond the offending uses have both proved impractical.  The new approach is to encapsulate offending uses of RCU with rcu_idle_exit() and rcu_idle_enter(), but this requires nesting for code that is invoked both during idle and and during normal execution. Therefore, this commit modifies rcu_idle_enter() and rcu_idle_exit() to permit nesting.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Reviewed-by: Josh Triplett <josh@joshtriplett.org> Acked-by: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
f | hung_task.c | s | 5.3K | 188 | Sasha Levin | levinsasha928@gmail.com | 1335350365 |  | hung task debugging: Inject NMI when hung and going to panic  Send an NMI to all CPUs when a hung task is detected and the hung task code is configured to panic. This gives us a fairly uptodate snapshot of all CPUs in the system.  This lets us get stack trace of all CPUs which makes life easier trying to debug a deadlock, and the NMI doesn't change anything since the next step is a kernel panic.  Signed-off-by: Sasha Levin <levinsasha928@gmail.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/1331848040-1676-1-git-send-email-levinsasha928@gmail.com [ extended the changelog a bit ] Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | sysctl_binary.c | s | 51K | 1316 | Michel Lespinasse | walken@google.com | 1324405504 |  | binary_sysctl(): fix memory leak  binary_sysctl() calls sysctl_getname() which allocates from names_cache slab usin __getname()  The matching function to free the name is __putname(), and not putname() which should be used only to match getname() allocations.  This is because when auditing is enabled, putname() calls audit_putname *instead* (not in addition) to __putname().  Then, if a syscall is in progress, audit_putname does not release the name - instead, it expects the name to get released when the syscall completes, but that will happen only if audit_getname() was called previously, i.e.  if the name was allocated with getname() rather than the naked __getname().  So, __getname() followed by putname() ends up leaking memory.  Signed-off-by: Michel Lespinasse <walken@google.com> Acked-by: Al Viro <viro@zeniv.linux.org.uk> Cc: Christoph Hellwig <hch@infradead.org> Cc: Eric Paris <eparis@redhat.com> Cc: <stable@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | exit.c | s | 47K | 1645 | Oleg Nesterov | oleg@redhat.com | 1340228376 |  | pidns: find_new_reaper() can no longer switch to init_pid_ns.child_reaper  find_new_reaper() changes pid_ns->child_reaper, see add0d4df ("pid_ns: zap_pid_ns_processes: fix the ->child_reaper changing").  The original reason has gone away after the previous patch, ->children list must be empty after zap_pid_ns_processes().  However now we can not switch to init_pid_ns.child_reaper. __unhash_process() relies on the "->child_reaper == parent" check, but this check does not work if the last exiting task is also the child reaper.  As Eric sugested, we can change __unhash_process() to use the parent's pid_ns and remove this code.  Also, with this change we can move detach_pid(PIDTYPE_PID) back, where it was before the previous fix.  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Acked-by: "Eric W. Biederman" <ebiederm@xmission.com> Cc: Louis Rilling <louis.rilling@kerlabs.com> Cc: Mike Galbraith <efault@gmx.de> Acked-by: Pavel Emelyanov <xemul@parallels.com> Tested-by: Andrew Wagin <avagin@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | wait.c | s | 8.2K | 256 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1324458459 |  | lockdep/waitqueues: Add better annotation   -> #2 (&tty->write_wait){-.-...}:  is a lot more informative than:   -> #2 (key#19){-.....}:  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Link: http://lkml.kernel.org/n/tip-8zpopbny51023rdb0qq67eye@git.kernel.org Signed-off-by: Ingo Molnar <mingo@elte.hu>
d | gcov |  | 6 items |  | Vitaliy Ivanov | vitalivanov@gmail.com | 1311724185 |  | gcov: disable CONSTRUCTORS for UML  Selecting GCOV for UML causing configuration mismatch:    warning: (GCOV_KERNEL) selects CONSTRUCTORS which has unmet direct dependencies (!UML)  Constructors are not needed for UML.  Signed-off-by: Vitaliy Ivanov <vitalivanov@gmail.com> Cc: Peter Oberparleiter <oberpar@linux.vnet.ibm.com> Acked-by: Richard Weinberger <richard@nod.at> Acked-by: WANG Cong <xiyou.wangcong@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | posix-timers.c | s | 29K | 912 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320067212 |  | kernel: Map most files to use export.h instead of module.h  The changed files were only including linux/module.h for the EXPORT_SYMBOL infrastructure, and nothing else.  Revector them onto the isolated export header for faster compile times.  Nothing to see here but a whole lot of instances of:    -#include <linux/module.h>   +#include <linux/export.h>  This commit is only changing the kernel dir; next targets will probably be mm, fs, the arch dirs, etc.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | capability.c | s | 11K | 385 | Eric W. Biederman | ebiederm@xmission.com | 1337119164 |  | userns: Teach inode_capable to understand inodes whose uids map to other namespaces.  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | printk.c | s | 64K | 2314 | Randy Dunlap | rdunlap@xenotime.net | 1341097000 |  | printk.c: fix kernel-doc warnings  Fix kernel-doc warnings in printk.c: use correct parameter name.    Warning(kernel/printk.c:2429): No description found for parameter 'buf'   Warning(kernel/printk.c:2429): Excess function parameter 'line' description in 'kmsg_dump_get_buffer'  Signed-off-by: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | smp.c | s | 22K | 700 | Thomas Gleixner | tglx@linutronix.de | 1336473306 |  | smp: Implement kick_all_cpus_sync()  Will replace the misnomed cpu_idle_wait() function which is copied a gazillion times all over arch/*  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Acked-by: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/20120507175652.049316594@linutronix.de
f | kcmp.c | s | 4.3K | 164 | Cyrill Gorcunov | gorcunov@openvz.org | 1338511772 |  | syscalls, x86: add __NR_kcmp syscall  While doing the checkpoint-restore in the user space one need to determine whether various kernel objects (like mm_struct-s of file_struct-s) are shared between tasks and restore this state.  The 2nd step can be solved by using appropriate CLONE_ flags and the unshare syscall, while there's currently no ways for solving the 1st one.  One of the ways for checking whether two tasks share e.g.  mm_struct is to provide some mm_struct ID of a task to its proc file, but showing such info considered to be not that good for security reasons.  Thus after some debates we end up in conclusion that using that named 'comparison' syscall might be the best candidate.  So here is it -- __NR_kcmp.  It takes up to 5 arguments - the pids of the two tasks (which characteristics should be compared), the comparison type and (in case of comparison of files) two file descriptors.  Lookups for pids are done in the caller's PID namespace only.  At moment only x86 is supported and tested.  [akpm@linux-foundation.org: fix up selftests, warnings] [akpm@linux-foundation.org: include errno.h] [akpm@linux-foundation.org: tweak comment text] Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org> Acked-by: "Eric W. Biederman" <ebiederm@xmission.com> Cc: Pavel Emelyanov <xemul@parallels.com> Cc: Andrey Vagin <avagin@openvz.org> Cc: KOSAKI Motohiro <kosaki.motohiro@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: H. Peter Anvin <hpa@zytor.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Glauber Costa <glommer@parallels.com> Cc: Andi Kleen <andi@firstfloor.org> Cc: Tejun Heo <tj@kernel.org> Cc: Matt Helsley <matthltc@us.ibm.com> Cc: Pekka Enberg <penberg@kernel.org> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Vasiliy Kulikov <segoon@openwall.com> Cc: Alexey Dobriyan <adobriyan@gmail.com> Cc: Valdis.Kletnieks@vt.edu Cc: Michal Marek <mmarek@suse.cz> Cc: Frederic Weisbecker <fweisbec@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | events |  | 7 items |  | Salman Qazi | sqazi@google.com | 1340012757 |  | perf: Use css_tryget() to avoid propping up css refcount  An rmdir pushes css's ref count to zero.  However, if the associated directory is open at the time, the dentry ref count is non-zero.  If the fd for this directory is then passed into perf_event_open, it does a css_get().  This bounces the ref count back up from zero.  This is a problem by itself.  But what makes it turn into a crash is the fact that we end up doing an extra dput, since we perform a dput when css_put sees the ref count go down to zero.  css_tryget() does not fall into that trap. So, we use that instead.  Reproduction test-case for the bug:   #include <unistd.h>  #include <sys/types.h>  #include <sys/stat.h>  #include <fcntl.h>  #include <linux/unistd.h>  #include <linux/perf_event.h>  #include <string.h>  #include <errno.h>  #include <stdio.h>   #define PERF_FLAG_PID_CGROUP    (1U << 2)   int perf_event_open(struct perf_event_attr *hw_event_uptr,                      pid_t pid, int cpu, int group_fd, unsigned long flags) {          return syscall(__NR_perf_event_open,hw_event_uptr, pid, cpu,                  group_fd, flags);  }   /*   * Directly poke at the perf_event bug, since it's proving hard to repro   * depending on where in the kernel tree.  what moved?   */  int main(int argc, char **argv)  {         int fd;         struct perf_event_attr attr;         memset(&attr, 0, sizeof(attr));         attr.exclude_kernel = 1;         attr.size = sizeof(attr);         mkdir("/dev/cgroup/perf_event/blah", 0777);         fd = open("/dev/cgroup/perf_event/blah", O_RDONLY);         perror("open");         rmdir("/dev/cgroup/perf_event/blah");         sleep(2);         perf_event_open(&attr, fd, 0, -1,  PERF_FLAG_PID_CGROUP);         perror("perf_event_open");         close(fd);         return 0;  }  Signed-off-by: Salman Qazi <sqazi@google.com> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Acked-by: Tejun Heo <tj@kernel.org> Link: http://lkml.kernel.org/r/20120614223108.1025.2503.stgit@dungbeetle.mtv.corp.google.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | acct.c | s | 16K | 574 | Linus Torvalds | torvalds@linux-foundation.org | 1326053997 |  | Merge branch 'for-linus2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  * 'for-linus2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (165 commits)   reiserfs: Properly display mount options in /proc/mounts   vfs: prevent remount read-only if pending removes   vfs: count unlinked inodes   vfs: protect remounting superblock read-only   vfs: keep list of mounts for each superblock   vfs: switch ->show_options() to struct dentry *   vfs: switch ->show_path() to struct dentry *   vfs: switch ->show_devname() to struct dentry *   vfs: switch ->show_stats to struct dentry *   switch security_path_chmod() to struct path *   vfs: prefer ->dentry->d_sb to ->mnt->mnt_sb   vfs: trim includes a bit   switch mnt_namespace ->root to struct mount   vfs: take /proc/*/mounts and friends to fs/proc_namespace.c   vfs: opencode mntget() mnt_set_mountpoint()   vfs: spread struct mount - remaining argument of next_mnt()   vfs: move fsnotify junk to struct mount   vfs: move mnt_devname   vfs: move mnt_list to struct mount   vfs: switch pnode.h macros to struct mount *   ...
f | resource.c | s | 26K | 1004 | Wei Yang | weiyang@linux.vnet.ibm.com | 1338511766 |  | kernel/resource.c: correct the comment of allocate_resource()  In the comment of allocate_resource(), the explanation of parameter max and min is not correct.  Actually, these two parameters are used to specify the range of the resource that will be allocated, not the min/max size that will be allocated.  Signed-off-by: Wei Yang <weiyang@linux.vnet.ibm.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | lglock.c | s | 1.9K | 75 | Andi Kleen | ak@linux.intel.com | 1338348521 |  | brlocks/lglocks: turn into functions  lglocks and brlocks are currently generated with some complicated macros in lglock.h.  But there's no reason to not just use common utility functions and put all the data into a common data structure.  Since there are at least two users it makes sense to share this code in a library.  This is also easier maintainable than a macro forest.  This will also make it later possible to dynamically allocate lglocks and also use them in modules (this would both still need some additional, but now straightforward, code)  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Andi Kleen <ak@linux.intel.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | workqueue.c | s | 104K | 3327 | Peter Zijlstra | peterz@infradead.org | 1337094511 |  | lockdep: fix oops in processing workqueue  Under memory load, on x86_64, with lockdep enabled, the workqueue's process_one_work() has been seen to oops in __lock_acquire(), barfing on a 0xffffffff00000000 pointer in the lockdep_map's class_cache[].  Because it's permissible to free a work_struct from its callout function, the map used is an onstack copy of the map given in the work_struct: and that copy is made without any locking.  Surprisingly, gcc (4.5.1 in Hugh's case) uses "rep movsl" rather than "rep movsq" for that structure copy: which might race with a workqueue user's wait_on_work() doing lock_map_acquire() on the source of the copy, putting a pointer into the class_cache[], but only in time for the top half of that pointer to be copied to the destination map.  Boom when process_one_work() subsequently does lock_map_acquire() on its onstack copy of the lockdep_map.  Fix this, and a similar instance in call_timer_fn(), with a lockdep_copy_map() function which additionally NULLs the class_cache[].  Note: this oops was actually seen on 3.4-next, where flush_work() newly does the racing lock_map_acquire(); but Tejun points out that 3.4 and earlier are already vulnerable to the same through wait_on_work().  * Patch orginally from Peter.  Hugh modified it a bit and wrote the   description.  Signed-off-by: Peter Zijlstra <peterz@infradead.org> Reported-by: Hugh Dickins <hughd@google.com> LKML-Reference: <alpine.LSU.2.00.1205070951170.1544@eggly.anvils> Signed-off-by: Tejun Heo <tj@kernel.org>
f | params.c | s | 21K | 793 | Jim Cromie | jim.cromie@gmail.com | 1336177698 |  | params: replace printk(KERN_<LVL>...) with pr_<lvl>(...)  I left 1 printk which uses __FILE__, __LINE__ explicitly, which should not be subject to generic preferences expressed via pr_fmt().  + tweaks suggested by Joe Perches: - add doing to irq-enabled warning, like others.  It wont happen often.. - change sysfs failure crit, not just err, make it 1 line in logs. - coalese 2 format fragments into 1 >80 char line  cc: Joe Perches <joe@perches.com> Signed-off-by: Jim Cromie <jim.cromie@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | utsname_sysctl.c | s | 3.0K | 122 | Linus Torvalds | torvalds@linux-foundation.org | 1320637487 |  | Merge branch 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux  * 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux: (230 commits)   Revert "tracing: Include module.h in define_trace.h"   irq: don't put module.h into irq.h for tracking irqgen modules.   bluetooth: macroize two small inlines to avoid module.h   ip_vs.h: fix implicit use of module_get/module_put from module.h   nf_conntrack.h: fix up fallout from implicit moduleparam.h presence   include: replace linux/module.h with "struct module" wherever possible   include: convert various register fcns to macros to avoid include chaining   crypto.h: remove unused crypto_tfm_alg_modname() inline   uwb.h: fix implicit use of asm/page.h for PAGE_SIZE   pm_runtime.h: explicitly requires notifier.h   linux/dmaengine.h: fix implicit use of bitmap.h and asm/page.h   miscdevice.h: fix up implicit use of lists and types   stop_machine.h: fix implicit use of smp.h for smp_processor_id   of: fix implicit use of errno.h in include/linux/of.h   of_platform.h: delete needless include <linux/module.h>   acpi: remove module.h include from platform/aclinux.h   miscdevice.h: delete unnecessary inclusion of module.h   device_cgroup.h: delete needless include <linux/module.h>   net: sch_generic remove redundant use of <linux/module.h>   net: inet_timewait_sock doesnt need <linux/module.h>   ...  Fix up trivial conflicts (other header files, and  removal of the ab3550 mfd driver) in  - drivers/media/dvb/frontends/dibx000_common.c  - drivers/media/video/{mt9m111.c,ov6650.c}  - drivers/mfd/ab3550-core.c  - include/linux/dmaengine.h
f | rtmutex.h | s | 1.1K | 25 | Ingo Molnar | mingo@elte.hu | 1151965621 |  | [PATCH] lockdep: better lock debugging  Generic lock debugging:   - generalized lock debugging framework. For example, a bug in one lock    subsystem turns off debugging in all lock subsystems.   - got rid of the caller address passing (__IP__/__IP_DECL__/etc.) from    the mutex/rtmutex debugging code: it caused way too much prototype    hackery, and lockdep will give the same information anyway.   - ability to do silent tests   - check lock freeing in vfree too.   - more finegrained debugging options, to allow distributions to    turn off more expensive debugging features.  There's no separate 'held mutexes' list anymore - but there's a 'held locks' stack within lockdep, which unifies deadlock detection across all lock classes.  (this is independent of the lockdep validation stuff - lockdep first checks whether we are holding a lock already)  Here are the current debugging options:  CONFIG_DEBUG_MUTEXES=y CONFIG_DEBUG_LOCK_ALLOC=y  which do:   config DEBUG_MUTEXES           bool "Mutex debugging, basic checks"   config DEBUG_LOCK_ALLOC          bool "Detect incorrect freeing of live mutexes"  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
d | time |  | 18 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1339804355 |  | Merge branch 'core-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull core updates (RCU and locking) from Ingo Molnar:  "Most of the diffstat comes from the RCU slow boot regression fixes,   but there's also a debuggability improvements/fixes."  * 'core-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   memblock: Document memblock_is_region_{memory,reserved}()   rcu: Precompute RCU_FAST_NO_HZ timer offsets   rcu: Move RCU_FAST_NO_HZ per-CPU variables to rcu_dynticks structure   rcu: Update RCU_FAST_NO_HZ tracing for lazy callbacks   rcu: RCU_FAST_NO_HZ detection of callback adoption   spinlock: Indicate that a lockup is only suspected   kdump: Execute kmsg_dump(KMSG_DUMP_PANIC) after smp_send_stop()   panic: Make panic_on_oops configurable
f | pid_namespace.c | s | 6.6K | 235 | Eric W. Biederman | ebiederm@xmission.com | 1340228376 |  | pidns: guarantee that the pidns init will be the last pidns process reaped  Today we have a twofold bug.  Sometimes release_task on pid == 1 in a pid namespace can run before other processes in a pid namespace have had release task called.  With the result that pid_ns_release_proc can be called before the last proc_flus_task() is done using upid->ns->proc_mnt, resulting in the use of a stale pointer.  This same set of circumstances can lead to waitpid(...) returning for a processes started with clone(CLONE_NEWPID) before the every process in the pid namespace has actually exited.  To fix this modify zap_pid_ns_processess wait until all other processes in the pid namespace have exited, even EXIT_DEAD zombies.  The delay_group_leader and related tests ensure that the thread gruop leader will be the last thread of a process group to be reaped, or to become EXIT_DEAD and self reap.  With the change to zap_pid_ns_processes we get the guarantee that pid == 1 in a pid namespace will be the last task that release_task is called on.  With pid == 1 being the last task to pass through release_task pid_ns_release_proc can no longer be called too early nor can wait return before all of the EXIT_DEAD tasks in a pid namespace have exited.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com> Signed-off-by: Oleg Nesterov <oleg@redhat.com> Cc: Louis Rilling <louis.rilling@kerlabs.com> Cc: Mike Galbraith <efault@gmx.de> Acked-by: Pavel Emelyanov <xemul@parallels.com> Tested-by: Andrew Wagin <avagin@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | irq_work.c | s | 3.1K | 123 | Chris Metcalf | cmetcalf@tilera.com | 1334337316 |  | irq_work: fix compile failure on tile from missing include  Building with IRQ_WORK configured results in  kernel/irq_work.c: In function ‘irq_work_run’: kernel/irq_work.c:110: error: implicit declaration of function ‘irqs_disabled’  The appropriate header just needs to be included.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | rcutiny.c | s | 10K | 340 | Paul E. McKenney | paul.mckenney@linaro.org | 1329843973 |  | rcu: Add RCU_NONIDLE() for idle-loop RCU read-side critical sections  RCU, RCU-bh, and RCU-sched read-side critical sections are forbidden in the inner idle loop, that is, between the rcu_idle_enter() and the rcu_idle_exit() -- RCU will happily ignore any such read-side critical sections.  However, things like powertop need tracepoints in the inner idle loop.  This commit therefore provides an RCU_NONIDLE() macro that can be used to wrap code in the idle loop that requires RCU read-side critical sections.  Suggested-by: Steven Rostedt <rostedt@goodmis.org> Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Reviewed-by: Josh Triplett <josh@joshtriplett.org> Acked-by: Deepthi Dharwar <deepthi@linux.vnet.ibm.com>
f | delayacct.c | s | 5.0K | 157 | Glauber Costa | glommer@redhat.com | 1310637554 |  | KVM: Steal time implementation  To implement steal time, we need the hypervisor to pass the guest information about how much time was spent running other processes outside the VM, while the vcpu had meaningful work to do - halt time does not count.  This information is acquired through the run_delay field of delayacct/schedstats infrastructure, that counts time spent in a runqueue but not running.  Steal time is a per-cpu information, so the traditional MSR-based infrastructure is used. A new msr, KVM_MSR_STEAL_TIME, holds the memory area address containing information about steal time  This patch contains the hypervisor part of the steal time infrasructure, and can be backported independently of the guest portion.  [avi, yongjie: export delayacct_on, to avoid build failures in some configs]  Signed-off-by: Glauber Costa <glommer@redhat.com> Tested-by: Eric B Munson <emunson@mgebm.net> CC: Rik van Riel <riel@redhat.com> CC: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> CC: Peter Zijlstra <peterz@infradead.org> CC: Anthony Liguori <aliguori@us.ibm.com> Signed-off-by: Yongjie Ren <yongjie.ren@intel.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | lockdep_states.h | s | 233B | 9 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1234650479 |  | lockdep: move state bit definitions around  For convenience later.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | rtmutex_common.h | s | 3.3K | 108 | Lai Jiangshan | laijs@cn.fujitsu.com | 1296180831 |  | rtmutex: Simplify PI algorithm and make highest prio task get lock  In current rtmutex, the pending owner may be boosted by the tasks in the rtmutex's waitlist when the pending owner is deboosted or a task in the waitlist is boosted. This boosting is unrelated, because the pending owner does not really take the rtmutex. It is not reasonable.  Example.  time1: A(high prio) onwers the rtmutex. B(mid prio) and C (low prio) in the waitlist.  time2 A release the lock, B becomes the pending owner A(or other high prio task) continues to run. B's prio is lower than A, so B is just queued at the runqueue.  time3 A or other high prio task sleeps, but we have passed some time The B and C's prio are changed in the period (time2 ~ time3) due to boosting or deboosting. Now C has the priority higher than B. ***Is it reasonable that C has to boost B and help B to get the rtmutex?  NO!! I think, it is unrelated/unneed boosting before B really owns the rtmutex. We should give C a chance to beat B and win the rtmutex.  This is the motivation of this patch. This patch *ensures* only the top waiter or higher priority task can take the lock.  How? 1) we don't dequeue the top waiter when unlock, if the top waiter    is changed, the old top waiter will fail and go to sleep again. 2) when requiring lock, it will get the lock when the lock is not taken and:    there is no waiter OR higher priority than waiters OR it is top waiter. 3) In any time, the top waiter is changed, the top waiter will be woken up.  The algorithm is much simpler than before, no pending owner, no boosting for pending owner.  Other advantage of this patch: 1) The states of a rtmutex are reduced a half, easier to read the code. 2) the codes become shorter. 3) top waiter is not dequeued until it really take the lock:    they will retain FIFO when it is stolen.  Not advantage nor disadvantage 1) Even we may wakeup multiple waiters(any time when top waiter changed),    we hardly cause "thundering herd",    the number of wokenup task is likely 1 or very little. 2) two APIs are changed.    rt_mutex_owner() will not return pending owner, it will return NULL when                     the top waiter is going to take the lock.    rt_mutex_next_owner() always return the top waiter. 	                 will not return NULL if we have waiters                          because the top waiter is not dequeued.     I have fixed the code that use these APIs.  need updated after this patch is accepted 1) Document/* 2) the testcase scripts/rt-tester/t4-l2-pi-deboost.tst  Signed-off-by:  Lai Jiangshan <laijs@cn.fujitsu.com> LKML-Reference: <4D3012D5.4060709@cn.fujitsu.com> Reviewed-by: Steven Rostedt <rostedt@goodmis.org> Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | rtmutex-debug.h | s | 1.4K | 31 | Ingo Molnar | mingo@elte.hu | 1151965621 |  | [PATCH] lockdep: better lock debugging  Generic lock debugging:   - generalized lock debugging framework. For example, a bug in one lock    subsystem turns off debugging in all lock subsystems.   - got rid of the caller address passing (__IP__/__IP_DECL__/etc.) from    the mutex/rtmutex debugging code: it caused way too much prototype    hackery, and lockdep will give the same information anyway.   - ability to do silent tests   - check lock freeing in vfree too.   - more finegrained debugging options, to allow distributions to    turn off more expensive debugging features.  There's no separate 'held mutexes' list anymore - but there's a 'held locks' stack within lockdep, which unifies deadlock detection across all lock classes.  (this is independent of the lockdep validation stuff - lockdep first checks whether we are holding a lock already)  Here are the current debugging options:  CONFIG_DEBUG_MUTEXES=y CONFIG_DEBUG_LOCK_ALLOC=y  which do:   config DEBUG_MUTEXES           bool "Mutex debugging, basic checks"   config DEBUG_LOCK_ALLOC          bool "Detect incorrect freeing of live mutexes"  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | groups.c | s | 6.0K | 238 | Eric W. Biederman | ebiederm@xmission.com | 1336040973 |  | userns: Convert in_group_p and in_egroup_p to use kgid_t  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | smpboot.h | s | 465B | 14 | Thomas Gleixner | tglx@linutronix.de | 1336128745 |  | smp: Fix idle_thread_init() inline stub  idle_thread_init() does not have arguments.  Reported-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | lockdep.c | s | 102K | 3610 | Paul E. McKenney | paul.mckenney@linaro.org | 1329843966 |  | lockdep: Add CPU-idle/offline warning to lockdep-RCU splat  It is illegal to use RCU from a CPU that has reported idleness or offlinedness to RCU.  However, it can be quite difficult to determine from a stack trace whether or not a given CPU is idle or offline. Therefore, this commit adds idle/offline diagnostics to the lockdep-RCU error message.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | Kconfig.locks | g | 4.4K |  | Raghavendra K T | raghavendra.kt@linux.vnet.ibm.com | 1332505137 |  | locking/kconfig: Simplify INLINE_SPIN_UNLOCK usage  Get rid of INLINE_SPIN_UNLOCK entirely replacing it with UNINLINE_SPIN_UNLOCK instead of the reverse meaning.  Whoever wants to change the default spinlock inlining behavior and uninline the spinlocks for some weird reason, such as spinlock debugging, paravirt etc. can now all just select UNINLINE_SPIN_UNLOCK  Original discussion at: https://lkml.org/lkml/2012/3/21/357  Suggested-by: Linus Torvalds <torvalds@linux-foundation.org> Signed-off-by: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Ralf Baechle <ralf@linux-mips.org> Cc: Chris Metcalf <cmetcalf@tilera.com> Cc: Chris Zankel <chris@zankel.net> Cc: linux-mips@linux-mips.org Link: http://lkml.kernel.org/r/20120322095502.30866.75756.sendpatchset@codeblue [ tidied up the changelog a bit ] Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | signal.c | s | 85K | 2896 | Al Viro | viro@zeniv.linux.org.uk | 1338569932 |  | new helper: signal_delivered()  Does block_sigmask() + tracehook_signal_handler();  called when sigframe has been successfully built.  All architectures converted to it; block_sigmask() itself is gone now (merged into this one).  I'm still not too happy with the signature, but that's a separate story (IMO we need a structure that would contain signal number + siginfo + k_sigaction, so that get_signal_to_deliver() would fill one, signal_delivered(), handle_signal() and probably setup...frame() - take one).  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | auditsc.c | s | 71K | 2462 | Kees Cook | keescook@chromium.org | 1334366000 |  | seccomp: remove duplicated failure logging  This consolidates the seccomp filter error logging path and adds more details to the audit log.  Signed-off-by: Will Drewry <wad@chromium.org> Signed-off-by: Kees Cook <keescook@chromium.org> Acked-by: Eric Paris <eparis@redhat.com>  v18: make compat= permanent in the record v15: added a return code to the audit_seccomp path by wad@chromium.org      (suggested by eparis@redhat.com) v*: original by keescook@chromium.org Signed-off-by: James Morris <james.l.morris@oracle.com>
f | sys_ni.c | s | 5.8K | 195 | Cyrill Gorcunov | gorcunov@openvz.org | 1338511772 |  | syscalls, x86: add __NR_kcmp syscall  While doing the checkpoint-restore in the user space one need to determine whether various kernel objects (like mm_struct-s of file_struct-s) are shared between tasks and restore this state.  The 2nd step can be solved by using appropriate CLONE_ flags and the unshare syscall, while there's currently no ways for solving the 1st one.  One of the ways for checking whether two tasks share e.g.  mm_struct is to provide some mm_struct ID of a task to its proc file, but showing such info considered to be not that good for security reasons.  Thus after some debates we end up in conclusion that using that named 'comparison' syscall might be the best candidate.  So here is it -- __NR_kcmp.  It takes up to 5 arguments - the pids of the two tasks (which characteristics should be compared), the comparison type and (in case of comparison of files) two file descriptors.  Lookups for pids are done in the caller's PID namespace only.  At moment only x86 is supported and tested.  [akpm@linux-foundation.org: fix up selftests, warnings] [akpm@linux-foundation.org: include errno.h] [akpm@linux-foundation.org: tweak comment text] Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org> Acked-by: "Eric W. Biederman" <ebiederm@xmission.com> Cc: Pavel Emelyanov <xemul@parallels.com> Cc: Andrey Vagin <avagin@openvz.org> Cc: KOSAKI Motohiro <kosaki.motohiro@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: H. Peter Anvin <hpa@zytor.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Glauber Costa <glommer@parallels.com> Cc: Andi Kleen <andi@firstfloor.org> Cc: Tejun Heo <tj@kernel.org> Cc: Matt Helsley <matthltc@us.ibm.com> Cc: Pekka Enberg <penberg@kernel.org> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Vasiliy Kulikov <segoon@openwall.com> Cc: Alexey Dobriyan <adobriyan@gmail.com> Cc: Valdis.Kletnieks@vt.edu Cc: Michal Marek <mmarek@suse.cz> Cc: Frederic Weisbecker <fweisbec@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | stop_machine.c | s | 15K | 506 | Linus Torvalds | torvalds@linux-foundation.org | 1320637487 |  | Merge branch 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux  * 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux: (230 commits)   Revert "tracing: Include module.h in define_trace.h"   irq: don't put module.h into irq.h for tracking irqgen modules.   bluetooth: macroize two small inlines to avoid module.h   ip_vs.h: fix implicit use of module_get/module_put from module.h   nf_conntrack.h: fix up fallout from implicit moduleparam.h presence   include: replace linux/module.h with "struct module" wherever possible   include: convert various register fcns to macros to avoid include chaining   crypto.h: remove unused crypto_tfm_alg_modname() inline   uwb.h: fix implicit use of asm/page.h for PAGE_SIZE   pm_runtime.h: explicitly requires notifier.h   linux/dmaengine.h: fix implicit use of bitmap.h and asm/page.h   miscdevice.h: fix up implicit use of lists and types   stop_machine.h: fix implicit use of smp.h for smp_processor_id   of: fix implicit use of errno.h in include/linux/of.h   of_platform.h: delete needless include <linux/module.h>   acpi: remove module.h include from platform/aclinux.h   miscdevice.h: delete unnecessary inclusion of module.h   device_cgroup.h: delete needless include <linux/module.h>   net: sch_generic remove redundant use of <linux/module.h>   net: inet_timewait_sock doesnt need <linux/module.h>   ...  Fix up trivial conflicts (other header files, and  removal of the ab3550 mfd driver) in  - drivers/media/dvb/frontends/dibx000_common.c  - drivers/media/video/{mt9m111.c,ov6650.c}  - drivers/mfd/ab3550-core.c  - include/linux/dmaengine.h
f | seccomp.c | s | 13K | 468 | Will Drewry | wad@chromium.org | 1334715892 |  | seccomp: fix build warnings when there is no CONFIG_SECCOMP_FILTER  If both audit and seccomp filter support are disabled, 'ret' is marked as unused.  If just seccomp filter support is disabled, data and skip are considered unused.  This change fixes those build warnings.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Will Drewry <wad@chromium.org> Acked-by: Kees Cook <keescook@chromium.org> Signed-off-by: James Morris <james.l.morris@oracle.com>
f | elfcore.c | s | 459B | 22 | Daisuke HATAYAMA | d.hatayama@jp.fujitsu.com | 1267903606 |  | elf coredump: add extended numbering support  The current ELF dumper implementation can produce broken corefiles if program headers exceed 65535.  This number is determined by the number of vmas which the process have.  In particular, some extreme programs may use more than 65535 vmas.  (If you google max_map_count, you can find some users facing this problem.) This kind of program never be able to generate correct coredumps.  This patch implements ``extended numbering'' that uses sh_info field of the first section header instead of e_phnum field in order to represent upto 4294967295 vmas.  This is supported by AMD64-ABI(http://www.x86-64.org/documentation.html) and Solaris(http://docs.sun.com/app/docs/doc/817-1984/). Of course, we are preparing patches for gdb and binutils.  Signed-off-by: Daisuke HATAYAMA <d.hatayama@jp.fujitsu.com> Cc: "Luck, Tony" <tony.luck@intel.com> Cc: Jeff Dike <jdike@addtoit.com> Cc: David Howells <dhowells@redhat.com> Cc: Greg Ungerer <gerg@snapgear.com> Cc: Roland McGrath <roland@redhat.com> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Alexander Viro <viro@zeniv.linux.org.uk> Cc: Andi Kleen <andi@firstfloor.org> Cc: Alan Cox <alan@lxorguk.ukuu.org.uk> Cc: <linux-arch@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
