f | pm.c | s | 3.1K | 112 | Thomas Gleixner | tglx@linutronix.de | 1336167530 |  | genirq: Do not consider disabled wakeup irqs  If an wakeup interrupt has been disabled before the suspend code disables all interrupts then we have to ignore the pending flag.  Otherwise we would abort suspend over and over as nothing clears the pending flag because the interrupt is disabled.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: NeilBrown <neilb@suse.de>
f | debug.h | s | 1.2K | 38 | Paul Gortmaker | paul.gortmaker@windriver.com | 1335198603 |  | irq: hide debug macros so they don't collide with others.  The file kernel/irq/debug.h temporarily defines P, PS, PD and then undefines them.  However these names aren't really "internal" enough, and collide with other more legit users such as the ones in the xtensa arch, causing:  In file included from kernel/irq/internals.h:58:0,                  from kernel/irq/irqdesc.c:18: kernel/irq/debug.h:8:0: warning: "PS" redefined [enabled by default] arch/xtensa/include/asm/regs.h:59:0: note: this is the location of the previous definition  Add a handful of underscores to do a better job of hiding these temporary macros.  Cc: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Makefile | g | 334B |  | Grant Likely | grant.likely@secretlab.ca | 1311838324 |  | irq: add irq_domain translation infrastructure  This patch adds irq_domain infrastructure for translating from hardware irq numbers to linux irqs.  This is particularly important for architectures adding device tree support because the current implementation (excluding PowerPC and SPARC) cannot handle translation for more than a single interrupt controller.  irq_domain supports device tree translation for any number of interrupt controllers.  This patch converts x86, Microblaze, ARM and MIPS to use irq_domain for device tree irq translation.  x86 is untested beyond compiling it, irq_domain is enabled for MIPS and Microblaze, but the old behaviour is preserved until the core code is modified to actually register an irq_domain yet.  On ARM it works and is required for much of the new ARM device tree board support.  PowerPC has /not/ been converted to use this new infrastructure.  It is still missing some features before it can replace the virq infrastructure already in powerpc (see documentation on irq_domain_map/unmap for details).  Followup patches will add the missing pieces and migrate PowerPC to use irq_domain.  SPARC has its own method of managing interrupts from the device tree and is unaffected by this change.  Acked-by: Ralf Baechle <ralf@linux-mips.org> Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
f | devres.c | s | 2.6K | 82 | Maxin B John | maxin.john@gmail.com | 1311652634 |  | devres: fix possible use after free  devres uses the pointer value as key after it's freed, which is safe but triggers spurious use-after-free warnings on some static analysis tools. Rearrange code to avoid such warnings.  Signed-off-by: Maxin B. John <maxin.john@gmail.com> Reviewed-by: Rolf Eike Beer <eike-kernel@sf-tec.de> Acked-by: Tejun Heo <tj@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | migration.c | s | 1.7K | 57 | Jiang Liu | liuj97@gmail.com | 1337891800 |  | genirq: Introduce irq_do_set_affinity() to reduce duplicated code  All invocations of chip->irq_set_affinity() are doing the same return value checks. Let them all use a common function.  [ tglx: removed the silly likely while at it ]  Signed-off-by: Jiang Liu <jiang.liu@huawei.com> Cc: Jiang Liu <liuj97@gmail.com> Cc: Keping Chen <chenkeping@huawei.com> Link: http://lkml.kernel.org/r/1333120296-13563-3-git-send-email-jiang.liu@huawei.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | internals.h | s | 5.6K | 151 | Jiang Liu | liuj97@gmail.com | 1337891800 |  | genirq: Introduce irq_do_set_affinity() to reduce duplicated code  All invocations of chip->irq_set_affinity() are doing the same return value checks. Let them all use a common function.  [ tglx: removed the silly likely while at it ]  Signed-off-by: Jiang Liu <jiang.liu@huawei.com> Cc: Jiang Liu <liuj97@gmail.com> Cc: Keping Chen <chenkeping@huawei.com> Link: http://lkml.kernel.org/r/1333120296-13563-3-git-send-email-jiang.liu@huawei.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | proc.c | s | 11K | 393 | Yinghai Lu | yinghai@kernel.org | 1306408528 |  | irq: Remove smp_affinity_list when unregister irq proc  commit 4b06042(bitmap, irq: add smp_affinity_list interface to /proc/irq) causes the following warning:  [  274.239500] WARNING: at fs/proc/generic.c:850 remove_proc_entry+0x24c/0x27a() [  274.251761] remove_proc_entry: removing non-empty directory 'irq/184',     	       leaking at least 'smp_affinity_list'  Remove the new file in the exit path.  Signed-off-by: Yinghai Lu <yinghai@kernel.org> Cc: Mike Travis <travis@sgi.com> Link: http://lkml.kernel.org/r/4DDDE094.6050505@kernel.org Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | settings.h | s | 3.9K | 125 | Marc Zyngier | marc.zyngier@arm.com | 1317648926 |  | genirq: Add support for per-cpu dev_id interrupts  The ARM GIC interrupt controller offers per CPU interrupts (PPIs), which are usually used to connect local timers to each core. Each CPU has its own private interface to the GIC, and only sees the PPIs that are directly connect to it.  While these timers are separate devices and have a separate interrupt line to a core, they all use the same IRQ number.  For these devices, request_irq() is not the right API as it assumes that an IRQ number is visible by a number of CPUs (through the affinity setting), but makes it very awkward to express that an IRQ number can be handled by all CPUs, and yet be a different interrupt line on each CPU, requiring a different dev_id cookie to be passed back to the handler.  The *_percpu_irq() functions is designed to overcome these limitations, by providing a per-cpu dev_id vector:  int request_percpu_irq(unsigned int irq, irq_handler_t handler, 		   const char *devname, void __percpu *percpu_dev_id); void free_percpu_irq(unsigned int, void __percpu *); int setup_percpu_irq(unsigned int irq, struct irqaction *new); void remove_percpu_irq(unsigned int irq, struct irqaction *act); void enable_percpu_irq(unsigned int irq); void disable_percpu_irq(unsigned int irq);  The API has a number of limitations: - no interrupt sharing - no threading - common handler across all the CPUs  Once the interrupt is requested using setup_percpu_irq() or request_percpu_irq(), it must be enabled by each core that wishes its local interrupt to be delivered.  Based on an initial patch by Thomas Gleixner.  Signed-off-by: Marc Zyngier <marc.zyngier@arm.com> Cc: linux-arm-kernel@lists.infradead.org Link: http://lkml.kernel.org/r/1316793788-14500-2-git-send-email-marc.zyngier@arm.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | chip.c | s | 18K | 647 | Ning Jiang | ning.n.jiang@gmail.com | 1337891265 |  | genirq: Add IRQS_PENDING for nested and simple irq  Every interrupt which is an active wakeup source needs the ability to abort suspend if there is a pending irq. Right now only edge and level irqs can do that.              ||        +---------+        ||   INTC  ||        +---------+                || GPIO_IRQ             +------------+             ||  gpio-exp  ||             +------------+               ||        ||          GPIO0_IRQ  GPIO1_IRQ  In the above diagram, gpio expander has irq number GPIO_IRQ, it is connected with two sub GPIO pins, GPIO0 and GPIO1.  During suspend, we set IRQF_NO_SUSPEND for GPIO_IRQ so that gpio expander driver can handle the sub irq GPIO0_IRQ and GPIO1_IRQ, and these two irqs themselves can further be handled by simple or nested irq in some drivers(typically gpio and mfd driver). If they are used as wakeup sources during suspend, we want them to be able to abort suspend too.  Setting IRQS_PENDING flag in handle_nested_irq() and handle_simple_irq() when the irq is disabled allows check_wakeup_irqs() to identify such irqs as source for aborting suspend.  Signed-off-by: Ning Jiang <ning.n.jiang@gmail.com> Cc: rjw@sisk.pl Link: http://lkml.kernel.org/r/CAH3Oq6T905%2B3fkF43NAMMFvJvq7dsk_so6T2vQ8ZJrA5xiU3YA@mail.gmail.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | manage.c | s | 42K | 1424 | Linus Torvalds | torvalds@linux-foundation.org | 1338835011 |  | Merge branches 'irq-urgent-for-linus' and 'smp-hotplug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull irq and smpboot updates from Thomas Gleixner:  "Just cleanup patches with no functional change and a fix for suspend   issues."  * 'irq-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   genirq: Introduce irq_do_set_affinity() to reduce duplicated code   genirq: Add IRQS_PENDING for nested and simple irq  * 'smp-hotplug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   smpboot, idle: Fix comment mismatch over idle_threads_init()   smpboot, idle: Optimize calls to smp_processor_id() in idle_threads_init()
f | resend.c | s | 2.0K | 73 | Thomas Gleixner | tglx@linutronix.de | 1336167530 |  | genirq: Allow check_wakeup_irqs to notice level-triggered interrupts  Level triggered interrupts do not cause IRQS_PENDING to be set when they fire while "disabled" as the 'pending' state is always present in the level - they automatically refire where re-enabled.  However the IRQS_PENDING flag is also used to abort a suspend cycle - if any 'is_wakeup_set' interrupt is PENDING, check_wakeup_irqs() will cause suspend to abort. Without IRQS_PENDING, suspend won't abort.  Consequently, level-triggered interrupts that fire during the 'noirq' phase of suspend do not currently abort suspend.  So set IRQS_PENDING even for level triggered interrupts, and make sure to clear the flag in check_irq_resend.  [ Changelog by courtesy of Neil ]  Tested-by: NeilBrown <neilb@suse.de> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | autoprobe.c | s | 4.5K | 164 | Thomas Gleixner | tglx@linutronix.de | 1329303419 |  | genirq: Handle pending irqs in irq_startup()  An interrupt might be pending when irq_startup() is called, but the startup code does not invoke the resend logic. In some cases this prevents the device from issuing another interrupt which renders the device non functional.  Call the resend function in irq_startup() to keep things going.  Reported-and-tested-by: Russell King <rmk+kernel@arm.linux.org.uk> Cc: stable@vger.kernel.org Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | handle.c | s | 5.1K | 170 | Alexander Gordeev | agordeev@redhat.com | 1333013512 |  | genirq: Minor readablity improvement in irq_wake_thread()  exit_irq_thread() clears IRQTF_RUNTHREAD flag and drops the thread's bit in desc->threads_oneshot then. The bit must not be set again in between and it does not, since irq_wake_thread() sees PF_EXITING flag first and returns.  Due to above the order or checking PF_EXITING and IRQTF_RUNTHREAD flags in irq_wake_thread() is important. This change just makes it more visible in the source code.  Signed-off-by: Alexander Gordeev <agordeev@redhat.com> Link: http://lkml.kernel.org/r/20120321162212.GO24806@dhcp-26-207.brq.redhat.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | generic-chip.c | s | 9.2K | 324 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103805 |  | kernel: Fix files explicitly needing EXPORT_SYMBOL infrastructure  These files were getting <linux/module.h> via an implicit non-obvious path, but we want to crush those out of existence since they cost time during compiles of processing thousands of lines of headers for no reason.  Give them the lightweight header that just contains the EXPORT_SYMBOL infrastructure.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | spurious.c | s | 8.6K | 309 | Rusty Russell | rusty@rustcorp.com.au | 1326409338 |  | module_param: make bool parameters really bool (core code)  module_param(bool) used to counter-intuitively take an int.  In fddd5201 (mid-2009) we allowed bool or int/unsigned int using a messy trick.  It's time to remove the int/unsigned int option.  For this version it'll simply give a warning, but it'll break next kernel version.  Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
f | dummychip.c | s | 1.2K | 52 | Thomas Gleixner | tglx@linutronix.de | 1301402899 |  | genirq: Remove compat code  Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | irqdomain.c | s | 23K | 738 | Mark Brown | broonie@opensource.wolfsonmicro.com | 1337454471 |  | irqdomain: Document size parameter of irq_domain_add_linear()  Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com> Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
f | Kconfig | g | 2.1K |  | Mika Westerberg | mika.westerberg@linux.intel.com | 1334119157 |  | irq_domain: correct the debugfs file name  The actual name of the irq_domain mapping debugfs file is "irq_domain_mapping" not "virq_mapping".  Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com> Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
f | irqdesc.c | s | 11K | 419 | Jiri Kosina | jkosina@suse.cz | 1337094607 |  | genirq: export handle_edge_irq() and irq_to_desc()  Export handle_edge_irq() and irq_to_desc() to modules to allow them to do things such as  	__irq_set_handler_locked(...., handle_edge_irq);  This fixes  	ERROR: "handle_edge_irq" [drivers/gpio/gpio-pch.ko] undefined! 	ERROR: "irq_to_desc" [drivers/gpio/gpio-pch.ko] undefined!  when gpio-pch is being built as a module.  This was introduced by commit df9541a60af0 ("gpio: pch9: Use proper flow type handlers") that added  	__irq_set_handler_locked(d->irq, handle_edge_irq);  but handle_edge_irq() was not exported for modules (and inlined __irq_set_handler_locked() requires irq_to_desc() exported as well)  Signed-off-by: Jiri Kosina <jkosina@suse.cz> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
