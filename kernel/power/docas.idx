f | Makefile | g | 460B |  | Rafael J. Wysocki | rjw@sisk.pl | 1335900365 |  | PM / Sleep: Add user space interface for manipulating wakeup sources, v3  Android allows user space to manipulate wakelocks using two sysfs file located in /sys/power/, wake_lock and wake_unlock. Writing a wakelock name and optionally a timeout to the wake_lock file causes the wakelock whose name was written to be acquired (it is created before is necessary), optionally with the given timeout. Writing the name of a wakelock to wake_unlock causes that wakelock to be released.  Implement an analogous interface for user space using wakeup sources. Add the /sys/power/wake_lock and /sys/power/wake_unlock files allowing user space to create, activate and deactivate wakeup sources, such that writing a name and optionally a timeout to wake_lock causes the wakeup source of that name to be activated, optionally with the given timeout.  If that wakeup source doesn't exist, it will be created and then activated.  Writing a name to wake_unlock causes the wakeup source of that name, if there is one, to be deactivated.  Wakeup sources created with the help of wake_lock that haven't been used for more than 5 minutes are garbage collected and destroyed.  Moreover, there can be only WL_NUMBER_LIMIT wakeup sources created with the help of wake_lock present at a time.  The data type used to track wakeup sources created by user space is called "struct wakelock" to indicate the origins of this feature.  This version of the patch includes an rbtree manipulation fix from John Stultz.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Reviewed-by: NeilBrown <neilb@suse.de>
f | power.h | s | 8.3K | 243 | Rafael J. Wysocki | rjw@sisk.pl | 1335900365 |  | PM / Sleep: Add user space interface for manipulating wakeup sources, v3  Android allows user space to manipulate wakelocks using two sysfs file located in /sys/power/, wake_lock and wake_unlock. Writing a wakelock name and optionally a timeout to the wake_lock file causes the wakelock whose name was written to be acquired (it is created before is necessary), optionally with the given timeout. Writing the name of a wakelock to wake_unlock causes that wakelock to be released.  Implement an analogous interface for user space using wakeup sources. Add the /sys/power/wake_lock and /sys/power/wake_unlock files allowing user space to create, activate and deactivate wakeup sources, such that writing a name and optionally a timeout to wake_lock causes the wakeup source of that name to be activated, optionally with the given timeout.  If that wakeup source doesn't exist, it will be created and then activated.  Writing a name to wake_unlock causes the wakeup source of that name, if there is one, to be deactivated.  Wakeup sources created with the help of wake_lock that haven't been used for more than 5 minutes are garbage collected and destroyed.  Moreover, there can be only WL_NUMBER_LIMIT wakeup sources created with the help of wake_lock present at a time.  The data type used to track wakeup sources created by user space is called "struct wakelock" to indicate the origins of this feature.  This version of the patch includes an rbtree manipulation fix from John Stultz.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Reviewed-by: NeilBrown <neilb@suse.de>
f | block_io.c | s | 2.4K | 90 | Jens Axboe | jaxboe@fusionio.com | 1299743547 |  | block: kill off REQ_UNPLUG  With the plugging now being explicitly controlled by the submitter, callers need not pass down unplugging hints to the block layer. If they want to unplug, it's because they manually plugged on their own - in which case, they should just unplug at will.  Signed-off-by: Jens Axboe <jaxboe@fusionio.com>
f | suspend_test.c | s | 5.0K | 160 | Rafael J. Wysocki | rjw@sisk.pl | 1256167425 |  | PM: Make warning in suspend_test_finish() less likely to happen  Increase TEST_SUSPEND_SECONDS to 10 so the warning in suspend_test_finish() doesn't annoy the users of slower systems so much.  Also, make the warning print the suspend-resume cycle time, so that we know why the warning actually triggered.  Patch prepared during the hacking session at the Kernel Summit in Tokyo.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | suspend.c | s | 7.3K | 278 | Rafael J. Wysocki | rjw@sisk.pl | 1332970221 |  | PM / Sleep: Move disabling of usermode helpers to the freezer  The core suspend/hibernation code calls usermodehelper_disable() to avoid race conditions between the freezer and the starting of usermode helpers and each code path has to do that on its own. However, it is always called right before freeze_processes() and usermodehelper_enable() is always called right after thaw_processes().  For this reason, to avoid code duplication and to make the connection between usermodehelper_disable() and the freezer more visible, make freeze_processes() call it and remove the direct usermodehelper_disable() and usermodehelper_enable() calls from all suspend/hibernation code paths.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: stable@vger.kernel.org
f | user.c | s | 9.7K | 392 | Rafael J. Wysocki | rjw@sisk.pl | 1332970221 |  | PM / Sleep: Move disabling of usermode helpers to the freezer  The core suspend/hibernation code calls usermodehelper_disable() to avoid race conditions between the freezer and the starting of usermode helpers and each code path has to do that on its own. However, it is always called right before freeze_processes() and usermodehelper_enable() is always called right after thaw_processes().  For this reason, to avoid code duplication and to make the connection between usermodehelper_disable() and the freezer more visible, make freeze_processes() call it and remove the direct usermodehelper_disable() and usermodehelper_enable() calls from all suspend/hibernation code paths.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: stable@vger.kernel.org
f | snapshot.c | s | 60K | 1997 | Linus Torvalds | torvalds@linux-foundation.org | 1332350151 |  | 
f | qos.c | s | 14K | 459 | MyungJoo Ham | myungjoo.ham@samsung.com | 1332970284 |  | PM / QoS: add pm_qos_update_request_timeout() API  The new API, pm_qos_update_request_timeout() is to provide a timeout with pm_qos_update_request.  For example, pm_qos_update_request_timeout(req, 100, 1000), means that QoS request on req with value 100 will be active for 1000 microseconds. After 1000 microseconds, the QoS request thru req is reset. If there were another pm_qos_update_request(req, x) during the 1000 us, this new request with value x will override as this is another request on the same req handle. A new request on the same req handle will always override the previous request whether it is the conventional request or it is the new timeout request.  Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Acked-by: Mark Gross <markgross@thegnar.org> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | autosleep.c | s | 2.6K | 99 | Rafael J. Wysocki | rjw@sisk.pl | 1335900349 |  | PM / Sleep: Add "prevent autosleep time" statistics to wakeup sources  Android uses one wakelock statistics that is only necessary for opportunistic sleep.  Namely, the prevent_suspend_time field accumulates the total time the given wakelock has been locked while "automatic suspend" was enabled.  Add an analogous field, prevent_sleep_time, to wakeup sources and make it behave in a similar way.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | swap.c | s | 35K | 1309 | Bojan Smojver | bojan@rexursive.com | 1335900255 |  | PM / Hibernate: Hibernate/thaw fixes/improvements   1. Do not allocate memory for buffers from emergency pools, unless     absolutely required. Do not warn about and do not retry non-essential     failed allocations.   2. Do not check the amount of free pages left on every single page     write, but wait until one map is completely populated and then check.   3. Set maximum number of pages for read buffering consistently, instead     of inadvertently depending on the size of the sector type.   4. Fix copyright line, which I missed when I submitted the hibernation     threading patch.   5. Dispense with bit shifting arithmetic to improve readability.   6. Really recalculate the number of pages required to be free after all     allocations have been done.   7. Fix calculation of pages required for read buffering. Only count in     pages that do not belong to high memory.  Signed-off-by: Bojan Smojver <bojan@rexursive.com> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | hibernate.c | s | 25K | 915 | Minho Ban | mhban@samsung.com | 1337366699 |  | PM / Hibernate: Use get_gendisk to verify partition if resume_file is integer format  Sometimes resume= parameter comes in integer style (e.g. major:minor) and then name_to_dev_t can not detect partition properly. (especially async device like usb, mmc).  This patch calls get_gendisk() if resumewait is true and resume_file is in integer format to work around this problem.  Signed-off-by: Minho Ban <mhban@samsung.com> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | Kconfig | g | 9.2K |  | Rafael J. Wysocki | rjw@sisk.pl | 1336763476 |  | PM / Sleep: User space wakeup sources garbage collector Kconfig option  Make it possible to configure out the user space wakeup sources garbage collector for debugging and default Android builds.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Arve Hjønnevåg <arve@android.com>
f | main.c | s | 13K | 480 | Arve Hjønnevåg | arve@android.com | 1336247458 |  | PM / Sleep: Fix a mistake in a conditional in autosleep_store()  The condition check in autosleep_store() is incorrect and prevents /sys/power/autosleep from working as advertised.  Fix that.  [rjw: Added the changelog.]  Signed-off-by: Arve Hjønnevåg <arve@android.com> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | wakelock.c | s | 5.3K | 213 | Rafael J. Wysocki | rjw@sisk.pl | 1336763476 |  | PM / Sleep: User space wakeup sources garbage collector Kconfig option  Make it possible to configure out the user space wakeup sources garbage collector for debugging and default Android builds.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Arve Hjønnevåg <arve@android.com>
f | process.c | s | 4.7K | 180 | Rafael J. Wysocki | rjw@sisk.pl | 1332970228 |  | PM / Sleep: Mitigate race between the freezer and request_firmware()  There is a race condition between the freezer and request_firmware() such that if request_firmware() is run on one CPU and freeze_processes() is run on another CPU and usermodehelper_disable() called by it succeeds to grab umhelper_sem for writing before usermodehelper_read_trylock() called from request_firmware() acquires it for reading, the request_firmware() will fail and trigger a WARN_ON() complaining that it was called at a wrong time. However, in fact, it wasn't called at a wrong time and freeze_processes() simply happened to be executed simultaneously.  To avoid this race, at least in some cases, modify usermodehelper_read_trylock() so that it doesn't fail if the freezing of tasks has just started and hasn't been completed yet. Instead, during the freezing of tasks, it will try to freeze the task that has called it so that it can wait until user space is thawed without triggering the scary warning.  For this purpose, change usermodehelper_disabled so that it can take three different values, UMH_ENABLED (0), UMH_FREEZING and UMH_DISABLED.  The first one means that usermode helpers are enabled, the last one means "hard disable" (i.e. the system is not ready for usermode helpers to be used) and the second one is reserved for the freezer.  Namely, when freeze_processes() is started, it sets usermodehelper_disabled to UMH_FREEZING which tells usermodehelper_read_trylock() that it shouldn't fail just yet and should call try_to_freeze() if woken up and cannot return immediately.  This way all freezable tasks that happen to call request_firmware() right before freeze_processes() is started and lose the race for umhelper_sem with it will be frozen and will sleep until thaw_processes() unsets usermodehelper_disabled.  [For the non-freezable callers of request_firmware() the race for umhelper_sem against freeze_processes() is unfortunately unavoidable.]  Reported-by: Stephen Boyd <sboyd@codeaurora.org> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: stable@vger.kernel.org
f | poweroff.c | s | 980B | 38 | Dmitry Torokhov | dmitry.torokhov@gmail.com | 1282280826 |  | Input: sysrq - drop tty argument from sysrq ops handlers  Noone is using tty argument so let's get rid of it.  Acked-by: Alan Cox <alan@lxorguk.ukuu.org.uk> Acked-by: Jason Wessel <jason.wessel@windriver.com> Acked-by: Greg Kroah-Hartman <gregkh@suse.de> Signed-off-by: Dmitry Torokhov <dtor@mail.ru>
f | console.c | s | 614B | 27 | H Hartley Sweeten | hartleys@visionengravers.com | 1318800531 |  | PM / VT: Cleanup #if defined uglyness and fix compile error  Introduce the config option CONFIG_VT_CONSOLE_SLEEP in order to cleanup the #if defined ugliness for the vt suspend support functions. Note that CONFIG_VT_CONSOLE is already dependant on CONFIG_VT.  The function pm_set_vt_switch is actually dependant on CONFIG_VT and not CONFIG_PM_SLEEP. This fixes a compile error when CONFIG_PM_SLEEP is not set:  drivers/tty/vt/vt_ioctl.c:1794: error: redefinition of 'pm_set_vt_switch' include/linux/suspend.h:17: error: previous definition of 'pm_set_vt_switch' was here  Also, remove the incorrect path from the comment in console.c.  [rjw: Replaced #if defined() with #ifdef in suspend.h.]  Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
