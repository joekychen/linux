f | msgutil.c | s | 2.7K | 122 | Al Viro | viro@ftp.linux.org.uk | 1329176742 |  | security: trim security.h  Trim security.h  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: James Morris <jmorris@namei.org>
f | msg.c | s | 20K | 805 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | syscall.c | s | 2.3K | 91 | Anton Blanchard | anton@samba.org | 1269277039 |  | ppc64 sys_ipc breakage in 2.6.34-rc2  I chased down a fail on ppc64 on 2.6.34-rc2 where an application that uses shared memory was getting a SEGV.  Commit baed7fc9b580bd3fb8252ff1d9b36eaf1f86b670 ("Add generic sys_ipc wrapper") changed the second argument from an unsigned long to an int. When we call shmget the system call wrappers for sys_ipc will sign extend second (ie the size) which truncates it.  It took a while to track down because the call succeeds and strace shows the untruncated size :)  The patch below changes second from an int to an unsigned long which fixes shmget on ppc64 (and I assume s390, sparc64 and mips64).  Signed-off-by: Anton Blanchard <anton@samba.org> --  I assume the function prototypes for the other IPC methods would cause us to sign or zero extend second where appropriate (avoiding any security issues). Come to think of it, the syscall wrappers for each method should do that for us as well. Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Makefile | g | 394B |  | Christoph Hellwig | hch@lst.de | 1268437952 |  | Add generic sys_ipc wrapper  Add a generic implementation of the ipc demultiplexer syscall.  Except for s390 and sparc64 all implementations of the sys_ipc are nearly identical.  There are slight differences in the types of the parameters, where mips and powerpc as the only 64-bit architectures with sys_ipc use unsigned long for the "third" argument as it gets casted to a pointer later, while it traditionally is an "int" like most other paramters.  frv goes even further and uses unsigned long for all parameters execept for "ptr" which is a pointer type everywhere.  The change from int to unsigned long for "third" and back to "int" for the others on frv should be fine due to the in-register calling conventions for syscalls (we already had a similar issue with the generic sys_ptrace), but I'd prefer to have the arch maintainers looks over this in details.  Except for that h8300, m68k and m68knommu lack an impplementation of the semtimedop sub call which this patch adds, and various architectures have gets used - at least on i386 it seems superflous as the compat code on x86-64 and ia64 doesn't even bother to implement it.  [akpm@linux-foundation.org: add sys_ipc to sys_ni.c] Signed-off-by: Christoph Hellwig <hch@lst.de> Cc: Ralf Baechle <ralf@linux-mips.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mundt <lethal@linux-sh.org> Cc: Jeff Dike <jdike@addtoit.com> Cc: Hirokazu Takata <takata@linux-m32r.org> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Ingo Molnar <mingo@elte.hu> Reviewed-by: H. Peter Anvin <hpa@zytor.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Arnd Bergmann <arnd@arndb.de> Cc: Heiko Carstens <heiko.carstens@de.ibm.com> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: "Luck, Tony" <tony.luck@intel.com> Cc: James Morris <jmorris@namei.org> Cc: Andreas Schwab <schwab@linux-m68k.org> Acked-by: Jesper Nilsson <jesper.nilsson@axis.com> Acked-by: Russell King <rmk+kernel@arm.linux.org.uk> Acked-by: David Howells <dhowells@redhat.com> Acked-by: Kyle McMartin <kyle@mcmartin.ca> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | mq_sysctl.c | s | 2.7K | 107 | KOSAKI Motohiro | kosaki.motohiro@jp.fujitsu.com | 1338511771 |  | mqueue: separate mqueue default value from maximum value  Commit b231cca4381e ("message queues: increase range limits") changed mqueue default value when attr parameter is specified NULL from hard coded value to fs.mqueue.{msg,msgsize}_max sysctl value.  This made large side effect.  When user need to use two mqueue applications 1) using !NULL attr parameter and it require big message size and 2) using NULL attr parameter and only need small size message, app (1) require to raise fs.mqueue.msgsize_max and app (2) consume large memory size even though it doesn't need.  Doug Ledford propsed to switch back it to static hard coded value. However it also has a compatibility problem.  Some applications might started depend on the default value is tunable.  The solution is to separate default value from maximum value.  Signed-off-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Signed-off-by: Doug Ledford <dledford@redhat.com> Acked-by: Doug Ledford <dledford@redhat.com> Acked-by: Joe Korty <joe.korty@ccur.com> Cc: Amerigo Wang <amwang@redhat.com> Acked-by: Serge E. Hallyn <serue@us.ibm.com> Cc: Jiri Slaby <jslaby@suse.cz> Cc: Manfred Spraul <manfred@colorfullife.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | util.c | s | 22K | 844 | Lai Jiangshan | laijs@cn.fujitsu.com | 1311196216 |  | ipc,rcu: Convert call_rcu(ipc_immediate_free) to kfree_rcu()  The rcu callback ipc_immediate_free() just calls a kfree(), so we use kfree_rcu() instead of the call_rcu(ipc_immediate_free).  Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Cc: Andrew Morton <akpm@linux-foundation.org> Reviewed-by: Josh Triplett <josh@joshtriplett.org>
f | compat.c | s | 18K | 658 | Chris Metcalf | cmetcalf@tilera.com | 1331831618 |  | [PATCH v3] ipc: provide generic compat versions of IPC syscalls  When using the "compat" APIs, architectures will generally want to be able to make direct syscalls to msgsnd(), shmctl(), etc., and in the kernel we would want them to be handled directly by compat_sys_xxx() functions, as is true for other compat syscalls.  However, for historical reasons, several of the existing compat IPC syscalls do not do this.  semctl() expects a pointer to the fourth argument, instead of the fourth argument itself.  msgsnd(), msgrcv() and shmat() expect arguments in different order.  This change adds an ARCH_WANT_OLD_COMPAT_IPC config option that can be set to preserve this behavior for ports that use it (x86, sparc, powerpc, s390, and mips).  No actual semantics are changed for those architectures, and there is only a minimal amount of code refactoring in ipc/compat.c.  Newer architectures like tile (and perhaps future architectures such as arm64 and unicore64) should not select this option, and thus can avoid having any IPC-specific code at all in their architecture-specific compat layer.  In the same vein, if this option is not selected, IPC_64 mode is assumed, since that's what the <asm-generic> headers expect.  The workaround code in "tile" for msgsnd() and msgrcv() is removed with this change; it also fixes the bug that shmat() and semctl() were not being properly handled.  Reviewed-by: Arnd Bergmann <arnd@arndb.de> Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | compat_mq.c | s | 4.1K | 131 | Dan Rosenberg | drosenberg@vsecurity.com | 1288227793 |  | ipc: initialize structure memory to zero for compat functions  This takes care of leaking uninitialized kernel stack memory to userspace from non-zeroed fields in structs in compat ipc functions.  Signed-off-by: Dan Rosenberg <drosenberg@vsecurity.com> Cc: Manfred Spraul <manfred@colorfullife.com> Cc: Arnd Bergmann <arnd@arndb.de> Cc: <stable@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | mqueue.c | s | 35K | 1291 | Doug Ledford | dledford@redhat.com | 1338511771 |  | ipc/mqueue: add rbtree node caching support  When I wrote the first patch that added the rbtree support for message queue insertion, it sped up the case where the queue was very full drastically from the original code.  It, however, slowed down the case where the queue was empty (not drastically though).  This patch caches the last freed rbtree node struct so we can quickly reuse it when we get a new message.  This is the common path for any queue that very frequently goes from 0 to 1 then back to 0 messages in queue.  Andrew Morton didn't like that we were doing a GFP_ATOMIC allocation in msg_insert, so this patch attempts to speculatively allocate a new node struct outside of the spin lock when we know we need it, but will still fall back to a GFP_ATOMIC allocation if it has to.  Once I added the caching, the necessary various ret = ; spin_unlock gyrations in mq_timedsend were getting pretty ugly, so this also slightly refactors that function to streamline the flow of the code and the function exit.  Finally, while working on getting performance back I made sure that all of the node structs were always fully initialized when they were first used, rendering the use of kzalloc unnecessary and a waste of CPU cycles.  The net result of all of this is:  1) We will avoid a GFP_ATOMIC allocation when possible, but fall back    on it when necessary.  2) We will speculatively allocate a node struct using GFP_KERNEL if our    cache is empty (and save the struct to our cache if it's still empty    after we have obtained the spin lock).  3) The performance of the common queue empty case has significantly    improved and is now much more in line with the older performance for    this case.  The performance changes are:              Old mqueue      new mqueue      new mqueue + caching queue empty send/recv   305/288ns       349/318ns       310/322ns  I don't think we'll ever be able to get the recv performance back, but that's because the old recv performance was a direct result and consequence of the old methods abysmal send performance.  The recv path simply must do more so that the send path does not incur such a penalty under higher queue depths.  As it turns out, the new caching code also sped up the various queue full cases relative to my last patch.  That could be because of the difference between the syscall path in 3.3.4-rc5 and 3.3.4-rc6, or because of the change in code flow in the mq_timedsend routine.  Regardless, I'll take it.  It wasn't huge, and I *would* say it was within the margin for error, but after many repeated runs what I'm seeing is that the old numbers trend slightly higher (about 10 to 20ns depending on which test is the one running).  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Doug Ledford <dledford@redhat.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Manfred Spraul <manfred@colorfullife.com> Cc: Stephen Rothwell <sfr@canb.auug.org.au> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | sem.c | s | 42K | 1468 | Manfred Spraul | manfred@colorfullife.com | 1320275221 |  | ipc/sem.c: remove private structures from public header file  include/linux/sem.h contains several structures that are only used within ipc/sem.c.  The patch moves them into ipc/sem.c - there is no need to expose the structures to the whole kernel.  No functional changes, only whitespace cleanups and 80-char per line fixes.  Signed-off-by: Manfred Spraul <manfred@colorfullife.com> Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Mike Galbraith <efault@gmx.de> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ipc_sysctl.c | s | 6.0K | 219 | Vasiliy Kulikov | segoon@openwall.com | 1311724184 |  | ipc: introduce shm_rmid_forced sysctl  Add support for the shm_rmid_forced sysctl.  If set to 1, all shared memory objects in current ipc namespace will be automatically forced to use IPC_RMID.  The POSIX way of handling shmem allows one to create shm objects and call shmdt(), leaving shm object associated with no process, thus consuming memory not counted via rlimits.  With shm_rmid_forced=1 the shared memory object is counted at least for one process, so OOM killer may effectively kill the fat process holding the shared memory.  It obviously breaks POSIX - some programs relying on the feature would stop working.  So set shm_rmid_forced=1 only if you're sure nobody uses "orphaned" memory.  Use shm_rmid_forced=0 by default for compatability reasons.  The feature was previously impemented in -ow as a configure option.  [akpm@linux-foundation.org: fix documentation, per Randy] [akpm@linux-foundation.org: fix warning] [akpm@linux-foundation.org: readability/conventionality tweaks] [akpm@linux-foundation.org: fix shm_rmid_forced/shm_forced_rmid confusion, use standard comment layout] Signed-off-by: Vasiliy Kulikov <segoon@openwall.com> Cc: Randy Dunlap <rdunlap@xenotime.net> Cc: "Eric W. Biederman" <ebiederm@xmission.com> Cc: "Serge E. Hallyn" <serge.hallyn@canonical.com> Cc: Daniel Lezcano <daniel.lezcano@free.fr> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Tejun Heo <tj@kernel.org> Cc: Ingo Molnar <mingo@elte.hu> Cc: Alan Cox <alan@lxorguk.ukuu.org.uk> Cc: Solar Designer <solar@openwall.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ipcns_notifier.c | s | 2.2K | 77 | Nadia Derbey | Nadia.Derbey@bull.net | 1217008422 |  | ipc: do not use a negative value to re-enable msgmni automatic recomputing  This patch proposes an alternative to the "magical positive-versus-negative number trick" Andrew complained about last week in http://lkml.org/lkml/2008/6/24/418.  This had been introduced with the patches that scale msgmni to the amount of lowmem.  With these patches, msgmni has a registered notification routine that recomputes msgmni value upon memory add/remove or ipc namespace creation/ removal.  When msgmni is changed from user space (i.e.  value written to the proc file), that notification routine is unregistered, and the way to make it registered back is to write a negative value into the proc file.  This is the "magical positive-versus-negative number trick".  To fix this, a new proc file is introduced: /proc/sys/kernel/auto_msgmni. This file acts as ON/OFF for msgmni automatic recomputing.  With this patch, the process is the following: 1) kernel boots in "automatic recomputing mode"    /proc/sys/kernel/msgmni contains the value that has been computed (depends                            on lowmem)    /proc/sys/kernel/automatic_msgmni contains "1"  2) echo <val> > /proc/sys/kernel/msgmni    . sets msg_ctlmni to <val>    . de-activates automatic recomputing (i.e. if, say, some memory is added      msgmni won't be recomputed anymore)    . /proc/sys/kernel/automatic_msgmni now contains "0"  3) echo "0" > /proc/sys/kernel/automatic_msgmni    . de-activates msgmni automatic recomputing      this has the same effect as 2) except that msg_ctlmni's value stays      blocked at its current value)  3) echo "1" > /proc/sys/kernel/automatic_msgmni    . recomputes msgmni's value based on the current available memory size      and number of ipc namespaces    . re-activates automatic recomputing for msgmni.  Signed-off-by: Nadia Derbey <Nadia.Derbey@bull.net> Cc: Solofo Ramangalahy <Solofo.Ramangalahy@bull.net> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | shm.c | s | 29K | 1082 | Will Deacon | will.deacon@arm.com | 1339105435 |  | ipc: shm: restore MADV_REMOVE functionality on shared memory segments  Commit 17cf28afea2a ("mm/fs: remove truncate_range") removed the truncate_range inode operation in favour of the fallocate file operation.  When using SYSV IPC shared memory segments, calling madvise with the MADV_REMOVE advice on an area of shared memory will attempt to invoke the .fallocate function for the shm_file_operations, which is NULL and therefore returns -EOPNOTSUPP to userspace.  The previous behaviour would inherit the inode_operations from the underlying tmpfs file and invoke truncate_range there.  This patch restores the previous behaviour by wrapping the underlying fallocate function in shm_fallocate, as we do for fsync.  [hughd@google.com: use -ENOTSUPP in shm_fallocate()] Signed-off-by: Will Deacon <will.deacon@arm.com> Acked-by: Hugh Dickins <hughd@google.com> Signed-off-by: Hugh Dickins <hughd@google.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | namespace.c | s | 4.3K | 155 | Eric W. Biederman | ebiederm@xmission.com | 1333842951 |  | userns: Use cred->user_ns instead of cred->user->user_ns  Optimize performance and prepare for the removal of the user_ns reference from user_struct.  Remove the slow long walk through cred->user->user_ns and instead go straight to cred->user_ns.  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | util.h | s | 5.3K | 147 | Serge E. Hallyn | serge@hallyn.com | 1300934828 |  | userns: user namespaces: convert several capable() calls  CAP_IPC_OWNER and CAP_IPC_LOCK can be checked against current_user_ns(), because the resource comes from current's own ipc namespace.  setuid/setgid are to uids in own namespace, so again checks can be against current_user_ns().  Changelog: 	Jan 11: Use task_ns_capable() in place of sched_capable(). 	Jan 11: Use nsown_capable() as suggested by Bastian Blank. 	Jan 11: Clarify (hopefully) some logic in futex and sched.c 	Feb 15: use ns_capable for ipc, not nsown_capable 	Feb 23: let copy_ipcs handle setting ipc_ns->user_ns 	Feb 23: pass ns down rather than taking it from current  [akpm@linux-foundation.org: coding-style fixes] Signed-off-by: Serge E. Hallyn <serge.hallyn@canonical.com> Acked-by: "Eric W. Biederman" <ebiederm@xmission.com> Acked-by: Daniel Lezcano <daniel.lezcano@free.fr> Acked-by: David Howells <dhowells@redhat.com> Cc: James Morris <jmorris@namei.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
