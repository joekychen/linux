f | mls.c | s | 15K | 591 | Eric Paris | eparis@redhat.com | 1333988567 |  | SELinux: allow default source/target selectors for user/role/range  When new objects are created we have great and flexible rules to determine the type of the new object.  We aren't quite as flexible or mature when it comes to determining the user, role, and range.  This patch adds a new ability to specify the place a new objects user, role, and range should come from.  For users and roles it can come from either the source or the target of the operation.  aka for files the user can either come from the source (the running process and todays default) or it can come from the target (aka the parent directory of the new file)  examples always are done with directory context: system_u:object_r:mnt_t:s0-s0:c0.c512 process context: unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023  [no rule] 	unconfined_u:object_r:mnt_t:s0   test_none [default user source] 	unconfined_u:object_r:mnt_t:s0   test_user_source [default user target] 	system_u:object_r:mnt_t:s0       test_user_target [default role source] 	unconfined_u:unconfined_r:mnt_t:s0 test_role_source [default role target] 	unconfined_u:object_r:mnt_t:s0   test_role_target [default range source low] 	unconfined_u:object_r:mnt_t:s0 test_range_source_low [default range source high] 	unconfined_u:object_r:mnt_t:s0:c0.c1023 test_range_source_high [default range source low-high] 	unconfined_u:object_r:mnt_t:s0-s0:c0.c1023 test_range_source_low-high [default range target low] 	unconfined_u:object_r:mnt_t:s0 test_range_target_low [default range target high] 	unconfined_u:object_r:mnt_t:s0:c0.c512 test_range_target_high [default range target low-high] 	unconfined_u:object_r:mnt_t:s0-s0:c0.c512 test_range_target_low-high  Signed-off-by: Eric Paris <eparis@redhat.com>
f | avtab.c | s | 13K | 486 | Eric Paris | eparis@redhat.com | 1287616378 |  | SELinux: allow userspace to read policy back out of the kernel  There is interest in being able to see what the actual policy is that was loaded into the kernel.  The patch creates a new selinuxfs file /selinux/policy which can be read by userspace.  The actual policy that is loaded into the kernel will be written back out to userspace.  Signed-off-by: Eric Paris <eparis@redhat.com> Signed-off-by: James Morris <jmorris@namei.org>
f | avtab.h | s | 2.8K | 75 | Eric Paris | eparis@redhat.com | 1296576750 |  | SELinux: Use dentry name in new object labeling  Currently SELinux has rules which label new objects according to 3 criteria. The label of the process creating the object, the label of the parent directory, and the type of object (reg, dir, char, block, etc.)  This patch adds a 4th criteria, the dentry name, thus we can distinguish between creating a file in an etc_t directory called shadow and one called motd.  There is no file globbing, regex parsing, or anything mystical.  Either the policy exactly (strcmp) matches the dentry name of the object or it doesn't. This patch has no changes from today if policy does not implement the new rules.  Signed-off-by: Eric Paris <eparis@redhat.com>
f | symtab.c | s | 850B | 36 | Dan Carpenter | error27@gmail.com | 1280727304 |  | selinux: fix error codes in symtab_init()  hashtab_create() only returns NULL on allocation failures to -ENOMEM is appropriate here.  Signed-off-by: Dan Carpenter <error27@gmail.com> Acked-by: Eric Paris <eparis@redhat.com> Acked-by:  Stephen D. Smalley <sds@tycho.nsa.gov> Signed-off-by: James Morris <jmorris@namei.org>
f | ebitmap.h | s | 4.1K | 123 | Shan Wei | shanwei@cn.fujitsu.com | 1295825771 |  | security:selinux: kill unused MAX_AVTAB_HASH_MASK and ebitmap_startbit  Kill unused MAX_AVTAB_HASH_MASK and ebitmap_startbit.  Signed-off-by: Shan Wei <shanwei@cn.fujitsu.com> Signed-off-by: James Morris <jmorris@namei.org>
f | status.c | s | 3.4K | 110 | KaiGai Kohei | kaigai@ak.jp.nec.com | 1287616361 |  | selinux: fix up style problem on /selinux/status  This patch fixes up coding-style problem at this commit:   4f27a7d49789b04404eca26ccde5f527231d01d5  selinux: fast status update interface (/selinux/status)  Signed-off-by: KaiGai Kohei <kaigai@ak.jp.nec.com> Signed-off-by: James Morris <jmorris@namei.org>
f | ebitmap.c | s | 11K | 452 | Paul Moore | paul.moore@hp.com | 1312246713 |  | doc: Update the email address for Paul Moore in various source files  My @hp.com will no longer be valid starting August 5, 2011 so an update is necessary.  My new email address is employer independent so we don't have to worry about doing this again any time soon.  Signed-off-by: Paul Moore <paul.moore@hp.com> Signed-off-by: Paul Moore <paul@paul-moore.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | mls_types.h | s | 1.2K | 41 | Guido Trentalancia | guido@trentalancia.com | 1265234796 |  | selinux: allow MLS->non-MLS and vice versa upon policy reload  Allow runtime switching between different policy types (e.g. from a MLS/MCS policy to a non-MLS/non-MCS policy or viceversa).  Signed-off-by: Guido Trentalancia <guido@trentalancia.com> Acked-by: Stephen Smalley <sds@tycho.nsa.gov> Signed-off-by: James Morris <jmorris@namei.org>
f | policydb.h | s | 9.5K | 297 | Eric Paris | eparis@redhat.com | 1333988568 |  | SELinux: add default_type statements  Because Fedora shipped userspace based on my development tree we now have policy version 27 in the wild defining only default user, role, and range.  Thus to add default_type we need a policy.28.  Signed-off-by: Eric Paris <eparis@redhat.com>
f | conditional.c | s | 13K | 559 | Thomas Meyer | thomas@m3y3r.de | 1324254236 |  | selinux: Casting (void *) value returned by kmalloc is useless  The semantic patch that makes this change is available in scripts/coccinelle/api/alloc/drop_kmalloc_cast.cocci.  Signed-off-by: Thomas Meyer <thomas@m3y3r.de> Signed-off-by: James Morris <jmorris@namei.org>
f | sidtab.h | s | 1.5K | 44 | Eric Paris | eparis@redhat.com | 1291758241 |  | selinux: cache sidtab_context_to_sid results  sidtab_context_to_sid takes up a large share of time when creating large numbers of new inodes (~30-40% in oprofile runs).  This patch implements a cache of 3 entries which is checked before we do a full context_to_sid lookup. On one system this showed over a x3 improvement in the number of inodes that could be created per second and around a 20% improvement on another system.  Any time we look up the same context string sucessivly (imagine ls -lZ) we should hit this cache hot.  A cache miss should have a relatively minor affect on performance next to doing the full table search.  All operations on the cache are done COMPLETELY lockless.  We know that all struct sidtab_node objects created will never be deleted until a new policy is loaded thus we never have to worry about a pointer being dereferenced.  Since we also know that pointer assignment is atomic we know that the cache will always have valid pointers.  Given this information we implement a FIFO cache in an array of 3 pointers.  Every result (whether a cache hit or table lookup) will be places in the 0 spot of the cache and the rest of the entries moved down one spot.  The 3rd entry will be lost.  Races are possible and are even likely to happen.  Lets assume that 4 tasks are hitting sidtab_context_to_sid.  The first task checks against the first entry in the cache and it is a miss.  Now lets assume a second task updates the cache with a new entry.  This will push the first entry back to the second spot.  Now the first task might check against the second entry (which it already checked) and will miss again.  Now say some third task updates the cache and push the second entry to the third spot.  The first task my check the third entry (for the third time!) and again have a miss.  At which point it will just do a full table lookup.  No big deal!  Signed-off-by: Eric Paris <eparis@redhat.com>
f | hashtab.h | s | 2.5K | 76 | Eric Paris | eparis@redhat.com | 1209338944 |  | SELinux: hashtab.h whitespace, syntax, and other cleanups  This patch changes hashtab.h to fix whitespace and syntax issues.  Things that are fixed may include (does not not have to include)  spaces used instead of tabs  Signed-off-by: Eric Paris <eparis@redhat.com> Signed-off-by: James Morris <jmorris@namei.org>
f | services.c | s | 74K | 2841 | Wanlong Gao | gaowanlong@cn.fujitsu.com | 1333988624 |  | SELinux: avc: remove the useless fields in avc_add_callback  avc_add_callback now just used for registering reset functions in initcalls, and the callback functions just did reset operations. So, reducing the arguments to only one event is enough now.  Signed-off-by: Wanlong Gao <gaowanlong@cn.fujitsu.com> Signed-off-by: Eric Paris <eparis@redhat.com>
f | conditional.h | s | 2.3K | 67 | James Morris | jmorris@namei.org | 1315612592 |  | selinux: sparse fix: fix several warnings in the security server code  Fix several sparse warnings in the SELinux security server code.  Signed-off-by: James Morris <jmorris@namei.org>
f | sidtab.c | s | 5.9K | 270 | Eric Paris | eparis@redhat.com | 1291758241 |  | selinux: cache sidtab_context_to_sid results  sidtab_context_to_sid takes up a large share of time when creating large numbers of new inodes (~30-40% in oprofile runs).  This patch implements a cache of 3 entries which is checked before we do a full context_to_sid lookup. On one system this showed over a x3 improvement in the number of inodes that could be created per second and around a 20% improvement on another system.  Any time we look up the same context string sucessivly (imagine ls -lZ) we should hit this cache hot.  A cache miss should have a relatively minor affect on performance next to doing the full table search.  All operations on the cache are done COMPLETELY lockless.  We know that all struct sidtab_node objects created will never be deleted until a new policy is loaded thus we never have to worry about a pointer being dereferenced.  Since we also know that pointer assignment is atomic we know that the cache will always have valid pointers.  Given this information we implement a FIFO cache in an array of 3 pointers.  Every result (whether a cache hit or table lookup) will be places in the 0 spot of the cache and the rest of the entries moved down one spot.  The 3rd entry will be lost.  Races are possible and are even likely to happen.  Lets assume that 4 tasks are hitting sidtab_context_to_sid.  The first task checks against the first entry in the cache and it is a miss.  Now lets assume a second task updates the cache with a new entry.  This will push the first entry back to the second spot.  Now the first task might check against the second entry (which it already checked) and will miss again.  Now say some third task updates the cache and push the second entry to the third spot.  The first task my check the third entry (for the third time!) and again have a miss.  At which point it will just do a full table lookup.  No big deal!  Signed-off-by: Eric Paris <eparis@redhat.com>
f | hashtab.c | s | 2.9K | 136 | Vesa-Matti Kari | vmkari@cc.helsinki.fi | 1218753647 |  | selinux: Unify for- and while-loop style  Replace "thing != NULL" comparisons with just "thing" to make the code look more uniform (mixed styles were used even in the same source file).  Signed-off-by: Vesa-Matti Kari <vmkari@cc.helsinki.fi> Acked-by:  Stephen Smalley <sds@tycho.nsa.gov> Signed-off-by: James Morris <jmorris@namei.org>
f | policydb.c | s | 68K | 2921 | Eric Paris | eparis@redhat.com | 1333988568 |  | SELinux: add default_type statements  Because Fedora shipped userspace based on my development tree we now have policy version 27 in the wild defining only default user, role, and range.  Thus to add default_type we need a policy.28.  Signed-off-by: Eric Paris <eparis@redhat.com>
f | mls.h | s | 2.5K | 79 | Paul Moore | paul.moore@hp.com | 1312246713 |  | doc: Update the email address for Paul Moore in various source files  My @hp.com will no longer be valid starting August 5, 2011 so an update is necessary.  My new email address is employer independent so we don't have to worry about doing this again any time soon.  Signed-off-by: Paul Moore <paul.moore@hp.com> Signed-off-by: Paul Moore <paul@paul-moore.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | context.h | s | 4.0K | 142 | Eric Paris | eparis@redhat.com | 1333988567 |  | SELinux: allow default source/target selectors for user/role/range  When new objects are created we have great and flexible rules to determine the type of the new object.  We aren't quite as flexible or mature when it comes to determining the user, role, and range.  This patch adds a new ability to specify the place a new objects user, role, and range should come from.  For users and roles it can come from either the source or the target of the operation.  aka for files the user can either come from the source (the running process and todays default) or it can come from the target (aka the parent directory of the new file)  examples always are done with directory context: system_u:object_r:mnt_t:s0-s0:c0.c512 process context: unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023  [no rule] 	unconfined_u:object_r:mnt_t:s0   test_none [default user source] 	unconfined_u:object_r:mnt_t:s0   test_user_source [default user target] 	system_u:object_r:mnt_t:s0       test_user_target [default role source] 	unconfined_u:unconfined_r:mnt_t:s0 test_role_source [default role target] 	unconfined_u:object_r:mnt_t:s0   test_role_target [default range source low] 	unconfined_u:object_r:mnt_t:s0 test_range_source_low [default range source high] 	unconfined_u:object_r:mnt_t:s0:c0.c1023 test_range_source_high [default range source low-high] 	unconfined_u:object_r:mnt_t:s0-s0:c0.c1023 test_range_source_low-high [default range target low] 	unconfined_u:object_r:mnt_t:s0 test_range_target_low [default range target high] 	unconfined_u:object_r:mnt_t:s0:c0.c512 test_range_target_high [default range target low-high] 	unconfined_u:object_r:mnt_t:s0-s0:c0.c512 test_range_target_low-high  Signed-off-by: Eric Paris <eparis@redhat.com>
f | services.h | s | 260B | 11 | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | constraint.h | s | 2.0K | 52 | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | symtab.h | s | 563B | 17 | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
