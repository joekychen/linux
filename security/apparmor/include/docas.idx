f | apparmor.h | s | 2.8K | 89 | John Johansen | john.johansen@canonical.com | 1331777343 |  | AppArmor: Add ability to load extended policy  Add the base support for the new policy extensions. This does not bring any additional functionality, or change current semantics.  Signed-off-by: John Johansen <john.johansen@canonical.com> Acked-by: Kees Cook <kees@ubuntu.com>
f | audit.h | s | 2.6K | 127 | Eric Paris | eparis@redhat.com | 1333988582 |  | apparmor: move task from common_audit_data to apparmor_audit_data  apparmor is the only LSM that uses the common_audit_data tsk field. Instead of making all LSMs pay for the stack space move the aa usage into the apparmor_audit_data.  Signed-off-by: Eric Paris <eparis@redhat.com>
f | path.h | s | 971B | 26 | John Johansen | john.johansen@canonical.com | 1331730925 |  | AppArmor: Move path failure information into aa_get_name and rename  Move the path name lookup failure messages into the main path name lookup routine, as the information is useful in more than just aa_path_perm.  Also rename aa_get_name to aa_path_name as it is not getting a reference counted object with a corresponding put fn.  Signed-off-by: John Johansen <john.johansen@canonical.com> Acked-by: Kees Cook <kees@ubuntu.com>
f | sid.h | s | 519B | 19 | John Johansen | john.johansen@canonical.com | 1280727517 |  | AppArmor: core policy routines  The basic routines and defines for AppArmor policy.  AppArmor policy is defined by a few basic components.       profiles - the basic unit of confinement contain all the information                  to enforce policy on a task                   Profiles tend to be named after an executable that they                  will attach to but this is not required.       namespaces - a container for a set of profiles that will be used                  during attachment and transitions between profiles.       sids - which provide a unique id for each profile  Signed-off-by: John Johansen <john.johansen@canonical.com> Signed-off-by: James Morris <jmorris@namei.org>
f | policy.h | s | 9.5K | 276 | Jan Engelhardt | jengelh@medozas.de | 1331777353 |  | AppArmor: add const qualifiers to string arrays  Signed-off-by: Jan Engelhardt <jengelh@medozas.de> Signed-off-by: John Johansen <john.johansen@canonical.com>
f | resource.h | s | 1.3K | 40 | Kees Cook | kees@ubuntu.com | 1330371499 |  | AppArmor: export known rlimit names/value mappings in securityfs  Since the parser needs to know which rlimits are known to the kernel, export the list via a mask file in the "rlimit" subdirectory in the securityfs "features" directory.  Signed-off-by: Kees Cook <kees@ubuntu.com> Signed-off-by: John Johansen <john.johansen@canonical.com>
f | domain.h | s | 1.0K | 30 | John Johansen | john.johansen@canonical.com | 1280727314 |  | AppArmor: functions for domain transitions  AppArmor routines for controling domain transitions, which can occur at exec or through self directed change_profile/change_hat calls.  Unconfined tasks are checked at exec against the profiles in the confining profile namespace to determine if a profile should be attached to the task.  Confined tasks execs are controlled by the profile which provides rules determining which execs are allowed and if so which profiles should be transitioned to.  Self directed domain transitions allow a task to request transition to a given profile.  If the transition is allowed then the profile will be applied, either immeditately or at exec time depending on the request. Immeditate self directed transitions have several security limitations but have uses in setting up stub transition profiles and other limited cases.  Signed-off-by: John Johansen <john.johansen@canonical.com> Signed-off-by: James Morris <jmorris@namei.org>
f | policy_unpack.h | s | 573B | 17 | John Johansen | john.johansen@canonical.com | 1280727516 |  | AppArmor: policy routines for loading and unpacking policy  AppArmor policy is loaded in a platform independent flattened binary stream.  Verify and unpack the data converting it to the internal format needed for enforcement.  Signed-off-by: John Johansen <john.johansen@canonical.com> Signed-off-by: James Morris <jmorris@namei.org>
f | apparmorfs.h | s | 1.7K | 56 | Kees Cook | kees@ubuntu.com | 1330371498 |  | AppArmor: add "file" details to securityfs  Create the "file" directory in the securityfs for tracking features related to files.  Signed-off-by: Kees Cook <kees@ubuntu.com> Signed-off-by: John Johansen <john.johansen@canonical.com>
f | match.h | s | 3.8K | 116 | John Johansen | john.johansen@canonical.com | 1331730924 |  | AppArmor: Update dfa matching routines.  Update aa_dfa_match so that it doesn't result in an input string being walked twice (once to get its length and another time to match)  Add a single step functions   aa_dfa_next  Signed-off-by: John Johansen <john.johansen@canonical.com> Acked-by: Kees Cook <kees@ubuntu.com>
f | capability.h | s | 1.1K | 38 | John Johansen | john.johansen@canonical.com | 1280727515 |  | AppArmor: mediation of non file objects  ipc: AppArmor ipc is currently limited to mediation done by file mediation and basic ptrace tests.  Improved mediation is a wip.  rlimits: AppArmor provides basic abilities to set and control rlimits at a per profile level.  Only resources specified in a profile are controled or set.  AppArmor rules set the hard limit to a value <= to the current hard limit (ie. they can not currently raise hard limits), and if necessary will lower the soft limit to the new hard limit value.  AppArmor does not track resource limits to reset them when a profile is left so that children processes inherit the limits set by the parent even if they are not confined by the same profile.  Capabilities:  AppArmor provides a per profile mask of capabilities, that will further restrict.  Signed-off-by: John Johansen <john.johansen@canonical.com> Signed-off-by: James Morris <jmorris@namei.org>
f | ipc.h | s | 732B | 22 | John Johansen | john.johansen@canonical.com | 1280727515 |  | AppArmor: mediation of non file objects  ipc: AppArmor ipc is currently limited to mediation done by file mediation and basic ptrace tests.  Improved mediation is a wip.  rlimits: AppArmor provides basic abilities to set and control rlimits at a per profile level.  Only resources specified in a profile are controled or set.  AppArmor rules set the hard limit to a value <= to the current hard limit (ie. they can not currently raise hard limits), and if necessary will lower the soft limit to the new hard limit value.  AppArmor does not track resource limits to reset them when a profile is left so that children processes inherit the limits set by the parent even if they are not confined by the same profile.  Capabilities:  AppArmor provides a per profile mask of capabilities, that will further restrict.  Signed-off-by: John Johansen <john.johansen@canonical.com> Signed-off-by: James Morris <jmorris@namei.org>
f | file.h | s | 6.5K | 182 | John Johansen | john.johansen@canonical.com | 1330371501 |  | AppArmor: Fix underflow in xindex calculation  If the xindex value stored in the accept tables is 0, the extraction of that value will result in an underflow (0 - 4).  In properly compiled policy this should not happen for file rules but it may be possible for other rule types in the future.  To exploit this underflow a user would have to be able to load a corrupt policy, which requires CAP_MAC_ADMIN, overwrite system policy in kernel memory or know of a compiler error resulting in the flaw being present for loaded policy (no such flaw is known at this time).  Signed-off-by: John Johansen <john.johansen@canonical.com> Acked-by: Kees Cook <kees@ubuntu.com>
f | context.h | s | 4.3K | 137 | John Johansen | john.johansen@canonical.com | 1280727312 |  | AppArmor: contexts used in attaching policy to system objects  AppArmor contexts attach profiles and state to tasks, files, etc. when a direct profile reference is not sufficient.  Signed-off-by: John Johansen <john.johansen@canonical.com> Signed-off-by: James Morris <jmorris@namei.org>
f | procattr.h | s | 772B | 22 | John Johansen | john.johansen@canonical.com | 1280727313 |  | AppArmor: userspace interfaces  The /proc/<pid>/attr/* interface is used for process introspection and commands.  While the apparmorfs interface is used for global introspection and loading and removing policy.  The interface currently only contains the files necessary for loading policy, and will be extended in the future to include sysfs style single per file introspection inteface.  The old AppArmor 2.4 interface files have been removed into a compatibility patch, that distros can use to maintain backwards compatibility.  Signed-off-by: John Johansen <john.johansen@canonical.com> Signed-off-by: James Morris <jmorris@namei.org>
