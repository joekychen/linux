f | internal.h | s | 8.7K | 226 | Oleg Nesterov | oleg@redhat.com | 1337825483 |  | keys: change keyctl_session_to_parent() to use task_work_add()  Change keyctl_session_to_parent() to use task_work_add() and move key_replace_session_keyring() logic into task_work->func().  Note that we do task_work_cancel() before task_work_add() to ensure that only one work can be pending at any time.  This is important, we must not allow user-space to abuse the parent's ->task_works list.  The callback, replace_session_keyring(), checks PF_EXITING.  I guess this is not really needed but looks better.  As a side effect, this fixes the (unlikely) race.  The callers of key_replace_session_keyring() and keyctl_session_to_parent() lack the necessary barriers, the parent can miss the request.  Now we can remove task_struct->replacement_session_keyring and related code.  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Acked-by: David Howells <dhowells@redhat.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Richard Kuo <rkuo@codeaurora.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Alexander Gordeev <agordeev@redhat.com> Cc: Chris Zankel <chris@zankel.net> Cc: David Smith <dsmith@redhat.com> Cc: "Frank Ch. Eigler" <fche@redhat.com> Cc: Geert Uytterhoeven <geert@linux-m68k.org> Cc: Larry Woodman <lwoodman@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Tejun Heo <tj@kernel.org> Cc: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | Makefile | g | 396B |  | David Howells | dhowells@redhat.com | 1336730216 |  | KEYS: Reorganise keys Makefile  Reorganise the keys directory Makefile to put all the core bits together and the type-specific bits after.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Mimi Zohar <zohar@us.ibm.com>
f | proc.c | s | 8.3K | 299 | David Howells | dhowells@redhat.com | 1336730216 |  | KEYS: Add invalidation support  Add support for invalidating a key - which renders it immediately invisible to further searches and causes the garbage collector to immediately wake up, remove it from keyrings and then destroy it when it's no longer referenced.  It's better not to do this with keyctl_revoke() as that marks the key to start returning -EKEYREVOKED to searches when what is actually desired is to have the key refetched.  To invalidate a key the caller must be granted SEARCH permission by the key. This may be too strict.  It may be better to also permit invalidation if the caller has any of READ, WRITE or SETATTR permission.  The primary use for this is to evict keys that are cached in special keyrings, such as the DNS resolver or an ID mapper.  Signed-off-by: David Howells <dhowells@redhat.com>
f | trusted.c | s | 27K | 1075 | Mimi Zohar | zohar@linux.vnet.ibm.com | 1326843689 |  | keys: fix trusted/encrypted keys sparse rcu_assign_pointer messages  Define rcu_assign_keypointer(), which uses the key payload.rcudata instead of payload.data, to resolve the CONFIG_SPARSE_RCU_POINTER message: "incompatible types in comparison expression (different address spaces)"  Replace the rcu_assign_pointer() calls in encrypted/trusted keys with rcu_assign_keypointer().  Signed-off-by: Mimi Zohar <zohar@us.ibm.com> Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: James Morris <jmorris@namei.org>
f | compat.c | s | 3.7K | 114 | Christopher Yeoh | cyeoh@au1.ibm.com | 1338511772 |  | aio/vfs: cleanup of rw_copy_check_uvector() and compat_rw_copy_check_uvector()  A cleanup of rw_copy_check_uvector and compat_rw_copy_check_uvector after changes made to support CMA in an earlier patch.  Rather than having an additional check_access parameter to these functions, the first paramater type is overloaded to allow the caller to specify CHECK_IOVEC_ONLY which means check that the contents of the iovec are valid, but do not check the memory that they point to.  This is used by process_vm_readv/writev where we need to validate that a iovec passed to the syscall is valid but do not want to check the memory that it points to at this point because it refers to an address space in another process.  Signed-off-by: Chris Yeoh <yeohc@au1.ibm.com> Reviewed-by: Oleg Nesterov <oleg@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | encrypted-keys |  | 6 items |  | Mimi Zohar | zohar@linux.vnet.ibm.com | 1326843690 |  | encrypted-keys: fix rcu and sparse messages  Enabling CONFIG_PROVE_RCU and CONFIG_SPARSE_RCU_POINTER resulted in "suspicious rcu_dereference_check() usage!" and "incompatible types in comparison expression (different address spaces)" messages.  Access the masterkey directly when holding the rwsem.  Changelog v1: - Use either rcu_read_lock()/rcu_derefence_key()/rcu_read_unlock() or remove the unnecessary rcu_derefence() - David Howells  Reported-by: Dmitry Kasatkin <dmitry.kasatkin@intel.com> Signed-off-by: Mimi Zohar <zohar@us.ibm.com> Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: James Morris <jmorris@namei.org>
f | sysctl.c | s | 1.5K | 62 | Eric W. Biederman | ebiederm@xmission.com | 1258562260 |  | sysctl: Drop & in front of every proc_handler.  For consistency drop & in front of every proc_handler.  Explicity taking the address is unnecessary and it prevents optimizations like stubbing the proc_handlers to NULL.  Cc: Alexey Dobriyan <adobriyan@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Joe Perches <joe@perches.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | trusted.h | s | 3.4K | 114 | Mimi Zohar | zohar@linux.vnet.ibm.com | 1295824462 |  | trusted-keys: rename trusted_defined files to trusted  Rename trusted_defined.c and trusted_defined.h files to trusted.c and trusted.h, respectively. Based on request from David Howells.  Signed-off-by: Mimi Zohar <zohar@us.ibm.com> Acked-by: David Howells <dhowells@redhat.com> Signed-off-by: James Morris <jmorris@namei.org>
f | gc.c | s | 10K | 347 | David Howells | dhowells@redhat.com | 1336730216 |  | KEYS: Add invalidation support  Add support for invalidating a key - which renders it immediately invisible to further searches and causes the garbage collector to immediately wake up, remove it from keyrings and then destroy it when it's no longer referenced.  It's better not to do this with keyctl_revoke() as that marks the key to start returning -EKEYREVOKED to searches when what is actually desired is to have the key refetched.  To invalidate a key the caller must be granted SEARCH permission by the key. This may be too strict.  It may be better to also permit invalidation if the caller has any of READ, WRITE or SETATTR permission.  The primary use for this is to evict keys that are cached in special keyrings, such as the DNS resolver or an ID mapper.  Signed-off-by: David Howells <dhowells@redhat.com>
f | keyctl.c | s | 39K | 1432 | Linus Torvalds | torvalds@linux-foundation.org | 1338515250 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/signal  Pull second pile of signal handling patches from Al Viro:  "This one is just task_work_add() series + remaining prereqs for it.    There probably will be another pull request from that tree this   cycle - at least for helpers, to get them out of the way for per-arch   fixes remaining in the tree."  Fix trivial conflict in kernel/irq/manage.c: the merge of Andrew's pile had brought in commit 97fd75b7b8e0 ("kernel/irq/manage.c: use the pr_foo() infrastructure to prefix printks") which changed one of the pr_err() calls that this merge moves around.  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/signal:   keys: kill task_struct->replacement_session_keyring   keys: kill the dummy key_replace_session_keyring()   keys: change keyctl_session_to_parent() to use task_work_add()   genirq: reimplement exit_irq_thread() hook via task_work_add()   task_work_add: generic process-context callbacks   avr32: missed _TIF_NOTIFY_RESUME on one of do_notify_resume callers   parisc: need to check NOTIFY_RESUME when exiting from syscall   move key_repace_session_keyring() into tracehook_notify_resume()   TIF_NOTIFY_RESUME is defined on all targets now
f | process_keys.c | s | 20K | 752 | Oleg Nesterov | oleg@redhat.com | 1337825483 |  | keys: change keyctl_session_to_parent() to use task_work_add()  Change keyctl_session_to_parent() to use task_work_add() and move key_replace_session_keyring() logic into task_work->func().  Note that we do task_work_cancel() before task_work_add() to ensure that only one work can be pending at any time.  This is important, we must not allow user-space to abuse the parent's ->task_works list.  The callback, replace_session_keyring(), checks PF_EXITING.  I guess this is not really needed but looks better.  As a side effect, this fixes the (unlikely) race.  The callers of key_replace_session_keyring() and keyctl_session_to_parent() lack the necessary barriers, the parent can miss the request.  Now we can remove task_struct->replacement_session_keyring and related code.  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Acked-by: David Howells <dhowells@redhat.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Richard Kuo <rkuo@codeaurora.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Alexander Gordeev <agordeev@redhat.com> Cc: Chris Zankel <chris@zankel.net> Cc: David Smith <dsmith@redhat.com> Cc: "Frank Ch. Eigler" <fche@redhat.com> Cc: Geert Uytterhoeven <geert@linux-m68k.org> Cc: Larry Woodman <lwoodman@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Tejun Heo <tj@kernel.org> Cc: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | user_defined.c | s | 4.8K | 185 | Linus Torvalds | torvalds@linux-foundation.org | 1327337989 |  | Merge git://git.samba.org/sfrench/cifs-2.6  * git://git.samba.org/sfrench/cifs-2.6:   CIFS: Rename *UCS* functions to *UTF16*   [CIFS] ACL and FSCACHE support no longer EXPERIMENTAL   [CIFS] Fix build break with multiuser patch when LANMAN disabled   cifs: warn about impending deprecation of legacy MultiuserMount code   cifs: fetch credentials out of keyring for non-krb5 auth multiuser mounts   cifs: sanitize username handling   keys: add a "logon" key type   cifs: lower default wsize when unix extensions are not used   cifs: better instrumentation for coalesce_t2   cifs: integer overflow in parse_dacl()   cifs: Fix sparse warning when calling cifs_strtoUCS   CIFS: Add descriptions to the brlock cache functions
f | keyring.c | s | 32K | 1084 | David Howells | dhowells@redhat.com | 1336730216 |  | KEYS: Add invalidation support  Add support for invalidating a key - which renders it immediately invisible to further searches and causes the garbage collector to immediately wake up, remove it from keyrings and then destroy it when it's no longer referenced.  It's better not to do this with keyctl_revoke() as that marks the key to start returning -EKEYREVOKED to searches when what is actually desired is to have the key refetched.  To invalidate a key the caller must be granted SEARCH permission by the key. This may be too strict.  It may be better to also permit invalidation if the caller has any of READ, WRITE or SETATTR permission.  The primary use for this is to evict keys that are cached in special keyrings, such as the DNS resolver or an ID mapper.  Signed-off-by: David Howells <dhowells@redhat.com>
f | permission.c | s | 3.0K | 97 | Linus Torvalds | torvalds@linux-foundation.org | 1337820159 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace  Pull user namespace enhancements from Eric Biederman:  "This is a course correction for the user namespace, so that we can   reach an inexpensive, maintainable, and reasonably complete   implementation.    Highlights:    - Config guards make it impossible to enable the user namespace and      code that has not been converted to be user namespace safe.     - Use of the new kuid_t type ensures the if you somehow get past the      config guards the kernel will encounter type errors if you enable      user namespaces and attempt to compile in code whose permission      checks have not been updated to be user namespace safe.     - All uids from child user namespaces are mapped into the initial      user namespace before they are processed.  Removing the need to add      an additional check to see if the user namespace of the compared      uids remains the same.     - With the user namespaces compiled out the performance is as good or      better than it is today.     - For most operations absolutely nothing changes performance or      operationally with the user namespace enabled.     - The worst case performance I could come up with was timing 1      billion cache cold stat operations with the user namespace code      enabled.  This went from 156s to 164s on my laptop (or 156ns to      164ns per stat operation).     - (uid_t)-1 and (gid_t)-1 are reserved as an internal error value.      Most uid/gid setting system calls treat these value specially      anyway so attempting to use -1 as a uid would likely cause      entertaining failures in userspace.     - If setuid is called with a uid that can not be mapped setuid fails.      I have looked at sendmail, login, ssh and every other program I      could think of that would call setuid and they all check for and      handle the case where setuid fails.     - If stat or a similar system call is called from a context in which      we can not map a uid we lie and return overflowuid.  The LFS      experience suggests not lying and returning an error code might be      better, but the historical precedent with uids is different and I      can not think of anything that would break by lying about a uid we      can't map.     - Capabilities are localized to the current user namespace making it      safe to give the initial user in a user namespace all capabilities.    My git tree covers all of the modifications needed to convert the core   kernel and enough changes to make a system bootable to runlevel 1."  Fix up trivial conflicts due to nearby independent changes in fs/stat.c  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace: (46 commits)   userns:  Silence silly gcc warning.   cred: use correct cred accessor with regards to rcu read lock   userns: Convert the move_pages, and migrate_pages permission checks to use uid_eq   userns: Convert cgroup permission checks to use uid_eq   userns: Convert tmpfs to use kuid and kgid where appropriate   userns: Convert sysfs to use kgid/kuid where appropriate   userns: Convert sysctl permission checks to use kuid and kgids.   userns: Convert proc to use kuid/kgid where appropriate   userns: Convert ext4 to user kuid/kgid where appropriate   userns: Convert ext3 to use kuid/kgid where appropriate   userns: Convert ext2 to use kuid/kgid where appropriate.   userns: Convert devpts to use kuid/kgid where appropriate   userns: Convert binary formats to use kuid/kgid where appropriate   userns: Add negative depends on entries to avoid building code that is userns unsafe   userns: signal remove unnecessary map_cred_ns   userns: Teach inode_capable to understand inodes whose uids map to other namespaces.   userns: Fail exec for suid and sgid binaries with ids outside our user namespace.   userns: Convert stat to return values mapped from kuids and kgids   userns: Convert user specfied uids and gids in chown into kuids and kgid   userns: Use uid_eq gid_eq helpers when comparing kuids and kgids in the vfs   ...
f | key.c | s | 26K | 892 | Linus Torvalds | torvalds@linux-foundation.org | 1337820159 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace  Pull user namespace enhancements from Eric Biederman:  "This is a course correction for the user namespace, so that we can   reach an inexpensive, maintainable, and reasonably complete   implementation.    Highlights:    - Config guards make it impossible to enable the user namespace and      code that has not been converted to be user namespace safe.     - Use of the new kuid_t type ensures the if you somehow get past the      config guards the kernel will encounter type errors if you enable      user namespaces and attempt to compile in code whose permission      checks have not been updated to be user namespace safe.     - All uids from child user namespaces are mapped into the initial      user namespace before they are processed.  Removing the need to add      an additional check to see if the user namespace of the compared      uids remains the same.     - With the user namespaces compiled out the performance is as good or      better than it is today.     - For most operations absolutely nothing changes performance or      operationally with the user namespace enabled.     - The worst case performance I could come up with was timing 1      billion cache cold stat operations with the user namespace code      enabled.  This went from 156s to 164s on my laptop (or 156ns to      164ns per stat operation).     - (uid_t)-1 and (gid_t)-1 are reserved as an internal error value.      Most uid/gid setting system calls treat these value specially      anyway so attempting to use -1 as a uid would likely cause      entertaining failures in userspace.     - If setuid is called with a uid that can not be mapped setuid fails.      I have looked at sendmail, login, ssh and every other program I      could think of that would call setuid and they all check for and      handle the case where setuid fails.     - If stat or a similar system call is called from a context in which      we can not map a uid we lie and return overflowuid.  The LFS      experience suggests not lying and returning an error code might be      better, but the historical precedent with uids is different and I      can not think of anything that would break by lying about a uid we      can't map.     - Capabilities are localized to the current user namespace making it      safe to give the initial user in a user namespace all capabilities.    My git tree covers all of the modifications needed to convert the core   kernel and enough changes to make a system bootable to runlevel 1."  Fix up trivial conflicts due to nearby independent changes in fs/stat.c  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace: (46 commits)   userns:  Silence silly gcc warning.   cred: use correct cred accessor with regards to rcu read lock   userns: Convert the move_pages, and migrate_pages permission checks to use uid_eq   userns: Convert cgroup permission checks to use uid_eq   userns: Convert tmpfs to use kuid and kgid where appropriate   userns: Convert sysfs to use kgid/kuid where appropriate   userns: Convert sysctl permission checks to use kuid and kgids.   userns: Convert proc to use kuid/kgid where appropriate   userns: Convert ext4 to user kuid/kgid where appropriate   userns: Convert ext3 to use kuid/kgid where appropriate   userns: Convert ext2 to use kuid/kgid where appropriate.   userns: Convert devpts to use kuid/kgid where appropriate   userns: Convert binary formats to use kuid/kgid where appropriate   userns: Add negative depends on entries to avoid building code that is userns unsafe   userns: signal remove unnecessary map_cred_ns   userns: Teach inode_capable to understand inodes whose uids map to other namespaces.   userns: Fail exec for suid and sgid binaries with ids outside our user namespace.   userns: Convert stat to return values mapped from kuids and kgids   userns: Convert user specfied uids and gids in chown into kuids and kgid   userns: Use uid_eq gid_eq helpers when comparing kuids and kgids in the vfs   ...
f | request_key.c | s | 19K | 623 | Boaz Harrosh | bharrosh@panasas.com | 1338511768 |  | kmod: convert two call sites to call_usermodehelper_fns()  Both kernel/sys.c && security/keys/request_key.c where inlining the exact same code as call_usermodehelper_fns(); So simply convert these sites to directly use call_usermodehelper_fns().  Signed-off-by: Boaz Harrosh <bharrosh@panasas.com> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | request_key_auth.c | s | 6.6K | 228 | David Howells | dhowells@redhat.com | 1308027809 |  | KEYS: Don't return EAGAIN to keyctl_assume_authority()  Don't return EAGAIN to keyctl_assume_authority() to indicate that a key could not be found (ENOKEY is only returned if a negative key is found).  Instead return ENOKEY in both cases.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: James Morris <jmorris@namei.org>
f | Kconfig | g | 2.4K |  | David Howells | dhowells@redhat.com | 1336730216 |  | KEYS: Move the key config into security/keys/Kconfig  Move the key config into security/keys/Kconfig as there are going to be a lot of key-related options.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Mimi Zohar <zohar@us.ibm.com>
