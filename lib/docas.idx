f | string.c | s | 16K | 751 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
f | proportions.c | s | 9.3K | 347 | Thomas Gleixner | tglx@linutronix.de | 1315905110 |  | locking, lib/proportions: Annotate prop_local_percpu::lock as raw  The prop_local_percpu::lock can be taken in atomic context and therefore cannot be preempted on -rt - annotate it.  In mainline this change documents the low level nature of the lock - otherwise there's no functional difference. Lockdep and Sparse checking will work as usual.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | irq_regs.c | s | 604B | 17 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | locking-selftest-rlock-hardirq.h | s | 74B | 2 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | Makefile | g | 4.1K |  | Linus Torvalds | torvalds@linux-foundation.org | 1338076636 |  | Merge branch 'generic-string-functions'  This makes <asm/word-at-a-time.h> actually live up to its promise of allowing architectures to help tune the string functions that do their work a word at a time.  David had already taken the x86 strncpy_from_user() function, modified it to work on sparc, and then done the extra work to make it generically useful.  This then expands on that work by making x86 use that generic version, completing the circle.  But more importantly, it fixes up the word-at-a-time interfaces so that it's now easy to also support things like strnlen_user(), and pretty much most random string functions.  David reports that it all works fine on sparc, and Jonas Bonn reported that an earlier version of this worked on OpenRISC too.  It's pretty easy for architectures to add support for this and just replace their private versions with the generic code.  * generic-string-functions:   sparc: use the new generic strnlen_user() function   x86: use the new generic strnlen_user() function   lib: add generic strnlen_user() function   word-at-a-time: make the interfaces truly generic   x86: use generic strncpy_from_user routine
f | kobject.c | s | 23K | 834 | Zhi Yong Wu | wuzhy@linux.vnet.ibm.com | 1336434679 |  | kobject: fix the uncorrect comment  Signed-off-by: Zhi Yong Wu <wuzhy@linux.vnet.ibm.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | rational.c | s | 1.5K | 60 | Oskar Schirmer | oskar@scara.com | 1337260717 |  | lib: Change mail address of Oskar Schirmer  That old mail address doesnt exist any more. This changes all occurences to my new address.  Signed-off-by: Oskar Schirmer <oskar@scara.com> Cc: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | sha1.c | s | 6.1K | 184 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | spinlock_debug.c | s | 6.8K | 261 | Christian Borntraeger | borntraeger@de.ibm.com | 1338975260 |  | spinlock: Indicate that a lockup is only suspected  On an over-committed KVM system we got a:    "BUG: spinlock lockup on CPU#2, swapper/2/0"  message on the heavily contended virtio blk spinlock.  While we might want to reconsider the locking of virtio-blk (lock is held while switching to the host) this patch tries to make the message clearer: the lockup is only suspected.  Signed-off-by: Christian Borntraeger <borntraeger@de.ibm.com> Cc: Rusty Russell <rusty@rustcorp.com.au> Cc: Michael S. Tsirkin <mst@redhat.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1338283124-7063-1-git-send-email-borntraeger@de.ibm.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | devres.c | s | 9.2K | 345 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | reed_solomon |  | 4 items |  | Matthew Wilcox | matthew@wil.cx | 1208571437 |  | lib: Remove unnecessary inclusions of asm/semaphore.h  reed_solomon doesn't use any of the functionality promised by asm/semaphore.h.  Signed-off-by: Matthew Wilcox <willy@linux.intel.com>
f | halfmd4.c | s | 2.0K | 58 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | idr.c | s | 23K | 901 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
f | cpu_rmap.c | s | 6.8K | 231 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | list_sort.c | s | 7.0K | 253 | Artem Bityutskiy | Artem.Bityutskiy@nokia.com | 1288137139 |  | lib/list_sort: test: check element addresses  Improve 'lib_sort()' test and check that:  o 'cmp()' is called only for elements which were present in the original list,    i.e., the 'a' and 'b' parameters are valid  o the resulted (sorted) list consists onlly of the original elements  o intdoruce "poison" fields to make sure data around 'struc list_head' field    are not corrupted.  Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com> Cc: Don Mullis <don.mullis@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | syscall.c | s | 2.4K | 65 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | cordic.c | s | 2.5K | 91 | Michael Witten | mfwitten@gmail.com | 1319916022 |  | Docs: wording: functions -> algorithm  The code seems to provide a single function that implements the CORDIC algorithm.  Signed-off-by: Michael Witten <mfwitten@gmail.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | decompress_unlzma.c | s | 15K | 593 | Paul Bolle | pebolle@tiscali.nl | 1323161620 |  | treewide: Fix comment and string typo 'bufer'  Signed-off-by: Paul Bolle <pebolle@tiscali.nl> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | ctype.c | s | 1.4K | 34 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | crc-t10dif.c | s | 2.9K | 61 | Martin K. Petersen | martin.petersen@oracle.com | 1215868952 |  | [SCSI] lib: Add support for the T10 (SCSI) Data Integrity Field CRC  The SCSI Block Protocol uses this 16-bit CRC to verify the integrity of each data sector.  crc_t10dif() is used by sd_dif.c when performing I/O to or from disks formatted with protection information.  Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com> Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
f | gen_crc32table.c | s | 3.2K | 122 | Darrick J. Wong | djwong@us.ibm.com | 1332547118 |  | crc32: bolt on crc32c  Reuse the existing crc32 code to stamp out a crc32c implementation.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Cc: Herbert Xu <herbert@gondor.apana.org.au> Cc: Bob Pearson <rpearson@systemfabricworks.com> Cc: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | digsig.c | s | 5.7K | 223 | Dmitry Kasatkin | dmitry.kasatkin@intel.com | 1328102644 |  | lib/digsig: checks for NULL return value  mpi_read_from_buffer() return value must not be NULL.  Signed-off-by: Dmitry Kasatkin <dmitry.kasatkin@intel.com> Reviewed-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp> Signed-off-by: James Morris <jmorris@namei.org>
f | rwsem.c | s | 8.1K | 238 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | kasprintf.c | s | 704B | 36 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Kconfig.debug | g | 45K |  | Ingo Molnar | mingo@kernel.org | 1338973975 |  | Merge branch 'core/debug' into core/urgent  Merge two debugging patchlets that were waiting for preparatory commits to hit upstream.  Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | kobject_uevent.c | s | 10K | 372 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
f | parser.c | s | 6.1K | 211 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | locking-selftest-wlock.h | s | 158B | 10 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | dynamic_queue_limits.c | s | 4.3K | 123 | Hiroaki SHIMODA | shimoda.hiroaki@gmail.com | 1338502697 |  | bql: Avoid possible inconsistent calculation.  dql->num_queued could change while processing dql_completed(). To provide consistent calculation, added an on stack variable.  Signed-off-by: Hiroaki SHIMODA <shimoda.hiroaki@gmail.com> Cc: Tom Herbert <therbert@google.com> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Denys Fedoryshchenko <denys@visp.net.lb> Signed-off-by: Eric Dumazet <edumazet@google.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | cpumask.c | s | 4.4K | 151 | Srivatsa S. Bhat | srivatsa.bhat@linux.vnet.ibm.com | 1332980075 |  | lib/cpumask.c: remove __any_online_cpu()  __any_online_cpu() is not optimal and also unnecessary.  So, replace its use by faster cpumask_* operations.  Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Venkatesh Pallipadi <venki@google.com> Cc: Rusty Russell <rusty@rustcorp.com.au> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | iomap.c | s | 6.5K | 234 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | locking-selftest-spin.h | s | 118B | 8 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | percpu_counter.c | s | 5.1K | 190 | Glauber Costa | glommer@parallels.com | 1320107456 |  | lib/percpu_counter.c: enclose hotplug only variables in hotplug ifdef  These variables are only used when CONFIG_HOTPLUG_CPU is enabled, they are ifdef'ed everywhere else.  So don't define them when CONFIG_HOTPLUG_CPU is not enabled.  Signed-off-by: Glauber Costa <glommer@parallels.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | pci_iomap.c | s | 1.4K | 44 | Michael S. Tsirkin | mst@redhat.com | 1328044787 |  | lib: add NO_GENERIC_PCI_IOPORT_MAP  Some architectures need to override the way IO port mapping is done on PCI devices. Supply a generic macro that calls ioport_map, and make it possible for architectures to override.  Signed-off-by: Michael S. Tsirkin <mst@redhat.com> Acked-by: Arnd Bergmann <arnd@arndb.de>
f | dec_and_lock.c | s | 784B | 31 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | bust_spinlocks.c | s | 636B | 27 | Viktor Rosendahl | viktor.rosendahl@nokia.com | 1231286351 |  | oops handling: ensure that any oops is flushed to the mtdoops console  This used to work unpatched with older kernels, during the development phase of mtdoops.  Before commit e3e8a75d2acfc61ebf25524666a0a2c6abb0620c a space was printed with console_loglevel set to 15, which probably flushed the oops message as a side effect.  This is another patch from the Nokia N810 kernel.  Signed-off-by: Viktor Rosendahl <viktor.rosendahl@nokia.com> Cc: Alan Cox <alan@lxorguk.ukuu.org.uk> Cc: Ingo Molnar <mingo@elte.hu> Cc: David Woodhouse <dwmw2@infradead.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ratelimit.c | s | 1.5K | 60 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | rwsem-spinlock.c | s | 7.0K | 264 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | klist.c | s | 9.3K | 325 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | libcrc32c.c | s | 2.1K | 69 | Adrian-Ken Rueegsegger | rueegsegger@swiss-it.ch | 1230163302 |  | libcrc32c: Fix "crc32c undefined" compilation error  The latest shash changes leave crc32c undefined:  [...] Building modules, stage 2.   MODPOST 1381 modules   ERROR: "crc32c" [net/sctp/sctp.ko] undefined!   ERROR: "crc32c" [net/ipv4/netfilter/nf_nat_proto_sctp.ko] undefined!  Adding EXPORT_SYMBOL(crc32c) to lib/libcrc32c.c fixes the compile error. This patch has been compile-tested only.  Signed-off-by: Adrian-Ken Rueegsegger <rueegsegger@swiss-it.ch> Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
f | decompress_bunzip2.c | s | 23K | 699 | Paul Bolle | pebolle@tiscali.nl | 1323162005 |  | decompress_bunzip2: remove invalid vi modeline  Signed-off-by: Paul Bolle <pebolle@tiscali.nl> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | locking-selftest.c | s | 28K | 1026 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | uuid.c | s | 1.4K | 48 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | argv_split.c | s | 1.8K | 83 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | crc32.c | s | 41K | 1069 | Darrick J. Wong | djwong@us.ibm.com | 1332547118 |  | crc32: add self-test code for crc32c  Add self-test code for crc32c.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Cc: Bob Pearson <rpearson@systemfabricworks.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | atomic64.c | s | 4.2K | 159 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | ts_kmp.c | s | 4.3K | 136 | Joonwoo Park | joonwpark81@gmail.com | 1215509889 |  | textsearch: ts_kmp: support case insensitive searching in Knuth-Morris-Pratt algorithm  Add support for case insensitive search to Knuth-Morris-Pratt algorithm.  Signed-off-by: Joonwoo Park <joonwpark81@gmail.com> Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: David S. Miller <davem@davemloft.net>
f | crc-ccitt.c | s | 3.0K | 65 | Randy Dunlap | rdunlap@xenotime.net | 1151254880 |  | [PATCH] kernel-doc for lib/crc*.c  Make kernel-doc corrections & additions to lib/crc*.c.  Add crc functions to kernel-api.tmpl in DocBook.  Signed-off-by: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | decompress_unlzo.c | s | 6.8K | 258 | Sascha Hauer | s.hauer@pengutronix.de | 1326427993 |  | unlzo: fix input buffer free  unlzo modifies the pointer to in_buf, so we have to free the original buffer, not the modified pointer.  Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de> Cc: Lasse Collin <lasse.collin@tukaani.org> Cc: Namhyung Kim <namhyung@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | locking-selftest-softirq.h | s | 207B | 8 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | locking-selftest-rlock-softirq.h | s | 74B | 2 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | crc7.c | s | 2.3K | 63 | Jan Nikitenko | jan.nikitenko@gmail.com | 1184692984 |  | CRC7 support  Add CRC7 routines, used for example in MMC over SPI communication. Kerneldoc updates  [akpm@linux-foundation.org: fix funny mix of const and non-const] Signed-off-by: Jan Nikitenko <jan.nikitenko@gmail.com> Signed-off-by: David Brownell <dbrownell@users.sourceforge.net> Cc: "Randy.Dunlap" <rdunlap@xenotime.net> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | strnlen_user.c | s | 3.6K | 124 | Paul Mackerras | paulus@samba.org | 1338177586 |  | lib: Fix generic strnlen_user for 32-bit big-endian machines  The aligned_byte_mask() definition is wrong for 32-bit big-endian machines: the "7-(n)" part of the definition assumes a long is 8 bytes.  This fixes it by using BITS_PER_LONG - 8 instead of 8*7. Tested on 32-bit and 64-bit PowerPC.  Signed-off-by: Paul Mackerras <paulus@samba.org> Acked-by: David S. Miller <davem@davemloft.net> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | vsprintf.c | s | 51K | 1937 | Denys Vlasenko | vda.linux@googlemail.com | 1338511767 |  | vsprintf: further optimize decimal conversion  Previous code was using optimizations which were developed to work well even on narrow-word CPUs (by today's standards).  But Linux runs only on 32-bit and wider CPUs.  We can use that.  First: using 32x32->64 multiply and trivial 32-bit shift, we can correctly divide by 10 much larger numbers, and thus we can print groups of 9 digits instead of groups of 5 digits.  Next: there are two algorithms to print larger numbers.  One is generic: divide by 1000000000 and repeatedly print groups of (up to) 9 digits. It's conceptually simple, but requires an (unsigned long long) / 1000000000 division.  Second algorithm splits 64-bit unsigned long long into 16-bit chunks, manipulates them cleverly and generates groups of 4 decimal digits.  It so happens that it does NOT require long long division.  If long is > 32 bits, division of 64-bit values is relatively easy, and we will use the first algorithm.  If long long is > 64 bits (strange architecture with VERY large long long), second algorithm can't be used, and we again use the first one.  Else (if long is 32 bits and long long is 64 bits) we use second one.  And third: there is a simple optimization which takes fast path not only for zero as was done before, but for all one-digit numbers.  In all tested cases new code is faster than old one, in many cases by 30%, in few cases by more than 50% (for example, on x86-32, conversion of 12345678).  Code growth is ~0 in 32-bit case and ~130 bytes in 64-bit case.  This patch is based upon an original from Michal Nazarewicz.  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Michal Nazarewicz <mina86@mina86.com> Signed-off-by: Denys Vlasenko <vda.linux@googlemail.com> Cc: Douglas W Jones <jones@cs.uiowa.edu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | prio_tree.c | s | 11K | 384 | Xiao Guangrong | xiaoguangrong@linux.vnet.ibm.com | 1332547116 |  | prio_tree: introduce prio_set_parent()  Introduce prio_set_parent() to abstract the operation which is used to attach the node to its parent.  Signed-off-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | locking-selftest-wsem.h | s | 163B | 10 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
d | raid6 |  | 14 items |  | Jim Kukunas | james.t.kukunas@linux.intel.com | 1338178222 |  | lib/raid6: fix sparse warnings in recovery functions  Make the recovery functions static to fix the following sparse warnings:  lib/raid6/recov.c:25:6: warning: symbol 'raid6_2data_recov_intx1' was not declared. Should it be static? lib/raid6/recov.c:69:6: warning: symbol 'raid6_datap_recov_intx1' was not declared. Should it be static? lib/raid6/recov_ssse3.c:22:6: warning: symbol 'raid6_2data_recov_ssse3' was not declared. Should it be static? lib/raid6/recov_ssse3.c:197:6: warning: symbol 'raid6_datap_recov_ssse3' was not declared. Should it be static?  Reported-by: Fengguang Wu <fengguang.wu@intel.com> Signed-off-by: Jim Kukunas <james.t.kukunas@linux.intel.com> Signed-off-by: NeilBrown <neilb@suse.de>
f | fault-inject.c | s | 6.0K | 203 | Anton Blanchard | anton@samba.org | 1340228376 |  | fault-inject: avoid call to random32() if fault injection is disabled  After enabling CONFIG_FAILSLAB I noticed random32 in profiles even if slub fault injection wasn't enabled at runtime.  should_fail forces a comparison against random32() even if probability is 0:          if (attr->probability <= random32() % 100)                 return false;  Add a check up front for probability == 0 and avoid all of the more complicated checks.  Signed-off-by: Anton Blanchard <anton@samba.org> Acked-by: Akinobu Mita <akinobu.mita@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | iommu-helper.c | s | 1.0K | 36 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
d | lzo |  | 4 items |  | Albin Tonnerre | albin.tonnerre@free-electrons.com | 1263231244 |  | lib: add support for LZO-compressed kernels  This patch series adds generic support for creating and extracting LZO-compressed kernel images, as well as support for using such images on the x86 and ARM architectures, and support for creating and using LZO-compressed initrd and initramfs images.  Russell King said:  : Testing on a Cortex A9 model: : - lzo decompressor is 65% of the time gzip takes to decompress a kernel : - lzo kernel is 9% larger than a gzip kernel : : which I'm happy to say confirms your figures when comparing the two. : : However, when comparing your new gzip code to the old gzip code: : - new is 99% of the size of the old code : - new takes 42% of the time to decompress than the old code : : What this means is that for a proper comparison, the results get even better: : - lzo is 7.5% larger than the old gzip'd kernel image : - lzo takes 28% of the time that the old gzip code took : : So the expense seems definitely worth the effort.  The only reason I : can think of ever using gzip would be if you needed the additional : compression (eg, because you have limited flash to store the image.) : : I would argue that the default for ARM should therefore be LZO.  This patch:  The lzo compressor is worse than gzip at compression, but faster at extraction.  Here are some figures for an ARM board I'm working on:  Uncompressed size: 3.24Mo gzip  1.61Mo 0.72s lzo   1.75Mo 0.48s  So for a compression ratio that is still relatively close to gzip, it's much faster to extract, at least in that case.  This part contains:  - Makefile routine to support lzo compression  - Fixes to the existing lzo compressor so that it can be used in    compressed kernels  - wrapper around the existing lzo1x_decompress, as it only extracts one    block at a time, while we need to extract a whole file here  - config dialog for kernel compression  [akpm@linux-foundation.org: coding-style fixes] [akpm@linux-foundation.org: cleanup] Signed-off-by: Albin Tonnerre <albin.tonnerre@free-electrons.com> Tested-by: Wu Zhangjin <wuzhangjin@gmail.com> Acked-by: "H. Peter Anvin" <hpa@zytor.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Thomas Gleixner <tglx@linutronix.de> Tested-by: Russell King <rmk@arm.linux.org.uk> Acked-by: Russell King <rmk@arm.linux.org.uk> Cc: Ralf Baechle <ralf@linux-mips.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | audit.c | s | 1.2K | 59 | Chris Metcalf | cmetcalf@tilera.com | 1304534488 |  | audit: support the "standard" <asm-generic/unistd.h>  Many of the syscalls mentioned in the audit code are not present for architectures that implement only the "standard" set of Linux syscalls (e.g. openat, but not open, etc.).  This change adds proper #ifdefs for all those syscalls.  Acked-by: Arnd Bergmann <arnd@arndb.de> Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | locking-selftest-hardirq.h | s | 207B | 8 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | locking-selftest-spin-softirq.h | s | 73B | 2 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | clz_tab.c | s | 855B | 18 | David Miller | davem@davemloft.net | 1328139263 |  | lib: Fix multiple definitions of clz_tab  Both sparc 32-bit's software divide assembler and MPILIB provide clz_tab[] with identical contents.  Break it out into a seperate object file and select it when SPARC32 or MPILIB is set.  Reported-by: Al Viro <viro@ZenIV.linux.org.uk> Signed-off-by: David S. Miller <davem@davemloft.net> Signed-off-by: James Morris <jmorris@namei.org>
f | string_helpers.c | s | 1.7K | 62 | Andrew Morton | akpm@linux-foundation.org | 1338333752 |  | lib/string_helpers.c: make arrays static  Moving these arrays into static storage shrinks the kernel a bit:     text    data     bss     dec     hex filename     723     112      64     899     383 lib/string_helpers.o     516     272      64     852     354 lib/string_helpers.o  Cc: James Bottomley <James.Bottomley@HansenPartnership.com> Cc: "Aneesh Kumar K.V" <aneesh.kumar@linux.vnet.ibm.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | find_last_bit.c | s | 1.1K | 41 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Kconfig.kmemcheck | g | 2.9K |  | Sebastian Andrzej Siewior | sebastian@breakpoint.cc | 1246480124 |  | kmemcheck: depend on HAVE_ARCH_KMEMCHECK  to make it selectable if it is available.  Signed-off-by: Sebastian Andrzej Siewior <sebastian@breakpoint.cc> Acked-by: Pekka Enberg <penberg@cs.helsinki.fi> Signed-off-by: Vegard Nossum <vegard.nossum@gmail.com>
f | bch.c | s | 35K | 1219 | Ivan Djelic | ivan.djelic@parrot.com | 1299853550 |  | lib: add shared BCH ECC library  This is a new software BCH encoding/decoding library, similar to the shared Reed-Solomon library.  Binary BCH (Bose-Chaudhuri-Hocquenghem) codes are widely used to correct errors in NAND flash devices requiring more than 1-bit ecc correction; they are generally better suited for NAND flash than RS codes because NAND bit errors do not occur in bursts. Latest SLC NAND devices typically require at least 4-bit ecc protection per 512 bytes block.  This library provides software encoding/decoding, but may also be used with ASIC/SoC hardware BCH engines to perform error correction. It is being currently used for this purpose on an OMAP3630 board (4bit/8bit HW BCH). It has also been used to decode raw dumps of NAND devices with on-die BCH ecc engines (e.g. Micron 4bit ecc SLC devices).  Latest NAND devices (including SLC) can exhibit high error rates (typically a dozen or more bitflips per hour during stress tests); in order to minimize the performance impact of error correction, this library implements recently developed algorithms for fast polynomial root finding (see bch.c header for details) instead of the traditional exhaustive Chien root search; a few performance figures are provided below:  Platform: arm926ejs @ 468 MHz, 32 KiB icache, 16 KiB dcache BCH ecc : 4-bit per 512 bytes  Encoding average throughput: 250 Mbits/s  Error correction time (compared with Chien search):          average   worst      average (Chien)  worst (Chien) ---------------------------------------------------------- 1 bit    8.5 µs   11 µs         200 µs           383 µs 2 bit    9.7 µs   12.5 µs       477 µs           728 µs 3 bit   18.1 µs   20.6 µs       758 µs          1010 µs 4 bit   19.5 µs   23 µs        1028 µs          1280 µs  In the above figures, "worst" is meant in terms of error pattern, not in terms of cache miss / page faults effects (not taken into account here).  The library has been extensively tested on the following platforms: x86, x86_64, arm926ejs, omap3630, qemu-ppc64, qemu-mips.  Signed-off-by: Ivan Djelic <ivan.djelic@parrot.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | llist.c | s | 2.7K | 81 | Linus Torvalds | torvalds@linux-foundation.org | 1332975501 |  | 
f | bitmap.c | s | 34K | 1075 | Andrew Morton | akpm@linux-foundation.org | 1338333752 |  | lib/bitmap.c: fix documentation for scnprintf() functions  The code comments for bscnl_emit() and bitmap_scnlistprintf() are describing snprintf() return semantics, but these functions use scnprintf() return semantics.  Fix that, and document the bitmap_scnprintf() return value as well.  Cc: Ryota Ozaki <ozaki.ryota@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | smp_processor_id.c | s | 1.1K | 44 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | iomap_copy.c | s | 2.1K | 64 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Kconfig.kgdb | g | 2.3K |  | Jason Wessel | jason.wessel@windriver.com | 1274407466 |  | mips,kgdb: kdb low level trap catch and stack trace  The only way the debugger can handle a trap in inside rcu_lock, notify_die, or atomic_notifier_call_chain without a recursive fault is to have a low level "first opportunity handler" do_trap_or_bp() handler.  Generally this will be something the vast majority of folks will not need, but for those who need it, it is added as a kernel .config option called KGDB_LOW_LEVEL_TRAP.  Also added was a die notification for oops such that kdb can catch an oops for analysis.  There appeared to be no obvious way to pass the struct pt_regs from the original exception back to the stack back tracer, so a special case was added to show_stack() for when kdb is active because you generally desire to generally look at the back trace of the original exception.  Signed-off-by: Jason Wessel <jason.wessel@windriver.com> Acked-by: Ralf Baechle <ralf@linux-mips.org>
f | bcd.c | s | 257B | 12 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | check_signature.c | s | 599B | 24 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | jedec_ddr_data.c | s | 3.0K | 131 | Aneesh V | aneesh@ti.com | 1335942246 |  | ddr: add LPDDR2 data from JESD209-2  add LPDDR2 data from the JEDEC spec JESD209-2. The data includes:  1. Addressing information for LPDDR2 memories of different    densities and types(S2/S4) 2. AC timing data.  This data will useful for memory controller device drivers. Right now this is used by the TI EMIF SDRAM controller driver.  Signed-off-by: Aneesh V <aneesh@ti.com> Reviewed-by: Santosh Shilimkar <santosh.shilimkar@ti.com> Reviewed-by: Benoit Cousson <b-cousson@ti.com> [santosh.shilimkar@ti.com: Moved to drivers/memory from drivers/misc] Signed-off-by: Santosh Shilimkar <santosh.shilimkar@ti.com> Tested-by: Lokesh Vutla <lokeshvutla@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | test-kstrtox.c | s | 17K | 703 | Uwe Kleine-König | u.kleine-koenig@pengutronix.de | 1338333752 |  | lib/test-kstrtox.c: mark const init data with __initconst instead of __initdata  As long as there is no other non-const variable marked __initdata in the same compilation unit it doesn't hurt.  If there were one however compilation would fail with  	error: $variablename causes a section type conflict  because a section containing const variables is marked read only and so cannot contain non-const variables.  Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de> Cc: Alexey Dobriyan <adobriyan@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | sort.c | s | 2.5K | 102 | Wu Fengguang | fengguang.wu@intel.com | 1231432274 |  | generic swap(): lib/sort.c: rename swap to swap_func  This is to avoid name clashes for the introduction of a global swap() macro.  Signed-off-by: Wu Fengguang <fengguang.wu@intel.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | extable.c | s | 2.4K | 86 | Rusty Russell | rusty@rustcorp.com.au | 1244809024 |  | module: trim exception table on init free.  It's theoretically possible that there are exception table entries which point into the (freed) init text of modules.  These could cause future problems if other modules get loaded into that memory and cause an exception as we'd see the wrong fixup.  The only case I know of is kvm-intel.ko (when CONFIG_CC_OPTIMIZE_FOR_SIZE=n).  Amerigo fixed this long-standing FIXME in the x86 version, but this patch is more general.  This implements trim_init_extable(); most archs are simple since they use the standard lib/extable.c sort code.  Alpha and IA64 use relative addresses in their fixups, so thier trimming is a slight variation.  Sparc32 is unique; it doesn't seem to define ARCH_HAS_SORT_EXTABLE, yet it defines its own sort_extable() which overrides the one in lib. It doesn't sort, so we have to mark deleted entries instead of actually trimming them.  Inspired-by: Amerigo Wang <amwang@redhat.com> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Cc: linux-alpha@vger.kernel.org Cc: sparclinux@vger.kernel.org Cc: linux-ia64@vger.kernel.org
f | stmp_device.c | s | 2.1K | 66 | Wolfram Sang | w.sang@pengutronix.de | 1334957228 |  | lib: add support for stmp-style devices  MX23/28 use IP cores which follow a register layout I have first seen on STMP3xxx SoCs. In this layout, every register actually has four u32:   1.) to store a value directly  2.) a SET register where every 1-bit sets the corresponding bit,      others are unaffected  3.) same with a CLR register  4.) same with a TOG (toggle) register  Also, the 2 MSBs in register 0 are always the same and can be used to reset the IP core.  All this is strictly speaking not mach-specific (but IP core specific) and, thus, doesn't need to be in mach-mxs/include. At least mx6 also uses IP cores following this stmp-style. So:  Introduce a stmp-style device, put the code and defines for that in a public place (lib/), and let drivers for stmp-style devices select that code. To avoid regressions and ease reviewing, the actual code is simply copied from mach-mxs. It definately wants updates, but those need a seperate patch series.  Voila, mach dependency gone, reusable code introduced. Note that I didn't remove the duplicated code from mach-mxs yet, first the drivers have to be converted.  Signed-off-by: Wolfram Sang <w.sang@pengutronix.de> Acked-by: Shawn Guo <shawn.guo@linaro.org> Acked-by: Dong Aisheng <dong.aisheng@linaro.org>
d | xz |  | 11 items |  | Lasse Collin | lasse.collin@tukaani.org | 1316637599 |  | XZ: Fix incorrect XZ_BUF_ERROR  xz_dec_run() could incorrectly return XZ_BUF_ERROR if all of the following was true:   - The caller knows how many bytes of output to expect and only provides    that much output space.   - When the last output bytes are decoded, the caller-provided input    buffer ends right before the LZMA2 end of payload marker.  So LZMA2    won't provide more output anymore, but it won't know it yet and thus    won't return XZ_STREAM_END yet.   - A BCJ filter is in use and it hasn't left any unfiltered bytes in the    temp buffer.  This can happen with any BCJ filter, but in practice    it's more likely with filters other than the x86 BCJ.  This fixes <https://bugzilla.redhat.com/show_bug.cgi?id=735408> where Squashfs thinks that a valid file system is corrupt.  This also fixes a similar bug in single-call mode where the uncompressed size of a block using BCJ + LZMA2 was 0 bytes and caller provided no output space.  Many empty .xz files don't contain any blocks and thus don't trigger this bug.  This also tweaks a closely related detail: xz_dec_bcj_run() could call xz_dec_lzma2_run() to decode into temp buffer when it was known to be useless.  This was harmless although it wasted a minuscule number of CPU cycles.  Signed-off-by: Lasse Collin <lasse.collin@tukaani.org> Cc: stable <stable@kernel.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | decompress_inflate.c | s | 3.7K | 155 | Lasse Collin | lasse.collin@tukaani.org | 1294934605 |  | decompressors: check input size in decompress_inflate.c  Check for end of the input buffer when skipping over the filename field in the .gz file header.  Signed-off-by: Lasse Collin <lasse.collin@tukaani.org> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: Alain Knaff <alain@knaff.lu> Cc: Albin Tonnerre <albin.tonnerre@free-electrons.com> Cc: Phillip Lougher <phillip@lougher.demon.co.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | int_sqrt.c | s | 533B | 27 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | locking-selftest-rlock.h | s | 158B | 10 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | swiotlb.c | s | 25K | 802 | Bjorn Helgaas | bhelgaas@google.com | 1338333741 |  | swiotlb: print physical addresses consistently with other parts of kernel  Print swiotlb info in a style consistent with the %pR style used elsewhere in the kernel.  For example:      -Placing 64MB software IO TLB between ffff88007a662000 - ffff88007e662000     -software IO TLB at phys 0x7a662000 - 0x7e662000     +software IO TLB [mem 0x7a662000-0x7e661fff] (64MB) mapped at [ffff88007a662000-ffff88007e661fff]  Signed-off-by: Bjorn Helgaas <bhelgaas@google.com> Cc: Yinghai Lu <yinghai@kernel.org> Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | find_next_bit.c | s | 6.4K | 259 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | zlib_inflate |  | 11 items |  | Joakim Tjernlund | joakim.tjernlund@transmode.se | 1268437964 |  | inflate_fast: sout is already a short so ptr arith was off by one.  inflate_fast() can do either POST INC or PRE INC on its pointers walking the memory to decompress.  Default is PRE INC.  The sout pointer offset was miscalculated in one case as the calculation assumed sout was a char * This breaks inflate_fast() iff configured to do POST INC.  Signed-off-by: Joakim Tjernlund <Joakim.Tjernlund@transmode.se> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ioremap.c | s | 2.1K | 83 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | dynamic_debug.c | s | 24K | 915 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1336434452 |  | Revert "dynamic_debug: remove unneeded includes"  This reverts commit 04db6e5fddca55186b6a74339a62c800150648bc.  Odds are, we really don't want to revert all of these, and need to be more careful in the future to make sure we don't break the build of other arches.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Cc: Jim Cromie <jim.cromie@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | decompress.c | s | 1.3K | 55 | Lasse Collin | lasse.collin@tukaani.org | 1294934605 |  | decompressors: add boot-time XZ support  This implements the API defined in <linux/decompress/generic.h> which is used for kernel, initramfs, and initrd decompression.  This patch together with the first patch is enough for XZ-compressed initramfs and initrd; XZ-compressed kernel will need arch-specific changes.  The buffering requirements described in decompress_unxz.c are stricter than with gzip, so the relevant changes should be done to the arch-specific code when adding support for XZ-compressed kernel. Similarly, the heap size in arch-specific pre-boot code may need to be increased (30 KiB is enough).  The XZ decompressor needs memmove(), memeq() (memcmp() == 0), and memzero() (memset(ptr, 0, size)), which aren't available in all arch-specific pre-boot environments.  I'm including simple versions in decompress_unxz.c, but a cleaner solution would naturally be nicer.  Signed-off-by: Lasse Collin <lasse.collin@tukaani.org> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: Alain Knaff <alain@knaff.lu> Cc: Albin Tonnerre <albin.tonnerre@free-electrons.com> Cc: Phillip Lougher <phillip@lougher.demon.co.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | hweight.c | s | 1.9K | 62 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | locking-selftest-wlock-hardirq.h | s | 74B | 2 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | radix-tree.c | s | 38K | 1279 | Konstantin Khlebnikov | khlebnikov@openvz.org | 1338918400 |  | radix-tree: fix contiguous iterator  This patch fixes bug in macro radix_tree_for_each_contig().  If radix_tree_next_slot() sees NULL in next slot it returns NULL, but following radix_tree_next_chunk() switches iterating into next chunk. As result iterating becomes non-contiguous and breaks vfs "splice" and all its users.  Signed-off-by: Konstantin Khlebnikov <khlebnikov@openvz.org> Reported-and-bisected-by: Hans de Bruin <jmdebruin@xmsnet.nl> Reported-and-bisected-by: Ondrej Zary <linux@rainbow-software.org> Reported-bisected-and-tested-by: Toralf Förster <toralf.foerster@gmx.de> Link: https://lkml.org/lkml/2012/6/5/64 Cc: stable <stable@vger.kernel.org> # 3.4.x Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | nlattr.c | s | 12K | 434 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | debug_locks.c | s | 1.1K | 43 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | genalloc.c | s | 11K | 360 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | strncpy_from_user.c | s | 2.9K | 99 | Linus Torvalds | torvalds@linux-foundation.org | 1338057220 |  | word-at-a-time: make the interfaces truly generic  This changes the interfaces in <asm/word-at-a-time.h> to be a bit more complicated, but a lot more generic.  In particular, it allows us to really do the operations efficiently on both little-endian and big-endian machines, pretty much regardless of machine details.  For example, if you can rely on a fast population count instruction on your architecture, this will allow you to make your optimized <asm/word-at-a-time.h> file with that.  NOTE! The "generic" version in include/asm-generic/word-at-a-time.h is not truly generic, it actually only works on big-endian.  Why? Because on little-endian the generic algorithms are wasteful, since you can inevitably do better. The x86 implementation is an example of that.  (The only truly non-generic part of the asm-generic implementation is the "find_zero()" function, and you could make a little-endian version of it.  And if the Kbuild infrastructure allowed us to pick a particular header file, that would be lovely)  The <asm/word-at-a-time.h> functions are as follows:   - WORD_AT_A_TIME_CONSTANTS: specific constants that the algorithm    uses.   - has_zero(): take a word, and determine if it has a zero byte in it.    It gets the word, the pointer to the constant pool, and a pointer to    an intermediate "data" field it can set.     This is the "quick-and-dirty" zero tester: it's what is run inside    the hot loops.   - "prep_zero_mask()": take the word, the data that has_zero() produced,    and the constant pool, and generate an *exact* mask of which byte had    the first zero.  This is run directly *outside* the loop, and allows    the "has_zero()" function to answer the "is there a zero byte"    question without necessarily getting exactly *which* byte is the    first one to contain a zero.     If you do multiple byte lookups concurrently (eg "hash_name()", which    looks for both NUL and '/' bytes), after you've done the prep_zero_mask()    phase, the result of those can be or'ed together to get the "either    or" case.   - The result from "prep_zero_mask()" can then be fed into "find_zero()"    (to find the byte offset of the first byte that was zero) or into    "zero_bytemask()" (to find the bytemask of the bytes preceding the    zero byte).     The existence of zero_bytemask() is optional, and is not necessary    for the normal string routines.  But dentry name hashing needs it, so    if you enable DENTRY_WORD_AT_A_TIME you need to expose it.  This changes the generic strncpy_from_user() function and the dentry hashing functions to use these modified word-at-a-time interfaces.  This gets us back to the optimized state of the x86 strncpy that we lost in the previous commit when moving over to the generic version.  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | debugobjects.c | s | 26K | 922 | Dan Carpenter | dan.carpenter@oracle.com | 1334749128 |  | debugobjects: Fill_pool() returns void now  There was a return missed in 1fda107d44 "debugobjects: Remove unused return value from fill_pool()".  It makes gcc complain:  	lib/debugobjects.c: In function ‘fill_pool’: 	lib/debugobjects.c:98:4: warning: ‘return’ with a value, in 		function returning void [enabled by default]  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Link: http://lkml.kernel.org/r/20120418112810.GA2669@elgon.mountain Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
d | zlib_deflate |  | 5 items |  | Jim Keniston | jkenisto@linux.vnet.ibm.com | 1300841057 |  | zlib: slim down zlib_deflate() workspace when possible  Instead of always creating a huge (268K) deflate_workspace with the maximum compression parameters (windowBits=15, memLevel=8), allow the caller to obtain a smaller workspace by specifying smaller parameter values.  For example, when capturing oops and panic reports to a medium with limited capacity, such as NVRAM, compression may be the only way to capture the whole report.  In this case, a small workspace (24K works fine) is a win, whether you allocate the workspace when you need it (i.e., during an oops or panic) or at boot time.  I've verified that this patch works with all accepted values of windowBits (positive and negative), memLevel, and compression level.  Signed-off-by: Jim Keniston <jkenisto@us.ibm.com> Cc: Herbert Xu <herbert@gondor.apana.org.au> Cc: David Miller <davem@davemloft.net> Cc: Chris Mason <chris.mason@oracle.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | locking-selftest-rsem.h | s | 163B | 10 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | btree.c | s | 19K | 691 | Joern Engel | joern@logfs.org | 1339105435 |  | btree: catch NULL value before it does harm  Storing NULL values in the btree is illegal and can lead to memory corruption and possible other fun as well.  Catch it on insert, instead of waiting for the inevitable.  Signed-off-by: Joern Engel <joern@logfs.org> Signed-off-by: Roland Dreier <roland@purestorage.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | list_debug.c | s | 2.6K | 93 | Chris Metcalf | cmetcalf@tilera.com | 1338333752 |  | list_debug: WARN for adding something already in the list  We were bitten by this at one point and added an additional sanity test for DEBUG_LIST.  You can't validly add a list_head to a list where either prev or next is the same as the thing you're adding.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Cc: Andi Kleen <andi@firstfloor.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | md5.c | s | 3.7K | 86 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | bug.c | s | 4.7K | 147 | Prarit Bhargava | prarit@redhat.com | 1327609725 |  | bugs, x86: Fix printk levels for panic, softlockups and stack dumps  rsyslog will display KERN_EMERG messages on a connected terminal.  However, these messages are useless/undecipherable for a general user.  For example, after a softlockup we get:   Message from syslogd@intel-s3e37-04 at Jan 25 14:18:06 ...  kernel:Stack:   Message from syslogd@intel-s3e37-04 at Jan 25 14:18:06 ...  kernel:Call Trace:   Message from syslogd@intel-s3e37-04 at Jan 25 14:18:06 ...  kernel:Code: ff ff a8 08 75 25 31 d2 48 8d 86 38 e0 ff ff 48 89  d1 0f 01 c8 0f ae f0 48 8b 86 38 e0 ff ff a8 08 75 08 b1 01 4c 89 e0 0f 01 c9 <e8> ea 69 dd ff 4c 29 e8 48 89 c7 e8 0f bc da ff 49 89 c4 49 89  This happens because the printk levels for these messages are incorrect. Only an informational message should be displayed on a terminal.  I modified the printk levels for various messages in the kernel and tested the output by using the drivers/misc/lkdtm.c kernel modules (ie, softlockups, panics, hard lockups, etc.) and confirmed that the console output was still the same and that the output to the terminals was correct.  For example, in the case of a softlockup we now see the much more informative:   Message from syslogd@intel-s3e37-04 at Jan 25 10:18:06 ...  BUG: soft lockup - CPU4 stuck for 60s!  instead of the above confusing messages.  AFAICT, the messages no longer have to be KERN_EMERG.  In the most important case of a panic we set console_verbose().  As for the other less severe cases the correct data is output to the console and /var/log/messages.  Successfully tested by me using the drivers/misc/lkdtm.c module.  Signed-off-by: Prarit Bhargava <prarit@redhat.com> Cc: dzickus@redhat.com Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/1327586134-11926-1-git-send-email-prarit@redhat.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | inflate.c | s | 38K | 1114 | David Howells | dhowells@redhat.com | 1281631895 |  | MN10300: Don't try and #include <linux/slab.h> in lib/inflate.c from bootloader  Don't try and #include <linux/slab.h> in lib/inflate.c from the bootloader code as linux/slab.h hauls in function defs that aren't available in the bootloader code and may also haul in conflicting functions.  To fix this, make the inclusion of linux/slab.h contingent on NO_INFLATE_MALLOC as are the usages of kmalloc() and kfree().  In MN10300, this causes the following errors:  In file included from include/linux/string.h:21,                  from include/linux/bitmap.h:8,                  from include/linux/nodemask.h:93,                  from include/linux/mmzone.h:16,                  from include/linux/gfp.h:4,                  from include/linux/slab.h:12,                  from arch/mn10300/boot/compressed/../../../../lib/inflate.c:106,                  from arch/mn10300/boot/compressed/misc.c:170: /warthog/am33/linux-2.6-mn10300/arch/mn10300/include/asm/string.h:19: error: conflicting types for 'memset' arch/mn10300/boot/compressed/misc.c:59: error: previous definition of 'memset' was here  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | lru_cache.c | s | 14K | 492 | Ilia Mirkin | imirkin@alum.mit.edu | 1306337992 |  | lru_cache: use correct type in sizeof for allocation  This has no actual effect, since sizeof(struct hlist_head) == sizeof(struct hlist_head *), but it's still the wrong type to use.  The semantic match that finds this problem: // <smpl> @@ type T; identifier x; @@ T *x; ... * x = kzalloc(... * sizeof(T*) * ..., ...); // </smpl>  [akpm@linux-foundation.org: use kcalloc()] Signed-off-by: Ilia Mirkin <imirkin@alum.mit.edu> Acked-by: Lars Ellenberg <lars@linbit.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | bitrev.c | s | 2.1K | 55 | Harvey Harrison | harvey.harrison@gmail.com | 1212776950 |  | lib: export bitrev16  Bluetooth will be able to use this.  Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com> Cc: Marcel Holtmann <marcel@holtmann.org> Cc: Dave Young <hidave.darkstar@gmail.com> Cc: Akinobu Mita <akinobu.mita@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | cpu-notifier-error-inject.c | s | 1.5K | 50 | Akinobu Mita | akinobu.mita@gmail.com | 1274976768 |  | fault-injection: add CPU notifier error injection module  I used this module to test the series of modification to the cpu notifiers code.  Example1: inject CPU offline error (-1 == -EPERM)  	# modprobe cpu-notifier-error-inject cpu_down_prepare_error=-1 	# echo 0 > /sys/devices/system/cpu/cpu1/online 	bash: echo: write error: Operation not permitted  Example2: inject CPU online error (-2 == -ENOENT)  	# modprobe cpu-notifier-error-inject cpu_up_prepare_error=-2 	# echo 1 > /sys/devices/system/cpu/cpu1/online 	bash: echo: write error: No such file or directory  [akpm@linux-foundation.org: fix Kconfig help text] Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | textsearch.c | s | 9.6K | 294 | Jesper Dangaard Brouer | hawk@comx.dk | 1295940810 |  | textsearch: doc - fix spelling in lib/textsearch.c.  Found the following spelling errors while reading the textsearch code:   "facitilies"  -> "facilities"   "continously" -> "continuously"   "arbitary"    -> "arbitrary"   "patern"      -> "pattern"   "occurences"  -> "occurrences"  I'll try to push this patch through DaveM, given the only users of textsearch is in the net/ tree (nf_conntrack_amanda.c, xt_string.c and em_text.c)  Signed-off-by: Jesper Sander <sander.contrib@gmail.com> Signed-off-by: Jesper Dangaard Brouer <hawk@comx.dk> Signed-off-by: David S. Miller <davem@davemloft.net>
f | ts_fsm.c | s | 10K | 291 | Joonwoo Park | joonwpark81@gmail.com | 1215509907 |  | textsearch: ts_fsm: return error on request for case insensitive search  For fsm text search, handle case insensitive parameter as -EINVAL.  Signed-off-by: Joonwoo Park <joonwpark81@gmail.com> Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: David S. Miller <davem@davemloft.net>
f | locking-selftest-wlock-softirq.h | s | 74B | 2 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | crc-itu-t.c | s | 2.8K | 63 | Ivo van Doorn | IvDoorn@gmail.com | 1178814253 |  | CRC ITU-T V.41  This will add the CRC calculation according to the CRC ITU-T V.41 to the kernel lib/ folder.  This code has been derived from the rt2x00 driver, currently found only in the wireless-dev tree, but this library is generic and could be used by more drivers who currently use their own implementation.  Signed-off-by: Ivo van Doorn <IvDoorn@gmail.com>  Also useful for the new firewire stack.  Signed-off-by: Kristian Hoegsberg <krh@redhat.com> Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | Kconfig | g | 9.0K |  | Linus Torvalds | torvalds@linux-foundation.org | 1338076636 |  | Merge branch 'generic-string-functions'  This makes <asm/word-at-a-time.h> actually live up to its promise of allowing architectures to help tune the string functions that do their work a word at a time.  David had already taken the x86 strncpy_from_user() function, modified it to work on sparc, and then done the extra work to make it generically useful.  This then expands on that work by making x86 use that generic version, completing the circle.  But more importantly, it fixes up the word-at-a-time interfaces so that it's now easy to also support things like strnlen_user(), and pretty much most random string functions.  David reports that it all works fine on sparc, and Jonas Bonn reported that an earlier version of this worked on OpenRISC too.  It's pretty easy for architectures to add support for this and just replace their private versions with the generic code.  * generic-string-functions:   sparc: use the new generic strnlen_user() function   x86: use the new generic strnlen_user() function   lib: add generic strnlen_user() function   word-at-a-time: make the interfaces truly generic   x86: use generic strncpy_from_user routine
f | checksum.c | s | 4.8K | 184 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | gcd.c | s | 291B | 16 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | cmdline.c | s | 3.6K | 140 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | hexdump.c | s | 7.0K | 225 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | ts_bm.c | s | 5.3K | 178 | Joonwoo Park | joonwpark81@gmail.com | 1215509874 |  | textsearch: ts_bm: support case insensitive searching in Boyer-Moore algorithm  Add support for case insensitive search to Boyer-Moore algorithm.  Signed-off-by: Joonwoo Park <joonwpark81@gmail.com> Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: David S. Miller <davem@davemloft.net>
f | kstrtox.h | s | 254B | 6 | Alexey Dobriyan | adobriyan@gmail.com | 1320107456 |  | lib/kstrtox: common code between kstrto*() and simple_strto*() functions  Currently termination logic (\0 or \n\0) is hardcoded in _kstrtoull(), avoid that for code reuse between kstrto*() and simple_strtoull(). Essentially, make them different only in termination logic.  simple_strtoull() (and scanf(), BTW) ignores integer overflow, that's a bug we currently don't have guts to fix, making KSTRTOX_OVERFLOW hack necessary.  Almost forgot: patch shrinks code size by about ~80 bytes on x86_64.  Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | crc8.c | s | 2.4K | 75 | Arend van Spriel | arend@broadcom.com | 1307127666 |  | lib: crc8: add new library module providing crc8 algorithm  The brcm80211 driver in staging tree uses a crc8 function. Based on feedback from John Linville to move this to lib directory, the linux source has been searched. Although there is currently only one other kernel driver using this algorithm (ie. drivers/ssb) we are providing this as a library function for others to use.  Cc: linux-kernel@vger.kernel.org Cc: linux-wireless@vger.kernel.org Cc: Dan Carpenter <error27@gmail.com> Cc: George Spelvin <linux@horizon.com> Cc: Randy Dunlap <rdunlap@xenotime.net> Reviewed-by: Henry Ptasinski <henryp@broadcom.com> Reviewed-by: Roland Vossen <rvossen@broadcom.com> Reviewed-by: "Franky (Zhenhui) Lin" <frankyl@broadcom.com> Signed-off-by: Arend van Spriel <arend@broadcom.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | flex_array.c | s | 10K | 363 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | crc32defs.h | s | 2.0K | 67 | Darrick J. Wong | djwong@us.ibm.com | 1332547118 |  | crc32: select an algorithm via Kconfig  Allow the kernel builder to choose a crc32* algorithm for the kernel.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Cc: Bob Pearson <rpearson@systemfabricworks.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | show_mem.c | s | 1.3K | 51 | David Rientjes | rientjes@google.com | 1306337943 |  | arch, mm: filter disallowed nodes from arch specific show_mem functions  Architectures that implement their own show_mem() function did not pass the filter argument to show_free_areas() to appropriately avoid emitting the state of nodes that are disallowed in the current context.  This patch now passes the filter argument to show_free_areas() so those nodes are now avoided.  This patch also removes the show_free_areas() wrapper around __show_free_areas() and converts existing callers to pass an empty filter.  ia64 emits additional information for each node, so skip_free_areas_zone() must be made global to filter disallowed nodes and it is converted to use a nid argument rather than a zone for this use case.  Signed-off-by: David Rientjes <rientjes@google.com> Cc: Russell King <linux@arm.linux.org.uk> Cc: Tony Luck <tony.luck@intel.com> Cc: Fenghua Yu <fenghua.yu@intel.com> Cc: Kyle McMartin <kyle@mcmartin.ca> Cc: Helge Deller <deller@gmx.de> Cc: James Bottomley <jejb@parisc-linux.org> Cc: "David S. Miller" <davem@davemloft.net> Cc: Guan Xuetao <gxt@mprc.pku.edu.cn> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | average.c | s | 1.9K | 57 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | div64.c | s | 3.1K | 124 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | is_single_threaded.c | s | 1.3K | 51 | Oleg Nesterov | oleg@redhat.com | 1247785891 |  | kernel: is_current_single_threaded: don't use ->mmap_sem  is_current_single_threaded() can safely miss a freshly forked CLONE_VM task, but in this case it must not miss its parent. That is why we take mm->mmap_sem for writing to make sure a thread/task with the same ->mm can't pass exit_mm() and disappear.  However we can avoid ->mmap_sem and rely on rcu/barriers:  	- if we do not see the exiting parent on thread/process list 	  we see the result of list_del_rcu(), in this case we must 	  also see the result of list_add_rcu() which does wmb().  	- if we do see the parent but its ->mm == NULL, we need rmb() 	  to make sure we can't miss the child.  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Acked-by: David Howells <dhowells@redhat.com> Signed-off-by: James Morris <jmorris@namei.org>
f | reciprocal_div.c | s | 218B | 10 | Eric Dumazet | eric.dumazet@gmail.com | 1323391963 |  | sch_red: Adaptative RED AQM  Adaptative RED AQM for linux, based on paper from Sally FLoyd, Ramakrishna Gummadi, and Scott Shenker, August 2001 :  http://icir.org/floyd/papers/adaptiveRed.pdf  Goal of Adaptative RED is to make max_p a dynamic value between 1% and 50% to reach the target average queue : (max_th - min_th) / 2  Every 500 ms:  if (avg > target and max_p <= 0.5)   increase max_p : max_p += alpha;  else if (avg < target and max_p >= 0.01)   decrease max_p : max_p *= beta;  target :[min_th + 0.4*(min_th - max_th),           min_th + 0.6*(min_th - max_th)]. alpha : min(0.01, max_p / 4) beta : 0.9 max_P is a Q0.32 fixed point number (unsigned, with 32 bits mantissa)  Changes against our RED implementation are :  max_p is no longer a negative power of two (1/(2^Plog)), but a Q0.32 fixed point number, to allow full range described in Adatative paper.  To deliver a random number, we now use a reciprocal divide (thats really a multiply), but this operation is done once per marked/droped packet when in RED_BETWEEN_TRESH window, so added cost (compared to previous AND operation) is near zero.  dump operation gives current max_p value in a new TCA_RED_MAX_P attribute.  Example on a 10Mbit link :  tc qdisc add dev $DEV parent 1:1 handle 10: est 1sec 8sec red \    limit 400000 min 30000 max 90000 avpkt 1000 \    burst 55 ecn adaptative bandwidth 10Mbit  # tc -s -d qdisc show dev eth3 ... qdisc red 10: parent 1:1 limit 400000b min 30000b max 90000b ecn adaptative ewma 5 max_p=0.113335 Scell_log 15  Sent 50414282 bytes 34504 pkt (dropped 35, overlimits 1392 requeues 0)  rate 9749Kbit 831pps backlog 72056b 16p requeues 0   marked 1357 early 35 pdrop 0 other 0  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | locking-selftest-mutex.h | s | 120B | 8 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | scatterlist.c | s | 12K | 459 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
d | mpi |  | 28 items |  | Jesper Juhl | jj@chaosbits.net | 1334715268 |  | mpi: Avoid using freed pointer in mpi_lshift_limbs()  At the start of the function we assign 'a->d' to 'ap'. Then we use the RESIZE_IF_NEEDED macro on 'a' - this may free 'a->d' and replace it with newly allocaetd storage. In that case, we'll be operating on freed memory further down in the function when we index into 'ap[]'. Since we don't actually need 'ap' until after the use of the RESIZE_IF_NEEDED macro we can just delay the assignment to it until after we've potentially resized, thus avoiding the issue.  While I was there anyway I also changed the integer variable 'n' to be const. It might as well be since we only assign to it once and use it as a constant, and then the compiler will tell us if we ever assign to it in the future.  Signed-off-by: Jesper Juhl <jj@chaosbits.net> Acked-by: Dmitry Kasatkin <dmitry.kasatkin@intel.com> Signed-off-by: James Morris <james.l.morris@oracle.com>
f | atomic64_test.c | s | 3.5K | 138 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330553708 |  | bug.h: add include of it to various implicit C users  With bug.h currently living right in linux/kernel.h there are files that use BUG_ON and friends but are not including the header explicitly.  Fix them up so we can remove the presence in kernel.h file.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | prio_heap.c | s | 1.4K | 61 | Harvey Harrison | harvey.harrison@gmail.com | 1231286351 |  | lib: fix sparse shadowed variable warning  pos is always set before being used, no need to declare a second one inside the if() block.  lib/prio_heap.c:34:7: warning: symbol 'pos' shadows an earlier one lib/prio_heap.c:30:6: originally declared here  Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | dma-debug.c | s | 33K | 1109 | Jakub Kicinski | kubakici@wp.pl | 1334226526 |  | dma-debug: release free_entries_lock before saving stack trace  Saving stack trace can take a while and once the entry is allocated free_entries_lock is no longer needed.  Signed-off-by: Jakub Kicinski <kubakici@wp.pl> Signed-off-by: Joerg Roedel <joerg.roedel@amd.com>
f | random32.c | s | 3.9K | 125 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | decompress_unxz.c | s | 10K | 348 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | crc16.c | s | 2.8K | 62 | Randy Dunlap | rdunlap@xenotime.net | 1151254880 |  | [PATCH] kernel-doc for lib/crc*.c  Make kernel-doc corrections & additions to lib/crc*.c.  Add crc functions to kernel-api.tmpl in DocBook.  Signed-off-by: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | lcm.c | s | 288B | 14 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | plist.c | s | 4.7K | 176 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330553708 |  | bug.h: add include of it to various implicit C users  With bug.h currently living right in linux/kernel.h there are files that use BUG_ON and friends but are not including the header explicitly.  Fix them up so we can remove the presence in kernel.h file.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | dump_stack.c | s | 290B | 12 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | locking-selftest-spin-hardirq.h | s | 73B | 2 | Ingo Molnar | mingo@elte.hu | 1151965623 |  | [PATCH] lockdep: locking API self tests  Introduce DEBUG_LOCKING_API_SELFTESTS, which uses the generic lock debugging code's silent-failure feature to run a matrix of testcases.  There are 210 testcases currently:    +-----------------------   || Locking API testsuite:   +------------------------------+------+------+------+------+------+------+                                  || spin ||wlock ||rlock ||mutex || wsem || rsem ||   -------------------------------+------+------+------+------+------+------+                      A-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  A-B-B-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-B-C-C-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||              A-B-C-A-B-C deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-B-C-C-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-D-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||          A-B-C-D-B-C-D-A deadlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                     double unlock:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||                  bad unlock order:  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+------+------+               recursive read-lock:             ||  ok  ||             ||  ok  ||   --------------------------------------+------+------+------+------+------+                 non-nested unlock:  ok  ||  ok  ||  ok  ||  ok  ||   --------------------------------------+------+------+------+      hard-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/12:  ok  ||  ok  ||  ok  ||      hard-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||      soft-irqs-on + irq-safe-A/21:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/12:  ok  ||  ok  ||  ok  ||        sirq-safe-A => hirqs-on/21:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/12:  ok  ||  ok  ||  ok  ||          hard-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||          soft-safe-A + irqs-on/21:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #1/321:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/123:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/132:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/213:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/231:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/312:  ok  ||  ok  ||  ok  ||     hard-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||     soft-safe-A + unsafe-B #2/321:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/123:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/132:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/213:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/231:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/312:  ok  ||  ok  ||  ok  ||       hard-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       soft-irq lock-inversion/321:  ok  ||  ok  ||  ok  ||       hard-irq read-recursion/123:  ok  ||       soft-irq read-recursion/123:  ok  ||       hard-irq read-recursion/132:  ok  ||       soft-irq read-recursion/132:  ok  ||       hard-irq read-recursion/213:  ok  ||       soft-irq read-recursion/213:  ok  ||       hard-irq read-recursion/231:  ok  ||       soft-irq read-recursion/231:  ok  ||       hard-irq read-recursion/312:  ok  ||       soft-irq read-recursion/312:  ok  ||       hard-irq read-recursion/321:  ok  ||       soft-irq read-recursion/321:  ok  ||   --------------------------------+-----+----------------   Good, all 210 testcases passed! ||   --------------------------------+  Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | timerqueue.c | s | 3.1K | 98 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
f | kstrtox.c | s | 6.0K | 256 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | bsearch.c | s | 1.6K | 48 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | rbtree.c | s | 10K | 400 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331150644 |  | lib: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
