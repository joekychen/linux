f | lzo1x_decompress.c | s | 4.9K | 228 | Albin Tonnerre | albin.tonnerre@free-electrons.com | 1263231244 |  | lib: add support for LZO-compressed kernels  This patch series adds generic support for creating and extracting LZO-compressed kernel images, as well as support for using such images on the x86 and ARM architectures, and support for creating and using LZO-compressed initrd and initramfs images.  Russell King said:  : Testing on a Cortex A9 model: : - lzo decompressor is 65% of the time gzip takes to decompress a kernel : - lzo kernel is 9% larger than a gzip kernel : : which I'm happy to say confirms your figures when comparing the two. : : However, when comparing your new gzip code to the old gzip code: : - new is 99% of the size of the old code : - new takes 42% of the time to decompress than the old code : : What this means is that for a proper comparison, the results get even better: : - lzo is 7.5% larger than the old gzip'd kernel image : - lzo takes 28% of the time that the old gzip code took : : So the expense seems definitely worth the effort.  The only reason I : can think of ever using gzip would be if you needed the additional : compression (eg, because you have limited flash to store the image.) : : I would argue that the default for ARM should therefore be LZO.  This patch:  The lzo compressor is worse than gzip at compression, but faster at extraction.  Here are some figures for an ARM board I'm working on:  Uncompressed size: 3.24Mo gzip  1.61Mo 0.72s lzo   1.75Mo 0.48s  So for a compression ratio that is still relatively close to gzip, it's much faster to extract, at least in that case.  This part contains:  - Makefile routine to support lzo compression  - Fixes to the existing lzo compressor so that it can be used in    compressed kernels  - wrapper around the existing lzo1x_decompress, as it only extracts one    block at a time, while we need to extract a whole file here  - config dialog for kernel compression  [akpm@linux-foundation.org: coding-style fixes] [akpm@linux-foundation.org: cleanup] Signed-off-by: Albin Tonnerre <albin.tonnerre@free-electrons.com> Tested-by: Wu Zhangjin <wuzhangjin@gmail.com> Acked-by: "H. Peter Anvin" <hpa@zytor.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Thomas Gleixner <tglx@linutronix.de> Tested-by: Russell King <rmk@arm.linux.org.uk> Acked-by: Russell King <rmk@arm.linux.org.uk> Cc: Ralf Baechle <ralf@linux-mips.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | lzo1x_compress.c | s | 4.3K | 191 | Richard Purdie | richard@openedhand.com | 1185921577 |  | lzo: add some missing casts  Add some casts to the LZO compression algorithm after they were removed during cleanup and shouldn't have been.  Signed-off-by: Richard Purdie <rpurdie@openedhand.com> Cc: Edward Shishkin <edward@namesys.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | lzodefs.h | s | 1.1K | 37 | Richard Purdie | rpurdie@openedhand.com | 1184115073 |  | Add LZO1X algorithm to the kernel  This is a hybrid version of the patch to add the LZO1X compression algorithm to the kernel.  Nitin and myself have merged the best parts of the various patches to form this version which we're both happy with (and are jointly signing off).  The performance of this version is equivalent to the original minilzo code it was based on.  Bytecode comparisons have also been made on ARM, i386 and x86_64 with favourable results.  There are several users of LZO lined up including jffs2, crypto and reiser4 since its much faster than zlib.  Signed-off-by: Nitin Gupta <nitingupta910@gmail.com> Signed-off-by: Richard Purdie <rpurdie@openedhand.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Makefile | g | 175B |  | Richard Purdie | rpurdie@openedhand.com | 1184115073 |  | Add LZO1X algorithm to the kernel  This is a hybrid version of the patch to add the LZO1X compression algorithm to the kernel.  Nitin and myself have merged the best parts of the various patches to form this version which we're both happy with (and are jointly signing off).  The performance of this version is equivalent to the original minilzo code it was based on.  Bytecode comparisons have also been made on ARM, i386 and x86_64 with favourable results.  There are several users of LZO lined up including jffs2, crypto and reiser4 since its much faster than zlib.  Signed-off-by: Nitin Gupta <nitingupta910@gmail.com> Signed-off-by: Richard Purdie <rpurdie@openedhand.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
