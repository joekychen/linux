f | deflate.c | s | 43K | 1114 | Jim Keniston | jkenisto@linux.vnet.ibm.com | 1300841057 |  | zlib: slim down zlib_deflate() workspace when possible  Instead of always creating a huge (268K) deflate_workspace with the maximum compression parameters (windowBits=15, memLevel=8), allow the caller to obtain a smaller workspace by specifying smaller parameter values.  For example, when capturing oops and panic reports to a medium with limited capacity, such as NVRAM, compression may be the only way to capture the whole report.  In this case, a small workspace (24K works fine) is a win, whether you allocate the workspace when you need it (i.e., during an oops or panic) or at boot time.  I've verified that this patch works with all accepted values of windowBits (positive and negative), memLevel, and compression level.  Signed-off-by: Jim Keniston <jkenisto@us.ibm.com> Cc: Herbert Xu <herbert@gondor.apana.org.au> Cc: David Miller <davem@davemloft.net> Cc: Chris Mason <chris.mason@oracle.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | defutil.h | s | 11K | 280 | Jim Keniston | jkenisto@linux.vnet.ibm.com | 1300841057 |  | zlib: slim down zlib_deflate() workspace when possible  Instead of always creating a huge (268K) deflate_workspace with the maximum compression parameters (windowBits=15, memLevel=8), allow the caller to obtain a smaller workspace by specifying smaller parameter values.  For example, when capturing oops and panic reports to a medium with limited capacity, such as NVRAM, compression may be the only way to capture the whole report.  In this case, a small workspace (24K works fine) is a win, whether you allocate the workspace when you need it (i.e., during an oops or panic) or at boot time.  I've verified that this patch works with all accepted values of windowBits (positive and negative), memLevel, and compression level.  Signed-off-by: Jim Keniston <jkenisto@us.ibm.com> Cc: Herbert Xu <herbert@gondor.apana.org.au> Cc: David Miller <davem@davemloft.net> Cc: Chris Mason <chris.mason@oracle.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | deflate_syms.c | s | 377B | 15 | Richard Purdie | rpurdie@rpsys.net | 1151013958 |  | [PATCH] zlib_inflate: Upgrade library code to a recent version  Upgrade the zlib_inflate implementation in the kernel from a patched version 1.1.3/4 to a patched 1.2.3.  The code in the kernel is about seven years old and I noticed that the external zlib library's inflate performance was significantly faster (~50%) than the code in the kernel on ARM (and faster again on x86_32).  For comparison the newer deflate code is 20% slower on ARM and 50% slower on x86_32 but gives an approx 1% compression ratio improvement.  I don't consider this to be an improvement for kernel use so have no plans to change the zlib_deflate code.  Various changes have been made to the zlib code in the kernel, the most significant being the extra functions/flush option used by ppp_deflate. This update reimplements the features PPP needs to ensure it continues to work.  This code has been tested on ARM under both JFFS2 (with zlib compression enabled) and ppp_deflate and on x86_32.  JFFS2 sees an approx.  10% real world file read speed improvement.  This patch also removes ZLIB_VERSION as it no longer has a correct value. We don't need version checks anyway as the kernel's module handling will take care of that for us.  This removal is also more in keeping with the zlib author's wishes (http://www.zlib.net/zlib_faq.html#faq24) and I've added something to the zlib.h header to note its a modified version.  Signed-off-by: Richard Purdie <rpurdie@rpsys.net> Acked-by: Joern Engel <joern@wh.fh-wedel.de> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | Makefile | g | 276B |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | deftree.c | s | 39K | 977 | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
