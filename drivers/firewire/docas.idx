f | core-device.c | s | 33K | 1078 | Clemens Ladisch | clemens@ladisch.de | 1334696230 |  | firewire: core: fw_device_refresh(): clean up error handling  In fw_device_init() and fw_device_refresh(), if a call to read_cofig_rom() fails, the operation is retried a few times, with these retries being controlled by the MAX_RETRIES and RETRY_DELAY symbols.  fw_device_refresh() also reads part of the config rom by calling reread_config_rom().  Any errors from this call resulted in retries with MAX_RETRIES/2 and RETRY_DELAY/2.  There is no reason to require that a device that has initiated a bus reset must react faster to read requests than a device that has just been plugged in.  Furthermore, if the config rom has changed, any errors from the following read_config_rom() call are then handled with the normal retry count and delay.  Remove this inconsistency by always using the normal retry count and delay.  (This also makes the two error handlers identical and allows merging them.)  Signed-off-by: Clemens Ladisch <clemens@ladisch.de> Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | sbp2.c | s | 47K | 1405 | Clemens Ladisch | clemens@ladisch.de | 1337629784 |  | firewire: sbp2: document the absence of alignment requirements  The SBP-2/3 specifications do not require any alignment of data buffers; only their own data structures need to be quadlet-aligned [SR: or octlet-aligned].  Fix the comments to reflect this, but leave the actual alignment at 32 bits to avoid theoretical problems with target implementations that might handle this incorrectly.  Signed-off-by: Clemens Ladisch <clemens@ladisch.de> Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | nosy-user.h | s | 590B | 20 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1280221451 |  | firewire: nosy: endianess fixes and annotations  1.)  The DMA programs (struct pcl) are PCI-endian = little endian data (except for the 3rd quadlet in a PCL which the controller does not touch).  Annotate them as such.  Fix all accesses of the PCL to work with big endian CPUs also.  Not actually tested, I only have a little endian PC to test with.  This includes replacement of a bitfield struct pcl_status by open-coded shift and mask operations.  2.)  The two __attribute__ ((packed)) at struct pcl are not really required since it consists of u32/__le32 only, i.e. there will be no padding with or without the attribute.  3.)  The received IEEE 1394 data are byteswapped by the controller from IEEE 1394 endian = big endian to PCI endian = little endian because the PCL_BIGENDIAN control bit is set.  Therefore annotate the DMA buffer as a __le32 array.  Fix the one access of the DMA buffer (the check of the transaction code of link packets) to work with big endian CPUs.  Also fix the two accesses of the client bounce buffer (the reading of packet length).  4.)  Add a comment to the userspace ABI header that all of the data gets out as little endian data, except for the timestamp which is CPU endian. (We could make it little endian too, but why?  Vice versa, an ioctl could be added to dump packet data in big endian byte order...)  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | Makefile | g | 545B |  | Stefan Richter | stefanr@s5r6.in-berlin.de | 1286801283 |  | ieee1394: move init_ohci1394_dma to drivers/firewire/  because drivers/ieee1394/ will be deleted.  Additional changes:   - add some #include directives   - adjust to use firewire/ohci.h instead of ieee1394/ohci1394.h,     replace struct ti_ohci by a minimal struct ohci,     replace quadlet_t from ieee1394_types.h by u32   - two or three trivial stylistic changes   - __iomem annotation  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | core.h | s | 7.3K | 199 | Linus Torvalds | torvalds@linux-foundation.org | 1337889467 |  | 
f | core-transaction.c | s | 34K | 1085 | Linus Torvalds | torvalds@linux-foundation.org | 1337889467 |  | 
f | ohci.c | s | 102K | 3179 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1334694457 |  | firewire: ohci: omit spinlock IRQ flags where possible  bus_reset_work() is only called from workqueue thread context.  ohci_set_config_rom() and ohci_allocate_iso_context() perform GFP_KERNEL memory allocations, therefore they must be called with interrupts enabled.  Hence these functions may disable and enable local IRQs without having to track IRQ state.  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | nosy.h | s | 9.7K | 205 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1280221450 |  | firewire: nosy: misc cleanups  Extend copyright note to 2007, c.f. Kristian's git log.  Includes:   - replace some <asm/*.h> by <linux/*.h>   - add required indirectly included <linux/spinlock.h>   - order alphabetically  Coding style related changes:   - change to utf8   - normalize whitespace   - normalize comment style   - remove usages of __FUNCTION__   - remove an unnecessary cast from void *  Const and static declarations:   - driver_name is not const in pci_driver.name, drop const qualifier   - driver_name can be taken from KBUILD_MODNAME   - the global variable minors[] can and should be static   - constify struct file_operations instance  Data types:   - Remove unused struct member struct packet.code.  struct packet is     only used for driver-internal bookkeeping; it does not appear on the     wire or in DMA programs or the userspace ABI.  Hence the unused     member .code can be removed without worries.  Preprocessor macros:   - unroll a preprocessor macro that containd a return   - use list_for_each_entry  Printk:   - add missing terminating \n in some format strings  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | core-iso.c | s | 10K | 337 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1334694457 |  | firewire: core: fix DMA mapping direction  Seen with recent libdc1394:  If a client mmap()s the buffer of an isochronous reception buffer with PROT_READ||PROT_WRITE instead of just PROT_READ, firewire-core sets the wrong DMA mapping direction during buffer initialization.  The fix is to split fw_iso_buffer_init() into allocation and DMA mapping and to perform the latter after both buffer and DMA context were allocated.  Buffer allocation and context allocation may happen in any order, but we need the context type (reception or transmission) in order to set the DMA direction of the buffer.  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | nosy.c | s | 17K | 574 | Axel Lin | axel.lin@gmail.com | 1333974217 |  | firewire: use module_pci_driver  This patch converts the drivers in drivers/firewire/* to use module_pci_driver() macro which makes the code smaller and a bit simpler.  Signed-off-by: Axel Lin <axel.lin@gmail.com> Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | core-topology.c | s | 14K | 480 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | init_ohci1394_dma.c | s | 9.6K | 253 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1286801283 |  | ieee1394: move init_ohci1394_dma to drivers/firewire/  because drivers/ieee1394/ will be deleted.  Additional changes:   - add some #include directives   - adjust to use firewire/ohci.h instead of ieee1394/ohci1394.h,     replace struct ti_ohci by a minimal struct ohci,     replace quadlet_t from ieee1394_types.h by u32   - two or three trivial stylistic changes   - __iomem annotation  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | core-card.c | s | 19K | 592 | Linus Torvalds | torvalds@linux-foundation.org | 1337889467 |  | 
f | core-cdev.c | s | 46K | 1502 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1334694457 |  | firewire: core: fix DMA mapping direction  Seen with recent libdc1394:  If a client mmap()s the buffer of an isochronous reception buffer with PROT_READ||PROT_WRITE instead of just PROT_READ, firewire-core sets the wrong DMA mapping direction during buffer initialization.  The fix is to split fw_iso_buffer_init() into allocation and DMA mapping and to perform the latter after both buffer and DMA context were allocated.  Buffer allocation and context allocation may happen in any order, but we need the context type (reception or transmission) in order to set the DMA direction of the buffer.  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | Kconfig | g | 2.8K |  | Stefan Richter | stefanr@s5r6.in-berlin.de | 1331397679 |  | firewire: ohci: move runtime debug facility out of #ifdef  CONFIG_FIREWIRE_OHCI_DEBUG could have been exposed to kernel tweakers if CONFIG_EXPERT was set.  But in hindsight, this stuff is far too useful to omit it.  So get rid of two #else branches that are only going to bitrot otherwise.  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | ohci.h | s | 7.0K | 146 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1287317352 |  | firewire: ohci: fix TI TSB82AA2 regression since 2.6.35  Revert commit 54672386ccf36ffa21d1de8e75624af83f9b0eeb "firewire: ohci: fix up configuration of TI chips". It caused massive slow-down and data corruption with a TSB82AA2 based StarTech EC1394B2 ExpressCard and FireWire 800 harddisks.  https://bugs.launchpad.net/ubuntu/+source/linux/+bug/657081 http://thread.gmane.org/gmane.linux.kernel.firewire.user/4013  The fact that some card EEPROMs do not program these enhancements may be related to TSB81BA3 phy chip errata, if not to bugs of TSB82AA2 itself. We could re-add these configuration steps, but only conditional on a whitelist of cards on which these enhancements bring a proven positive effect.  Reported-and-tested-by: Eric Shattow <lucent@gmail.com> Cc: Clemens Ladisch <clemens@ladisch.de> Cc: <stable@kernel.org> 2.6.35 Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
f | net.c | s | 43K | 1428 | Stefan Richter | stefanr@s5r6.in-berlin.de | 1329946560 |  | firewire: net: use dev_printk API  Change the log line prefix from "firewire_net: " to "net firewire0: " etc. for the case that several RFC 2734 interfaces are being used in the same machine.  Note, the netdev_printk API is not very useful to firewire-net. netdev_notice(net, "abc\n") would result in irritating messages like "firewire_ohci 0000:0a:00.0: firewire0: abc".  Nor would a dev_printk on the fw_unit.device to which firewire-net is being bound be useful, because there are generally multiple ones of those per interface (from all RFC 2734 peers on the bus, the local node being only one of them).  In the initialization message of each interface, log the PCI device name of the card which is parent of the netdevice instead of the GUID of the peer which was semi-randomly used to establish the netdevice.  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
