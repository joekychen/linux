f | debug.c | s | 13K | 430 | Brian Norris | computersforpeace@gmail.com | 1340796135 |  | UBI: correct usage of IS_ENABLED()  Commit "e9b4cf2 UBI: fix debugfs-less systems support" fixed one regression but introduced a different regression - the debugfs is now always compiled out. Root cause: IS_ENABLED() arguments should be used with the CONFIG_* prefix.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | Makefile | g | 173B |  | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1337536888 |  | UBI: rename scan.c to attach.c  Finally, rename the scan.c file. Now adding fastmap support won't look that hacky anymore.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | debug.h | s | 5.9K | 149 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1337534762 |  | UBI: rename sv to av  After re-naming the 'struct ubi_scan_volume' we should adjust all variables named 'sv' to something else, because 'sv' stands for "scanning volume". Let's rename it to 'av' which stands for "attaching volume" which is a bit more consistent and has the same length, which makes re-naming easy.  Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@linux.intel.com>
f | eba.c | s | 35K | 1141 | Joel Reardon | joel@clambassador.com | 1337589281 |  | UBI: add lnum and vol_id to struct ubi_work  This is part of a multipart patch to allow UBI to force the erasure of particular logical eraseblock numbers. In this patch, the volume id and LEB number are added to ubi_work data structure, and both are also passed as a parameter to schedule erase to set it appropriately. Whenever ubi_wl_put_peb is called, the lnum is also passed to be forwarded to schedule erase. Later, a new ubi_sync_lnum will be added to execute immediately all work related to that lnum.  This was tested by outputting the vol_id and lnum during the schedule of erasure. The ubi thread was disabled and two ubifs drives on separate partitions repeated changed a small number of LEBs. The ubi module was readded, and all the erased LEBs, corresponding to the volumes, were added to the schedule erase queue.  Artem: minor tweaks  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | kapi.c | s | 22K | 685 | Joel Reardon | joel@clambassador.com | 1337589281 |  | UBI: modify ubi_wl_flush function to clear work queue for a lnum  This patch modifies ubi_wl_flush to force the erasure of particular volume id / logical eraseblock number pairs. Previous functionality is preserved when passing UBI_ALL for both values. The locations where ubi_wl_flush were called are appropriately changed: ubi_leb_erase only flushes for the erased LEB, and ubi_create_volume forces only flushing for its volume id. External code can call this new feature via the new function ubi_flush() added to kapi.c, which simply passes through to ubi_wl_flush().  This was tested by disabling the call to do_work in ubi thread, which results in the work queue remaining unless explicitly called to remove. UBIFS was changed to call ubifs_leb_change 50 times for four different LEBs. Then the new function was called to clear the queue: passing wrong volume ids / lnum, correct ones, and finally UBI_ALL for both to ensure it was finally all cleard. The work queue was dumped each time and the selective removal of the particular LEB numbers was observed. Extra checks were enabled and ubifs's integck was also run. Finally, the drive was repeatedly filled and emptied to ensure that the queue was cleared normally.  Artem: amended the patch.  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | ubi-media.h | s | 16K | 354 | Joel Reardon | joel@clambassador.com | 1337538645 |  | UBI: add in hex the value for UBI_INTERNAL_VOL_START to comment  Explicitly provide the first internal volume ID value in the comment for UBI_INTERNAL_VOL_START. This allows developers who, when adding features related to volume ids and observe unexpected very large volume ids, to grep for the observed value in the source code and find out immediately that it is expected behaviour.  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | wl.c | s | 44K | 1452 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1339071741 |  | UBI: correct ubi_wl_flush locking  Commit "62f38455 UBI: modify ubi_wl_flush function to clear work queue for a lnum" takes the 'work_sem' semaphore in write mode for the entire loop, which is not very good because it will block other workers for potentially long time. We do not need to have it in write mode - read mode is enough, and we do not need to hole it over the entire loop. So this patch turns changes the locking: takes 'work_sem' in read mode and pushes it down to the loop.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | misc.c | s | 3.5K | 108 | Brian Norris | computersforpeace@gmail.com | 1316585946 |  | mtd: utilize `mtd_is_*()' functions  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@intel.com>
f | ubi.h | s | 28K | 785 | Joel Reardon | joel@clambassador.com | 1337589281 |  | UBI: modify ubi_wl_flush function to clear work queue for a lnum  This patch modifies ubi_wl_flush to force the erasure of particular volume id / logical eraseblock number pairs. Previous functionality is preserved when passing UBI_ALL for both values. The locations where ubi_wl_flush were called are appropriately changed: ubi_leb_erase only flushes for the erased LEB, and ubi_create_volume forces only flushing for its volume id. External code can call this new feature via the new function ubi_flush() added to kapi.c, which simply passes through to ubi_wl_flush().  This was tested by disabling the call to do_work in ubi thread, which results in the work queue remaining unless explicitly called to remove. UBIFS was changed to call ubifs_leb_change 50 times for four different LEBs. Then the new function was called to clear the queue: passing wrong volume ids / lnum, correct ones, and finally UBI_ALL for both to ensure it was finally all cleard. The work queue was dumped each time and the selective removal of the particular LEB numbers was observed. Extra checks were enabled and ubifs's integck was also run. Finally, the drive was repeatedly filled and emptied to ensure that the queue was cleared normally.  Artem: amended the patch.  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | vtbl.c | s | 23K | 763 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1337534764 |  | UBI: amend comments after all the renamings  This patch amends commentaries in scan.[ch] to match the new logic. Reminder - we did the restructuring to prepare the code for adding the fastmap. This patch also renames a couple of functions - it was too difficult to separate out that change and I decided that it is not too bad to have it in the same patch with commentaries changes.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | vmt.c | s | 23K | 776 | Joel Reardon | joel@clambassador.com | 1337589281 |  | UBI: modify ubi_wl_flush function to clear work queue for a lnum  This patch modifies ubi_wl_flush to force the erasure of particular volume id / logical eraseblock number pairs. Previous functionality is preserved when passing UBI_ALL for both values. The locations where ubi_wl_flush were called are appropriately changed: ubi_leb_erase only flushes for the erased LEB, and ubi_create_volume forces only flushing for its volume id. External code can call this new feature via the new function ubi_flush() added to kapi.c, which simply passes through to ubi_wl_flush().  This was tested by disabling the call to do_work in ubi thread, which results in the work queue remaining unless explicitly called to remove. UBIFS was changed to call ubifs_leb_change 50 times for four different LEBs. Then the new function was called to clear the queue: passing wrong volume ids / lnum, correct ones, and finally UBI_ALL for both to ensure it was finally all cleard. The work queue was dumped each time and the selective removal of the particular LEB numbers was observed. Extra checks were enabled and ubifs's integck was also run. Finally, the drive was repeatedly filled and emptied to ensure that the queue was cleared normally.  Artem: amended the patch.  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | upd.c | s | 12K | 377 | Joel Reardon | joel@clambassador.com | 1337589281 |  | UBI: modify ubi_wl_flush function to clear work queue for a lnum  This patch modifies ubi_wl_flush to force the erasure of particular volume id / logical eraseblock number pairs. Previous functionality is preserved when passing UBI_ALL for both values. The locations where ubi_wl_flush were called are appropriately changed: ubi_leb_erase only flushes for the erased LEB, and ubi_create_volume forces only flushing for its volume id. External code can call this new feature via the new function ubi_flush() added to kapi.c, which simply passes through to ubi_wl_flush().  This was tested by disabling the call to do_work in ubi thread, which results in the work queue remaining unless explicitly called to remove. UBIFS was changed to call ubifs_leb_change 50 times for four different LEBs. Then the new function was called to clear the queue: passing wrong volume ids / lnum, correct ones, and finally UBI_ALL for both to ensure it was finally all cleard. The work queue was dumped each time and the selective removal of the particular LEB numbers was observed. Extra checks were enabled and ubifs's integck was also run. Finally, the drive was repeatedly filled and emptied to ensure that the queue was cleared normally.  Artem: amended the patch.  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | build.c | s | 39K | 1196 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1337534764 |  | UBI: move and rename attach_by_scanning  Rename the 'attach_by_scanning()' function to 'ubi_attach()' and move it to scan.c. Richard will plug his fastmap stuff there.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | attach.c | s | 44K | 1419 | Joel Reardon | joel@clambassador.com | 1337589281 |  | UBI: add volume id struct ubi_ainf_peb  This patch adds the volume id to struct ubi_ainf_peb when scanning the LEBs at startup. PEBs now added to the erase queue will know their original LEB number and volume id, if available, and will be -1 otherwise (for instance, if the VID header is unreadable).  This was tested by creating an ubi device with 3 volumes and disabiling the ubi_thread's do_work functionality. The different ubi volumes were formatted to ubifs and had files created and erased.  The ubi modules was reloaded and the list of LEB's added to the erased list was outputted, confirming the volume ids and LEB numbers were appropriate.  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | io.c | s | 41K | 1266 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1337534764 |  | UBI: amend comments after all the renamings  This patch amends commentaries in scan.[ch] to match the new logic. Reminder - we did the restructuring to prepare the code for adding the fastmap. This patch also renames a couple of functions - it was too difficult to separate out that change and I decided that it is not too bad to have it in the same patch with commentaries changes.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | Kconfig | g | 2.3K |  | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1337534760 |  | UBI: remove Kconfig debugging option  This patch kills the UBI debugging Kconfig option completely and makes all the debugging stuff to be always compiled-in. It was pain in the neck to maintain this useless option because all users I am aware of have debugging enabled anyway - how else will you diagnose errors otherwise?  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | cdev.c | s | 24K | 928 | Joel Reardon | joel@clambassador.com | 1337589281 |  | UBI: modify ubi_wl_flush function to clear work queue for a lnum  This patch modifies ubi_wl_flush to force the erasure of particular volume id / logical eraseblock number pairs. Previous functionality is preserved when passing UBI_ALL for both values. The locations where ubi_wl_flush were called are appropriately changed: ubi_leb_erase only flushes for the erased LEB, and ubi_create_volume forces only flushing for its volume id. External code can call this new feature via the new function ubi_flush() added to kapi.c, which simply passes through to ubi_wl_flush().  This was tested by disabling the call to do_work in ubi thread, which results in the work queue remaining unless explicitly called to remove. UBIFS was changed to call ubifs_leb_change 50 times for four different LEBs. Then the new function was called to clear the queue: passing wrong volume ids / lnum, correct ones, and finally UBI_ALL for both to ensure it was finally all cleard. The work queue was dumped each time and the selective removal of the particular LEB numbers was observed. Extra checks were enabled and ubifs's integck was also run. Finally, the drive was repeatedly filled and emptied to ensure that the queue was cleared normally.  Artem: amended the patch.  Signed-off-by: Joel Reardon <reardonj@inf.ethz.ch> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | gluebi.c | s | 14K | 464 | Richard Weinberger | richard@nod.at | 1337534759 |  | UBI: Kill data type hint  We do not need this feature and to our shame it even was not working and there was a bug found very recently. 	-- Artem Bityutskiy  Without the data type hint UBI2 (fastmap) will be easier to implement.  Signed-off-by: Richard Weinberger <richard@nod.at> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
