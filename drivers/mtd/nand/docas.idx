f | autcpu12.c | s | 5.7K | 208 | Alexander Shiyan | shc_work@mail.ru | 1336745881 |  | ARM: clps711x: Using a single definition for the PHYS and VIRT registers offset  Using a single definition for the physical and virtual address register for all variants boards clps711x. This patch also includes the use of a single function clps_read/write in some units.  Signed-off-by: Alexander Shiyan <shc_work@mail.ru> Signed-off-by: Arnd Bergmann <arnd@arndb.de>
f | fsl_upm.c | s | 8.5K | 304 | Axel Lin | axel.lin@gmail.com | 1326132755 |  | mtd: convert drivers/mtd/* to use module_platform_driver()  This patch converts the drivers in drivers/mtd/* to use the module_platform_driver() macro which makes the code smaller and a bit simpler.  Signed-off-by: Axel Lin <axel.lin@gmail.com> Acked by: Haojian Zhuang <haojian.zhuang@gmail.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@linux.intel.com>  Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nandsim.c | s | 66K | 2108 | Brian Norris | computersforpeace@gmail.com | 1336968910 |  | mtd: nandsim: remove autoincrement code  The NAND layer always has NAND_NO_AUTOINCR set, so we will never utilize the AUTOINCR code in nandsim. We will be removing the NAND_NO_AUTOINCR option soon, and so kill this code as well.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | ams-delta.c | s | 7.3K | 266 | Janusz Krzysztofik | jkrzyszt@tis.icnet.pl | 1336512273 |  | mtd: ams-delta: fix request_mem_region() failure  A call to request_mem_region() has been introduced in the omap-gpio driver recently (commit 96751fcbe5438e95514b025e9cee7a6d38038f40, "gpio/omap: Use devm_ API and add request_mem_region"). This change prevented the Amstrad Delta NAND driver, which was doing the same in order to take control over OMAP MPU I/O lines that the NAND device hangs off, from loading successfully.  The I/O lines and corresponding registers used by the NAND driver are a subset of those used for the GPIO function. Then, to avoid run time collisions, all MPUIO GPIO lines should be marked as requested while initializing the NAND driver, and vice versa, a single MPUIO GPIO line already requested before the NAND driver initialization is attempted should prevent the NAND device from being started successfully.  There is another driver, omap-keypad, which also manipulates MPUIO registers, but has never been calling request_mem_region() on startup, so it's not affected by the change in the gpio-omap and works correctly. It uses the depreciated omap_read/write functions for accessing MPUIO registers. Unlike the NAND driver, these I/O lines and registers are separate from those used by the GPIO driver. However, both register sets are non-contiguous and overlapping, so it would be impractical to request the two sets separately, one from the gpio-omap, the other form the omap-keypad driver.  In order to solve all these issues correctly, a solution first suggested by Artem Bityutskiy, then closer specified by Tony Lindgren while they commented the initial version of this fix, should be implemented. The gpio-omap driver should export a few functions which would allow the other two drivers to access MPUIO registers in a safe manner instead of trying to manage them in parallel to the GPIO driver.  However, such a big change, affecting 3 drivers all together, is not suitable for the rc cycle, and should be prepared for the merge window.  Then, an alternative solution is proposed as a regression fix.  For the ams-delta NAND driver to initialize correctly in coexistence with the changed GPIO driver, drop the request_mem_region() call from the former, especially as this call is going to be removed while the long-term solution is implemented.  Tested on Amstrad Delta.  Signed-off-by: Janusz Krzysztofik <jkrzyszt@tis.icnet.pl> Acked-by: Tony Lindgren <tony@atomide.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | Makefile | g | 2.2K |  | Linus Torvalds | torvalds@linux-foundation.org | 1333153916 |  | 
f | diskonchip.c | s | 49K | 1558 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | rtc_from4.c | s | 17K | 524 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nand_bcm_umi.h | s | 9.2K | 284 | Roel Kluin | roel.kluin@gmail.com | 1267203395 |  | mtd: nand_bcm: fix hot spin and code duplication  In the branch where pagesize equalled NAND_DATA_ACCESS_SIZE, NumToRead wasn't decremented in the `while (numToRead > 11)' loop. Also the first and last while loops were duplicated in both branches.  Signed-off-by: Roel Kluin <roel.kluin@gmail.com> Acked-by: Leo Chen <leochen@broadcom.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | docg4.c | s | 38K | 1135 | Shmulik Ladkani | shmulik.ladkani@gmail.com | 1336969480 |  | mtd: nand: remove 'sndcmd' parameter of 'read_oob/read_oob_raw'  As of [mtd: nand: remove autoincrement 'sndcmd' code], the NAND_CMD_READ0 command is issued unconditionally.  Thus, read_oob/read_oob_raw's 'sndcmd' argument is no longer needed, as well as their return code.  Remove the 'sndcmd' parameter, and set the return code to 0.  Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | fsmc_nand.c | s | 33K | 1133 | Brian Norris | computersforpeace@gmail.com | 1336969200 |  | mtd: nand: add 'oob_required' argument to NAND {read,write}_page interfaces  New NAND controllers can perform read/write via HW engines which don't expose OOB data in their DMA mode. To reflect this, we should rework the nand_chip / nand_ecc_ctrl interfaces that assume that drivers will always read/write OOB data in the nand_chip.oob_poi buffer. A better interface includes a boolean argument that explicitly tells the callee when OOB data is requested by the calling layer (for reading/writing to/from nand_chip.oob_poi).  This patch adds the 'oob_required' parameter to each relevant {read,write}_page interface; all 'oob_required' parameters are left unused for now. The next patch will set the parameter properly in the nand_base.c callers, and follow-up patches will make use of 'oob_required' in some of the callee functions.  Note that currently, there is no harm in ignoring the 'oob_required' parameter and *always* utilizing nand_chip.oob_poi, but there can be performance/complexity/design benefits from avoiding filling oob_poi in the common case. I will try to implement this for some drivers which can be ported easily.  Note: I couldn't compile-test all of these easily, as some had ARCH dependencies.  [dwmw2: Merge later 1/0 vs. true/false cleanup] Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Acked-by: Jiandong Zheng <jdzheng@broadcom.com> Acked-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | txx9ndfmc.c | s | 12K | 397 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | gpio.c | s | 11K | 397 | Jamie Iles | jamie@jamieiles.com | 1326133438 |  | mtd: gpio-nand: add device tree bindings  Add device tree bindings so that the gpio-nand driver may be instantiated from the device tree.  This also allows the partitions to be specified in the device tree.  v7:	- restore runtime device tree/non device tree detection v6:	- convert to mtd_device_parse_register() v5:	- fold dt config helpers into a single gpio_nand_of_get_config() v4:	- get io sync address from gpio-control-nand,io-sync-reg 	  property rather than a resource 	- clarified a few details in the binding v3:	- remove redundant cast and a couple of whitespace/naming 	  changes v2:	- add CONFIG_OF guards for non-dt platforms 	- compatible becomes gpio-control-nand 	- clarify some binding details  Signed-off-by: Jamie Iles <jamie@jamieiles.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | plat_nand.c | s | 4.2K | 144 | John Crispin | blogic@openwrt.org | 1336969013 |  | mtd: add read_byte support to plat_nand  Lantiq SoCs have a External Bus Unit (EBU) that is used to attach MTD media. As we need to co-exist with PCI on the same bus, certain swapping settings must be applied. Similar to the NOR map driver we need to apply a fix to make NAND work. The easiest way is to use byte reads.  Signed-off-by: John Crispin <blogic@openwrt.org> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | cs553x_nand.c | s | 9.6K | 294 | Brian Norris | computersforpeace@gmail.com | 1336968938 |  | mtd: nand: kill NAND_NO_AUTOINCR option  No drivers use auto-increment NAND, so kill the NO_AUTOINCR option entirely.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nand_base.c | s | 93K | 3107 | Shmulik Ladkani | shmulik.ladkani@gmail.com | 1336969500 |  | mtd: nand: check the return code of 'read_oob/read_oob_raw'  Apparently, there is an implementor of 'read_oob' which may return an error inidication (e.g. docg4_read_oob may return -EIO).  Test the return value of 'read_oob/read_oob_raw', and if negative, propagate the error, so it's returned by the '_read_oob' interface.  Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | r852.c | s | 25K | 866 | Shmulik Ladkani | shmulik.ladkani@gmail.com | 1336969480 |  | mtd: nand: remove 'sndcmd' parameter of 'read_oob/read_oob_raw'  As of [mtd: nand: remove autoincrement 'sndcmd' code], the NAND_CMD_READ0 command is issued unconditionally.  Thus, read_oob/read_oob_raw's 'sndcmd' argument is no longer needed, as well as their return code.  Remove the 'sndcmd' parameter, and set the return code to 0.  Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | jz4740_nand.c | s | 10K | 347 | Mike Dunn | mikedunn@newsguy.com | 1336968628 |  | mtd: nand: fix incorrect ecc strength values  This fixes a couple of ecc strength values for which I earlier made conservative guesses, but whose correct values were later determined¹ (thanks Ivan).  Also sets strength for fsl_ifc_nand, which was merged to mainline after the original patch that set the strength for all drivers.  ¹ http://lists.infradead.org/pipermail/linux-mtd/2012-March/040325.html  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | davinci_nand.c | s | 23K | 700 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nand_ids.c | s | 7.3K | 163 | Brian Norris | computersforpeace@gmail.com | 1336968938 |  | mtd: nand: kill NAND_NO_AUTOINCR option  No drivers use auto-increment NAND, so kill the NO_AUTOINCR option entirely.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | pasemi_nand.c | s | 5.3K | 188 | Brian Norris | computersforpeace@gmail.com | 1336968938 |  | mtd: nand: kill NAND_NO_AUTOINCR option  No drivers use auto-increment NAND, so kill the NO_AUTOINCR option entirely.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
d | gpmi-nand |  | 6 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338594942 |  | 
f | s3c2410.c | s | 28K | 917 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | sm_common.c | s | 4.6K | 124 | Brian Norris | computersforpeace@gmail.com | 1336968938 |  | mtd: nand: kill NAND_NO_AUTOINCR option  No drivers use auto-increment NAND, so kill the NO_AUTOINCR option entirely.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nand_bcm_umi.c | s | 4.9K | 132 | Leo (Hao) Chen | leochen@broadcom.com | 1256000843 |  | mtd: add bcmring nand driver  Signed-off-by: Leo Hao Chen <leochen@broadcom.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | bcm_umi_bch.c | s | 7.1K | 198 | Brian Norris | computersforpeace@gmail.com | 1336969200 |  | mtd: nand: add 'oob_required' argument to NAND {read,write}_page interfaces  New NAND controllers can perform read/write via HW engines which don't expose OOB data in their DMA mode. To reflect this, we should rework the nand_chip / nand_ecc_ctrl interfaces that assume that drivers will always read/write OOB data in the nand_chip.oob_poi buffer. A better interface includes a boolean argument that explicitly tells the callee when OOB data is requested by the calling layer (for reading/writing to/from nand_chip.oob_poi).  This patch adds the 'oob_required' parameter to each relevant {read,write}_page interface; all 'oob_required' parameters are left unused for now. The next patch will set the parameter properly in the nand_base.c callers, and follow-up patches will make use of 'oob_required' in some of the callee functions.  Note that currently, there is no harm in ignoring the 'oob_required' parameter and *always* utilizing nand_chip.oob_poi, but there can be performance/complexity/design benefits from avoiding filling oob_poi in the common case. I will try to implement this for some drivers which can be ported easily.  Note: I couldn't compile-test all of these easily, as some had ARCH dependencies.  [dwmw2: Merge later 1/0 vs. true/false cleanup] Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Acked-by: Jiandong Zheng <jdzheng@broadcom.com> Acked-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | tmio_nand.c | s | 14K | 439 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | sharpsl.c | s | 5.8K | 197 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | r852.h | s | 5.2K | 124 | Maxim Levitsky | maximlevitsky@gmail.com | 1287966741 |  | mtd: r852: remove useless pci powerup/down from suspend/resume routines  It turns out that pci core now handles these, so this code is redundant and can even cause bugs  Signed-off-by: Maxim Levitsky <maximlevitsky@gmail.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | pxa3xx_nand.c | s | 33K | 1121 | Brian Norris | computersforpeace@gmail.com | 1336969200 |  | mtd: nand: add 'oob_required' argument to NAND {read,write}_page interfaces  New NAND controllers can perform read/write via HW engines which don't expose OOB data in their DMA mode. To reflect this, we should rework the nand_chip / nand_ecc_ctrl interfaces that assume that drivers will always read/write OOB data in the nand_chip.oob_poi buffer. A better interface includes a boolean argument that explicitly tells the callee when OOB data is requested by the calling layer (for reading/writing to/from nand_chip.oob_poi).  This patch adds the 'oob_required' parameter to each relevant {read,write}_page interface; all 'oob_required' parameters are left unused for now. The next patch will set the parameter properly in the nand_base.c callers, and follow-up patches will make use of 'oob_required' in some of the callee functions.  Note that currently, there is no harm in ignoring the 'oob_required' parameter and *always* utilizing nand_chip.oob_poi, but there can be performance/complexity/design benefits from avoiding filling oob_poi in the common case. I will try to implement this for some drivers which can be ported easily.  Note: I couldn't compile-test all of these easily, as some had ARCH dependencies.  [dwmw2: Merge later 1/0 vs. true/false cleanup] Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Acked-by: Jiandong Zheng <jdzheng@broadcom.com> Acked-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | au1550nd.c | s | 13K | 490 | Brian Norris | computersforpeace@gmail.com | 1336968938 |  | mtd: nand: kill NAND_NO_AUTOINCR option  No drivers use auto-increment NAND, so kill the NO_AUTOINCR option entirely.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | socrates_nand.c | s | 6.4K | 236 | Axel Lin | axel.lin@gmail.com | 1326132755 |  | mtd: convert drivers/mtd/* to use module_platform_driver()  This patch converts the drivers in drivers/mtd/* to use the module_platform_driver() macro which makes the code smaller and a bit simpler.  Signed-off-by: Axel Lin <axel.lin@gmail.com> Acked by: Haojian Zhuang <haojian.zhuang@gmail.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@linux.intel.com>  Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | atmel_nand_ecc.h | s | 1.4K | 32 | Andrew Victor | linux@maxim.org.za | 1222034478 |  | [ARM] 5265/3: [AT91] Add copyright info  Add copyright information for some of the AT91 header files.  Signed-off-by: Andrew Victor <linux@maxim.org.za> Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
f | mxc_nand.c | s | 39K | 1276 | Linus Torvalds | torvalds@linux-foundation.org | 1338594942 |  | 
f | bf5xx_nand.c | s | 20K | 737 | Brian Norris | computersforpeace@gmail.com | 1336969200 |  | mtd: nand: add 'oob_required' argument to NAND {read,write}_page interfaces  New NAND controllers can perform read/write via HW engines which don't expose OOB data in their DMA mode. To reflect this, we should rework the nand_chip / nand_ecc_ctrl interfaces that assume that drivers will always read/write OOB data in the nand_chip.oob_poi buffer. A better interface includes a boolean argument that explicitly tells the callee when OOB data is requested by the calling layer (for reading/writing to/from nand_chip.oob_poi).  This patch adds the 'oob_required' parameter to each relevant {read,write}_page interface; all 'oob_required' parameters are left unused for now. The next patch will set the parameter properly in the nand_base.c callers, and follow-up patches will make use of 'oob_required' in some of the callee functions.  Note that currently, there is no harm in ignoring the 'oob_required' parameter and *always* utilizing nand_chip.oob_poi, but there can be performance/complexity/design benefits from avoiding filling oob_poi in the common case. I will try to implement this for some drivers which can be ported easily.  Note: I couldn't compile-test all of these easily, as some had ARCH dependencies.  [dwmw2: Merge later 1/0 vs. true/false cleanup] Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Acked-by: Jiandong Zheng <jdzheng@broadcom.com> Acked-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nand_ecc.c | s | 15K | 503 | Brian Norris | computersforpeace@gmail.com | 1315742533 |  | mtd: spelling, capitalization, uniformity  Therefor -> Therefore [Intern], [Internal] -> [INTERN] [REPLACABLE] -> [REPLACEABLE] syndrom, syndom -> syndrome ecc -> ECC buswith -> buswidth endianess -> endianness dont -> don't occures -> occurs independend -> independent wihin -> within erease -> erase blockes -> blocks ...  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com>
f | spia.c | s | 4.3K | 149 | Jamie Iles | jamie@jamieiles.com | 1306286700 |  | mtd: convert remaining users to mtd_device_register()  The older add_mtd_device()/add_mtd_partitions() and their removal counterparts will soon be gone.  Replace uses with mtd_device_register() and mtd_device_unregister().  Signed-off-by: Jamie Iles <jamie@jamieiles.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | ppchameleonevb.c | s | 11K | 357 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1332806000 |  | mtd: do not use plain 0 as NULL  The first 3 arguments of 'mtd_device_parse_register()' are pointers, but many callers pass '0' instead of 'NULL'. Fix this globally. Thanks to coccinelle for making it easy to do with the following semantic patch:   @@  expression mtd, types, parser_data, parts, nr_parts;  @@  (  -mtd_device_parse_register(mtd, 0, parser_data, parts, nr_parts)  +mtd_device_parse_register(mtd, NULL, parser_data, parts, nr_parts)  ||  -mtd_device_parse_register(mtd, types, 0, parts, nr_parts)  +mtd_device_parse_register(mtd, types, NULL, parts, nr_parts)  ||  -mtd_device_parse_register(mtd, types, parser_data, 0, nr_parts)  +mtd_device_parse_register(mtd, types, parser_data, NULL, nr_parts)  )  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | ndfc.c | s | 7.3K | 254 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nand_bbt.c | s | 38K | 1265 | Dmitry Maluka | D.Maluka@adbglobal.com | 1338279298 |  | mtd: nand: fix scan_read_raw_oob  It seems there is a bug in scan_read_raw_oob() in nand_bbt.c which should cause wrong functioning of NAND_BBT_SCANALLPAGES option.  Artem: the patch did not apply and I had to amend it a bit.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Cc: stable@kernel.org
f | sm_common.h | s | 1.5K | 48 | Maxim Levitsky | maximlevitsky@gmail.com | 1273795426 |  | mtd: sm_common: split smartmedia and xD table  2GB xD card, and 4MB SmartMedia ROM card share same ID, so to make both work split xD and smartmedia ID tables.  Hardware driver must be able to know which type it handles (and probably just one).  Signed-off-by: Maxim Levitsky <maximlevitsky@gmail.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | cafe_nand.c | s | 24K | 755 | Shmulik Ladkani | shmulik.ladkani@gmail.com | 1336969480 |  | mtd: nand: remove 'sndcmd' parameter of 'read_oob/read_oob_raw'  As of [mtd: nand: remove autoincrement 'sndcmd' code], the NAND_CMD_READ0 command is issued unconditionally.  Thus, read_oob/read_oob_raw's 'sndcmd' argument is no longer needed, as well as their return code.  Remove the 'sndcmd' parameter, and set the return code to 0.  Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | h1910.c | s | 3.9K | 140 | Linus Torvalds | torvalds@linux-foundation.org | 1338594942 |  | 
f | nand_bch.c | s | 6.9K | 214 | Brian Norris | computersforpeace@gmail.com | 1315742536 |  | mtd: cleanup style on pr_debug messages  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@intel.com>
f | denali.h | s | 15K | 386 | Jamie Iles | jamie@jamieiles.com | 1306285332 |  | mtd: denali: detect the number of banks  Not all configurations of the Denali controller support 4 banks.  The controller can support between 1 and 16 banks.  Detect this from the design features register.  Signed-off-by: Jamie Iles <jamie@jamieiles.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | Kconfig | g | 19K |  | Ivan Djelic | ivan.djelic@parrot.com | 1336969551 |  | mtd: nand: omap: add support for hardware BCH ecc  Two modes are supported: 4-bit and 8-bit error correction. Note that 4-bit mode is only confirmed to work on OMAP3630 ES 1.x, x >= 1. The OMAP3 GPMC hardware BCH engine computes remainder polynomials, it does not provide automatic error location and correction: this step is implemented using the BCH library.  This implementation only protects page data, there is no support for protecting user-defined spare area bytes (this could be added with few modifications); therefore, it cannot be used with YAFFS2 or other similar filesystems that depend on oob storage.  Before being stored to nand flash, hardware BCH ecc is adjusted so that an erased page has a valid ecc; thus allowing correction of bitflips in blank pages (also common on 4-bit devices).  BCH correction mode is selected at runtime by setting platform data parameter 'ecc_opt' to value OMAP_ECC_BCH4_CODE_HW or OMAP_ECC_BCH8_CODE_HW.  This code has been tested with mtd test modules, UBI and UBIFS on a BeagleBoard revC3 (OMAP3530 ES3.0 + Micron NAND 256MiB 1,8V 16-bit).  Signed-off-by: Ivan Djelic <ivan.djelic@parrot.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | fsl_ifc_nand.c | s | 29K | 908 | Brian Norris | computersforpeace@gmail.com | 1336969308 |  | mtd: IFC NAND: utilize oob_required parameter  Don't read OOB if the caller doesn't require it.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | bcm_umi_nand.c | s | 13K | 460 | Brian Norris | computersforpeace@gmail.com | 1336969200 |  | mtd: nand: add 'oob_required' argument to NAND {read,write}_page interfaces  New NAND controllers can perform read/write via HW engines which don't expose OOB data in their DMA mode. To reflect this, we should rework the nand_chip / nand_ecc_ctrl interfaces that assume that drivers will always read/write OOB data in the nand_chip.oob_poi buffer. A better interface includes a boolean argument that explicitly tells the callee when OOB data is requested by the calling layer (for reading/writing to/from nand_chip.oob_poi).  This patch adds the 'oob_required' parameter to each relevant {read,write}_page interface; all 'oob_required' parameters are left unused for now. The next patch will set the parameter properly in the nand_base.c callers, and follow-up patches will make use of 'oob_required' in some of the callee functions.  Note that currently, there is no harm in ignoring the 'oob_required' parameter and *always* utilizing nand_chip.oob_poi, but there can be performance/complexity/design benefits from avoiding filling oob_poi in the common case. I will try to implement this for some drivers which can be ported easily.  Note: I couldn't compile-test all of these easily, as some had ARCH dependencies.  [dwmw2: Merge later 1/0 vs. true/false cleanup] Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Acked-by: Jiandong Zheng <jdzheng@broadcom.com> Acked-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | omap2.c | s | 37K | 1220 | Ivan Djelic | ivan.djelic@parrot.com | 1336969551 |  | mtd: nand: omap: add support for hardware BCH ecc  Two modes are supported: 4-bit and 8-bit error correction. Note that 4-bit mode is only confirmed to work on OMAP3630 ES 1.x, x >= 1. The OMAP3 GPMC hardware BCH engine computes remainder polynomials, it does not provide automatic error location and correction: this step is implemented using the BCH library.  This implementation only protects page data, there is no support for protecting user-defined spare area bytes (this could be added with few modifications); therefore, it cannot be used with YAFFS2 or other similar filesystems that depend on oob storage.  Before being stored to nand flash, hardware BCH ecc is adjusted so that an erased page has a valid ecc; thus allowing correction of bitflips in blank pages (also common on 4-bit devices).  BCH correction mode is selected at runtime by setting platform data parameter 'ecc_opt' to value OMAP_ECC_BCH4_CODE_HW or OMAP_ECC_BCH8_CODE_HW.  This code has been tested with mtd test modules, UBI and UBIFS on a BeagleBoard revC3 (OMAP3530 ES3.0 + Micron NAND 256MiB 1,8V 16-bit).  Signed-off-by: Ivan Djelic <ivan.djelic@parrot.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | orion_nand.c | s | 5.4K | 208 | Linus Torvalds | torvalds@linux-foundation.org | 1338061349 |  | 
f | fsl_elbc_nand.c | s | 29K | 850 | Brian Norris | computersforpeace@gmail.com | 1336969299 |  | mtd: eLBC NAND: utilize oob_required parameter  Don't read OOB if the caller doesn't require it.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | sh_flctl.c | s | 22K | 805 | Brian Norris | computersforpeace@gmail.com | 1336969200 |  | mtd: nand: add 'oob_required' argument to NAND {read,write}_page interfaces  New NAND controllers can perform read/write via HW engines which don't expose OOB data in their DMA mode. To reflect this, we should rework the nand_chip / nand_ecc_ctrl interfaces that assume that drivers will always read/write OOB data in the nand_chip.oob_poi buffer. A better interface includes a boolean argument that explicitly tells the callee when OOB data is requested by the calling layer (for reading/writing to/from nand_chip.oob_poi).  This patch adds the 'oob_required' parameter to each relevant {read,write}_page interface; all 'oob_required' parameters are left unused for now. The next patch will set the parameter properly in the nand_base.c callers, and follow-up patches will make use of 'oob_required' in some of the callee functions.  Note that currently, there is no harm in ignoring the 'oob_required' parameter and *always* utilizing nand_chip.oob_poi, but there can be performance/complexity/design benefits from avoiding filling oob_poi in the common case. I will try to implement this for some drivers which can be ported easily.  Note: I couldn't compile-test all of these easily, as some had ARCH dependencies.  [dwmw2: Merge later 1/0 vs. true/false cleanup] Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Acked-by: Jiandong Zheng <jdzheng@broadcom.com> Acked-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | alauda.c | s | 15K | 616 | Mike Dunn | mikedunn@newsguy.com | 1336968863 |  | mtd: driver _read() returns max_bitflips; mtd_read() returns -EUCLEAN  The drivers' _read() method, absent an error, returns a non-negative integer indicating the maximum number of bit errors that were corrected in any one region comprising an ecc step.  MTD returns -EUCLEAN if this is >= bitflip_threshold, 0 otherwise.  If bitflip_threshold is zero, the comparison is not made since these devices lack ECC and always return zero in the non-error case (thanks Brian)¹.  Note that this is a subtle change to the driver interface.  This and the preceding patches in this set were tested with ubi on top of the nandsim and docg4 devices, running the ubi test io_basic from mtd-utils.  ¹ http://lists.infradead.org/pipermail/linux-mtd/2012-March/040468.html  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Acked-by: Robert Jarzmik <robert.jarzmik@free.fr> Acked-by: Brian Norris <computersforpeace@gmail.com> Ivan Djelic <ivan.djelic@parrot.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>  Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | atmel_nand.c | s | 19K | 666 | Brian Norris | computersforpeace@gmail.com | 1336969200 |  | mtd: nand: add 'oob_required' argument to NAND {read,write}_page interfaces  New NAND controllers can perform read/write via HW engines which don't expose OOB data in their DMA mode. To reflect this, we should rework the nand_chip / nand_ecc_ctrl interfaces that assume that drivers will always read/write OOB data in the nand_chip.oob_poi buffer. A better interface includes a boolean argument that explicitly tells the callee when OOB data is requested by the calling layer (for reading/writing to/from nand_chip.oob_poi).  This patch adds the 'oob_required' parameter to each relevant {read,write}_page interface; all 'oob_required' parameters are left unused for now. The next patch will set the parameter properly in the nand_base.c callers, and follow-up patches will make use of 'oob_required' in some of the callee functions.  Note that currently, there is no harm in ignoring the 'oob_required' parameter and *always* utilizing nand_chip.oob_poi, but there can be performance/complexity/design benefits from avoiding filling oob_poi in the common case. I will try to implement this for some drivers which can be ported easily.  Note: I couldn't compile-test all of these easily, as some had ARCH dependencies.  [dwmw2: Merge later 1/0 vs. true/false cleanup] Signed-off-by: Brian Norris <computersforpeace@gmail.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Acked-by: Jiandong Zheng <jdzheng@broadcom.com> Acked-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | denali.c | s | 49K | 1439 | Shmulik Ladkani | shmulik.ladkani@gmail.com | 1336969480 |  | mtd: nand: remove 'sndcmd' parameter of 'read_oob/read_oob_raw'  As of [mtd: nand: remove autoincrement 'sndcmd' code], the NAND_CMD_READ0 command is issued unconditionally.  Thus, read_oob/read_oob_raw's 'sndcmd' argument is no longer needed, as well as their return code.  Remove the 'sndcmd' parameter, and set the return code to 0.  Signed-off-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | cmx270_nand.c | s | 5.5K | 214 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1332806000 |  | mtd: do not use plain 0 as NULL  The first 3 arguments of 'mtd_device_parse_register()' are pointers, but many callers pass '0' instead of 'NULL'. Fix this globally. Thanks to coccinelle for making it easy to do with the following semantic patch:   @@  expression mtd, types, parser_data, parts, nr_parts;  @@  (  -mtd_device_parse_register(mtd, 0, parser_data, parts, nr_parts)  +mtd_device_parse_register(mtd, NULL, parser_data, parts, nr_parts)  ||  -mtd_device_parse_register(mtd, types, 0, parts, nr_parts)  +mtd_device_parse_register(mtd, types, NULL, parts, nr_parts)  ||  -mtd_device_parse_register(mtd, types, parser_data, 0, nr_parts)  +mtd_device_parse_register(mtd, types, parser_data, NULL, nr_parts)  )  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nuc900_nand.c | s | 7.8K | 290 | Axel Lin | axel.lin@gmail.com | 1326132755 |  | mtd: convert drivers/mtd/* to use module_platform_driver()  This patch converts the drivers in drivers/mtd/* to use the module_platform_driver() macro which makes the code smaller and a bit simpler.  Signed-off-by: Axel Lin <axel.lin@gmail.com> Acked by: Haojian Zhuang <haojian.zhuang@gmail.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@linux.intel.com>  Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | mpc5121_nfc.c | s | 20K | 747 | Brian Norris | computersforpeace@gmail.com | 1336968938 |  | mtd: nand: kill NAND_NO_AUTOINCR option  No drivers use auto-increment NAND, so kill the NO_AUTOINCR option entirely.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | nomadik_nand.c | s | 5.6K | 203 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1326133546 |  | mtd: introduce mtd_resume interface  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
