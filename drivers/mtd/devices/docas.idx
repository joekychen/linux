f | docg3.h | s | 10K | 329 | Robert Jarzmik | robert.jarzmik@free.fr | 1332806607 |  | mtd: docg3 add protection against concurrency  As docg3 is intolerant against reentrancy, especially because of its weird register access (ie. a register read is performed by a first register write), each access to the docg3 IO space must be locked.  Lock the IO space with a mutex, shared by all chips on the same cascade, as they all share the same IO space.  Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | doc2000.c | s | 31K | 949 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | Makefile | g | 735B |  | Shiraz Hashim | shiraz.hashim@st.com | 1332803656 |  | mtd: ST SPEAr: Add SMI driver for serial NOR flash  SPEAr platforms (spear3xx/spear6xx/spear13xx) provide SMI (Serial Memory Interface) controller to access serial NOR flash. SMI provides a simple interface for SPI/serial NOR flashes and has certain inbuilt commands and features to support these flashes easily. It also makes it possible to map an address range in order to directly access (read/write) the SNOR over address bus. This patch intends to provide serial nor driver support for spear platforms which are accessed through SMI.  Signed-off-by: Shiraz Hashim <shiraz.hashim@st.com> Signed-off-by: Viresh Kumar <viresh.kumar@st.com> Signed-off-by: Stefan Roese <sr@denx.de> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | docprobe.c | s | 9.8K | 275 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1326133551 |  | mtd: docprobe: use kzalloc instead  Instead of calling 'kmalloc()' and them 'memeset(0)', use 'kzalloc()'.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | doc2001plus.c | s | 30K | 902 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | doc2001.c | s | 24K | 694 | Mike Dunn | mikedunn@newsguy.com | 1332806206 |  | mtd: flash drivers set ecc strength  Flash device drivers initialize 'ecc_strength' in struct mtd_info, which is the maximum number of bit errors that can be corrected in one writesize region.  Drivers using the nand interface intitialize 'strength' in struct nand_ecc_ctrl, which is the maximum number of bit errors that can be corrected in one ecc step. Nand infrastructure code translates this to 'ecc_strength'.  Also for nand drivers, the nand infrastructure code sets ecc.strength for ecc modes NAND_ECC_SOFT, NAND_ECC_SOFT_BCH, and NAND_ECC_NONE.  It is set in the driver for all other modes.  Signed-off-by: Mike Dunn <mikedunn@newsguy.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | phram.c | s | 6.0K | 244 | Ryosuke Saito | raitosyo@gmail.com | 1332806549 |  | mtd: phram: fix section mismatch for phram_setup  phram_setup() is only called from init_phram() which is in .init.text, so it must be in the same section to avoid a section mismatch warning.  Signed-off-by: Ryosuke Saito <raitosyo@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | docecc.c | s | 15K | 476 | Brian Norris | computersforpeace@gmail.com | 1315742533 |  | mtd: spelling, capitalization, uniformity  Therefor -> Therefore [Intern], [Internal] -> [INTERN] [REPLACABLE] -> [REPLACEABLE] syndrom, syndom -> syndrome ecc -> ECC buswith -> buswidth endianess -> endianness dont -> don't occures -> occurs independend -> independent wihin -> within erease -> erase blockes -> blocks ...  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <Artem.Bityutskiy@nokia.com>
f | spear_smi.c | s | 29K | 962 | Viresh Kumar | viresh.kumar@st.com | 1336967604 |  | mtd: spear_smi: Add clk_{un}prepare() support  clk_{un}prepare is mandatory for platforms using common clock framework. Since this driver is used by SPEAr platform, which supports common clock framework, add clk_{un}prepare() support for it.  Signed-off-by: Viresh Kumar <viresh.kumar@st.com> Acked-by: Linus Walleij <linus.walleij@linaro.org> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | slram.c | s | 8.7K | 283 | Linus Torvalds | torvalds@linux-foundation.org | 1333153916 |  | 
f | sst25l.c | s | 9.8K | 355 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1332806000 |  | mtd: do not use plain 0 as NULL  The first 3 arguments of 'mtd_device_parse_register()' are pointers, but many callers pass '0' instead of 'NULL'. Fix this globally. Thanks to coccinelle for making it easy to do with the following semantic patch:   @@  expression mtd, types, parser_data, parts, nr_parts;  @@  (  -mtd_device_parse_register(mtd, 0, parser_data, parts, nr_parts)  +mtd_device_parse_register(mtd, NULL, parser_data, parts, nr_parts)  ||  -mtd_device_parse_register(mtd, types, 0, parts, nr_parts)  +mtd_device_parse_register(mtd, types, NULL, parts, nr_parts)  ||  -mtd_device_parse_register(mtd, types, parser_data, 0, nr_parts)  +mtd_device_parse_register(mtd, types, parser_data, NULL, nr_parts)  )  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | ms02-nv.h | s | 3.9K | 94 | Adrian Bunk | bunk@kernel.org | 1212598217 |  | MTD/JFFS2: remove CVS keywords  Once upon a time, the MTD repository was using CVS.  This patch therefore removes all usages of the no longer updated CVS keywords from the MTD code.  This also includes code that printed them to the user.  Signed-off-by: Adrian Bunk <bunk@kernel.org> Signed-off-by: David Woodhouse <dwmw2@infradead.org>
f | block2mtd.c | s | 10K | 368 | Gabor Juhos | juhosg@openwrt.org | 1338578599 |  | mtd: block2mtd: fix recursive call of mtd_writev  The 'mtd_writev' interface calls the function assigned to the '_write' field of a given mtd device if that is not NULL. The block2mtd driver sets the '_writev' field to the 'mtd_writev' function itself and thus causes a endless loop.  This is caused by 1dbebd32562b3c2caeca35960e5cb00bfcc12900 (mtd: harmonize mtd_writev usage).  Remove the assignment from the block2mtd driver to fix the issue.  Signed-off-by: Gabor Juhos <juhosg@openwrt.org> Cc: stable@kernel.org [3.3+] Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | pmc551.c | s | 25K | 769 | Linus Torvalds | torvalds@linux-foundation.org | 1333153916 |  | 
f | lart.c | s | 18K | 586 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1332804739 |  | mtd: move zero length verification to MTD API functions  In many places in drivers we verify for the zero length, but this is very inconsistent across drivers. This is obviously the right thing to do, though. This patch moves the check to the MTD API functions instead and removes a lot of duplication.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | mtd_dataflash.c | s | 24K | 775 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1332804739 |  | mtd: move zero length verification to MTD API functions  In many places in drivers we verify for the zero length, but this is very inconsistent across drivers. This is obviously the right thing to do, though. This patch moves the check to the MTD API functions instead and removes a lot of duplication.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Reviewed-by: Shmulik Ladkani <shmulik.ladkani@gmail.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | m25p80.c | s | 27K | 810 | Thomas Abraham | thomas.abraham@linaro.org | 1336969466 |  | mtd: m25p80: Add support for Winbond W25Q80BW  Winbond W25Q80BW is a 8Mbit serial flash memory device.  Signed-off-by: Thomas Abraham <thomas.abraham@linaro.org> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | docg3.c | s | 58K | 1920 | Linus Torvalds | torvalds@linux-foundation.org | 1338594942 |  | 
f | mtdram.c | s | 3.6K | 136 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1332804731 |  | mtd: harmonize mtd_point interface implementation  Some MTD drivers return -EINVAL if the 'phys' parameter is not NULL, trying to convey that they cannot return the physical address. However, this is not very logical because they still can return the virtual address ('virt'). But some drivers (lpddr) just ignore the 'phys' parameter instead, which is a more logical thing to do.  Let's harmonize this and:  1. Always initialize 'virt' and 'phys' to 'NULL' in 'mtd_point()'. 2. Do not return an error if the physical address cannot be found.  So as a result, all drivers will set 'phys' to 'NULL' if it is not supported. None of the 'mtd_point()' users use 'phys' anyway, so this should not break anything. I guess we could also just delete this parameter later.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
f | Kconfig | g | 12K |  | Linus Torvalds | torvalds@linux-foundation.org | 1333153916 |  | 
f | ms02-nv.c | s | 7.2K | 251 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1332804498 |  | mtd: do not duplicate length and offset checks in drivers  We already verify that offset and length are within the MTD device size in the MTD API functions. Let's remove the duplicated checks in drivers. This patch only affects the following API's:  'mtd_erase()' 'mtd_point()' 'mtd_unpoint()' 'mtd_get_unmapped_area()' 'mtd_read()' 'mtd_write()' 'mtd_panic_write()' 'mtd_lock()' 'mtd_unlock()' 'mtd_is_locked()' 'mtd_block_isbad()' 'mtd_block_markbad()'  This patch adds a bit of noise by removing too sparse empty lines, but this is not too bad.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com>
