f | Makefile | g | 821B |  | Joonyoung Shim | jy0922.shim@samsung.com | 1337253288 |  | drm/exynos: add G2D driver  Changelog v3: - use __u64 instead of pointer in ioctl struct.  The G2D is a 2D graphic accelerator that supports Bit Block Transfer. This G2D driver is exynos drm specific and supports only G2D(version 4.1) of later Exynos series from Exynos4X12 because supporting DMA.  The G2D is performed by two tasks simply. 1. Configures the rendering parameters, such as foreground color and    coordinates data by setting the drawing context registers. 2. Start the rendering process by setting thre relevant command    registers accordingly.  The G2D version 4.1 supports DMA mode as host interface. User can make command list to reduce HOST(ARM) loads. The contents of The command list is setted to relevant registers of G2D by DMA.  The command list is composed Header and command sets and Tail. - Header: The number of command set(4Bytes) - Command set: Register offset(4Bytes) + Register data(4Bytes) - Tail: Pointer of base address of the other command list(4Bytes)  By Tail field, the G2D can process many command lists without halt at one go.  The G2D has following the rendering pipeline. --> Primitive Drawing --> Rotation --> Clipping --> Bilinear Sampling --> Color Key --> ROP --> Mask Operation --> Alpha Blending --> Dithering --> FrameBuffer  And supports various operations from the rendering pipeline. - copy - fast solid color fill - window clipping - rotation - flip - 4 operand raster operation(ROP4) - masking operation - alpha blending - color key - dithering - etc  User should make the command list to data and registers needed by operation to use. The Exynos G2D driver only manages the command lists received from user. Some registers needs memory base address(physical address) of image. User doesn't know its physical address, so fills the gem handle of that memory than address to command sets, then G2D driver converts it to memory base address.  We adds three ioctls and one event for Exynos G2D.  - ioctls DRM_EXYNOS_G2D_GET_VER: get the G2D hardware version DRM_EXYNOS_G2D_SET_CMDLIST: set the command list from user to driver DRM_EXYNOS_G2D_EXEC: execute the command lists setted to driver  - event DRM_EXYNOS_G2D_EVENT: event to give notification completion of the 		      command list to user  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_buf.h | s | 1.9K | 41 | Inki Dae | inki.dae@samsung.com | 1332236421 |  | drm/exynos: update gem and buffer framework.  with this patch, we can allocate physically continuous or non-continuous memory and also it creates scatterlist for iommu support so allocated memory region can be mapped to iommu page table using scatterlist.  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | exynos_drm_encoder.h | s | 2.4K | 48 | Inki Dae | inki.dae@samsung.com | 1329385247 |  | drm/exynos: added possible_clones setup function.  basically, all crtcs are possible to clone each other.  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | regs-vp.h | s | 2.3K | 76 | Seung-Woo Kim | sw0312.kim@samsung.com | 1325125302 |  | drm/exynos: added hdmi display support  This patch is hdmi display support for exynos drm driver.  There is already v4l2 based exynos hdmi driver in drivers/media/video/s5p-tv and some low level code is already in s5p-tv and even headers for register define are almost same. but in this patch, we decide not to consider separated common code with s5p-tv.  Exynos HDMI is composed of 5 blocks, mixer, vp, hdmi, hdmiphy and ddc.  1. mixer. The piece of hardware responsible for mixing and blending multiple data inputs before passing it to an output device.  The mixer is capable of handling up to three image layers. One is the output of VP.  Other two are images in RGB format.  The blending factor, and layers' priority are controlled by mixer's registers. The output is passed to HDMI.  2. vp (video processor). It is used for processing of NV12/NV21 data.  An image stored in RAM is accessed by DMA. The output in YCbCr444 format is send to mixer.  3. hdmi. The piece of HW responsible for generation of HDMI packets. It takes pixel data from mixer and transforms it into data frames. The output is send to HDMIPHY interface.  4. hdmiphy. Physical interface for HDMI. Its duties are sending HDMI packets to HDMI connector. Basically, it contains a PLL that produces source clock for mixer, vp and hdmi.  5. ddc (display data channel). It is dedicated i2c channel to exchange display information as edid with display monitor.  With plane support, exynos hdmi driver fully supports two mixer layes and vp layer. Also vp layer supports multi buffer plane pixel formats having non contigus memory spaces.  In exynos drm driver, common drm_hdmi driver to interface with drm framework has opertion pointers for mixer and hdmi. this drm_hdmi driver is registered as sub driver of exynos_drm. hdmi has hdmiphy and ddc i2c clients and controls them. mixer controls all overlay layers in both mixer and vp.  Vblank interrupts for hdmi are handled by mixer internally because drm framework cannot support multiple irq id. And pipe number is used to check which display device irq happens.  History v2: this version  - drm plane feature support to handle overlay layers.  - multi buffer plane pixel format support for vp layer.  - vp layer support  RFCv1: original  - at https://lkml.org/lkml/2011/11/4/164  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_gem.c | s | 18K | 628 | Laurent Pinchart | laurent.pinchart@ideasonboard.com | 1338864838 |  | drm/exynos: Don't cast GEM object to Exynos GEM object when not needed  The exynos_drm_gem_dumb_map_offset() doesn't need to access any Exynos-specific GEM object fields, don't cast the GEM object.  Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_crtc.c | s | 11K | 355 | Seung-Woo Kim | sw0312.kim@samsung.com | 1337253269 |  | drm/exynos: added source size to overlay structure  Set plane has source size but exynos overlay structure did not consider it. This patch adds source size to overlay structure. For set crtc, source size is set from crtc size.  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | regs-hdmi.h | s | 21K | 492 | Seung-Woo Kim | sw0312.kim@samsung.com | 1337253265 |  | drm/exynos: enable dvi mode for dvi monitor  Hdmi monitor and dvi monitor can be distinguished with edid. This patch enables dvi mode if dvi monitor is connected and does not enable audio feature for dvi mode because dvi has no audio feature.  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_ddc.c | s | 1.2K | 46 | Joonyoung Shim | jy0922.shim@samsung.com | 1332236423 |  | drm/exynos: remove module of exynos drm subdrv  The exynos drm driver has several subdrv. They each can be module but it causes unfixed probe order of exynodr drm driver and each subdrv. It also needs some weird codes such as exynos_drm_fbdev_reinit and exynos_drm_mode_group_reinit. This patch can remove weird codes and clear codes through we doesn't modularity each subdrv.  Also this removes unnecessary codes related module.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | exynos_mixer.c | s | 28K | 912 | Seung-Woo Kim | sw0312.kim@samsung.com | 1338870318 |  | drm/exynos: fixed blending for hdmi graphic layer  Blending for graphic layer 0 of hdmi mixer was not set so video layer cannot be showed if graphic layer 0 is enabled. This patch fixes blending values to support blending between graphic layer 0 and video layer.  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_vidi.c | s | 15K | 525 | Joonyoung Shim | jy0922.shim@samsung.com | 1334209887 |  | drm/exynos: fix to pointer manager member of struct exynos_drm_subdrv  The struct exynos_drm_manager has to exist for exynos drm sub driver using encoder and connector. If it isn't NULL to member of struct exynos_drm_subdrv, will create encoder and connector else will not. And the is_local member also doesn't need.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_dmabuf.c | s | 6.8K | 222 | Inki Dae | inki.dae@samsung.com | 1336470392 |  | drm/exynos: added drm prime feature.  this patch adds exynos specific codes for DRM Prime feature. with this patch, user application can get file descriptor from gem handle through DRM_IOCTL_PRIME_HANDLE_TO_FD ioctl command(export) and also gem handle from file descriptor through DRM_IOCTL_PRIME_FD_TO_HANLDE(import) ioctl command.  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_hdmiphy.c | s | 1.3K | 47 | Seung-Woo Kim | sw0312.kim@samsung.com | 1325125302 |  | drm/exynos: added hdmi display support  This patch is hdmi display support for exynos drm driver.  There is already v4l2 based exynos hdmi driver in drivers/media/video/s5p-tv and some low level code is already in s5p-tv and even headers for register define are almost same. but in this patch, we decide not to consider separated common code with s5p-tv.  Exynos HDMI is composed of 5 blocks, mixer, vp, hdmi, hdmiphy and ddc.  1. mixer. The piece of hardware responsible for mixing and blending multiple data inputs before passing it to an output device.  The mixer is capable of handling up to three image layers. One is the output of VP.  Other two are images in RGB format.  The blending factor, and layers' priority are controlled by mixer's registers. The output is passed to HDMI.  2. vp (video processor). It is used for processing of NV12/NV21 data.  An image stored in RAM is accessed by DMA. The output in YCbCr444 format is send to mixer.  3. hdmi. The piece of HW responsible for generation of HDMI packets. It takes pixel data from mixer and transforms it into data frames. The output is send to HDMIPHY interface.  4. hdmiphy. Physical interface for HDMI. Its duties are sending HDMI packets to HDMI connector. Basically, it contains a PLL that produces source clock for mixer, vp and hdmi.  5. ddc (display data channel). It is dedicated i2c channel to exchange display information as edid with display monitor.  With plane support, exynos hdmi driver fully supports two mixer layes and vp layer. Also vp layer supports multi buffer plane pixel formats having non contigus memory spaces.  In exynos drm driver, common drm_hdmi driver to interface with drm framework has opertion pointers for mixer and hdmi. this drm_hdmi driver is registered as sub driver of exynos_drm. hdmi has hdmiphy and ddc i2c clients and controls them. mixer controls all overlay layers in both mixer and vp.  Vblank interrupts for hdmi are handled by mixer internally because drm framework cannot support multiple irq id. And pipe number is used to check which display device irq happens.  History v2: this version  - drm plane feature support to handle overlay layers.  - multi buffer plane pixel format support for vp layer.  - vp layer support  RFCv1: original  - at https://lkml.org/lkml/2011/11/4/164  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_fb.c | s | 5.9K | 179 | Laurent Pinchart | laurent.pinchart@ideasonboard.com | 1338864838 |  | drm/exynos: Keep a reference to frame buffer GEM objects  GEM objects used by frame buffers must be referenced for the whole life of the frame buffer. Release the references in the frame buffer destructor instead of its constructor.  Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_core.c | s | 5.3K | 175 | Joonyoung Shim | jy0922.shim@samsung.com | 1334209887 |  | drm/exynos: fix to pointer manager member of struct exynos_drm_subdrv  The struct exynos_drm_manager has to exist for exynos drm sub driver using encoder and connector. If it isn't NULL to member of struct exynos_drm_subdrv, will create encoder and connector else will not. And the is_local member also doesn't need.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_plane.h | s | 539B | 13 | Joonyoung Shim | jy0922.shim@samsung.com | 1324448057 |  | drm/exynos: Add plane support with fimd  The exynos fimd supports 5 window overlays. Only one window overlay of fimd is used by the crtc, so we need plane feature to use the rest window overlays.  This creates one ioctl exynos specific - DRM_EXYNOS_PLANE_SET_ZPOS, it is the ioctl to decide for user to assign which window overlay.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_g2d.c | s | 22K | 757 | Joonyoung Shim | jy0922.shim@samsung.com | 1337253288 |  | drm/exynos: add G2D driver  Changelog v3: - use __u64 instead of pointer in ioctl struct.  The G2D is a 2D graphic accelerator that supports Bit Block Transfer. This G2D driver is exynos drm specific and supports only G2D(version 4.1) of later Exynos series from Exynos4X12 because supporting DMA.  The G2D is performed by two tasks simply. 1. Configures the rendering parameters, such as foreground color and    coordinates data by setting the drawing context registers. 2. Start the rendering process by setting thre relevant command    registers accordingly.  The G2D version 4.1 supports DMA mode as host interface. User can make command list to reduce HOST(ARM) loads. The contents of The command list is setted to relevant registers of G2D by DMA.  The command list is composed Header and command sets and Tail. - Header: The number of command set(4Bytes) - Command set: Register offset(4Bytes) + Register data(4Bytes) - Tail: Pointer of base address of the other command list(4Bytes)  By Tail field, the G2D can process many command lists without halt at one go.  The G2D has following the rendering pipeline. --> Primitive Drawing --> Rotation --> Clipping --> Bilinear Sampling --> Color Key --> ROP --> Mask Operation --> Alpha Blending --> Dithering --> FrameBuffer  And supports various operations from the rendering pipeline. - copy - fast solid color fill - window clipping - rotation - flip - 4 operand raster operation(ROP4) - masking operation - alpha blending - color key - dithering - etc  User should make the command list to data and registers needed by operation to use. The Exynos G2D driver only manages the command lists received from user. Some registers needs memory base address(physical address) of image. User doesn't know its physical address, so fills the gem handle of that memory than address to command sets, then G2D driver converts it to memory base address.  We adds three ioctls and one event for Exynos G2D.  - ioctls DRM_EXYNOS_G2D_GET_VER: get the G2D hardware version DRM_EXYNOS_G2D_SET_CMDLIST: set the command list from user to driver DRM_EXYNOS_G2D_EXEC: execute the command lists setted to driver  - event DRM_EXYNOS_G2D_EVENT: event to give notification completion of the 		      command list to user  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_connector.c | s | 10K | 289 | Linus Torvalds | torvalds@linux-foundation.org | 1332446902 |  | Merge branch 'drm-next' of git://people.freedesktop.org/~airlied/linux  Pull drm main changes from Dave Airlie:  "This is the main drm pull request, I'm probably going to send two more   smaller ones, will explain below.    This contains a patch that is also in the fbdev tree, but it should be   the same patch, it added an API for hot unplugging framebuffer   devices, and I need that API for a new driver.    It also contains some changes to the i2c tree which Jean has acked,   and one change to moorestown platform stuff in x86.    Highlights:    - new drivers: UDL driver for USB displaylink devices, kms only,      should support correct hotplug operations.    - core: i2c speedups + better hotplug support, EDID overriding via      firmware interface - allows user to load a firmware for a broken      monitor/kvm from userspace, it even has documentation for it.    - exynos: new HDMI audio + hdmi 1.4 + virtual output driver    - gma500: code cleanup    - radeon: cleanups, CS optimisations, streamout support and pageflip      fix    - nouveau: NVD9 displayport support + more reclocking work    - i915: re-enabling GMBUS, finish gpu patch (might help hibernation      who knows), missed irq fixes, stencil tiling fixes, interlaced      support, aliasesd PPGTT support for SNB/IVB, swizzling for SNB/IVB,      semaphore fixes    As well as the usual bunch of cleanups and fixes all over the place.    I've got two things I'd like to merge a bit later:     a) AMD support for all their new radeonhd 7000 series GPU and APUs.       AMD dropped this a bit late due to insane internal review       processes, (please AMD just follow Intel and let open source guys       ship stuff early) however I don't want to penalise people who own       this hardware (since its been on sale for 3-4 months and GPU hw       doesn't exactly have a lifetime in years) and consign them to       using closed drivers for longer than necessary.  The changes are       well contained and just plug into the driver new gpu functionality       so they should be fairly regression proof.  I just want to give       them a bit of a run on the hw AMD kindly sent me.     b) drm prime/dma-buf interface code.  This is just infrastructure       code to expose the dma-buf stuff to drm drivers and to userspace.       I'm not planning on pushing any driver support in this cycle       (except maybe exynos), but I'd like to get the infrastructure code       in so for the next cycle I can start getting the driver support       into the individual drivers.  We have started driver support for       i915, nouveau and udl along with I think exynos and omap in       staging.  However this code relies on the dma-buf tree being       pulled into your tree first since it needs the latest interfaces       from that tree.  I'll push to get that tree sent asap.    (oh and any warnings you see in i915 are gcc's fault from what anyone   can see)."  Fix up trivial conflicts in arch/x86/platform/mrst/mrst.c due to the new msic_thermal_platform_data() thermal function being added next to the tc35876x_platform_data() i2c device function..  * 'drm-next' of git://people.freedesktop.org/~airlied/linux: (326 commits)   drm/i915: use DDC_ADDR instead of hard-coding it   drm/radeon: use DDC_ADDR instead of hard-coding it   drm: remove unneeded redefinition of DDC_ADDR   drm/exynos: added virtual display driver.   drm: allow loading an EDID as firmware to override broken monitor   drm/exynos: enable hdmi audio feature   drm/exynos: add default pixel format for plane   drm/exynos: cleanup exynos_hdmi.h   drm/exynos: add is_local member in exynos_drm_subdrv struct   drm/exynos: add subdrv open/close functions   drm/exynos: remove module of exynos drm subdrv   drm/exynos: release pending pageflip events when closed   drm/exynos: added new funtion to get/put dma address.   drm/exynos: update gem and buffer framework.   drm/exynos: added mode_fixup feature and code clean.   drm/exynos: add HDMI version 1.4 support   drm/exynos: remove exynos_mixer.h   gma500: Fix mmap frambuffer   drm/radeon: Drop radeon_gem_object_(un)pin.   drm/radeon: Restrict offset for legacy display engine.   ...
f | exynos_hdmi.h | s | 1.5K | 33 | Joonyoung Shim | jy0922.shim@samsung.com | 1332236505 |  | drm/exynos: cleanup exynos_hdmi.h  The some contents of the exynos_hdmi.h are used only in exynos_hdmi.c, so move them to exynos_hdmi.c.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | exynos_drm_dmabuf.h | s | 1.6K | 36 | Inki Dae | inki.dae@samsung.com | 1336470392 |  | drm/exynos: added drm prime feature.  this patch adds exynos specific codes for DRM Prime feature. with this patch, user application can get file descriptor from gem handle through DRM_IOCTL_PRIME_HANDLE_TO_FD ioctl command(export) and also gem handle from file descriptor through DRM_IOCTL_PRIME_FD_TO_HANLDE(import) ioctl command.  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_vidi.h | s | 1.4K | 33 | Inki Dae | inki.dae@samsung.com | 1332324949 |  | drm/exynos: added virtual display driver.  this driver would be used for wireless display. virtual display driver has independent crtc, encoder and connector and to use this driver, user application should send edid data to this driver from wireless display.  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_drv.h | s | 10K | 282 | Joonyoung Shim | jy0922.shim@samsung.com | 1337253288 |  | drm/exynos: add G2D driver  Changelog v3: - use __u64 instead of pointer in ioctl struct.  The G2D is a 2D graphic accelerator that supports Bit Block Transfer. This G2D driver is exynos drm specific and supports only G2D(version 4.1) of later Exynos series from Exynos4X12 because supporting DMA.  The G2D is performed by two tasks simply. 1. Configures the rendering parameters, such as foreground color and    coordinates data by setting the drawing context registers. 2. Start the rendering process by setting thre relevant command    registers accordingly.  The G2D version 4.1 supports DMA mode as host interface. User can make command list to reduce HOST(ARM) loads. The contents of The command list is setted to relevant registers of G2D by DMA.  The command list is composed Header and command sets and Tail. - Header: The number of command set(4Bytes) - Command set: Register offset(4Bytes) + Register data(4Bytes) - Tail: Pointer of base address of the other command list(4Bytes)  By Tail field, the G2D can process many command lists without halt at one go.  The G2D has following the rendering pipeline. --> Primitive Drawing --> Rotation --> Clipping --> Bilinear Sampling --> Color Key --> ROP --> Mask Operation --> Alpha Blending --> Dithering --> FrameBuffer  And supports various operations from the rendering pipeline. - copy - fast solid color fill - window clipping - rotation - flip - 4 operand raster operation(ROP4) - masking operation - alpha blending - color key - dithering - etc  User should make the command list to data and registers needed by operation to use. The Exynos G2D driver only manages the command lists received from user. Some registers needs memory base address(physical address) of image. User doesn't know its physical address, so fills the gem handle of that memory than address to command sets, then G2D driver converts it to memory base address.  We adds three ioctls and one event for Exynos G2D.  - ioctls DRM_EXYNOS_G2D_GET_VER: get the G2D hardware version DRM_EXYNOS_G2D_SET_CMDLIST: set the command list from user to driver DRM_EXYNOS_G2D_EXEC: execute the command lists setted to driver  - event DRM_EXYNOS_G2D_EVENT: event to give notification completion of the 		      command list to user  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_hdmi.h | s | 2.6K | 69 | Joonyoung Shim | jy0922.shim@samsung.com | 1336470393 |  | drm/exynos: add dpms for hdmi  The power and clocks turns on always in exynos hdmi and mixer driver, but we should turn off the power and clocks of exynos hdmi and mixer when the hdmi cable unplugged or when hdmi unused.  There are two interrupt to detect hotplug of hdmi cable - internal interrupt and external interrupt. The internal interrupt can use only when hdmi is dpms on so if hdmi is dpms off, we should use external interrupt to detect hotplug of hdmi cable. If hdmi is dpms on, we cannot external interrupt because the gpio pin for external interrupt is used to hdmi HPD pin for internal interrupt.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_hdmi.c | s | 9.1K | 289 | Joonyoung Shim | jy0922.shim@samsung.com | 1336470393 |  | drm/exynos: add dpms for hdmi  The power and clocks turns on always in exynos hdmi and mixer driver, but we should turn off the power and clocks of exynos hdmi and mixer when the hdmi cable unplugged or when hdmi unused.  There are two interrupt to detect hotplug of hdmi cable - internal interrupt and external interrupt. The internal interrupt can use only when hdmi is dpms on so if hdmi is dpms off, we should use external interrupt to detect hotplug of hdmi cable. If hdmi is dpms on, we cannot external interrupt because the gpio pin for external interrupt is used to hdmi HPD pin for internal interrupt.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_fbdev.h | s | 1.6K | 34 | Inki Dae | inki.dae@samsung.com | 1317806851 |  | DRM: add DRM Driver for Samsung SoC EXYNOS4210.  This patch is a DRM Driver for Samsung SoC Exynos4210 and now enables only FIMD yet but we will add HDMI support also in the future.  this patch is based on git repository below: git://people.freedesktop.org/~airlied/linux.git branch name: drm-next commit-id: 88ef4e3f4f616462b78a7838eb3ffc3818d30f67  you can refer to our working repository below: http://git.infradead.org/users/kmpark/linux-2.6-samsung branch name: samsung-drm  We tried to re-use lowlevel codes of the FIMD driver(s3c-fb.c based on Linux framebuffer) but couldn't so because lowlevel codes of s3c-fb.c are included internally and so FIMD module of this driver has its own lowlevel codes.  We used GEM framework for buffer management and DMA APIs(dma_alloc_*) for buffer allocation so we can allocate physically continuous memory for DMA through it and also we could use CMA later if CMA is applied to mainline.  Refer to this link for CMA(Continuous Memory Allocator): http://lkml.org/lkml/2011/7/20/45  this driver supports only physically continuous memory(non-iommu).  Links to previous versions of the patchset: v1: < https://lwn.net/Articles/454380/ > v2: < http://www.spinics.net/lists/kernel/msg1224275.html > v3: < http://www.spinics.net/lists/dri-devel/msg13755.html > v4: < http://permalink.gmane.org/gmane.comp.video.dri.devel/60439 > v5: < http://comments.gmane.org/gmane.comp.video.dri.devel/60802 >  Changelog v2: DRM: add DRM_IOCTL_SAMSUNG_GEM_MMAP ioctl command.      this feature maps user address space to physical memory region     once user application requests DRM_IOCTL_SAMSUNG_GEM_MMAP ioctl.  DRM: code clean and add exception codes.  Changelog v3: DRM: Support multiple irq.      FIMD and HDMI have their own irq handler but DRM Framework can regiter     only one irq handler this patch supports mutiple irq for Samsung SoC.  DRM: Consider modularization.      each DRM, FIMD could be built as a module.  DRM: Have indenpendent crtc object.      crtc isn't specific to SoC Platform so this patch gets a crtc     to be used as common object.     created crtc could be attached to any encoder object.  DRM: code clean and add exception codes.  Changelog v4: DRM: remove is_defult from samsung_fb.      is_default isn't used for default framebuffer.  DRM: code refactoring to fimd module.     this patch is be considered with multiple display objects and     would use its own request_irq() to register a irq handler instead of     drm framework's one.  DRM: remove find_samsung_drm_gem_object()  DRM: move kernel private data structures and definitions to driver folder.      samsung_drm.h would contain only public information for userspace     ioctl interface.  DRM: code refactoring to gem modules.     buffer module isn't dependent of gem module anymore.  DRM: fixed security issue.  DRM: remove encoder porinter from specific connector.      samsung connector doesn't need to have generic encoder.  DRM: code clean and add exception codes.  Changelog v5: DRM: updated fimd(display controller) driver.     added various pixel formats, color key and pixel blending features.  DRM: removed end_buf_off from samsung_drm_overlay structure.     this variable isn't used and end buffer address would be     calculated by each sub driver.  DRM: use generic function for mmap_offset.     replaced samsung_drm_gem_create_mmap_offset() and     samsung_drm_free_mmap_offset() with generic ones applied     to mainline recentrly.  DRM: removed unnecessary codes and added exception codes.  DRM: added comments and code clean.  Changelog v6: DRM: added default config options.  DRM: added padding for 64-bit align.  DRM: changed prefix 'samsung' to 'exynos'  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Reviewed-by: Dave Airlie <airlied@redhat.com> Reviewed-by: Rob Clark <robdclark@gmail.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | exynos_drm_drv.c | s | 10K | 334 | Laurent Pinchart | laurent.pinchart@ideasonboard.com | 1338864838 |  | drm/exynos: DRIVER_BUS_PLATFORM is not a driver feature  DRIVER_BUS_PLATFORM is a bus type used internally in the DRM core, not a flag for the drm_driver::driver_features field.  Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_fimd.c | s | 24K | 807 | Joonyoung Shim | jy0922.shim@samsung.com | 1334209887 |  | drm/exynos: fix to pointer manager member of struct exynos_drm_subdrv  The struct exynos_drm_manager has to exist for exynos drm sub driver using encoder and connector. If it isn't NULL to member of struct exynos_drm_subdrv, will create encoder and connector else will not. And the is_local member also doesn't need.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_crtc.h | s | 2.6K | 63 | Seung-Woo Kim | sw0312.kim@samsung.com | 1337253269 |  | drm/exynos: added source size to overlay structure  Set plane has source size but exynos overlay structure did not consider it. This patch adds source size to overlay structure. For set crtc, source size is set from crtc size.  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_connector.h | s | 1.5K | 31 | Inki Dae | inki.dae@samsung.com | 1317806851 |  | DRM: add DRM Driver for Samsung SoC EXYNOS4210.  This patch is a DRM Driver for Samsung SoC Exynos4210 and now enables only FIMD yet but we will add HDMI support also in the future.  this patch is based on git repository below: git://people.freedesktop.org/~airlied/linux.git branch name: drm-next commit-id: 88ef4e3f4f616462b78a7838eb3ffc3818d30f67  you can refer to our working repository below: http://git.infradead.org/users/kmpark/linux-2.6-samsung branch name: samsung-drm  We tried to re-use lowlevel codes of the FIMD driver(s3c-fb.c based on Linux framebuffer) but couldn't so because lowlevel codes of s3c-fb.c are included internally and so FIMD module of this driver has its own lowlevel codes.  We used GEM framework for buffer management and DMA APIs(dma_alloc_*) for buffer allocation so we can allocate physically continuous memory for DMA through it and also we could use CMA later if CMA is applied to mainline.  Refer to this link for CMA(Continuous Memory Allocator): http://lkml.org/lkml/2011/7/20/45  this driver supports only physically continuous memory(non-iommu).  Links to previous versions of the patchset: v1: < https://lwn.net/Articles/454380/ > v2: < http://www.spinics.net/lists/kernel/msg1224275.html > v3: < http://www.spinics.net/lists/dri-devel/msg13755.html > v4: < http://permalink.gmane.org/gmane.comp.video.dri.devel/60439 > v5: < http://comments.gmane.org/gmane.comp.video.dri.devel/60802 >  Changelog v2: DRM: add DRM_IOCTL_SAMSUNG_GEM_MMAP ioctl command.      this feature maps user address space to physical memory region     once user application requests DRM_IOCTL_SAMSUNG_GEM_MMAP ioctl.  DRM: code clean and add exception codes.  Changelog v3: DRM: Support multiple irq.      FIMD and HDMI have their own irq handler but DRM Framework can regiter     only one irq handler this patch supports mutiple irq for Samsung SoC.  DRM: Consider modularization.      each DRM, FIMD could be built as a module.  DRM: Have indenpendent crtc object.      crtc isn't specific to SoC Platform so this patch gets a crtc     to be used as common object.     created crtc could be attached to any encoder object.  DRM: code clean and add exception codes.  Changelog v4: DRM: remove is_defult from samsung_fb.      is_default isn't used for default framebuffer.  DRM: code refactoring to fimd module.     this patch is be considered with multiple display objects and     would use its own request_irq() to register a irq handler instead of     drm framework's one.  DRM: remove find_samsung_drm_gem_object()  DRM: move kernel private data structures and definitions to driver folder.      samsung_drm.h would contain only public information for userspace     ioctl interface.  DRM: code refactoring to gem modules.     buffer module isn't dependent of gem module anymore.  DRM: fixed security issue.  DRM: remove encoder porinter from specific connector.      samsung connector doesn't need to have generic encoder.  DRM: code clean and add exception codes.  Changelog v5: DRM: updated fimd(display controller) driver.     added various pixel formats, color key and pixel blending features.  DRM: removed end_buf_off from samsung_drm_overlay structure.     this variable isn't used and end buffer address would be     calculated by each sub driver.  DRM: use generic function for mmap_offset.     replaced samsung_drm_gem_create_mmap_offset() and     samsung_drm_free_mmap_offset() with generic ones applied     to mainline recentrly.  DRM: removed unnecessary codes and added exception codes.  DRM: added comments and code clean.  Changelog v6: DRM: added default config options.  DRM: added padding for 64-bit align.  DRM: changed prefix 'samsung' to 'exynos'  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Reviewed-by: Dave Airlie <airlied@redhat.com> Reviewed-by: Rob Clark <robdclark@gmail.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | exynos_drm_gem.h | s | 5.8K | 142 | Inki Dae | inki.dae@samsung.com | 1336470392 |  | drm/exynos: added a feature to get gem buffer information.  this patch adds a feature to get a gem buffer information and user application can get the gem buffer information simply in runtime through gem handle.  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_buf.c | s | 5.2K | 177 | Inki Dae | inki.dae@samsung.com | 1336470392 |  | drm/exynos: added drm prime feature.  this patch adds exynos specific codes for DRM Prime feature. with this patch, user application can get file descriptor from gem handle through DRM_IOCTL_PRIME_HANDLE_TO_FD ioctl command(export) and also gem handle from file descriptor through DRM_IOCTL_PRIME_FD_TO_HANLDE(import) ioctl command.  Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_fbdev.c | s | 8.2K | 255 | Joonyoung Shim | jy0922.shim@samsung.com | 1332236423 |  | drm/exynos: remove module of exynos drm subdrv  The exynos drm driver has several subdrv. They each can be module but it causes unfixed probe order of exynodr drm driver and each subdrv. It also needs some weird codes such as exynos_drm_fbdev_reinit and exynos_drm_mode_group_reinit. This patch can remove weird codes and clear codes through we doesn't modularity each subdrv.  Also this removes unnecessary codes related module.  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | regs-mixer.h | s | 4.5K | 125 | Seung-Woo Kim | sw0312.kim@samsung.com | 1325125302 |  | drm/exynos: added hdmi display support  This patch is hdmi display support for exynos drm driver.  There is already v4l2 based exynos hdmi driver in drivers/media/video/s5p-tv and some low level code is already in s5p-tv and even headers for register define are almost same. but in this patch, we decide not to consider separated common code with s5p-tv.  Exynos HDMI is composed of 5 blocks, mixer, vp, hdmi, hdmiphy and ddc.  1. mixer. The piece of hardware responsible for mixing and blending multiple data inputs before passing it to an output device.  The mixer is capable of handling up to three image layers. One is the output of VP.  Other two are images in RGB format.  The blending factor, and layers' priority are controlled by mixer's registers. The output is passed to HDMI.  2. vp (video processor). It is used for processing of NV12/NV21 data.  An image stored in RAM is accessed by DMA. The output in YCbCr444 format is send to mixer.  3. hdmi. The piece of HW responsible for generation of HDMI packets. It takes pixel data from mixer and transforms it into data frames. The output is send to HDMIPHY interface.  4. hdmiphy. Physical interface for HDMI. Its duties are sending HDMI packets to HDMI connector. Basically, it contains a PLL that produces source clock for mixer, vp and hdmi.  5. ddc (display data channel). It is dedicated i2c channel to exchange display information as edid with display monitor.  With plane support, exynos hdmi driver fully supports two mixer layes and vp layer. Also vp layer supports multi buffer plane pixel formats having non contigus memory spaces.  In exynos drm driver, common drm_hdmi driver to interface with drm framework has opertion pointers for mixer and hdmi. this drm_hdmi driver is registered as sub driver of exynos_drm. hdmi has hdmiphy and ddc i2c clients and controls them. mixer controls all overlay layers in both mixer and vp.  Vblank interrupts for hdmi are handled by mixer internally because drm framework cannot support multiple irq id. And pipe number is used to check which display device irq happens.  History v2: this version  - drm plane feature support to handle overlay layers.  - multi buffer plane pixel format support for vp layer.  - vp layer support  RFCv1: original  - at https://lkml.org/lkml/2011/11/4/164  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | Kconfig | g | 1.1K |  | Joonyoung Shim | jy0922.shim@samsung.com | 1337253288 |  | drm/exynos: add G2D driver  Changelog v3: - use __u64 instead of pointer in ioctl struct.  The G2D is a 2D graphic accelerator that supports Bit Block Transfer. This G2D driver is exynos drm specific and supports only G2D(version 4.1) of later Exynos series from Exynos4X12 because supporting DMA.  The G2D is performed by two tasks simply. 1. Configures the rendering parameters, such as foreground color and    coordinates data by setting the drawing context registers. 2. Start the rendering process by setting thre relevant command    registers accordingly.  The G2D version 4.1 supports DMA mode as host interface. User can make command list to reduce HOST(ARM) loads. The contents of The command list is setted to relevant registers of G2D by DMA.  The command list is composed Header and command sets and Tail. - Header: The number of command set(4Bytes) - Command set: Register offset(4Bytes) + Register data(4Bytes) - Tail: Pointer of base address of the other command list(4Bytes)  By Tail field, the G2D can process many command lists without halt at one go.  The G2D has following the rendering pipeline. --> Primitive Drawing --> Rotation --> Clipping --> Bilinear Sampling --> Color Key --> ROP --> Mask Operation --> Alpha Blending --> Dithering --> FrameBuffer  And supports various operations from the rendering pipeline. - copy - fast solid color fill - window clipping - rotation - flip - 4 operand raster operation(ROP4) - masking operation - alpha blending - color key - dithering - etc  User should make the command list to data and registers needed by operation to use. The Exynos G2D driver only manages the command lists received from user. Some registers needs memory base address(physical address) of image. User doesn't know its physical address, so fills the gem handle of that memory than address to command sets, then G2D driver converts it to memory base address.  We adds three ioctls and one event for Exynos G2D.  - ioctls DRM_EXYNOS_G2D_GET_VER: get the G2D hardware version DRM_EXYNOS_G2D_SET_CMDLIST: set the command list from user to driver DRM_EXYNOS_G2D_EXEC: execute the command lists setted to driver  - event DRM_EXYNOS_G2D_EVENT: event to give notification completion of the 		      command list to user  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_encoder.c | s | 12K | 357 | Laurent Pinchart | laurent.pinchart@ideasonboard.com | 1338870315 |  | drm/exynos: Remove dummy encoder get_crtc operation implementation  The encoder get_crtc operation is called to retrieve a pointer to the CRTC the encoder is currenctly connected to, right after setting the encoder::crtc field to the new CRTC. The implementation of this operation returns the pointer to the new CRTC, which is then pointlessly compared to itself.  As the operation is not mandatory, don't implement it.  Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_fb.h | s | 1.9K | 49 | Ville Syrjälä | ville.syrjala@linux.intel.com | 1338864703 |  | drm/exynos: Use DRM_FORMAT_{NV12, YUV420} instead of DRM_FORMAT_{NV12M, YUV420M}  The NV12M/YUV420M formats are identical to the already existing standard NV12/YUV420 formats. The M variants will be removed, so convert the driver to use the standard names.  Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
f | exynos_drm_plane.c | s | 4.2K | 135 | Seung-Woo Kim | sw0312.kim@samsung.com | 1337253269 |  | drm/exynos: added source size to overlay structure  Set plane has source size but exynos overlay structure did not consider it. This patch adds source size to overlay structure. For set crtc, source size is set from crtc size.  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_hdmi.c | s | 69K | 2212 | Seung-Woo Kim | sw0312.kim@samsung.com | 1337253267 |  | drm/exynos: add additional display mode for hdmi  1080p@30Hz mode is added to hdmi display mode.  Signed-off-by: Seung-Woo Kim <sw0312.kim@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com>
f | exynos_drm_g2d.h | s | 1.1K | 33 | Joonyoung Shim | jy0922.shim@samsung.com | 1337253288 |  | drm/exynos: add G2D driver  Changelog v3: - use __u64 instead of pointer in ioctl struct.  The G2D is a 2D graphic accelerator that supports Bit Block Transfer. This G2D driver is exynos drm specific and supports only G2D(version 4.1) of later Exynos series from Exynos4X12 because supporting DMA.  The G2D is performed by two tasks simply. 1. Configures the rendering parameters, such as foreground color and    coordinates data by setting the drawing context registers. 2. Start the rendering process by setting thre relevant command    registers accordingly.  The G2D version 4.1 supports DMA mode as host interface. User can make command list to reduce HOST(ARM) loads. The contents of The command list is setted to relevant registers of G2D by DMA.  The command list is composed Header and command sets and Tail. - Header: The number of command set(4Bytes) - Command set: Register offset(4Bytes) + Register data(4Bytes) - Tail: Pointer of base address of the other command list(4Bytes)  By Tail field, the G2D can process many command lists without halt at one go.  The G2D has following the rendering pipeline. --> Primitive Drawing --> Rotation --> Clipping --> Bilinear Sampling --> Color Key --> ROP --> Mask Operation --> Alpha Blending --> Dithering --> FrameBuffer  And supports various operations from the rendering pipeline. - copy - fast solid color fill - window clipping - rotation - flip - 4 operand raster operation(ROP4) - masking operation - alpha blending - color key - dithering - etc  User should make the command list to data and registers needed by operation to use. The Exynos G2D driver only manages the command lists received from user. Some registers needs memory base address(physical address) of image. User doesn't know its physical address, so fills the gem handle of that memory than address to command sets, then G2D driver converts it to memory base address.  We adds three ioctls and one event for Exynos G2D.  - ioctls DRM_EXYNOS_G2D_GET_VER: get the G2D hardware version DRM_EXYNOS_G2D_SET_CMDLIST: set the command list from user to driver DRM_EXYNOS_G2D_EXEC: execute the command lists setted to driver  - event DRM_EXYNOS_G2D_EVENT: event to give notification completion of the 		      command list to user  Signed-off-by: Joonyoung Shim <jy0922.shim@samsung.com> Signed-off-by: Inki Dae <inki.dae@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com>
