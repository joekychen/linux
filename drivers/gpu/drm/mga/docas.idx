f | mga_drv.c | s | 4.4K | 129 | Arjan van de Ven | arjan@infradead.org | 1321010087 |  | drm: Make the per-driver file_operations struct const  From fdf1fdebaa00f81de18c227f32f8074c8b352d50 Mon Sep 17 00:00:00 2001 From: Arjan van de Ven <arjan@linux.intel.com> Date: Sun, 30 Oct 2011 19:06:07 -0700 Subject: [PATCH] drm: Make the per-driver file_operations struct const  The DRM layer keeps a copy of struct file_operations inside its big driver struct... which prevents it from being consistent and static. For consistency (and the general security objective of having such things static), it's desirable to get this fixed.  This patch splits out the file_operations field to its own struct, which is then "static const", and just stick a pointer to this into the driver struct, making it more consistent with how the rest of the kernel does this.  Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | mga_dma.c | s | 29K | 943 | Dave Airlie | airlied@redhat.com | 1329417067 |  | drm: move pci bus master enable into driver.  The current enabling of bus mastering in the drm midlayer allows a large race condition under kexec. When a kexec'ed kernel re-enables bus mastering for the GPU, previously setup dma blocks may cause writes to random pieces of memory. On radeon the writeback mechanism can cause these sorts of issues.  This patch doesn't fix the problem, but it moves the bus master enable under the individual drivers control so they can move enabling it until later in their load cycle and close the race.  Fix for radeon kms driver will be in a follow-up patch.  Signed-off-by: Dave Airlie <airlied@redhat.com>
f | mga_warp.c | s | 4.7K | 150 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103923 |  | gpu: add module.h to drivers/gpu files as required.  So that we don't get build failures once the implicit module.h presence is removed.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Makefile | g | 307B |  | Dave Airlie | airlied@redhat.com | 1215996301 |  | drm: reorganise drm tree to be more future proof.  With the coming of kernel based modesetting and the memory manager stuff, the everything in one directory approach was getting very ugly and starting to be unmanageable.  This restructures the drm along the lines of other kernel components.  It creates a drivers/gpu/drm directory and moves the hw drivers into subdirectores. It moves the includes into an include/drm, and sets up the unifdef for the userspace headers we should be exporting.  Signed-off-by: Dave Airlie <airlied@redhat.com>
f | mga_drv.h | s | 18K | 583 | Jay Estabrook | jay.estabrook@gmail.com | 1308007976 |  | alpha, drm: Remove obsolete Alpha support in MGA DRM code  Remove an obsolete Alpha adjustment in the drm for MGA on Alpha.  Signed-off-by: Jay Estabrook <jay.estabrook@gmail.com> Tested-by: Matt Turner <mattst88@gmail.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | mga_state.c | s | 28K | 859 | Dave Airlie | airlied@redhat.com | 1282020745 |  | drm: block userspace under allocating buffer and having drivers overwrite it (v2)  With the current screwed but its ABI, ioctls for the drm, Linus pointed out that we could allow userspace to specify the allocation size, but we pass it to the driver which then uses it blindly to store a struct. Now if userspace specifies the allocation size as smaller than the driver needs, the driver can possibly overwrite memory.  This patch restructures the driver ioctls so we store the structure size we are expecting, and make sure we allocate at least that size. The copy from/to userspace are still restricted to the size the user specifies, this allows ioctl structs to grow on both sides of the equation.  Up until now we didn't really use the DRM_IOCTL defines in the kernel, so this cleans them up and adds them for nouveau.  v2: fix nouveau pushbuf arg (thanks to Ben for pointing it out)  Reported-by: Linus Torvalds <torvalds@linuxfoundation.org> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | mga_ioc32.c | s | 7.3K | 200 | Arnd Bergmann | arnd@arndb.de | 1261099351 |  | drm: convert drm_ioctl to unlocked_ioctl  drm_ioctl is called with the Big Kernel Lock held, which shows up very high in statistics on vfs_ioctl.  Moving the lock into the drm_ioctl function itself makes sure we blame the right subsystem and it gets us one step closer to eliminating the locked version of fops->ioctl.  Since drm_ioctl does not require the lock itself, we only need to hold it while calling the specific handler. The 32 bit conversion handlers do not interact with any other code, so they don't need the BKL here either and can just call drm_ioctl.  As a bonus, this cleans up all the other users of drm_ioctl which now no longer have to find the inode or call lock_kernel.  [airlied: squashed the non-driver bits of the second patch in here, this provides the flag for drivers to use to select unlocked ioctls - but doesn't modify any drivers].  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Cc: David Airlie <airlied@linux.ie> Cc: dri-devel@lists.sourceforge.net Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | mga_irq.c | s | 4.9K | 142 | Nicolas Kaiser | nikai@nikai.net | 1280708256 |  | drm/mga: fixed brace, macro and spacing coding style issues  Fixed brace, macro and spacing coding style issues.  Signed-off-by: Nicolas Kaiser <nikai@nikai.net> Signed-off-by: Dave Airlie <airlied@redhat.com>
