f | ttm_agp_backend.c | s | 4.1K | 126 | Joe Perches | joe@perches.com | 1332233135 |  | drm/ttm: Use pr_fmt and pr_<level>  Use the more current logging style.  Add pr_fmt and remove the TTM_PFX uses. Coalesce formats and align arguments.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_page_alloc_dma.c | s | 29K | 995 | Joe Perches | joe@perches.com | 1332233135 |  | drm/ttm: Use pr_fmt and pr_<level>  Use the more current logging style.  Add pr_fmt and remove the TTM_PFX uses. Coalesce formats and align arguments.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_page_alloc.c | s | 22K | 788 | Joe Perches | joe@perches.com | 1332233135 |  | drm/ttm: Use pr_fmt and pr_<level>  Use the more current logging style.  Add pr_fmt and remove the TTM_PFX uses. Coalesce formats and align arguments.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | Makefile | g | 385B |  | Konrad Rzeszutek Wilk | konrad.wilk@oracle.com | 1323167973 |  | drm/ttm: provide dma aware ttm page pool code V9  In TTM world the pages for the graphic drivers are kept in three different pools: write combined, uncached, and cached (write-back). When the pages are used by the graphic driver the graphic adapter via its built in MMU (or AGP) programs these pages in. The programming requires the virtual address (from the graphic adapter perspective) and the physical address (either System RAM or the memory on the card) which is obtained using the pci_map_* calls (which does the virtual to physical - or bus address translation). During the graphic application's "life" those pages can be shuffled around, swapped out to disk, moved from the VRAM to System RAM or vice-versa. This all works with the existing TTM pool code - except when we want to use the software IOTLB (SWIOTLB) code to "map" the physical addresses to the graphic adapter MMU. We end up programming the bounce buffer's physical address instead of the TTM pool memory's and get a non-worky driver. There are two solutions: 1) using the DMA API to allocate pages that are screened by the DMA API, or 2) using the pci_sync_* calls to copy the pages from the bounce-buffer and back.  This patch fixes the issue by allocating pages using the DMA API. The second is a viable option - but it has performance drawbacks and potential correctness issues - think of the write cache page being bounced (SWIOTLB->TTM), the WC is set on the TTM page and the copy from SWIOTLB not making it to the TTM page until the page has been recycled in the pool (and used by another application).  The bounce buffer does not get activated often - only in cases where we have a 32-bit capable card and we want to use a page that is allocated above the 4GB limit. The bounce buffer offers the solution of copying the contents of that 4GB page to an location below 4GB and then back when the operation has been completed (or vice-versa). This is done by using the 'pci_sync_*' calls. Note: If you look carefully enough in the existing TTM page pool code you will notice the GFP_DMA32 flag is used  - which should guarantee that the provided page is under 4GB. It certainly is the case, except this gets ignored in two cases:  - If user specifies 'swiotlb=force' which bounces _every_ page.  - If user is using a Xen's PV Linux guest (which uses the SWIOTLB and the    underlaying PFN's aren't necessarily under 4GB).  To not have this extra copying done the other option is to allocate the pages using the DMA API so that there is not need to map the page and perform the expensive 'pci_sync_*' calls.  This DMA API capable TTM pool requires for this the 'struct device' to properly call the DMA API. It also has to track the virtual and bus address of the page being handed out in case it ends up being swapped out or de-allocated - to make sure it is de-allocated using the proper's 'struct device'.  Implementation wise the code keeps two lists: one that is attached to the 'struct device' (via the dev->dma_pools list) and a global one to be used when the 'struct device' is unavailable (think shrinker code). The global list can iterate over all of the 'struct device' and its associated dma_pool. The list in dev->dma_pools can only iterate the device's dma_pool.                                                             /[struct device_pool]\         /---------------------------------------------------|| dev                ||        /                                            +-------|| dma_pool           ||  /-----+------\                                    /        \--------------------/  ||struct device||     /-->[struct dma_pool for WC]</         /[struct device_pool]\  || dma_pools   +----+                                     /-|| dev                ||  ||  ...        ||    \--->[struct dma_pool for uncached]<-/--|| dma_pool           ||  \-----+------/                                         /   \--------------------/         \----------------------------------------------/ [Two pools associated with the device (WC and UC), and the parallel list containing the 'struct dev' and 'struct dma_pool' entries]  The maximum amount of dma pools a device can have is six: write-combined, uncached, and cached; then there are the DMA32 variants which are: write-combined dma32, uncached dma32, and cached dma32.  Currently this code only gets activated when any variant of the SWIOTLB IOMMU code is running (Intel without VT-d, AMD without GART, IBM Calgary and Xen PV with PCI devices).  Tested-by: Michel DÃ¤nzer <michel@daenzer.net> [v1: Using swiotlb_nr_tbl instead of swiotlb_enabled] [v2: Major overhaul - added 'inuse_list' to seperate used from inuse and reorder the order of lists to get better performance.] [v3: Added comments/and some logic based on review, Added Jerome tag] [v4: rebase on top of ttm_tt & ttm_backend merge] [v5: rebase on top of ttm memory accounting overhaul] [v6: New rebase on top of more memory accouting changes] [v7: well rebase on top of no memory accounting changes] [v8: make sure pages list is initialized empty] [v9: calll ttm_mem_global_free_page in unpopulate for accurate accountg] Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Reviewed-by: Jerome Glisse <jglisse@redhat.com> Acked-by: Thomas Hellstrom <thellstrom@vmware.com>
f | ttm_bo.c | s | 46K | 1608 | Thomas Hellstrom | thellstrom@vmware.com | 1339513067 |  | drm/ttm: Fix buffer object metadata accounting regression v2  A regression was introduced in the 3.3 rc series, commit "drm/ttm: simplify memory accounting for ttm user v2", causing the metadata of buffer objects created using the ttm_bo_create() function to be accounted twice. That causes massive leaks with the vmwgfx driver running for example SpecViewperf Catia-03 test 2, eventually killing the app.  Furthermore, the same commit introduces a regression where metadata accounting is leaked if a buffer object is initialized with an illegal size. This is also fixed with this commit.  v2: Fixed an error path and removed an unused variable.  Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com> Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Cc: Jerome Glisse <jglisse@redhat.com> Cc: stable@vger.kernel.org Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_tt.c | s | 9.4K | 333 | Linus Torvalds | torvalds@linux-foundation.org | 1332446902 |  | Merge branch 'drm-next' of git://people.freedesktop.org/~airlied/linux  Pull drm main changes from Dave Airlie:  "This is the main drm pull request, I'm probably going to send two more   smaller ones, will explain below.    This contains a patch that is also in the fbdev tree, but it should be   the same patch, it added an API for hot unplugging framebuffer   devices, and I need that API for a new driver.    It also contains some changes to the i2c tree which Jean has acked,   and one change to moorestown platform stuff in x86.    Highlights:    - new drivers: UDL driver for USB displaylink devices, kms only,      should support correct hotplug operations.    - core: i2c speedups + better hotplug support, EDID overriding via      firmware interface - allows user to load a firmware for a broken      monitor/kvm from userspace, it even has documentation for it.    - exynos: new HDMI audio + hdmi 1.4 + virtual output driver    - gma500: code cleanup    - radeon: cleanups, CS optimisations, streamout support and pageflip      fix    - nouveau: NVD9 displayport support + more reclocking work    - i915: re-enabling GMBUS, finish gpu patch (might help hibernation      who knows), missed irq fixes, stencil tiling fixes, interlaced      support, aliasesd PPGTT support for SNB/IVB, swizzling for SNB/IVB,      semaphore fixes    As well as the usual bunch of cleanups and fixes all over the place.    I've got two things I'd like to merge a bit later:     a) AMD support for all their new radeonhd 7000 series GPU and APUs.       AMD dropped this a bit late due to insane internal review       processes, (please AMD just follow Intel and let open source guys       ship stuff early) however I don't want to penalise people who own       this hardware (since its been on sale for 3-4 months and GPU hw       doesn't exactly have a lifetime in years) and consign them to       using closed drivers for longer than necessary.  The changes are       well contained and just plug into the driver new gpu functionality       so they should be fairly regression proof.  I just want to give       them a bit of a run on the hw AMD kindly sent me.     b) drm prime/dma-buf interface code.  This is just infrastructure       code to expose the dma-buf stuff to drm drivers and to userspace.       I'm not planning on pushing any driver support in this cycle       (except maybe exynos), but I'd like to get the infrastructure code       in so for the next cycle I can start getting the driver support       into the individual drivers.  We have started driver support for       i915, nouveau and udl along with I think exynos and omap in       staging.  However this code relies on the dma-buf tree being       pulled into your tree first since it needs the latest interfaces       from that tree.  I'll push to get that tree sent asap.    (oh and any warnings you see in i915 are gcc's fault from what anyone   can see)."  Fix up trivial conflicts in arch/x86/platform/mrst/mrst.c due to the new msic_thermal_platform_data() thermal function being added next to the tc35876x_platform_data() i2c device function..  * 'drm-next' of git://people.freedesktop.org/~airlied/linux: (326 commits)   drm/i915: use DDC_ADDR instead of hard-coding it   drm/radeon: use DDC_ADDR instead of hard-coding it   drm: remove unneeded redefinition of DDC_ADDR   drm/exynos: added virtual display driver.   drm: allow loading an EDID as firmware to override broken monitor   drm/exynos: enable hdmi audio feature   drm/exynos: add default pixel format for plane   drm/exynos: cleanup exynos_hdmi.h   drm/exynos: add is_local member in exynos_drm_subdrv struct   drm/exynos: add subdrv open/close functions   drm/exynos: remove module of exynos drm subdrv   drm/exynos: release pending pageflip events when closed   drm/exynos: added new funtion to get/put dma address.   drm/exynos: update gem and buffer framework.   drm/exynos: added mode_fixup feature and code clean.   drm/exynos: add HDMI version 1.4 support   drm/exynos: remove exynos_mixer.h   gma500: Fix mmap frambuffer   drm/radeon: Drop radeon_gem_object_(un)pin.   drm/radeon: Restrict offset for legacy display engine.   ...
f | ttm_bo_manager.c | s | 4.3K | 139 | Thomas Hellstrom | thellstrom@vmware.com | 1289273604 |  | drm/ttm: Use private locks for the default bo range manager  Searching for a free block in the range manager may in some situations be a lenghty operation, and we want to avoid holding the global lru lock during that time. Instead use a per-manager spinlock.  This leaves the global lru lock for quick lru list and swap list manipulation only, including list manipulation associated with reserving buffer objects.  Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_module.c | s | 2.9K | 88 | Dave Airlie | airlied@redhat.com | 1280879166 |  | drm: move ttm global code to core drm  I wrote this for the prime sharing work, but I also noticed other external non-upstream drivers from a large company carrying a similiar patch, so I may as well ship it in master.  Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_memory.c | s | 13K | 513 | Joe Perches | joe@perches.com | 1332233135 |  | drm/ttm: Use pr_fmt and pr_<level>  Use the more current logging style.  Add pr_fmt and remove the TTM_PFX uses. Coalesce formats and align arguments.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_bo_util.c | s | 16K | 596 | Jerome Glisse | jglisse@redhat.com | 1323168011 |  | drm/ttm: simplify memory accounting for ttm user v2  Provide helper function to compute the kernel memory size needed for each buffer object. Move all the accounting inside ttm, simplifying driver and avoiding code duplication accross them.  v2 fix accounting of ghost object, one would have thought that i    would have run into the issue since a longtime but it seems    ghost object are rare when you have plenty of vram ;)  Signed-off-by: Jerome Glisse <jglisse@redhat.com> Reviewed-by: Thomas Hellstrom <thellstrom@vmware.com>
f | ttm_object.c | s | 11K | 382 | Joe Perches | joe@perches.com | 1332233135 |  | drm/ttm: Use pr_fmt and pr_<level>  Use the more current logging style.  Add pr_fmt and remove the TTM_PFX uses. Coalesce formats and align arguments.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_lock.c | s | 7.2K | 270 | Arun Sharma | asharma@fb.com | 1311724187 |  | atomic: use <linux/atomic.h>  This allows us to move duplicated code in <asm/atomic.h> (atomic_inc_not_zero() for now) to <linux/atomic.h>  Signed-off-by: Arun Sharma <asharma@fb.com> Reviewed-by: Eric Dumazet <eric.dumazet@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: David Miller <davem@davemloft.net> Cc: Eric Dumazet <eric.dumazet@gmail.com> Acked-by: Mike Frysinger <vapier@gentoo.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ttm_bo_vm.c | s | 11K | 397 | Joe Perches | joe@perches.com | 1332233135 |  | drm/ttm: Use pr_fmt and pr_<level>  Use the more current logging style.  Add pr_fmt and remove the TTM_PFX uses. Coalesce formats and align arguments.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | ttm_execbuf_util.c | s | 6.2K | 204 | Thomas Hellstrom | thellstrom@vmware.com | 1290396321 |  | drm/ttm/vmwgfx: Have TTM manage the validation sequence.  Rather than having the driver supply the validation sequence, leave that responsibility to TTM. This saves some confusion and a function argument.  Signed-off-by: Thomas Hellstrom <thellstrom@vmware.com> Signed-off-by: Dave Airlie <airlied@redhat.com>
