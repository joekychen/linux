f | hdmi_panel.c | s | 9.2K | 342 | Ricardo Neri | ricardo.neri@ti.com | 1336738630 |  | OMAPDSS: HDMI: Implement DSS driver interface for audio  Implement the DSS device driver audio support interface in the HDMI panel driver and generic driver. The implementation relies on the IP-specific functions that are defined at DSS probe time.  A mixed locking strategy is used. The panel's mutex is used when the state of the panel is queried as required by the audio functions. The audio state is protected using a spinlock as users of DSS HDMI audio functionality might start/stop audio while holding a spinlock. The mutex and the spinlock are held and released as needed by each individual function to protect the panel state and the audio state.  Although the panel's audio_start functions does not check whether the panel is active, the audio _ENABLED state can be reached only from audio_enable, which does check the state of the panel. Also, if the panel is ever disabled, the audio state will transition to _DISABLED. Transitions are always protected by the audio lock.  Signed-off-by: Ricardo Neri <ricardo.neri@ti.com>
f | dss.c | s | 18K | 686 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1338797081 |  | OMAPDSS: fix bogus WARN_ON in dss_runtime_put()  pm_runtime_put_sync() in dss_runtime_put() returns -EBUSY when any child of dss is still enabled. This happens, for example, when a display output is enabled and one dumps the clocks via debugfs. This causes dss_runtime_get & put to be called.  While I couldn't find anything about this in the documentation and it wasn't immediately clear from runtime_pm code, it looks to me that pm_runtime_put_sync() returns -EBUSY to inform that things went fine, but the device could not be turned off as there are still child devices that are enabled. This is not a problem.  This patch skips the WARN_ON if pm_runtime_put_sync() returns -EBUSY.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | apply.c | s | 31K | 1172 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1337673553 |  | OMAPDSS: use DSI_FIFO_BUG workaround only for manual update displays  There is a problem related to DSS FIFO thresholds and power management on OMAP3. It seems that when the full PM hits in, we get underflows. The core reason is unknown, but after experiments it looks like only particular FIFO thresholds work correctly.  This bug is related to an earlier patch, which added special FIFO threshold configuration for OMAP3, because DSI command mode output didn't work with the normal threshold configuration.  However, as the above work-around worked fine for other output types also, we currently always configure thresholds in this special way on OMAP3. In theory there should be negligible difference with this special way and the standard way. The first paragraph explains what happens in practice.  This patch changes the driver to use the special threshold configuration only when the output is a manual update display on OMAP3. This does include RFBI displays also, and although it hasn't been tested (no boards using RFBI) I suspect the similar behaviour is present there also, as the DISPC side should work similarly for DSI command mode and RFBI.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com> Cc: Joe Woodward <jw@terrafix.co.uk>
f | Makefile | g | 434B |  | Chandrabhanu Mahapatra | cmahapatra@ti.com | 1325487089 |  | OMAPDSS: DISPC: Update Fir Coefficients  The FIR coefficients present in kernel are being updated to new coefficients consisting of 24 coefficient tables, with 12 each for 3 tap and 5 tap scenario, which are chosen on the basis of DISPC up/downsampling filters M value. M is the inverse of low pass cut off frequency of the sampling filter. For vertical scaling 3 tap or 5 tap tables are used based on the clock rate and width of the line buffer whereas in OMAP2 3 tap is always used. For horizontal scaling however 5 tap tables are always used.  New coefficients and the corresponding logic have been tested on OMAP2, OMAP3 and OMAP4. Horizontal and vertical scaling worked fine except for some 3 tap vs 5 tap issue during vertical upscaling and clock failing issues which is acknowledged in the next patch. Vertical upscaling was found to perform better under 5 taps. The 24 coefficient tables have been moved to another file dispc_coefs.c for proper maintainance.  This code is written based on code written by Lajos Molnar <lajos@ti.com> in Android Kernel for scaling. Lajos Molnar <lajos@ti.com> had fine tuned the FIR coefficient selection process and reduced outliness and blockiness around images when upscaling more than 2 times.  Signed-off-by: Chandrabhanu Mahapatra <cmahapatra@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | dss_features.h | s | 3.5K | 112 | Chandrabhanu Mahapatra | cmahapatra@ti.com | 1337673555 |  | OMAPDSS: DISPC: Support rotation through TILER  TILER is a block in OMAP4's DMM which lets DSS fetch frames in a rotated manner. Physical memory can be mapped to a portion of OMAP's system address space called TILER address space. The TILER address space is split into 8 views. Each view represents a rotated or mirrored form of the mapped physical memory. When a DISPC overlay's base address is programmed to one of these views, the TILER fetches the pixels according to the orientation of the view. A view is further split into 4 containers, each container holds elements of a particular size. Rotation can be achieved at the granularity of elements in the container. For more information on TILER, refer to the Memory Subsytem section in OMAP4 TRM. Rotation type TILER has been added which is used to exploit the capabilities of these 8 views for performing various rotations.  When fetching from addresses mapped to TILER space, the DISPC DMA can fetch pixels in either 1D or 2D bursts. The fetch depends on which TILER container we are accessing. Accessing 8, 16 and 32 bit sized containers requires 2D bursts, and page mode sized containers require 1D bursts.  The DSS2 user is expected to provide the Tiler address of the view that it is interested in. This is passed to the paddr and p_uv_addr parameters in omap_overlay_info. It is also expected to provide the stride value based on the view's orientation and container type, this should be passed to the screen_width parameter of omap_overlay_info. In calc_tiler_rotation_offset screen_width is used to calculate the required row_inc for DISPC. x_predecim and y_predecim are also used to calculate row_inc and pix_inc thereby adding predecimation support for TILER.  Signed-off-by: Chandrabhanu Mahapatra <cmahapatra@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | overlay.c | s | 14K | 538 | Chandrabhanu Mahapatra | cmahapatra@ti.com | 1337673555 |  | OMAPDSS: DISPC: Support rotation through TILER  TILER is a block in OMAP4's DMM which lets DSS fetch frames in a rotated manner. Physical memory can be mapped to a portion of OMAP's system address space called TILER address space. The TILER address space is split into 8 views. Each view represents a rotated or mirrored form of the mapped physical memory. When a DISPC overlay's base address is programmed to one of these views, the TILER fetches the pixels according to the orientation of the view. A view is further split into 4 containers, each container holds elements of a particular size. Rotation can be achieved at the granularity of elements in the container. For more information on TILER, refer to the Memory Subsytem section in OMAP4 TRM. Rotation type TILER has been added which is used to exploit the capabilities of these 8 views for performing various rotations.  When fetching from addresses mapped to TILER space, the DISPC DMA can fetch pixels in either 1D or 2D bursts. The fetch depends on which TILER container we are accessing. Accessing 8, 16 and 32 bit sized containers requires 2D bursts, and page mode sized containers require 1D bursts.  The DSS2 user is expected to provide the Tiler address of the view that it is interested in. This is passed to the paddr and p_uv_addr parameters in omap_overlay_info. It is also expected to provide the stride value based on the view's orientation and container type, this should be passed to the screen_width parameter of omap_overlay_info. In calc_tiler_rotation_offset screen_width is used to calculate the required row_inc for DISPC. x_predecim and y_predecim are also used to calculate row_inc and pix_inc thereby adding predecimation support for TILER.  Signed-off-by: Chandrabhanu Mahapatra <cmahapatra@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | hdmi.c | s | 19K | 669 | Ricardo Neri | ricardo.neri@ti.com | 1336738630 |  | OMAPDSS: HDMI: Implement DSS driver interface for audio  Implement the DSS device driver audio support interface in the HDMI panel driver and generic driver. The implementation relies on the IP-specific functions that are defined at DSS probe time.  A mixed locking strategy is used. The panel's mutex is used when the state of the panel is queried as required by the audio functions. The audio state is protected using a spinlock as users of DSS HDMI audio functionality might start/stop audio while holding a spinlock. The mutex and the spinlock are held and released as needed by each individual function to protect the panel state and the audio state.  Although the panel's audio_start functions does not check whether the panel is active, the audio _ENABLED state can be reached only from audio_enable, which does check the state of the panel. Also, if the panel is ever disabled, the audio state will transition to _DISABLED. Transitions are always protected by the audio lock.  Signed-off-by: Ricardo Neri <ricardo.neri@ti.com>
f | dss_features.c | s | 21K | 611 | Chandrabhanu Mahapatra | cmahapatra@ti.com | 1337673555 |  | OMAPDSS: DISPC: Support rotation through TILER  TILER is a block in OMAP4's DMM which lets DSS fetch frames in a rotated manner. Physical memory can be mapped to a portion of OMAP's system address space called TILER address space. The TILER address space is split into 8 views. Each view represents a rotated or mirrored form of the mapped physical memory. When a DISPC overlay's base address is programmed to one of these views, the TILER fetches the pixels according to the orientation of the view. A view is further split into 4 containers, each container holds elements of a particular size. Rotation can be achieved at the granularity of elements in the container. For more information on TILER, refer to the Memory Subsytem section in OMAP4 TRM. Rotation type TILER has been added which is used to exploit the capabilities of these 8 views for performing various rotations.  When fetching from addresses mapped to TILER space, the DISPC DMA can fetch pixels in either 1D or 2D bursts. The fetch depends on which TILER container we are accessing. Accessing 8, 16 and 32 bit sized containers requires 2D bursts, and page mode sized containers require 1D bursts.  The DSS2 user is expected to provide the Tiler address of the view that it is interested in. This is passed to the paddr and p_uv_addr parameters in omap_overlay_info. It is also expected to provide the stride value based on the view's orientation and container type, this should be passed to the screen_width parameter of omap_overlay_info. In calc_tiler_rotation_offset screen_width is used to calculate the required row_inc for DISPC. x_predecim and y_predecim are also used to calculate row_inc and pix_inc thereby adding predecimation support for TILER.  Signed-off-by: Chandrabhanu Mahapatra <cmahapatra@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | dss.h | s | 15K | 434 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1337673553 |  | OMAPDSS: use DSI_FIFO_BUG workaround only for manual update displays  There is a problem related to DSS FIFO thresholds and power management on OMAP3. It seems that when the full PM hits in, we get underflows. The core reason is unknown, but after experiments it looks like only particular FIFO thresholds work correctly.  This bug is related to an earlier patch, which added special FIFO threshold configuration for OMAP3, because DSI command mode output didn't work with the normal threshold configuration.  However, as the above work-around worked fine for other output types also, we currently always configure thresholds in this special way on OMAP3. In theory there should be negligible difference with this special way and the standard way. The first paragraph explains what happens in practice.  This patch changes the driver to use the special threshold configuration only when the output is a manual update display on OMAP3. This does include RFBI displays also, and although it hasn't been tested (no boards using RFBI) I suspect the similar behaviour is present there also, as the DISPC side should work similarly for DSI command mode and RFBI.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com> Cc: Joe Woodward <jw@terrafix.co.uk>
f | ti_hdmi_4xxx_ip.c | s | 39K | 1188 | Ricardo Neri | ricardo.neri@ti.com | 1337673609 |  | OMAPDSS: HDMI: OMAP4: Update IRQ flags for the HPD IRQ request  genirq requires that the IRQ requests that do not provided a handler to use the IRQF_ONESHOT flag. This is to prevent situations in which the irq line is reenabled while the interrupt is still asserted. While this situation may not happen in edge type interrupts, genirq still requires to use IRQF_ONESHOT.  Also, remove the IRQF_DISABLED as the flag is now a NOOP and has been deprecated.  Signed-off-by: Ricardo Neri <ricardo.neri@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | display.c | s | 12K | 446 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1337673554 |  | OMAPDSS: remove compiler warnings when CONFIG_BUG=n  If CONFIG_BUG is not enabled, BUG() does not stop the execution. Many places in code expect the execution to stop, and this causes compiler warnings about uninitialized variables and returning from a non-void function without a return value.  This patch fixes the warnings by initializing the variables and returning properly after BUG() lines. However, the behaviour is still undefined after the BUG, but this is the choice the user makes when using CONFIG_BUG=n.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | dispc.c | s | 88K | 3120 | Archit Taneja | archit@ti.com | 1337673601 |  | OMAPDSS: VENC/DISPC: Delay dividing Y resolution for managers connected to VENC  DSS2 driver uses the timings in manager's private data to check the validity of overlay and manager infos written by the user. For VENC interface, we divide the Y resolution by half when writing to the DISPC_DIGIT_SIZE register as the content is interlaced. However, the height of the manager/display with respect to the content shown through VENC still remains the same.  The VENC driver divides the y_res parameter in omap_video_timings by half, and then applies the configuration. This leads to manager's private data storing the wrong Y resolution. Hence, overlay related checks fail.  Ensure that manager's private data stores the original timings, and the Y resolution is halved only when we write to the DISPC register. This is a hack, the proper solution would be to pass some sort of interlace parameter which makes the call whether we should divide y_res or not.  Signed-off-by: Archit Taneja <archit@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | sdi.c | s | 5.0K | 181 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1336738164 |  | OMAPDSS: separate pdata based initialization  Move the platform-data based display device initialization into a separate function, so that we may later add of-based initialization.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | dpi.c | s | 9.2K | 332 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1336738164 |  | OMAPDSS: separate pdata based initialization  Move the platform-data based display device initialization into a separate function, so that we may later add of-based initialization.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | ti_hdmi.h | s | 5.5K | 172 | Ricardo Neri | ricardo.neri@ti.com | 1336738628 |  | OMAPDSS: HDMI: Add an audio configuration function  The generic HDMI driver does not need to know about the specific settings of a given IP. Hence, it just passes the audio configuration and the IP library parses such configuration and sets the IP accordingly. This patch introduces an IP-specific audio configuration function.  Also, this patch implements the audio config function for OMAP4. The DMA, format and core config functions are no longer exposed to the generic HDMI driver as they are IP-specific.  The audio configuration function caters for 16-bit through 24-bit audio samples with sample rates from 32kHz and up to 192kHz as well as up to 8 audio channels.  Signed-off-by: Ricardo Neri <ricardo.neri@ti.com>
f | venc.c | s | 23K | 812 | Archit Taneja | archit@ti.com | 1337673608 |  | OMAPDSS: Apply VENC timings even if panel is disabled  The VENC interfaces uses it's venc_set_timing() function to take in a new set of timings. If the panel is disabled, it does not disable and re-enable the interface. Currently, the manager timings are applied in venc_power_on(), these are not called by set_timings if the panel is disabled. When checking overlay and manager data, the DSS driver uses the last applied manager timings, and not the timings held by omap_dss_device struct. Hence, there is a need to apply the new manager timings even if the panel is disabled.  Apply the manager timings if the VENC panel is disabled.  This is similar to the commit below which fixed the same issue for HDMI/DPI interfaces:  fcc36619901064a76e15a545ea36d38ba0e54192  Signed-off-by: Archit Taneja <archit@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | ti_hdmi_4xxx_ip.h | s | 12K | 390 | Ricardo Neri | ricardo.neri@ti.com | 1336738628 |  | OMAPDSS: HDMI: Add an audio configuration function  The generic HDMI driver does not need to know about the specific settings of a given IP. Hence, it just passes the audio configuration and the IP library parses such configuration and sets the IP accordingly. This patch introduces an IP-specific audio configuration function.  Also, this patch implements the audio config function for OMAP4. The DMA, format and core config functions are no longer exposed to the generic HDMI driver as they are IP-specific.  The audio configuration function caters for 16-bit through 24-bit audio samples with sample rates from 32kHz and up to 192kHz as well as up to 8 audio channels.  Signed-off-by: Ricardo Neri <ricardo.neri@ti.com>
f | dsi.c | s | 126K | 4020 | Archit Taneja | archit@ti.com | 1338804471 |  | OMAPDSS: DSI: Fix bug when calculating LP command interleaving parameters  In function dsi_compute_interleave_lp(), the escape clock/LP clock time period is calculated incorrectly. The escape clock/LP clock is calculated as:  LP Clock(Hz) = DSI_FCLK(Hz) / lp_clk_div  Since we are calculating the time period of LP clock, the LP clock divider should be multiplied with the time period of DSI_FCLK.  Calculating incorrect value of txclkesc results in incorrect calculation of LP interleaving parameters, it also creates a possibility of a divide by zero error.  Reported-by: Sureshkumar Manimuthu <mail2msuresh@ti.com>  Signed-off-by: Archit Taneja <archit@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | dispc.h | s | 15K | 782 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1337673554 |  | OMAPDSS: remove compiler warnings when CONFIG_BUG=n  If CONFIG_BUG is not enabled, BUG() does not stop the execution. Many places in code expect the execution to stop, and this causes compiler warnings about uninitialized variables and returning from a non-void function without a return value.  This patch fixes the warnings by initializing the variables and returning properly after BUG() lines. However, the behaviour is still undefined after the BUG, but this is the choice the user makes when using CONFIG_BUG=n.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | dispc_coefs.c | s | 8.1K | 297 | Lajos Molnar | lajos@ti.com | 1331035703 |  | OMAPDSS: DISPC: Fix FIR coefficients  coef3_M8 had an incorrect phase with 50% more intensity. This resulted in banding on slightly down/upscaled images. Fixed a rounding error in coef5_M9.  Also removed ARRAY_LEN macro as ARRAY_SIZE is the standard linux one.  Signed-off-by: Lajos Molnar <lajos@ti.com> Signed-off-by: Archit Taneja <archit@ti.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | core.c | s | 13K | 523 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1338797080 |  | OMAPDSS: fix build when DEBUG_FS or DSS_DEBUG_SUPPORT disabled  If CONFIG_DEBUG_FS or CONFIG_OMAP2_DSS_DEBUG_SUPPORT is disabled, the build fails:  drivers/video/omap2/dss/core.c:197:50: error: static declaration of 'dss_debugfs_create_file' follows non-static declaration drivers/video/omap2/dss/dss.h:166:5: note: previous declaration of 'dss_debugfs_create_file' was here  This patch fixes the dummy dss_debugfs_create_file() so that the driver builds.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | Kconfig | g | 3.3K |  | Ricardo Neri | ricardo.neri@ti.com | 1336738522 |  | OMAPDSS: HDMI: Decouple HDMI audio from ASoC  Instead of having OMAPDSS HDMI audio functionality depending on the ASoC HDMI audio driver, use a new config option so that potential users, including ASoC, may select if needed.  Signed-off-by: Ricardo Neri <ricardo.neri@ti.com>
f | rfbi.c | s | 22K | 864 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1336738164 |  | OMAPDSS: separate pdata based initialization  Move the platform-data based display device initialization into a separate function, so that we may later add of-based initialization.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | manager.c | s | 15K | 543 | Archit Taneja | archit@ti.com | 1336560247 |  | OMAPDSS: APPLY: Remove display dependency from overlay and manager checks  In order to check the validity of overlay and manager info, there was a need to use the omap_dss_device struct to get the panel resolution. The manager's private data in APPLY now contains the manager timings. Hence, we don't need to rely on the display resolution any more.  Pass the manager's timings in private data to dss_mgr_check(). Remove the need to pass omap_dss_device structs in the functions which check for the validity of overlay and manager parameters.  Signed-off-by: Archit Taneja <archit@ti.com>
