f | omapfb-main.c | s | 55K | 2026 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1337673555 |  | OMAPFB: remove compiler warnings when CONFIG_BUG=n  If CONFIG_BUG is not enabled, BUG() does not stop the execution. Many places in code expect the execution to stop, and this causes compiler warnings about uninitialized variables and returning from a non-void function without a return value.  This patch fixes the warnings by initializing the variables and returning properly after BUG() lines. However, the behaviour is still undefined after the BUG, but this is the choice the user makes when using CONFIG_BUG=n.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | omapfb-ioctl.c | s | 18K | 744 | Grazvydas Ignotas | notasas@gmail.com | 1336736661 |  | OMAPDSS: OMAPFB: always allow to configure overlay  Currently when multiple overlays are active, OMAPFB_SETUP_PLANE fails. Instead of failing, allow it to configure the first overlay as if there was only one overlay, the remaining ones will have to be configured in other ways (sysfs).  This allows overlay-controlling programs (like video players) to function properly when framebuffer is cloned to another display (like TV).  Signed-off-by: Grazvydas Ignotas <notasas@gmail.com> Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | omapfb-sysfs.c | s | 11K | 464 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1322808884 |  | OMAPDSS: APPLY: rewrite overlay enable/disable  Overlays are currently enabled and disabled with a boolean in the struct omap_overlay_info. The overlay info is set with ovl->set_overlay_info(), and made into use with mgr->apply().  This doesn't work properly, as the enable/disable status may affect also other overlays, for example when using fifo-merge. Thus the enabling and disabling of the overlay needs to be done outside the normal overlay configuration.  This patch achieves that by doing the following things:  1) Add function pointers to struct omap_overlay: enable(), disable() and is_enabled(). These are used to do the obvious. The functions may block.  2) Move the "enabled" field from struct omap_overlay to ovl_priv_data.  3) Add a new route for settings to be applied to the HW, called "extra_info". The status of the normal info and extra_info are tracked separately.  The point here is to allow the normal info to be changed and applied in non-blocking matter, whereas the extra_info can only be changed when holding the mutex. This makes it possible to, for example, set the overlay enable flag, apply it, and wait until the HW has taken the flag into use.  This is not possible if the enable flag would be in the normal info, as a new value for the flag could be set at any time from the users of omapdss.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | Makefile | g | 91B |  | Tomi Valkeinen | tomi.valkeinen@nokia.com | 1260353564 |  | OMAP: DSS2: omapfb driver  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@nokia.com>
f | omapfb.h | s | 5.2K | 169 | Tomi Valkeinen | tomi.valkeinen@ti.com | 1337673555 |  | OMAPFB: remove compiler warnings when CONFIG_BUG=n  If CONFIG_BUG is not enabled, BUG() does not stop the execution. Many places in code expect the execution to stop, and this causes compiler warnings about uninitialized variables and returning from a non-void function without a return value.  This patch fixes the warnings by initializing the variables and returning properly after BUG() lines. However, the behaviour is still undefined after the BUG, but this is the choice the user makes when using CONFIG_BUG=n.  Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>
f | Kconfig | g | 757B |  | Rob Clark | rob@ti.com | 1322358210 |  | staging: add omapdrm DRM/KMS driver for TI OMAP platforms  A DRM display driver for TI OMAP platform.  Similar to omapfb (fbdev) and omap_vout (v4l2 display) drivers in the past, this driver uses the DSS2 driver to access the display hardware, including support for HDMI, DVI, and various types of LCD panels.  And it implements GEM support for buffer allocation (for KMS as well as offscreen buffers used by the xf86-video-omap userspace xorg driver).  The driver maps CRTCs to overlays, encoders to overlay-managers, and connectors to dssdev's.  Note that this arrangement might change slightly when support for drm_plane overlays is added.  For GEM support, non-scanout buffers are using the shmem backed pages provided by GEM core (In drm_gem_object_init()).  In the case of scanout buffers, which need to be physically contiguous, those are allocated with CMA and use drm_gem_private_object_init().  See userspace xorg driver: git://github.com/robclark/xf86-video-omap.git  Refer to this link for CMA (Continuous Memory Allocator): http://lkml.org/lkml/2011/8/19/302  Links to previous versions of the patch: v1: http://lwn.net/Articles/458137/ v2: http://patches.linaro.org/4156/ v3: http://patches.linaro.org/4688/ v4: http://patches.linaro.org/4791/  History:  v5: move headers from include/drm at Greg KH's request, minor rebasing     on 3.2-rc1, pull in private copies of drm_gem_{get,put}_pages()     because "drm/gem: add functions to get/put pages" patch is not     merged yet v4: bit of rework of encoder/connector _dpms() code, modeset_init()     rework to not use nested functions, update TODO.txt v3: minor cleanups, improved error handling for dev_load(), some minor     API changes that will be needed later for tiled buffer support v2: replace omap_vram with CMA for scanout buffer allocation, remove     unneeded functions, use dma_addr_t for physical addresses, error     handling cleanup, refactor attach/detach pages into common drm     functions, split non-userspace-facing API into omap_priv.h, remove     plugin API  v1: original  Signed-off-by: Rob Clark <rob@ti.com> Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
