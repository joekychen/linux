f | oprofile_perf.c | s | 7.0K | 270 | Will Deacon | will.deacon@arm.com | 1340288111 |  | oprofile: perf: use NR_CPUS instead or nr_cpumask_bits for static array  The OProfile perf backend uses a static array to keep track of the perf events on the system. When compiling with CONFIG_CPUMASK_OFFSTACK=y && SMP, nr_cpumask_bits is not a compile-time constant and the build will fail with:  oprofile_perf.c:28: error: variably modified 'perf_events' at file scope  This patch uses NR_CPUs instead of nr_cpumask_bits for the array initialisation. If this causes space problems in the future, we can always move to dynamic allocation for the events array.  Cc: Matt Fleming <matt@console-pimps.org> Reported-by: Russell King - ARM Linux <linux@arm.linux.org.uk> Signed-off-by: Will Deacon <will.deacon@arm.com> Cc: <stable@vger.kernel.org> # v2.6.37+ Signed-off-by: Robert Richter <robert.richter@amd.com>
f | event_buffer.c | s | 4.5K | 166 | Thomas Gleixner | tglx@linutronix.de | 1315905125 |  | locking, oprofile: Annotate oprofilefs lock as raw  The oprofilefs_lock can be taken in atomic context (in profiling interrupts) and therefore cannot cannot be preempted on -rt - annotate it.  In mainline this change documents the low level nature of the lock - otherwise there's no functional difference. Lockdep and Sparse checking will work as usual.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | oprofile_stats.h | s | 694B | 26 | Arun Sharma | asharma@fb.com | 1311724187 |  | atomic: use <linux/atomic.h>  This allows us to move duplicated code in <asm/atomic.h> (atomic_inc_not_zero() for now) to <linux/atomic.h>  Signed-off-by: Arun Sharma <asharma@fb.com> Reviewed-by: Eric Dumazet <eric.dumazet@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: David Miller <davem@davemloft.net> Cc: Eric Dumazet <eric.dumazet@gmail.com> Acked-by: Mike Frysinger <vapier@gentoo.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | buffer_sync.h | s | 432B | 17 | Robert Richter | robert.richter@amd.com | 1232631426 |  | cpumask: modifiy oprofile initialization  Delta patch to f7df8ed164996cd2c6aca9674388be6ef78d8b37 for tip/cpus4096.  Moved initialization to sync_start()/sync_stop(). No changes needed in buffer_sync.h and oprof.c anymore.  Signed-off-by: Robert Richter <robert.richter@amd.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | oprofilefs.c | s | 6.3K | 214 | Stephen Boyd | sboyd@codeaurora.org | 1333664750 |  | simple_open: automatically convert to simple_open()  Many users of debugfs copy the implementation of default_open() when they want to support a custom read/write function op.  This leads to a proliferation of the default_open() implementation across the entire tree.  Now that the common implementation has been consolidated into libfs we can replace all the users of this function with simple_open().  This replacement was done with the following semantic patch:  <smpl> @ open @ identifier open_f != simple_open; identifier i, f; @@ -int open_f(struct inode *i, struct file *f) -{ ( -if (i->i_private) -f->private_data = i->i_private; || -f->private_data = i->i_private; ) -return 0; -}  @ has_open depends on open @ identifier fops; identifier open.open_f; @@ struct file_operations fops = { ... -.open = open_f, +.open = simple_open, ... }; </smpl>  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Stephen Boyd <sboyd@codeaurora.org> Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Julia Lawall <Julia.Lawall@lip6.fr> Acked-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | cpu_buffer.c | s | 10K | 385 | Heinz Graalfs | graalfs@linux.vnet.ibm.com | 1297764427 |  | oprofile: Introduce new oprofile sample add function (oprofile_add_ext_hw_sample)  This patch introduces a new oprofile sample add function (oprofile_add_ext_hw_sample) that can also take task_struct as an argument, which is used by the hwsampler kernel module when copying hardware samples to OProfile buffers.  Applied with following changes: * removed #include <linux/module.h> * whitespace changes * removed conditional compilation (CONFIG_HAVE_HWSAMPLER) * modified order of functions * fix missing function definition in header file  Signed-off-by: Mahesh Salgaonkar <mahesh@linux.vnet.ibm.com> Signed-off-by: Maran Pakkirisamy <maranp@linux.vnet.ibm.com> Signed-off-by: Heinz Graalfs <graalfs@linux.vnet.ibm.com> Acked-by: Heiko Carstens <heiko.carstens@de.ibm.com> Signed-off-by: Robert Richter <robert.richter@amd.com>
f | cpu_buffer.h | s | 2.8K | 103 | Tejun Heo | tj@kernel.org | 1288346058 |  | oprofile: Remove deprecated use of flush_scheduled_work()  flush_scheduled_work() is deprecated and scheduled to be removed. sync_stop() currently cancels cpu_buffer works inside buffer_mutex and flushes the system workqueue outside.  Instead, split end_cpu_work() into two parts - stopping further work enqueues and flushing works - and do the former inside buffer_mutex and latter outside.  For stable kernels v2.6.35.y and v2.6.36.y.  Signed-off-by: Tejun Heo <tj@kernel.org> Cc: stable@kernel.org Signed-off-by: Robert Richter <robert.richter@amd.com>
f | event_buffer.h | s | 860B | 30 | Anton Blanchard | anton@samba.org | 1306233959 |  | oprofile: Use linux/mutex.h  The oprofile code is still including asm/mutex.h instead of linux/mutex.h.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Robert Richter <robert.richter@amd.com>
f | buffer_sync.c | s | 13K | 491 | Robert Richter | robert.richter@amd.com | 1306852414 |  | oprofile: Fix locking dependency in sync_start()  This fixes the A->B/B->A locking dependency, see the warning below.  The function task_exit_notify() is called with (task_exit_notifier) .rwsem set and then calls sync_buffer() which locks buffer_mutex. In sync_start() the buffer_mutex was set to prevent notifier functions to be started before sync_start() is finished. But when registering the notifier, (task_exit_notifier).rwsem is locked too, but now in different order than in sync_buffer(). In theory this causes a locking dependency, what does not occur in practice since task_exit_notify() is always called after the notifier is registered which means the lock is already released.  However, after checking the notifier functions it turned out the buffer_mutex in sync_start() is unnecessary. This is because sync_buffer() may be called from the notifiers even if sync_start() did not finish yet, the buffers are already allocated but empty. No need to protect this with the mutex.  So we fix this theoretical locking dependency by removing buffer_mutex in sync_start(). This is similar to the implementation before commit:   750d857 oprofile: fix crash when accessing freed task structs  which introduced the locking dependency.  Lockdep warning:  oprofiled/4447 is trying to acquire lock:  (buffer_mutex){+.+...}, at: [<ffffffffa0000e55>] sync_buffer+0x31/0x3ec [oprofile]  but task is already holding lock:  ((task_exit_notifier).rwsem){++++..}, at: [<ffffffff81058026>] __blocking_notifier_call_chain+0x39/0x67  which lock already depends on the new lock.  the existing dependency chain (in reverse order) is:  -> #1 ((task_exit_notifier).rwsem){++++..}:        [<ffffffff8106557f>] lock_acquire+0xf8/0x11e        [<ffffffff81463a2b>] down_write+0x44/0x67        [<ffffffff810581c0>] blocking_notifier_chain_register+0x52/0x8b        [<ffffffff8105a6ac>] profile_event_register+0x2d/0x2f        [<ffffffffa00013c1>] sync_start+0x47/0xc6 [oprofile]        [<ffffffffa00001bb>] oprofile_setup+0x60/0xa5 [oprofile]        [<ffffffffa00014e3>] event_buffer_open+0x59/0x8c [oprofile]        [<ffffffff810cd3b9>] __dentry_open+0x1eb/0x308        [<ffffffff810cd59d>] nameidata_to_filp+0x60/0x67        [<ffffffff810daad6>] do_last+0x5be/0x6b2        [<ffffffff810dbc33>] path_openat+0xc7/0x360        [<ffffffff810dbfc5>] do_filp_open+0x3d/0x8c        [<ffffffff810ccfd2>] do_sys_open+0x110/0x1a9        [<ffffffff810cd09e>] sys_open+0x20/0x22        [<ffffffff8146ad4b>] system_call_fastpath+0x16/0x1b  -> #0 (buffer_mutex){+.+...}:        [<ffffffff81064dfb>] __lock_acquire+0x1085/0x1711        [<ffffffff8106557f>] lock_acquire+0xf8/0x11e        [<ffffffff814634f0>] mutex_lock_nested+0x63/0x309        [<ffffffffa0000e55>] sync_buffer+0x31/0x3ec [oprofile]        [<ffffffffa0001226>] task_exit_notify+0x16/0x1a [oprofile]        [<ffffffff81467b96>] notifier_call_chain+0x37/0x63        [<ffffffff8105803d>] __blocking_notifier_call_chain+0x50/0x67        [<ffffffff81058068>] blocking_notifier_call_chain+0x14/0x16        [<ffffffff8105a718>] profile_task_exit+0x1a/0x1c        [<ffffffff81039e8f>] do_exit+0x2a/0x6fc        [<ffffffff8103a5e4>] do_group_exit+0x83/0xae        [<ffffffff8103a626>] sys_exit_group+0x17/0x1b        [<ffffffff8146ad4b>] system_call_fastpath+0x16/0x1b  other info that might help us debug this:  1 lock held by oprofiled/4447:  #0:  ((task_exit_notifier).rwsem){++++..}, at: [<ffffffff81058026>] __blocking_notifier_call_chain+0x39/0x67  stack backtrace: Pid: 4447, comm: oprofiled Not tainted 2.6.39-00007-gcf4d8d4 #10 Call Trace:  [<ffffffff81063193>] print_circular_bug+0xae/0xbc  [<ffffffff81064dfb>] __lock_acquire+0x1085/0x1711  [<ffffffffa0000e55>] ? sync_buffer+0x31/0x3ec [oprofile]  [<ffffffff8106557f>] lock_acquire+0xf8/0x11e  [<ffffffffa0000e55>] ? sync_buffer+0x31/0x3ec [oprofile]  [<ffffffff81062627>] ? mark_lock+0x42f/0x552  [<ffffffffa0000e55>] ? sync_buffer+0x31/0x3ec [oprofile]  [<ffffffff814634f0>] mutex_lock_nested+0x63/0x309  [<ffffffffa0000e55>] ? sync_buffer+0x31/0x3ec [oprofile]  [<ffffffffa0000e55>] sync_buffer+0x31/0x3ec [oprofile]  [<ffffffff81058026>] ? __blocking_notifier_call_chain+0x39/0x67  [<ffffffff81058026>] ? __blocking_notifier_call_chain+0x39/0x67  [<ffffffffa0001226>] task_exit_notify+0x16/0x1a [oprofile]  [<ffffffff81467b96>] notifier_call_chain+0x37/0x63  [<ffffffff8105803d>] __blocking_notifier_call_chain+0x50/0x67  [<ffffffff81058068>] blocking_notifier_call_chain+0x14/0x16  [<ffffffff8105a718>] profile_task_exit+0x1a/0x1c  [<ffffffff81039e8f>] do_exit+0x2a/0x6fc  [<ffffffff81465031>] ? retint_swapgs+0xe/0x13  [<ffffffff8103a5e4>] do_group_exit+0x83/0xae  [<ffffffff8103a626>] sys_exit_group+0x17/0x1b  [<ffffffff8146ad4b>] system_call_fastpath+0x16/0x1b  Reported-by: Marcin Slusarz <marcin.slusarz@gmail.com> Cc: Carl Love <carll@us.ibm.com> Cc: <stable@kernel.org> # .36+ Signed-off-by: Robert Richter <robert.richter@amd.com>
f | oprofile_files.c | s | 4.7K | 151 | Robert Richter | robert.richter@amd.com | 1324311523 |  | oprofile: Fix uninitialized memory access when writing to writing to oprofilefs  If oprofilefs_ulong_from_user() is called with count equals zero, *val remains unchanged. Depending on the implementation it might be uninitialized.  Change oprofilefs_ulong_from_user()'s interface to return count on success. Thus, we are able to return early if count equals zero which avoids using *val uninitialized. Fixing all users of oprofilefs_ulong_ from_user().  This follows write syscall implementation when count is zero: "If count is zero ... [and if] no errors are detected, 0 will be returned without causing any other effect." (man 2 write)  Reported-By: Mike Waychison <mikew@google.com> Signed-off-by: Robert Richter <robert.richter@amd.com> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: <stable@vger.kernel.org> Cc: oprofile-list <oprofile-list@lists.sourceforge.net> Link: http://lkml.kernel.org/r/20111219153830.GH16765@erda.amd.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | oprofile_stats.c | s | 2.3K | 72 | Tejun Heo | tj@kernel.org | 1256823253 |  | percpu: make percpu symbols in oprofile unique  This patch updates percpu related symbols in oprofile such that percpu symbols are unique and don't clash with local symbols.  This serves two purposes of decreasing the possibility of global percpu symbol collision and allowing dropping per_cpu__ prefix from percpu symbols.  * drivers/oprofile/cpu_buffer.c: s/cpu_buffer/op_cpu_buffer/  Partly based on Rusty Russell's "alloc_percpu: rename percpu vars which cause name clashes" patch.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: Robert Richter <robert.richter@amd.com> Cc: Rusty Russell <rusty@rustcorp.com.au>
f | nmi_timer_int.c | s | 3.4K | 143 | Robert Richter | robert.richter@amd.com | 1320420438 |  | oprofile, x86: Reimplement nmi timer mode using perf event  The legacy x86 nmi watchdog code was removed with the implementation of the perf based nmi watchdog. This broke Oprofile's nmi timer mode. To run nmi timer mode we relied on a continuous ticking nmi source which the nmi watchdog provided. The nmi tick was no longer available and current watchdog can not be used anymore since it runs with very long periods in the range of seconds. This patch reimplements the nmi timer mode using a perf counter nmi source.  V2: * removing pr_info() * fix undefined reference to `__udivdi3' for 32 bit build * fix section mismatch of .cpuinit.data:nmi_timer_cpu_nb * removed nmi timer setup in arch/x86 * implemented function stubs for op_nmi_init/exit() * made code more readable in oprofile_init()  V3: * fix architectural initialization in oprofile_init() * fix CONFIG_OPROFILE_NMI_TIMER dependencies  Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Signed-off-by: Robert Richter <robert.richter@amd.com>
f | oprof.h | s | 1.2K | 39 | Robert Richter | robert.richter@amd.com | 1323252998 |  | oprofile: Fix oprofile_timer_exit() breakage  Removing remainings of oprofile_timer_exit() completly.  Signed-off-by: Robert Richter <robert.richter@amd.com>
f | oprof.c | s | 5.0K | 227 | Robert Richter | robert.richter@amd.com | 1320420438 |  | oprofile, x86: Reimplement nmi timer mode using perf event  The legacy x86 nmi watchdog code was removed with the implementation of the perf based nmi watchdog. This broke Oprofile's nmi timer mode. To run nmi timer mode we relied on a continuous ticking nmi source which the nmi watchdog provided. The nmi tick was no longer available and current watchdog can not be used anymore since it runs with very long periods in the range of seconds. This patch reimplements the nmi timer mode using a perf counter nmi source.  V2: * removing pr_info() * fix undefined reference to `__udivdi3' for 32 bit build * fix section mismatch of .cpuinit.data:nmi_timer_cpu_nb * removed nmi timer setup in arch/x86 * implemented function stubs for op_nmi_init/exit() * made code more readable in oprofile_init()  V3: * fix architectural initialization in oprofile_init() * fix CONFIG_OPROFILE_NMI_TIMER dependencies  Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Signed-off-by: Robert Richter <robert.richter@amd.com>
f | timer_int.c | s | 2.5K | 100 | Robert Richter | robert.richter@amd.com | 1320415475 |  | oprofile: Remove exit function for timer mode  Remove exit functions by moving init/exit code to oprofile's setup/ shutdown functions. Doing so the oprofile module exit code will be easier and less error-prone.  Signed-off-by: Robert Richter <robert.richter@amd.com>
