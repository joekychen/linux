f | target_core_cdb.c | s | 30K | 988 | Nicholas Bellinger | nab@linux-iscsi.org | 1336601327 |  | target: Remove max_sectors device attribute for modern se_task less code  This patch removes the original usage of dev_attr->max_sectors in favor of dev_attr->hw_max_sectors that is now being enforced by target core from within transport_generic_cmd_sequencer() for SCF_SCSI_DATA_SG_IO_CDB ops.  After the recent se_task removal patches from hch, this value for IBLOCK backends being set via configfs by userspace from an saved max_sectors value that is turning out to be problematic, so it makes sense to go ahead and remove this now legacy attribute all-together.  This patch also continues to make se_dev_set_default_attribs() do (sectors / block_size) alignment for what actually get used by target_core_mod to be safe here, following the same alignment currently used by fabric_max_sectors.  Reported-by: Andy Grover <agrover@redhat.com> Cc: Christoph Hellwig <hch@lst.de> Cc: Roland Dreier <roland@purestorage.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_configfs.c | s | 87K | 2829 | Nicholas Bellinger | nab@linux-iscsi.org | 1337240758 |  | target: Add MI_REPORT_TARGET_PGS ext. header + implict_trans_secs attribute  This patch adds support for ALUA MI_REPORT_TARGET_PGS extended header format defined within SPC-4.  It changes target core ALUA emulation logic within target_emulate_report_target_port_groups() to support both the extended and original length only header formats.  It includes adding a new 'implict_trans_secs' attribute for each ALUA target port group to control the value returned to the application client for an recommended implict translation timeout in seconds.  By default this value is currently set to zero, and limited up to 255 by virtue of using a single byte in the extended header format.  This value is used by target_emulate_report_target_port_groups() within the extended header logic to set IMPLICIT TRANSITION TIME as defined by spc4r30.  Cc: Hannes Reinecke <hare@suse.de> Cc: Rob Evers <revers@redhat.com> Cc: Christoph Hellwig <hch@lst.de> Cc: Roland Dreier <roland@purestorage.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_pr.h | s | 2.1K | 63 | Christoph Hellwig | hch@infradead.org | 1336342274 |  | target: replace ->execute_task with ->execute_cmd  Make CDB emulation work on commands instead of tasks again as a preparation of removing tasks completely.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | Makefile | g | 801B |  | Chris Boot | bootc@bootc.net | 1336602317 |  | sbp-target: Initial merge of firewire/ieee-1394 target mode support  The FireWire SBP-2 Target is a driver for using an IEEE-1394 connection as a SCSI transport. This module uses the SCSI Target framework to expose LUNs to other machines attached to a FireWire bus, in effect acting as a FireWire hard disk similar to FireWire Target Disk mode on many Apple computers.  This commit contains the squashed pull from Chris Boot's SBP-2-Target:        https://github.com/bootc/Linux-SBP-2-Target.git patch-v3  firewire-sbp-target: Add sbp_base.h header firewire-sbp-target: Add sbp_configfs.c firewire-sbp-target: Add sbp_fabric.{c,h} firewire-sbp-target: Add sbp_management_agent.{c,h} firewire-sbp-target: Add sbp_login.{c,h} firewire-sbp-target: Add sbp_target_agent.{c,h} firewire-sbp-target: Add sbp_scsi_cmnd.{c,h} firewire-sbp-target: Add to target Kconfig and Makefile  Also add bootc's entry to the MAINTAINERS file.  Great work Chris !!  Signed-off-by: Chris Boot <bootc@bootc.net> Acked-by: Stefan Richter <stefanr@s5r6.in-berlin.de> Cc: Andy Grover <agrover@redhat.com> Cc: Clemens Ladisch <clemens@ladisch.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_alua.h | s | 5.4K | 128 | Nicholas Bellinger | nab@linux-iscsi.org | 1337240758 |  | target: Add MI_REPORT_TARGET_PGS ext. header + implict_trans_secs attribute  This patch adds support for ALUA MI_REPORT_TARGET_PGS extended header format defined within SPC-4.  It changes target core ALUA emulation logic within target_emulate_report_target_port_groups() to support both the extended and original length only header formats.  It includes adding a new 'implict_trans_secs' attribute for each ALUA target port group to control the value returned to the application client for an recommended implict translation timeout in seconds.  By default this value is currently set to zero, and limited up to 255 by virtue of using a single byte in the extended header format.  This value is used by target_emulate_report_target_port_groups() within the extended header logic to set IMPLICIT TRANSITION TIME as defined by spc4r30.  Cc: Hannes Reinecke <hare@suse.de> Cc: Rob Evers <revers@redhat.com> Cc: Christoph Hellwig <hch@lst.de> Cc: Roland Dreier <roland@purestorage.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_pscsi.c | s | 30K | 1056 | Christoph Hellwig | hch@infradead.org | 1336342286 |  | target: remove struct se_task  We can use struct se_cmd for everything it did.  Make sure to pass the S/G list and data direction to the execution function to ease adding back BIDI support later on.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_rd.h | s | 1.2K | 37 | Christoph Hellwig | hch@infradead.org | 1334450430 |  | target: don't limit transfer sizes for the ramdisk backend  The ramdisk backend has not inherent limitations for handling requests, so don't artificially limits the transfer size.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_alua.c | s | 57K | 1897 | Roland Dreier | roland@purestorage.com | 1339557145 |  | target: Return error to initiator if SET TARGET PORT GROUPS emulation fails  The error paths in target_emulate_set_target_port_groups() are all essentially "rc = -EINVAL; goto out;" but the code at "out:" ignores rc and always returns success.  This means that even if eg explicit ALUA is turned off, the initiator will always see a good SCSI status for SET TARGET PORT GROUPS.  Fix this by returning rc as is intended.  It appears this bug was added by the following patch:  commit 05d1c7c0d0db4cc25548d9aadebb416888a82327 Author: Andy Grover <agrover@redhat.com> Date:   Wed Jul 20 19:13:28 2011 +0000      target: Make all control CDBs scatter-gather  Signed-off-by: Roland Dreier <roland@purestorage.com> Cc: Andy Grover <agrover@redhat.com> Cc: <stable@vger.kernel.org> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_tmr.c | s | 13K | 417 | Christoph Hellwig | hch@infradead.org | 1336342287 |  | target: remove the t_task_cdbs_ex_left field in struct se_cmd  Now that tasks are gone we are guaranteed to only get a single completion per command, and thus don't need this counter.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_transport.c | s | 120K | 3943 | Joern Engel | joern@logfs.org | 1339554785 |  | target: Add TFO->put_session() caller for HW fabric session shutdown  This patch adds an optional target_core_fabric_ops->put_session() caller within the existing target_put_session() code path.  This is required by tcm_qla2xxx code in order to invoke it's own fabric specific session shutdown handler using se_session->sess_kref.  Signed-off-by: Joern Engel <joern@logfs.org> Cc: Roland Dreier <roland@purestorage.com> Cc: Arun Easi <arun.easi@qlogic.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_pscsi.h | s | 1.3K | 50 | Christoph Hellwig | hch@infradead.org | 1336342286 |  | target: remove struct se_task  We can use struct se_cmd for everything it did.  Make sure to pass the S/G list and data direction to the execution function to ease adding back BIDI support later on.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
d | iscsi |  | 39 items |  | Nicholas Bellinger | nab@linux-iscsi.org | 1337559924 |  | iscsi-target: Fix iov_count calculation bug in iscsit_allocate_iovecs  This patch fixes a bug in iscsit_allocate_iovecs() where iov_count was incorrectly calculated using min(1UL, data_length / PAGE_SIZE) instead of max(1UL, data_length / PAGE_SIZE), that ends up triggering an OOPs for large block I/O when the SGL <-> iovec mapping exceeds the bogus iov_count allocation size.  This is a regression introduced during the iscsi-target conversion back to using core memory allocation here:  commit bfb79eac2026b411df9e253a9c350039b4b04bb7 Author: Andy Grover <agrover@redhat.com> Date:   Tue Apr 3 15:51:29 2012 -0700      target/iscsi: Go back to core allocating data buffer for cmd  Cc: Andy Grover <agrover@redhat.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_rd.c | s | 11K | 404 | Christoph Hellwig | hch@infradead.org | 1336342286 |  | target: remove struct se_task  We can use struct se_cmd for everything it did.  Make sure to pass the S/G list and data direction to the execution function to ease adding back BIDI support later on.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_tpg.c | s | 23K | 746 | Linus Torvalds | torvalds@linux-foundation.org | 1337647029 |  | Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/nab/target-pending  Pull scsi-target changes from Nicholas Bellinger:  "There has been lots of work in existing code in a number of areas this   past cycle.  The major highlights have been:     * Removal of transport_do_task_sg_chain() from core + fabrics      (Roland)    * target-core: Removal of se_task abstraction from target-core and      enforce hw_max_sectors for pSCSI backends (hch)    * Re-factoring of iscsi-target tx immediate/response queues (agrover)    * Conversion of iscsi-target back to using target core memory      allocation logic (agrover)    We've had one last minute iscsi-target patch go into for-next to   address a nasty regression bug related to the target core allocation   logic conversion from agrover that is not included in friday's   linux-next build, but has been included in this series.    On the new fabric module code front for-3.5, here is a brief status   update for the three currently in flight this round:     * usb-gadget target driver:    Sebastian Siewior's driver for supporting usb-gadget target mode   operation.  This will be going out as a separate PULL request from   target-pending/usb-target-merge with subsystem maintainer ACKs.  There   is one minor target-core patch in this series required to function.     * sbp ieee-1394/firewire target driver:    Chris Boot's driver for supportting the Serial Block Protocol (SBP)   across IEEE-1394 Firewire hardware.  This will be going out as a   separate PULL request from target-pending/sbp-target-merge with two   additional drivers/firewire/ patches w/ subsystem maintainer ACKs.     * qla2xxx LLD target mode infrastructure changes + tcm_qla2xxx:    The Qlogic >= 24xx series HW target mode LLD infrastructure patch-set   and tcm_qla2xxx fabric driver.  Support for FC target mode using   qla2xxx LLD code has been officially submitted by Qlogic to James   below, and is currently outstanding but not yet merged into   scsi.git/for-next..      [PATCH 00/22] qla2xxx: Updates for scsi "misc" branch     http://www.spinics.net/lists/linux-scsi/msg59350.html    Note there are *zero* direct dependencies upon this for-next series   for the qla2xxx LLD target + tcm_qla2xxx patches submitted above, and   over the last days the target mode team has been tracking down an   tcm_qla2xxx specific active I/O shutdown bug that appears to now be   almost squashed for 3.5-rc-fixes."  * 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/nab/target-pending: (47 commits)   iscsi-target: Fix iov_count calculation bug in iscsit_allocate_iovecs   iscsi-target: remove dead code in iscsi_check_valuelist_for_support   target: Handle ATA_16 passthrough for pSCSI backend devices   target: Add MI_REPORT_TARGET_PGS ext. header + implict_trans_secs attribute   target: Fix MAINTENANCE_IN service action CDB checks to use lower 5 bits   target: add support for the WRITE_VERIFY command   target: make target_put_session void   target: cleanup transport_execute_tasks()   target: Remove max_sectors device attribute for modern se_task less code   target: lock => unlock typo in transport_lun_wait_for_tasks   target: Enforce hw_max_sectors for SCF_SCSI_DATA_SG_IO_CDB   target: remove the t_se_count field in struct se_cmd   target: remove the t_task_cdbs_ex_left field in struct se_cmd   target: remove the t_task_cdbs_left field in struct se_cmd   target: remove struct se_task   target: move the state and execute lists to the command   target: simplify command to task linkage   target: always allocate a single task   target: replace ->execute_task with ->execute_cmd   target: remove the task_sectors field in struct se_task   ...
f | target_core_fabric_lib.c | s | 12K | 420 | Jörn Engel | joern@logfs.org | 1323862087 |  | target: remove useless casts  A reader should spend an extra moment whenever noticing a cast, because either something special is going on that deserves extra attention or, as is all too often the case, the code is wrong.  These casts, afaics, have all been useless.  They cast a foo* to a foo*, cast a void* to the assigned type, cast a foo* to void*, before assigning it to a void* variable, etc.  In a few cases I also removed an additional &...[0], which is equally useless.  Lastly I added three FIXMEs where, to the best of my judgement, the code appears to have a bug.  It would be good if someone could check these.  Signed-off-by: Joern Engel <joern@logfs.org> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_ua.c | s | 9.0K | 297 | Jörn Engel | joern@logfs.org | 1331864151 |  | target: Use array_zalloc for device_list  Turns an order-8 allocation into slab-sized ones, thereby preventing allocation failures with memory fragmentation.  This likely saves memory as well, as the slab allocator can pack objects more tightly than the buddy allocator.  (nab: Fix lio-core patch fuzz)  Signed-off-by: Joern Engel <joern@logfs.org> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
d | tcm_fc |  | 7 items |  | Roland Dreier | roland@purestorage.com | 1334450431 |  | tcm_fc: Remove use of transport_do_task_sg_chain()  With the modern target core, se_cmd->t_data_sg already points to a sglist that covers the whole command.  So task_sg chaining is needless overhead and obfuscation -- instead of splicing the split up task sglists back into one list, we can just use the original list directly.  Signed-off-by: Roland Dreier <roland@purestorage.com> Reviewed-by: Christoph Hellwig <hch@lst.de> Acked-by: Kiran Patil <Kiran.patil@intel.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
d | sbp |  | 4 items |  | Stefan Richter | stefanr@s5r6.in-berlin.de | 1338419733 |  | sbp-target: rename a variable to avoid name clash  'int login_id' shadows 'static atomic_t login_id'. Seen as compilation warning on x86-32.  Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de> Acked-by: Chris Boot <bootc@bootc.net> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_stat.c | s | 52K | 1552 | Jörn Engel | joern@logfs.org | 1331864169 |  | target: remove obvious warnings  Get rid of a bunch of write-only variables.  In a number of cases I suspect actual bugs to be present, so I left all of those for a second look.  (nab: fix lio-core patch fuzz)  Signed-off-by: Joern Engel <joern@logfs.org> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_ua.h | s | 1.4K | 30 | Nicholas Bellinger | nab@linux-iscsi.org | 1295021549 |  | [SCSI] target: Add LIO target core v4.0.0-rc6  LIO target is a full featured in-kernel target framework with the following feature set:  High-performance, non-blocking, multithreaded architecture with SIMD support.  Advanced SCSI feature set:      * Persistent Reservations (PRs)     * Asymmetric Logical Unit Assignment (ALUA)     * Protocol and intra-nexus multiplexing, load-balancing and failover (MC/S)     * Full Error Recovery (ERL=0,1,2)     * Active/active task migration and session continuation (ERL=2)     * Thin LUN provisioning (UNMAP and WRITE_SAMExx)  Multiprotocol target plugins  Storage media independence:      * Virtualization of all storage media; transparent mapping of IO to LUNs     * No hard limits on number of LUNs per Target; maximum LUN size ~750 TB     * Backstores: SATA, SAS, SCSI, BluRay, DVD, FLASH, USB, ramdisk, etc.  Standards compliance:      * Full compliance with IETF (RFC 3720)     * Full implementation of SPC-4 PRs and ALUA  Significant code cleanups done by Christoph Hellwig.  [jejb: fix up for new block bdev exclusive interface. Minor fixes from  Randy Dunlap and Dan Carpenter.] Signed-off-by: Nicholas A. Bellinger <nab@linux-iscsi.org> Signed-off-by: James Bottomley <James.Bottomley@suse.de>
f | target_core_file.h | s | 903B | 32 | Nicholas Bellinger | nab@linux-iscsi.org | 1338706040 |  | target/file: Use O_DSYNC by default for FILEIO backends  Convert to use O_DSYNC for all cases at FILEIO backend creation time to avoid the extra syncing of pure timestamp updates with legacy O_SYNC during default operation as recommended by hch.  Continue to do this independently of Write Cache Enable (WCE) bit, as WCE=0 is currently the default for all backend devices and enabled by user on per device basis via attrib/emulate_write_cache.  This patch drops the now unnecessary fd_buffered_io= token usage that was originally signalling when to explictly disable O_SYNC at backend creation time for buffered I/O operation.  This can end up being dangerous for a number of reasons during physical node failure, so go ahead and drop this option for now when O_DSYNC is used as the default.  Also allow explict FUA WRITEs -> vfs_fsync_range() call to function in fd_execute_cmd() independently of WCE bit setting.  Reported-by: Christoph Hellwig <hch@lst.de> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: <stable@vger.kernel.org> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_device.c | s | 45K | 1425 | Nicholas Bellinger | nab@linux-iscsi.org | 1336601327 |  | target: Remove max_sectors device attribute for modern se_task less code  This patch removes the original usage of dev_attr->max_sectors in favor of dev_attr->hw_max_sectors that is now being enforced by target core from within transport_generic_cmd_sequencer() for SCF_SCSI_DATA_SG_IO_CDB ops.  After the recent se_task removal patches from hch, this value for IBLOCK backends being set via configfs by userspace from an saved max_sectors value that is turning out to be problematic, so it makes sense to go ahead and remove this now legacy attribute all-together.  This patch also continues to make se_dev_set_default_attribs() do (sectors / block_size) alignment for what actually get used by target_core_mod to be safe here, following the same alignment currently used by fabric_max_sectors.  Reported-by: Andy Grover <agrover@redhat.com> Cc: Christoph Hellwig <hch@lst.de> Cc: Roland Dreier <roland@purestorage.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_iblock.c | s | 16K | 590 | Christoph Hellwig | hch@infradead.org | 1336342286 |  | target: remove struct se_task  We can use struct se_cmd for everything it did.  Make sure to pass the S/G list and data direction to the execution function to ease adding back BIDI support later on.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | Kconfig | g | 1.1K |  | Chris Boot | bootc@bootc.net | 1336602317 |  | sbp-target: Initial merge of firewire/ieee-1394 target mode support  The FireWire SBP-2 Target is a driver for using an IEEE-1394 connection as a SCSI transport. This module uses the SCSI Target framework to expose LUNs to other machines attached to a FireWire bus, in effect acting as a FireWire hard disk similar to FireWire Target Disk mode on many Apple computers.  This commit contains the squashed pull from Chris Boot's SBP-2-Target:        https://github.com/bootc/Linux-SBP-2-Target.git patch-v3  firewire-sbp-target: Add sbp_base.h header firewire-sbp-target: Add sbp_configfs.c firewire-sbp-target: Add sbp_fabric.{c,h} firewire-sbp-target: Add sbp_management_agent.{c,h} firewire-sbp-target: Add sbp_login.{c,h} firewire-sbp-target: Add sbp_target_agent.{c,h} firewire-sbp-target: Add sbp_scsi_cmnd.{c,h} firewire-sbp-target: Add to target Kconfig and Makefile  Also add bootc's entry to the MAINTAINERS file.  Great work Chris !!  Signed-off-by: Chris Boot <bootc@bootc.net> Acked-by: Stefan Richter <stefanr@s5r6.in-berlin.de> Cc: Andy Grover <agrover@redhat.com> Cc: Clemens Ladisch <clemens@ladisch.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_internal.h | s | 5.8K | 114 | Christoph Hellwig | hch@infradead.org | 1336342286 |  | target: move the state and execute lists to the command  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_file.c | s | 14K | 511 | Nicholas Bellinger | nab@linux-iscsi.org | 1338706040 |  | target/file: Use O_DSYNC by default for FILEIO backends  Convert to use O_DSYNC for all cases at FILEIO backend creation time to avoid the extra syncing of pure timestamp updates with legacy O_SYNC during default operation as recommended by hch.  Continue to do this independently of Write Cache Enable (WCE) bit, as WCE=0 is currently the default for all backend devices and enabled by user on per device basis via attrib/emulate_write_cache.  This patch drops the now unnecessary fd_buffered_io= token usage that was originally signalling when to explictly disable O_SYNC at backend creation time for buffered I/O operation.  This can end up being dangerous for a number of reasons during physical node failure, so go ahead and drop this option for now when O_DSYNC is used as the default.  Also allow explict FUA WRITEs -> vfs_fsync_range() call to function in fd_execute_cmd() independently of WCE bit setting.  Reported-by: Christoph Hellwig <hch@lst.de> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: <stable@vger.kernel.org> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_iblock.h | s | 475B | 17 | Christoph Hellwig | hch@infradead.org | 1336342286 |  | target: remove struct se_task  We can use struct se_cmd for everything it did.  Make sure to pass the S/G list and data direction to the execution function to ease adding back BIDI support later on.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
d | loopback |  | 4 items |  | Andy Grover | agrover@redhat.com | 1334450436 |  | target: Rename target_allocate_tasks to target_setup_cmd_from_cdb  This patch renames a horribly misnamed function that no longer allocate tasks to something more descriptive for it's modern use in target core.  (nab: Fix up ib_srpt to use this as well ahead of a target_submit_cmd conversion)  Signed-off-by: Andy Grover <agrover@redhat.com> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_pr.c | s | 131K | 4036 | Linus Torvalds | torvalds@linux-foundation.org | 1337647029 |  | Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/nab/target-pending  Pull scsi-target changes from Nicholas Bellinger:  "There has been lots of work in existing code in a number of areas this   past cycle.  The major highlights have been:     * Removal of transport_do_task_sg_chain() from core + fabrics      (Roland)    * target-core: Removal of se_task abstraction from target-core and      enforce hw_max_sectors for pSCSI backends (hch)    * Re-factoring of iscsi-target tx immediate/response queues (agrover)    * Conversion of iscsi-target back to using target core memory      allocation logic (agrover)    We've had one last minute iscsi-target patch go into for-next to   address a nasty regression bug related to the target core allocation   logic conversion from agrover that is not included in friday's   linux-next build, but has been included in this series.    On the new fabric module code front for-3.5, here is a brief status   update for the three currently in flight this round:     * usb-gadget target driver:    Sebastian Siewior's driver for supporting usb-gadget target mode   operation.  This will be going out as a separate PULL request from   target-pending/usb-target-merge with subsystem maintainer ACKs.  There   is one minor target-core patch in this series required to function.     * sbp ieee-1394/firewire target driver:    Chris Boot's driver for supportting the Serial Block Protocol (SBP)   across IEEE-1394 Firewire hardware.  This will be going out as a   separate PULL request from target-pending/sbp-target-merge with two   additional drivers/firewire/ patches w/ subsystem maintainer ACKs.     * qla2xxx LLD target mode infrastructure changes + tcm_qla2xxx:    The Qlogic >= 24xx series HW target mode LLD infrastructure patch-set   and tcm_qla2xxx fabric driver.  Support for FC target mode using   qla2xxx LLD code has been officially submitted by Qlogic to James   below, and is currently outstanding but not yet merged into   scsi.git/for-next..      [PATCH 00/22] qla2xxx: Updates for scsi "misc" branch     http://www.spinics.net/lists/linux-scsi/msg59350.html    Note there are *zero* direct dependencies upon this for-next series   for the qla2xxx LLD target + tcm_qla2xxx patches submitted above, and   over the last days the target mode team has been tracking down an   tcm_qla2xxx specific active I/O shutdown bug that appears to now be   almost squashed for 3.5-rc-fixes."  * 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/nab/target-pending: (47 commits)   iscsi-target: Fix iov_count calculation bug in iscsit_allocate_iovecs   iscsi-target: remove dead code in iscsi_check_valuelist_for_support   target: Handle ATA_16 passthrough for pSCSI backend devices   target: Add MI_REPORT_TARGET_PGS ext. header + implict_trans_secs attribute   target: Fix MAINTENANCE_IN service action CDB checks to use lower 5 bits   target: add support for the WRITE_VERIFY command   target: make target_put_session void   target: cleanup transport_execute_tasks()   target: Remove max_sectors device attribute for modern se_task less code   target: lock => unlock typo in transport_lun_wait_for_tasks   target: Enforce hw_max_sectors for SCF_SCSI_DATA_SG_IO_CDB   target: remove the t_se_count field in struct se_cmd   target: remove the t_task_cdbs_ex_left field in struct se_cmd   target: remove the t_task_cdbs_left field in struct se_cmd   target: remove struct se_task   target: move the state and execute lists to the command   target: simplify command to task linkage   target: always allocate a single task   target: replace ->execute_task with ->execute_cmd   target: remove the task_sectors field in struct se_task   ...
f | target_core_hba.c | s | 4.4K | 144 | Christoph Hellwig | hch@infradead.org | 1323861965 |  | target: header reshuffle, part2  This reorganized the headers under include/target into:   - target_core_base.h stays as is with all target-wide data stuctures and defines  - target_core_backend.h contains the whole interface to I/O backends  - target_core_fabric.h contains the whole interface to fabric modules  Except for those only the various configfs macro headers stay around.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
f | target_core_fabric_configfs.c | s | 34K | 989 | Jörn Engel | joern@logfs.org | 1331864151 |  | target: Use array_zalloc for device_list  Turns an order-8 allocation into slab-sized ones, thereby preventing allocation failures with memory fragmentation.  This likely saves memory as well, as the slab allocator can pack objects more tightly than the buddy allocator.  (nab: Fix lio-core patch fuzz)  Signed-off-by: Joern Engel <joern@logfs.org> Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>
