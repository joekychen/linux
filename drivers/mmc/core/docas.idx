f | host.c | s | 10K | 370 | Adrian Hunter | adrian.hunter@intel.com | 1332865203 |  | mmc: start removing enable / disable API  Most parts of the enable / disable API are no longer used and can be removed.  Signed-off-by: Adrian Hunter <adrian.hunter@intel.com> Tested-by: Venkatraman S <svenkatr@ti.com> Tested-by: Jaehoon Chung <jh80.chung@samsung.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | mmc_ops.c | s | 12K | 469 | Jaehoon Chung | jh80.chung@samsung.com | 1332865212 |  | mmc: core: warn when card doesn't support HPI  Someone could use send_hpi_cmd() on a card that doesn't advertise support for HPI.  Then maybe didn't work fine.  Because card->ext_csd.hpi_cmd didn't set.  So if card didn't support hpi, return the warning message.  And CMD12's flags is MMC_RSP_R1B.  Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | Makefile | g | 298B |  | Guennadi Liakhovetski | g.liakhovetski@gmx.de | 1326344325 |  | mmc: add a generic GPIO card-detect helper  This patch adds a primitive helper to support card hotplug detection on platforms, where a GPIO, capable of producing interrupts, is used for detection of card-insertion and -removal events.  Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sdio_bus.h | s | 614B | 18 | Pierre Ossman | drzeus@drzeus.cx | 1190569531 |  | mmc: basic SDIO device model  Add the sdio bus type and basic device handling.  Signed-off-by: Pierre Ossman <drzeus@drzeus.cx>
f | cd-gpio.c | s | 1.8K | 68 | Guennadi Liakhovetski | g.liakhovetski@gmx.de | 1335284482 |  | mmc: cd-gpio: protect against NULL context in mmc_cd_gpio_free()  Do not oops, even if mmc_cd_gpio_free() is mistakenly called on a driver cleanup path, even though a previous call to mmc_cd_gpio_request() failed.  Signed-off-by: Guennadi Liakhovetski <g.liakhovetski@gmx.de> [stable@: please apply to 3.3-stable] Cc: stable <stable@vger.kernel.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sd.c | s | 28K | 1041 | Jaehoon Chung | jh80.chung@samsung.com | 1338990587 |  | mmc: core: return an error on suspend if mmc_deselect_cards fails  When mmc_host is not spi mode, mmc/sd is doing mmc_deselect_cards(). mmc_deselect_cards could be returned error. If returned error, we can know something wrong when enter suspend.  Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Acked-by: Ulf Hansson <ulf.hansson@linaro.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sd_ops.c | s | 7.7K | 302 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103926 |  | mmc: Add export.h for EXPORT_SYMBOL/THIS_MODULE as required  These two basic defines were everywhere, simply because module.h was also everywhere.   But we are cleaning up the latter.  So make the exporters actually call out their need for the include.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | sdio_cis.h | s | 647B | 19 | Pierre Ossman | drzeus@drzeus.cx | 1190573062 |  | sdio: split up common and function CIS parsing  Add a more clean separation between global, common CIS information and the function specific one as we need the common information in places where no specific function is specified.  Signed-off-by: Pierre Ossman <drzeus@drzeus.cx>
f | quirks.c | s | 2.4K | 76 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103926 |  | mmc: Add export.h for EXPORT_SYMBOL/THIS_MODULE as required  These two basic defines were everywhere, simply because module.h was also everywhere.   But we are cleaning up the latter.  So make the exporters actually call out their need for the include.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | sdio_io.c | s | 18K | 628 | Stefan Nilsson XK | stefan.xk.nilsson@stericsson.com | 1326344320 |  | mmc: sdio: Fix to support any block size optimally  This patch allows any block size to be set on the SDIO link, and still have an arbitrary sized packet (adjusted in size by using sdio_align_size) transferred in an optimal way (preferably one transfer).  Previously if the block size was larger than the default of 512 bytes and the transfer size was exactly one block size (possibly thanks to using sdio_align_size to get an optimal transfer size), it was sent as a number of byte transfers instead of one block transfer. Also if the number of blocks was (max_blocks * N) + 1, the tranfer would be conducted with a number of blocks and finished off with a number of byte transfers.  When doing this change it was also possible to break out the quirk for broken byte mode in a much cleaner way, and collect the logic of when to do byte or block transfer in one function instead of two.  Signed-off-by: Stefan Nilsson XK <stefan.xk.nilsson@stericsson.com> Signed-off-by: Ulf Hansson <ulf.hansson@stericsson.com> Acked-by: Linus Walleij <linus.walleij@linaro.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sdio_ops.c | s | 4.3K | 160 | Stefan Nilsson XK | stefan.xk.nilsson@stericsson.com | 1326344320 |  | mmc: sdio: Fix to support any block size optimally  This patch allows any block size to be set on the SDIO link, and still have an arbitrary sized packet (adjusted in size by using sdio_align_size) transferred in an optimal way (preferably one transfer).  Previously if the block size was larger than the default of 512 bytes and the transfer size was exactly one block size (possibly thanks to using sdio_align_size to get an optimal transfer size), it was sent as a number of byte transfers instead of one block transfer. Also if the number of blocks was (max_blocks * N) + 1, the tranfer would be conducted with a number of blocks and finished off with a number of byte transfers.  When doing this change it was also possible to break out the quirk for broken byte mode in a much cleaner way, and collect the logic of when to do byte or block transfer in one function instead of two.  Signed-off-by: Stefan Nilsson XK <stefan.xk.nilsson@stericsson.com> Signed-off-by: Ulf Hansson <ulf.hansson@stericsson.com> Acked-by: Linus Walleij <linus.walleij@linaro.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sdio_cis.c | s | 8.8K | 337 | Girish K S | girish.shivananjappa@linaro.org | 1319661142 |  | mmc: replace printk with appropriate display macro  All the files using printk function for displaying kernel messages in the mmc driver have been replaced with corresponding macro.  Signed-off-by: Girish K S <girish.shivananjappa@linaro.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | mmc.c | s | 38K | 1318 | Jaehoon Chung | jh80.chung@samsung.com | 1338990587 |  | mmc: core: return an error on suspend if mmc_deselect_cards fails  When mmc_host is not spi mode, mmc/sd is doing mmc_deselect_cards(). mmc_deselect_cards could be returned error. If returned error, we can know something wrong when enter suspend.  Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Acked-by: Ulf Hansson <ulf.hansson@linaro.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | core.h | s | 2.4K | 65 | Linus Torvalds | torvalds@linux-foundation.org | 1326573136 |  | 
f | host.h | s | 486B | 16 | Adrian Hunter | adrian.hunter@intel.com | 1332865203 |  | mmc: start removing enable / disable API  Most parts of the enable / disable API are no longer used and can be removed.  Signed-off-by: Adrian Hunter <adrian.hunter@intel.com> Tested-by: Venkatraman S <svenkatr@ti.com> Tested-by: Jaehoon Chung <jh80.chung@samsung.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sdio_irq.c | s | 7.4K | 264 | Nicolas Pitre | nicolas.pitre@linaro.org | 1335107848 |  | mmc: sdio: avoid spurious calls to interrupt handlers  Commit 06e8935feb ("optimized SDIO IRQ handling for single irq") introduced some spurious calls to SDIO function interrupt handlers, such as when the SDIO IRQ thread is started, or the safety check performed upon a system resume.  Let's add a flag to perform the optimization only when a real interrupt is signaled by the host driver and we know there is no point confirming it.  Reported-by: Sujit Reddy Thumma <sthumma@codeaurora.org> Signed-off-by: Nicolas Pitre <nico@linaro.org> Cc: stable <stable@vger.kernel.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sdio.c | s | 26K | 983 | Yong Ding | yongd@marvell.com | 1338988973 |  | mmc: sdio: fix setting card data bus width as 4-bit  SDIO_CCCR_IF[1:0] in SDIO card is used for card data bus width setting as below:       00b: 1-bit bus      01b: Reserved      10b: 4-bit bus      11b: 8-bit bus (only for embedded SDIO)  And sdio_enable_wide is for setting data bus width as 4-bit. But currently, it first reads the register, second OR' 1b with SDIO_CCCR_IF[1], and then writes it back.  As we can see, this is based on such assumption that the SDIO_CCCR_IF[0] is always 0. Apparently, this is not right.  Signed-off-by: Yong Ding <yongd@marvell.com> Acked-by: Philip Rakity <prakity@marvell.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | bus.h | s | 934B | 26 | Andy Shevchenko | andy.shevchenko@gmail.com | 1287839472 |  | mmc: rename dev_to_mmc_card() to mmc_dev_to_card()  Global symbols should use their subsystem name in a prefixed fashion.  Signed-off-by: Andy Shevchenko <ext-andriy.shevchenko@nokia.com> Cc: <linux-mmc@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sd.h | s | 534B | 13 | Arindam Nath | arindam.nath@amd.com | 1306295604 |  | mmc: sd: add support for driver type selection  This patch adds support for setting driver strength during UHS-I initialization procedure. Since UHS-I cards set S18A (bit 24) in response to ACMD41, we use this as a base for UHS-I initialization. We modify the parameter list of mmc_sd_get_cid() so that we can save the ROCR from ACMD41 to check whether bit 24 is set.  We decide whether the Host Controller supports A, C, or D driver type depending on the Capabilities register. Driver type B is suported by default. We then set the appropriate driver type for the card using CMD6 mode 1. As per Host Controller spec v3.00, we set driver type for the host only if Preset Value Enable in the Host Control2 register is not set. SDHCI_HOST_CONTROL has been renamed to SDHCI_HOST_CONTROL1 to conform to the spec.  Tested by Zhangfei Gao with a Toshiba uhs card and general hs card, on mmp2 in SDMA mode.  Signed-off-by: Arindam Nath <arindam.nath@amd.com> Reviewed-by: Philip Rakity <prakity@marvell.com> Tested-by: Philip Rakity <prakity@marvell.com> Acked-by: Zhangfei Gao <zhangfei.gao@marvell.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sd_ops.h | s | 844B | 21 | Adrian Hunter | adrian.hunter@nokia.com | 1281627810 |  | mmc: add erase, secure erase, trim and secure trim operations  SD/MMC cards tend to support an erase operation.  In addition, eMMC v4.4 cards can support secure erase, trim and secure trim operations that are all variants of the basic erase command.  SD/MMC device attributes "erase_size" and "preferred_erase_size" have been added.  "erase_size" is the minimum size, in bytes, of an erase operation.  For MMC, "erase_size" is the erase group size reported by the card.  Note that "erase_size" does not apply to trim or secure trim operations where the minimum size is always one 512 byte sector.  For SD, "erase_size" is 512 if the card is block-addressed, 0 otherwise.  SD/MMC cards can erase an arbitrarily large area up to and including the whole card.  When erasing a large area it may be desirable to do it in smaller chunks for three reasons:      1. A single erase command will make all other I/O on the card        wait.  This is not a problem if the whole card is being erased, but        erasing one partition will make I/O for another partition on the        same card wait for the duration of the erase - which could be a        several minutes.      2. To be able to inform the user of erase progress.      3. The erase timeout becomes too large to be very useful.        Because the erase timeout contains a margin which is multiplied by        the size of the erase area, the value can end up being several        minutes for large areas.  "erase_size" is not the most efficient unit to erase (especially for SD where it is just one sector), hence "preferred_erase_size" provides a good chunk size for erasing large areas.  For MMC, "preferred_erase_size" is the high-capacity erase size if a card specifies one, otherwise it is based on the capacity of the card.  For SD, "preferred_erase_size" is the allocation unit size specified by the card.  "preferred_erase_size" is in bytes.  Signed-off-by: Adrian Hunter <adrian.hunter@nokia.com> Acked-by: Jens Axboe <axboe@kernel.dk> Cc: Kyungmin Park <kmpark@infradead.org> Cc: Madhusudhan Chikkature <madhu.cr@ti.com> Cc: Christoph Hellwig <hch@lst.de> Cc: Ben Gardiner <bengardiner@nanometrics.ca> Cc: <linux-mmc@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | debugfs.c | s | 7.7K | 307 | Girish K S | girish.shivananjappa@linaro.org | 1326399435 |  | mmc: core: HS200 mode support for eMMC 4.5  This patch adds the support of the HS200 bus speed for eMMC 4.5 devices. The eMMC 4.5 devices have support for 200MHz bus speed. The function prototype of the tuning function is modified to handle the tuning command number which is different in sd and mmc case.  Signed-off-by: Girish K S <girish.shivananjappa@linaro.org> Signed-off-by: Philip Rakity <prakity@marvell.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | mmc_ops.h | s | 1.2K | 28 | Jaehoon Chung | jh80.chung@samsung.com | 1319661149 |  | mmc: core: support HPI send command  HPI command is defined in eMMC4.41. This feature is important for eMMC4.5 devices.  Signed-off-by: Jaehoon Chung <jh80.chung@samsung.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | Kconfig | g | 1015B |  | Linus Walleij | linus.walleij@stericsson.com | 1294544883 |  | mmc: Aggressive clock gating framework  This patch modifies the MMC core code to optionally call the set_ios() operation on the driver with the clock frequency set to 0 (gate) after a grace period of at least 8 MCLK cycles, then restore it (ungate) before any new request. This gives the driver the option to shut down the MCI clock to the MMC/SD card when the clock frequency is 0, i.e. the core has stated that the MCI clock does not need to be generated.  It is inspired by existing clock gating code found in the OMAP and Atmel drivers and brings this up to the host abstraction.  Gating is performed before and after any MMC request.  This patchset implements this for the MMCI/PL180 MMC/SD host controller, but it should be simple to switch OMAP/Atmel over to using this instead.  mmc_set_{gated,ungated}() add variable protection to the state holders for the clock gating code.  This is particularly important when ordinary .set_ios() calls would race with the .set_ios() call resulting from a delayed gate operation.  Signed-off-by: Linus Walleij <linus.walleij@stericsson.com> Reviewed-by: Chris Ball <cjb@laptop.org> Tested-by: Chris Ball <cjb@laptop.org> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sdio_ops.h | s | 747B | 19 | Albert Herranz | albert_herranz@yahoo.es | 1268437948 |  | sdio: recognize io card without powercycle  SDIO Simplified Specification V2.00 states that it is strongly recommended that the host executes either a power reset or issues a CMD52 (I/O Reset) to re-initialize an I/O only card or the I/O portion of a combo card. Additionally, the CMD52 must be issued first because it cannot be issued after a CMD0.  With this patch the Nintendo Wii SDIO-based WLAN card is detected after a system reset, without requiring a complete system powercycle.  Signed-off-by: Albert Herranz <albert_herranz@yahoo.es> Cc: <linux-mmc@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | bus.c | s | 7.3K | 296 | Chuanxiao Dong | chuanxiao.dong@intel.com | 1335183088 |  | mmc: core: check PM_SLEEP for mmc_bus_suspend/resume callbacks  If PM_SLEEP is not enabled, mmc.c will give warnning since mmc_bus_suspend/ mmc_bus_resume functions are defined but not used. This patch can fix this warnning.  Reported-by: Andrew Lunn <andrew@lunn.ch> Signed-off-by: Chuanxiao Dong <chuanxiao.dong@intel.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | core.c | s | 58K | 2081 | Ulf Hansson | ulf.hansson@linaro.org | 1336582501 |  | mmc: core: Prevent eMMC VCC supply to be cut from late init  For eMMC cards that has been initialized from a bootloader, the VCC voltage supply must not be cut in an uncontrolled manner, without first sending SLEEP or POWEROFF_NOTIFY.  The regulator_init_complete late initcall, may cut the VCC regulator if it's reference counter is zero. To be able to prevent the regulator from being cut, mmc_start_host, which should execute at device init and thus before late init, calls mmc_power_up. Then the host driver is able to increase the reference to the regulator.  Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org> Reviewed-by: Mark Brown <broonie@opensource.wolfsonmicro.com> Signed-off-by: Chris Ball <cjb@laptop.org>
f | sdio_bus.c | s | 7.2K | 262 | Rafael J. Wysocki | rjw@sisk.pl | 1333672346 |  | mmc: sdio: Use empty system suspend/resume callbacks at the bus level  Neil Brown reports that commit 35cd133c     PM: Run the driver callback directly if the subsystem one is not there  breaks suspend for his libertas wifi, because SDIO has a protocol where the suspend method can return -ENOSYS and this means "There is no point in suspending, just turn me off".  Moreover, the suspend methods provided by SDIO drivers are not supposed to be called by the PM core or bus-level suspend routines (which aren't presend for SDIO).  Instead, when the SDIO core gets to suspend the device's ancestor, it calls the device driver's suspend function, catches the ENOSYS, and turns the device off.  The commit above breaks the SDIO core's assumption that the device drivers' callbacks won't be executed if it doesn't provide any bus-level callbacks.  If fact, however, this assumption has never been really satisfied, because device class or device type suspend might very well use the driver's callback even without that commit.  The simplest way to address this problem is to make the SDIO core tell the PM core to ignore driver callbacks, for example by providing no-operation suspend/resume callbacks at the bus level for it, which is implemented by this change.  Reported-and-tested-by: Neil Brown <neilb@suse.de> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> [stable: please apply to 3.3-stable only] Cc: <stable@vger.kernel.org> Signed-off-by: Chris Ball <cjb@laptop.org>
