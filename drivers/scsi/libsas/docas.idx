f | sas_host_smp.c | s | 9.5K | 320 | Linus Torvalds | torvalds@linux-foundation.org | 1332446129 |  | 
f | sas_phy.c | s | 4.6K | 135 | Dan Williams | dan.j.williams@intel.com | 1335179019 |  | [SCSI] libsas: introduce sas_work to fix sas_drain_work vs sas_queue_work  When requeuing work to a draining workqueue the last work instance may not be idle, so sas_queue_work() must not touch work->entry.  Introduce sas_work with a drain_node list_head to have a private list for collecting work deferred due to drain collision.  Fixes reports like:   BUG: unable to handle kernel NULL pointer dereference at           (null)   IP: [<ffffffff810410d4>] process_one_work+0x2e/0x338  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | Makefile | g | 1.1K |  | Linus Torvalds | torvalds@linux-foundation.org | 1300670095 |  | Merge branch 'trivial' of git://git.kernel.org/pub/scm/linux/kernel/git/mmarek/kbuild-2.6  * 'trivial' of git://git.kernel.org/pub/scm/linux/kernel/git/mmarek/kbuild-2.6: (25 commits)   video: change to new flag variable   scsi: change to new flag variable   rtc: change to new flag variable   rapidio: change to new flag variable   pps: change to new flag variable   net: change to new flag variable   misc: change to new flag variable   message: change to new flag variable   memstick: change to new flag variable   isdn: change to new flag variable   ieee802154: change to new flag variable   ide: change to new flag variable   hwmon: change to new flag variable   dma: change to new flag variable   char: change to new flag variable   fs: change to new flag variable   xtensa: change to new flag variable   um: change to new flag variables   s390: change to new flag variable   mips: change to new flag variable   ...  Fix up trivial conflict in drivers/hwmon/Makefile
f | sas_dump.c | s | 2.3K | 65 | James Bottomley | James.Bottomley@suse.de | 1295892338 |  | [SCSI] libsas: convert to standard kernel debugging  Instead of using a config option for debugging, just dump the messages with KERN_DEBUG.  Signed-off-by: James Bottomley <James.Bottomley@suse.de>
f | sas_port.c | s | 8.1K | 255 | Dan Williams | dan.j.williams@intel.com | 1335179753 |  | [SCSI] Revert "[SCSI] libsas: fix sas port naming"  This reverts commit a692b0eec5efae382dfa800e8b4b083f172921a7.  Tom reports:  [    8.741033] ------------[ cut here ]------------ [    8.741038] WARNING: at fs/sysfs/dir.c:508 sysfs_add_one+0xc1/0xf0() [    8.741040] Hardware name: To Be Filled By O.E.M. [    8.741041] sysfs: cannot create duplicate filename  ...and missing 2 out of 4 drives connected to mvsas.  Commit a692b0ee made the assumption that all the phy ids an lldd registers to libsas are unique.  However, in the "multi-chip" case mvsas does a rather annoying duplication of phy ids in the array passed to libsas.  So, for example, chip0 has phy0-3 at ha phy index 0-3 and chip1 has its phy0-3 at ha phy index 4-7.  The more natural model would be to create a scsi_host (and sas_ha) per chip (controller), but for now revert the naming fix which unfortunately means dealing with unpredictable end-device names for a bit longer.  Cc: Xiangliang Yu <yuxiangl@marvell.com> Cc: Patrick Thomson <patrick.s.thomson@intel.com> Reported-by: Tom Rini <trini@ti.com> Tested-by: Tom Rini <trini@ti.com> Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_init.c | s | 12K | 415 | Dan Williams | dan.j.williams@intel.com | 1335179019 |  | [SCSI] libsas: introduce sas_work to fix sas_drain_work vs sas_queue_work  When requeuing work to a draining workqueue the last work instance may not be idle, so sas_queue_work() must not touch work->entry.  Introduce sas_work with a drain_node list_head to have a private list for collecting work deferred due to drain collision.  Fixes reports like:   BUG: unable to handle kernel NULL pointer dereference at           (null)   IP: [<ffffffff810410d4>] process_one_work+0x2e/0x338  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_event.c | s | 4.2K | 134 | Dan Williams | dan.j.williams@intel.com | 1335179019 |  | [SCSI] libsas: introduce sas_work to fix sas_drain_work vs sas_queue_work  When requeuing work to a draining workqueue the last work instance may not be idle, so sas_queue_work() must not touch work->entry.  Introduce sas_work with a drain_node list_head to have a private list for collecting work deferred due to drain collision.  Fixes reports like:   BUG: unable to handle kernel NULL pointer dereference at           (null)   IP: [<ffffffff810410d4>] process_one_work+0x2e/0x338  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_scsi_host.c | s | 27K | 903 | Dan Williams | dan.j.williams@intel.com | 1330551771 |  | [SCSI] libsas: don't recover end devices attached to disabled phys  If userspace has decided to disable a phy the kernel should honor that and not inadvertantly re-enable the phy via error recovery.  This is more straightforward in the sata case where link recovery (via libata-eh) is separate from sas_task cancelling in libsas-eh.  Teach libsas to accept -ENODEV as a successful response from I_T_nexus_reset ('successful' in terms of not escalating further).  This is a more comprehensive fix then "libsas: don't recover 'gone' devices in sas_ata_hard_reset()", as it is no longer sata-specific.  aic94xx does check the return value from sas_phy_reset() so if the phy is disabled we proceed with clearing the I_T_nexus.  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_discover.c | s | 13K | 448 | Dan Williams | dan.j.williams@intel.com | 1335179507 |  | [SCSI] libsas, libata: fix start of life for a sas ata_port  This changes the ordering of initialization and probing events from:   1/ allocate rphy in PORTE_BYTES_DMAED, DISCE_REVALIDATE_DOMAIN   2/ allocate ata_port and schedule port probe in DISCE_PROBE ...to:   1/ allocate ata_port in PORTE_BYTES_DMAED, DISCE_REVALIDATE_DOMAIN   2/ allocate rphy in PORTE_BYTES_DMAED, DISCE_REVALIDATE_DOMAIN   3/ schedule port probe in DISCE_PROBE  This ordering prevents PHYE_SIGNAL_LOSS_EVENTS from sneaking in to destrory ata devices before they have been fully initialized:    BUG: unable to handle kernel paging request at 0000000000003b10   IP: [<ffffffffa0053d7e>] sas_ata_end_eh+0x12/0x5e [libsas]   ...   [<ffffffffa004d1af>] sas_unregister_common_dev+0x78/0xc9 [libsas]   [<ffffffffa004d4d4>] sas_unregister_dev+0x4f/0xad [libsas]   [<ffffffffa004d5b1>] sas_unregister_domain_devices+0x7f/0xbf [libsas]   [<ffffffffa004c487>] sas_deform_port+0x61/0x1b8 [libsas]   [<ffffffffa004bed0>] sas_phye_loss_of_signal+0x29/0x2b [libsas]  ...and kills the awkward "sata domain_device briefly existing in the domain without an ata_port" state.  Reported-by: Michal Kosciowski <michal.kosciowski@intel.com> Signed-off-by: Dan Williams <dan.j.williams@intel.com> Acked-by: Jeff Garzik <jgarzik@redhat.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_expander.c | s | 54K | 1882 | Dan Williams | dan.j.williams@intel.com | 1335179649 |  | [SCSI] libsas: fix false positive 'device attached' conditions  Normalize phy->attached_sas_addr to return a zero-address in the case when device-type == NO_DEVICE or the linkrate is invalid to handle expanders that put non-zero sas addresses in the discovery response:   sas: ex 5001b4da000f903f phy02:U:0 attached: 0100000000000000 (no device)  sas: ex 5001b4da000f903f phy01:U:0 attached: 0100000000000000 (no device)  sas: ex 5001b4da000f903f phy03:U:0 attached: 0100000000000000 (no device)  sas: ex 5001b4da000f903f phy00:U:0 attached: 0100000000000000 (no device)  Reported-by: Andrzej Jakowski <andrzej.jakowski@intel.com> Signed-off-by: Dan Williams <dan.j.williams@intel.com> Cc: stable@vger.kernel.org Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_internal.h | s | 6.4K | 172 | Dan Williams | dan.j.williams@intel.com | 1335179019 |  | [SCSI] libsas: introduce sas_work to fix sas_drain_work vs sas_queue_work  When requeuing work to a draining workqueue the last work instance may not be idle, so sas_queue_work() must not touch work->entry.  Introduce sas_work with a drain_node list_head to have a private list for collecting work deferred due to drain collision.  Fixes reports like:   BUG: unable to handle kernel NULL pointer dereference at           (null)   IP: [<ffffffff810410d4>] process_one_work+0x2e/0x338  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_dump.h | s | 1.2K | 28 | James Bottomley | James.Bottomley@suse.de | 1295892338 |  | [SCSI] libsas: convert to standard kernel debugging  Instead of using a config option for debugging, just dump the messages with KERN_DEBUG.  Signed-off-by: James Bottomley <James.Bottomley@suse.de>
f | sas_ata.c | s | 21K | 699 | Dan Williams | dan.j.williams@intel.com | 1335179507 |  | [SCSI] libsas, libata: fix start of life for a sas ata_port  This changes the ordering of initialization and probing events from:   1/ allocate rphy in PORTE_BYTES_DMAED, DISCE_REVALIDATE_DOMAIN   2/ allocate ata_port and schedule port probe in DISCE_PROBE ...to:   1/ allocate ata_port in PORTE_BYTES_DMAED, DISCE_REVALIDATE_DOMAIN   2/ allocate rphy in PORTE_BYTES_DMAED, DISCE_REVALIDATE_DOMAIN   3/ schedule port probe in DISCE_PROBE  This ordering prevents PHYE_SIGNAL_LOSS_EVENTS from sneaking in to destrory ata devices before they have been fully initialized:    BUG: unable to handle kernel paging request at 0000000000003b10   IP: [<ffffffffa0053d7e>] sas_ata_end_eh+0x12/0x5e [libsas]   ...   [<ffffffffa004d1af>] sas_unregister_common_dev+0x78/0xc9 [libsas]   [<ffffffffa004d4d4>] sas_unregister_dev+0x4f/0xad [libsas]   [<ffffffffa004d5b1>] sas_unregister_domain_devices+0x7f/0xbf [libsas]   [<ffffffffa004c487>] sas_deform_port+0x61/0x1b8 [libsas]   [<ffffffffa004bed0>] sas_phye_loss_of_signal+0x29/0x2b [libsas]  ...and kills the awkward "sata domain_device briefly existing in the domain without an ata_port" state.  Reported-by: Michal Kosciowski <michal.kosciowski@intel.com> Signed-off-by: Dan Williams <dan.j.williams@intel.com> Acked-by: Jeff Garzik <jgarzik@redhat.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | sas_task.c | s | 1.1K | 32 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103883 |  | scsi: Add export.h for EXPORT_SYMBOL/THIS_MODULE as required  For the basic SCSI infrastructure files that are exporting symbols but not modules themselves, add in the basic export.h header file to allow the exports.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Kconfig | g | 1.6K |  | James Bottomley | James.Bottomley@suse.de | 1295892338 |  | [SCSI] libsas: convert to standard kernel debugging  Instead of using a config option for debugging, just dump the messages with KERN_DEBUG.  Signed-off-by: James Bottomley <James.Bottomley@suse.de>
