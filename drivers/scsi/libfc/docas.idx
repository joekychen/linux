f | fc_elsct.c | s | 3.6K | 141 | Neerav Parikh | neerav.parikh@intel.com | 1329660538 |  | [SCSI] libfc: Make the libfc Common Transport(CT) code generic  Currently the libfc Common Transport(CT) calls assume that the CT requests are Name Server specific only. This patch makes it more flexible to allow more FC-GS services to make use of these routines.  Signed-off-by: Neerav Parikh <neerav.parikh@intel.com> Tested-by: Ross Brattain <ross.b.brattain@intel.com> Acked-by: Robert Love <robert.w.love@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | fc_fcp.c | s | 58K | 2035 | Linus Torvalds | torvalds@linux-foundation.org | 1332445084 |  | Merge branch 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/nab/target-pending  Pull SCSI target updates from Nicholas Bellinger:  "This contains the usual set of updates and bugfixes to target-core +   existing fabric module code, along with a handful of the patches   destined for v3.3 stable.    It also contains the necessary target-core infrastructure pieces   required to run using tcm_qla2xxx.ko WWPNs with the new Qlogic Fibre   Channel fabric module currently queued in target-pending/for-next-merge,   and coming for round 2.    The highlights for this series include:     - Add target_submit_tmr() helper function for fabric task management      (andy)    - Convert tcm_fc to use target_submit_tmr() (andy)    - Replace target core various cmd flags with a transport state (hch)    - Convert loopback to use workqueue submission (hch)    - Convert target core to use array_zalloc for tpg_lun_list (joern)    - Convert target core to use array_zalloc for device_list (joern)    - Add target core support for TMR_ABORT_TASK (nab)    - Add target core se_sess->sess_kref + get/put helpers (nab)    - Add target core se_node_acl->acl_kref for ->acl_free_comp usage      (nab)    - Convert iscsi-target to use target_put_session + sess_kref (nab)    - Fix tcm_fc fc_exch memory leak in ft_send_resp_status (nab)    - Fix ib_srpt srpt_handle_cmd send_ioctx->ioctx_kref leak on      exception (nab)    - Fix target core up handling of short INQUIRY buffers (roland)    - Untangle target-core front-end and back-end meanings of max_sectors      attribute (roland)    - Set loopback residual field for SCSI commands (roland)    - Fix target-core 16-bit target ports for SET TARGET PORT GROUPS      emulation (roland)    Thanks again to Andy, Christoph, Joern, Roland, and everyone who has   contributed this round!"  * 'for-next' of git://git.kernel.org/pub/scm/linux/kernel/git/nab/target-pending: (64 commits)   ib_srpt: Fix srpt_handle_cmd send_ioctx->ioctx_kref leak on exception   loopback: Fix transport_generic_allocate_tasks error handling   iscsi-target: remove improper externs   iscsi-target: Remove unused variables in iscsi_target_parameters.c   target: remove obvious warnings   target: Use array_zalloc for device_list   target: Use array_zalloc for tpg_lun_list   target: Fix sense code for unsupported SERVICE ACTION IN   target: Remove hack to make READ CAPACITY(10) lie if thin provisioning is enabled   target: Bump core version to v4.1.0-rc2-ml + fabric versions   tcm_fc: Fix fc_exch memory leak in ft_send_resp_status   target: Drop unused legacy target_core_fabric_ops API callers   iscsi-target: Convert to use target_put_session + sess_kref   target: Convert se_node_acl->acl_group removal to use ->acl_kref   target: Add se_node_acl->acl_kref for ->acl_free_comp usage   target: Add se_node_acl->acl_free_comp for NodeACL release path   target: Add se_sess->sess_kref + get/put helpers   target: Convert session_lock to irqsave   target: Fix typo in drivers/target   iscsi-target: Fix dynamic -> explict NodeACL pointer reference   ...
f | fc_disc.c | s | 20K | 670 | Bhanu Prakash Gollapudi | bprakash@broadcom.com | 1329665246 |  | [SCSI] libfc: Handle discovery failure during ctlr link down  While we wait for GPN_FT response, if the ctlr link goes down, the stack generates a completion for GPN_FT with error FC_EXCH_CLOSED, and reports a discovery error. Discovery is not retried in this case, and rightly so. However, the 'pending' flag stays set, which does not allow subsequent discovery to succeed as GPN_FT will never be issued. Fix it by clearing the pending flag when the discovery fails due to GPN_FT failure.  Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com> Signed-off-by: Robert Love <robert.w.love@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | Makefile | g | 184B |  | Chris Leech | christopher.leech@intel.com | 1259949656 |  | [SCSI] libfc: add some generic NPIV support routines to libfc  Adds a function to create a new VN_Port instances, which share the EM list with the N_Port, VN_Port lookup by fabric ID when responding to a new request (otherwise the exchange lookup from the N_Ports EM list is trusted to return an exchange with a cached lport value for the correct VN_Port), a pointer to a fc_vport structure for VN_Ports, and flags to indicate if an N_Port supports NPIV and if the switch/fabric allows it.  Signed-off-by: Chris Leech <christopher.leech@intel.com> Signed-off-by: Robert Love <robert.w.love@intel.com> Signed-off-by: James Bottomley <James.Bottomley@suse.de>
f | fc_exch.c | s | 65K | 2275 | Steven Clark | sclark@crossbeam.com | 1332923584 |  | [SCSI] libfc: fcoe_transport_create fails in single-CPU environment  Starting fcoe fails at fcoe_transport_create when attempting to allocate a pool of 4K exchanges on a 64-bit single-CPU environment because the call to __alloc_percpu() is greater than the max of 32K.  This patch reduces the number of exchanges to fit within the maximum allowed space.  [ Whitespace problems fixed by Robert Love to satisfy chechpatch.pl ]  Signed-off-by: Steven Clark <sclark@crossbeam.com> Signed-off-by: Robert Love <robert.w.love@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | fc_libfc.c | s | 8.7K | 298 | Cong Wang | amwang@redhat.com | 1332251299 |  | scsi: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | fc_rport.c | s | 53K | 1805 | Bart Van Assche | bvanassche@acm.org | 1326703548 |  | [SCSI] libfc: Declare local functions static  Avoid that sparse complains about missing declarations for local functions by declaring these static or by adding an #include directive. Add the __percpu annotation where it is missing.  Signed-off-by: Bart Van Assche <bvanassche@acm.org> Reviewed-by: Yi Zou <yi.zou@intel.com> Signed-off-by: Robert Love <robert.w.love@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | fc_npiv.c | s | 4.3K | 137 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103883 |  | scsi: Add export.h for EXPORT_SYMBOL/THIS_MODULE as required  For the basic SCSI infrastructure files that are exporting symbols but not modules themselves, add in the basic export.h header file to allow the exports.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | fc_lport.c | s | 56K | 1887 | James Bottomley | JBottomley@Parallels.com | 1337599050 |  | 
f | fc_libfc.h | s | 4.4K | 120 | Cong Wang | amwang@redhat.com | 1332251299 |  | scsi: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | fc_frame.c | s | 2.4K | 83 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
