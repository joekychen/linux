f | bnx2fc_hwi.c | s | 62K | 1878 | Robert Love | robert.w.love@intel.com | 1337762291 |  | [SCSI] bnx2fc: Allocate fcoe_ctlr with bnx2fc_interface, not as a member      Currently the fcoe_ctlr associated with an interface is allocated     as a member of struct bnx2fc_interface. This causes problems when     when later patches attempt to use the new fcoe_sysfs APIs which     allow us to allocate the bnx2fc_interface as private data to a     fcoe_ctlr_device instance. The problem is that libfcoe wants to     be able use pointer math to find a fcoe_ctlr's fcoe_ctlr_device     as well as finding a fcoe_ctlr_device's assocated fcoe_ctlr. To     do this we need to allocate the fcoe_ctlr_device, with private     data for the LLD. The private data will contain the fcoe_ctlr     and its private data will be the bnx2fc_interface.      +-------------------+     || fcoe_ctlr_device  ||     +-------------------+     || fcoe_ctlr         ||     +-------------------+     || bnx2fc_interface  ||     +-------------------+      This prep work will allow us to go from a fcoe_ctlr_device     instance to its fcoe_ctlr as well as from a fcoe_ctlr to its     fcoe_ctlr_device once the fcoe_sysfs API is in use (later     patches in this series).  Signed-off-by: Robert Love <robert.w.love@intel.com> Tested-by: Ross Brattain <ross.b.brattain@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | bnx2fc_constants.h | s | 10K | 232 | Michael Chan | mchan@broadcom.com | 1332381456 |  | cnic: Fix parity error code conflict  The recently added parity error handling used an error code that was already defined for a different error.  This could lead to bnx2x firmware assert.  We need to fix this with new error codes that are defined for parity error only.  Signed-off-by: Michael Chan <mchan@broadcom.com> Reviewed-by: Eddie Wai <eddie.wai@broadcom.com> Reviewed-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | 57xx_hsi_bnx2fc.h | s | 21K | 848 | Vlad Zolotarov | vladz@broadcom.com | 1308149797 |  | New 7.0 FW: bnx2x, cnic, bnx2i, bnx2fc  New FW/HSI (7.0):  - Added support to 578xx chips  - Improved HSI - much less driver's direct access to the FW internal    memory needed.  New implementation of the HSI handling layer in the bnx2x (bnx2x_sp.c):  - Introduced chip dependent objects that have chip independent interfaces    for configuration of MACs, multicast addresses, Rx mode, indirection table,    fast path queues and function initialization/cleanup.  - Objects functionality is based on the private function pointers, which    allows not only a per-chip but also PF/VF differentiation while still    preserving the same interface towards the driver.  - Objects interface is not influenced by the HSI changes which do not require    providing new parameters keeping the code outside the bnx2x_sp.c invariant    with regard to such HSI chnages.  Changes in a CNIC, bnx2fc and bnx2i modules due to the new HSI.  Signed-off-by: Vladislav Zolotarov <vladz@broadcom.com> Signed-off-by: Michael Chan <mchan@broadcom.com> Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com> Signed-off-by: Eilon Greenstein <eilong@broadcom.com> Signed-off-by: David S. Miller <davem@conan.davemloft.net>
f | Makefile | g | 120B |  | Bhanu Gollapudi | bprakash@broadcom.com | 1298940027 |  | [SCSI] bnx2fc: Broadcom FCoE offload driver  This driver is for Broadcom Netxtreme II 57712 chip. The following patch contains the driver sources for bnx2fc driver.  libfc/libfcoe changes to enable bnx2fc have already gone through the fcoe tree. bnx2fc is a SCSI low level driver that interfaces with SCSI midlayer, libfc, libfcoe, cnic modules.  bnx2fc driver uses services of libfc for slow path operations such as FIP and fabric discovery. The fast path IO perations are performed after offloading the session information to the underlying FCoE firmware.  Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com> Reviewed-by: Mike Christie <michaelc@cs.wisc.edu> Signed-off-by: James Bottomley <James.Bottomley@suse.de>
f | bnx2fc_fcoe.c | s | 66K | 2269 | Robert Love | robert.w.love@intel.com | 1337762593 |  | [SCSI] fcoe, bnx2fc, libfcoe: SW FCoE and bnx2fc use FCoE Syfs  This patch has the SW FCoE driver and the bnx2fc driver make use of the new fcoe_sysfs API added earlier in this patch series.  After this patch a fcoe_ctlr_device is allocated with private data in this order.  +------------------+   +------------------+ || fcoe_ctlr_device ||   || fcoe_ctlr_device || +------------------+   +------------------+ || fcoe_ctlr        ||   || fcoe_ctlr        || +------------------+   +------------------+ || fcoe_interface   ||   || bnx2fc_interface || +------------------+   +------------------+  libfcoe also takes part in this new model since it discovers and manages fcoe_fcf instances. The memory allocation is different for FCFs. I didn't want to impact libfcoe's fcoe_fcf processing, so this patch creates fcoe_fcf_device instances for each discovered fcoe_fcf. The two are paired using a (void * priv) member of the fcoe_ctlr_device. This allows libfcoe to continue maintaining its list of fcoe_fcf instances and simply attaches and detaches them from existing or new fcoe_fcf_device instances.  Signed-off-by: Robert Love <robert.w.love@intel.com> Tested-by: Ross Brattain <ross.b.brattain@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | bnx2fc_tgt.c | s | 23K | 766 | Bhanu Prakash Gollapudi | bprakash@broadcom.com | 1337677286 |  | [SCSI] bnx2fc: cleanup task management IO when it times out.  When the task management IO times out, or a flush operation is performed while task management IO is pending, driver is not cleaning up the IO. This patch cleans up the IO for the above cases.  Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | bnx2fc_io.c | s | 54K | 1783 | Bhanu Prakash Gollapudi | bprakash@broadcom.com | 1337677286 |  | [SCSI] bnx2fc: cleanup task management IO when it times out.  When the task management IO times out, or a flush operation is performed while task management IO is pending, driver is not cleaning up the IO. This patch cleans up the IO for the above cases.  Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | bnx2fc_debug.h | s | 2.0K | 60 | Bhanu Prakash Gollapudi | bprakash@broadcom.com | 1311674081 |  | [SCSI] bnx2fc: Replace printks with KERN_ALERT to KERN_ERR/KERN_INFO  Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | bnx2fc.h | s | 15K | 484 | Robert Love | robert.w.love@intel.com | 1337762291 |  | [SCSI] bnx2fc: Allocate fcoe_ctlr with bnx2fc_interface, not as a member      Currently the fcoe_ctlr associated with an interface is allocated     as a member of struct bnx2fc_interface. This causes problems when     when later patches attempt to use the new fcoe_sysfs APIs which     allow us to allocate the bnx2fc_interface as private data to a     fcoe_ctlr_device instance. The problem is that libfcoe wants to     be able use pointer math to find a fcoe_ctlr's fcoe_ctlr_device     as well as finding a fcoe_ctlr_device's assocated fcoe_ctlr. To     do this we need to allocate the fcoe_ctlr_device, with private     data for the LLD. The private data will contain the fcoe_ctlr     and its private data will be the bnx2fc_interface.      +-------------------+     || fcoe_ctlr_device  ||     +-------------------+     || fcoe_ctlr         ||     +-------------------+     || bnx2fc_interface  ||     +-------------------+      This prep work will allow us to go from a fcoe_ctlr_device     instance to its fcoe_ctlr as well as from a fcoe_ctlr to its     fcoe_ctlr_device once the fcoe_sysfs API is in use (later     patches in this series).  Signed-off-by: Robert Love <robert.w.love@intel.com> Tested-by: Ross Brattain <ross.b.brattain@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | bnx2fc_els.c | s | 24K | 821 | Robert Love | robert.w.love@intel.com | 1337762291 |  | [SCSI] bnx2fc: Allocate fcoe_ctlr with bnx2fc_interface, not as a member      Currently the fcoe_ctlr associated with an interface is allocated     as a member of struct bnx2fc_interface. This causes problems when     when later patches attempt to use the new fcoe_sysfs APIs which     allow us to allocate the bnx2fc_interface as private data to a     fcoe_ctlr_device instance. The problem is that libfcoe wants to     be able use pointer math to find a fcoe_ctlr's fcoe_ctlr_device     as well as finding a fcoe_ctlr_device's assocated fcoe_ctlr. To     do this we need to allocate the fcoe_ctlr_device, with private     data for the LLD. The private data will contain the fcoe_ctlr     and its private data will be the bnx2fc_interface.      +-------------------+     || fcoe_ctlr_device  ||     +-------------------+     || fcoe_ctlr         ||     +-------------------+     || bnx2fc_interface  ||     +-------------------+      This prep work will allow us to go from a fcoe_ctlr_device     instance to its fcoe_ctlr as well as from a fcoe_ctlr to its     fcoe_ctlr_device once the fcoe_sysfs API is in use (later     patches in this series).  Signed-off-by: Robert Love <robert.w.love@intel.com> Tested-by: Ross Brattain <ross.b.brattain@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | Kconfig | g | 280B |  | David S. Miller | davem@davemloft.net | 1313143247 |  | cnic: Fix select dependencies in bnx2fc/bnx2i Kconfig.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: David S. Miller <davem@davemloft.net>
