f | aic94xx_seq.c | s | 46K | 1211 | Jesper Juhl | jj@chaosbits.net | 1335784978 |  | aic94xx: Get rid of redundant NULL check before release_firmware() call  release_firmware() checks for NULL pointers internally, so checking before calling the function is redundant.  Signed-off-by: Jesper Juhl <jj@chaosbits.net> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | aic94xx_scb.c | s | 26K | 827 | Dan Williams | dan.j.williams@intel.com | 1317579866 |  | [SCSI] isci: export phy events via ->lldd_control_phy()  Allow the sas-transport-class to update events for local phys via a new PHY_FUNC_GET_EVENTS command to ->lldd_control_phy().  Fixup drivers that are not prepared for new enum phy_func values, and unify ->lldd_control_phy() error codes.  These are the SAS defined phy events that are reported in a smp-report-phy-error-log command:  * /sys/class/sas_phy/<phyX>/invalid_dword_count  * /sys/class/sas_phy/<phyX>/running_disparity_error_count  * /sys/class/sas_phy/<phyX>/loss_of_dword_sync_count  * /sys/class/sas_phy/<phyX>/phy_reset_problem_count  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | Makefile | g | 1.2K |  | matt mooney | mfm@muteddisk.com | 1300367135 |  | scsi: change to new flag variable  Replace EXTRA_CFLAGS with ccflags-y.  Signed-off-by: matt mooney <mfm@muteddisk.com> Acked-by: WANG Cong <xiyou.wangcong@gmail.com> Signed-off-by: Michal Marek <mmarek@suse.cz>
f | aic94xx_reg.c | s | 10K | 301 | Adrian Bunk | bunk@kernel.org | 1207588748 |  | [SCSI] aic94xx: cleanups  - static functions in .c files shouldn't be marked inline - make needlessly global code static - remove the unused aic94xx_seq.c:asd_unpause_lseq() - #if 0 other unused code  [akpm@linux-foundation.org: coding-style fixes] Signed-off-by: Adrian Bunk <bunk@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
f | aic94xx_init.c | s | 27K | 922 | Dan Williams | dan.j.williams@intel.com | 1330551341 |  | [SCSI] libsas: async ata scanning  libsas ata error handling is already async but this does not help the scan case.  Move initial link recovery out from under host->scan_mutex, and delay synchronization with eh until after all port probe/recovery work has been queued.  Device ordering is maintained with scan order by still calling sas_rphy_add() in order of domain discovery.  Since we now scan the domain list when invoking libata-eh we need to be careful to check for fully initialized ata ports.  Acked-by: Jack Wang <jack_wang@usish.com> Acked-by: Jeff Garzik <jgarzik@redhat.com> Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | aic94xx_dump.c | s | 36K | 866 | Joe Perches | joe@perches.com | 1316088177 |  | aix94xx: Use angle brackets for system includes  Use the normal include style.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | aic94xx_sds.h | s | 4.5K | 110 | David Woodhouse | dwmw2@infradead.org | 1215696375 |  | aic94xx: treat firmware data as const  Signed-off-by: David Woodhouse <dwmw2@infradead.org>
f | aic94xx_seq.h | s | 2.0K | 61 | Adrian Bunk | bunk@kernel.org | 1207588748 |  | [SCSI] aic94xx: cleanups  - static functions in .c files shouldn't be marked inline - make needlessly global code static - remove the unused aic94xx_seq.c:asd_unpause_lseq() - #if 0 other unused code  [akpm@linux-foundation.org: coding-style fixes] Signed-off-by: Adrian Bunk <bunk@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
f | aic94xx_reg_def.h | s | 72K | 1876 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | aic94xx_sds.c | s | 36K | 1313 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | aic94xx_dump.h | s | 1.4K | 38 | Adrian Bunk | bunk@kernel.org | 1207588748 |  | [SCSI] aic94xx: cleanups  - static functions in .c files shouldn't be marked inline - make needlessly global code static - remove the unused aic94xx_seq.c:asd_unpause_lseq() - #if 0 other unused code  [akpm@linux-foundation.org: coding-style fixes] Signed-off-by: Adrian Bunk <bunk@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
f | Kconfig | g | 1.3K |  | Muli Ben-Yehuda | muli@il.ibm.com | 1159287795 |  | [SCSI] aic94xx: require firmware loader  aic94xx relies on external firmware and thus requires FW_LOADER.  Signed-off-by: Muli Ben-Yehuda <muli@il.ibm.com> Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>
f | aic94xx_hwi.c | s | 37K | 1198 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | aic94xx_hwi.h | s | 10K | 329 | Adrian Bunk | bunk@kernel.org | 1207588748 |  | [SCSI] aic94xx: cleanups  - static functions in .c files shouldn't be marked inline - make needlessly global code static - remove the unused aic94xx_seq.c:asd_unpause_lseq() - #if 0 other unused code  [akpm@linux-foundation.org: coding-style fixes] Signed-off-by: Adrian Bunk <bunk@kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
f | aic94xx_task.c | s | 17K | 560 | James Bottomley | James.Bottomley@suse.de | 1280326069 |  | [SCSI] Unify SAM_ and SAM_STAT_ macros  We have two separate definitions for identical constants with nearly the same name.  One comes from the generic headers in scsi.h; the other is an enum in libsas.h ... it's causing confusion about which one is correct (fortunately they both are).  Fix this by eliminating the libsas.h duplicate  Signed-off-by: James Bottomley <James.Bottomley@suse.de>
f | aic94xx_reg.h | s | 10K | 262 | James Bottomley | James.Bottomley@SteelEye.com | 1156863149 |  | [SCSI] aic94xx: new driver  This is the end point of the separate aic94xx driver based on the original driver and transport class from Luben Tuikov <ltuikov@yahoo.com>  The log of the separate development is:  Alexis Bruemmer:   o aic94xx: fix hotplug/unplug for expanderless systems   o aic94xx: disable split completion timer/setting by default   o aic94xx: wide port off expander support   o aic94xx: remove various inline functions   o aic94xx: use bitops   o aic94xx: remove queue comment   o aic94xx: remove sas_common.c   o aic94xx: sas remove depot's   o aic94xx: use available list_for_each_entry_safe_reverse()   o aic94xx: sas header file merge  James Bottomley:   o aic94xx: fix TF_TMF_NO_CTX processing   o aic94xx: convert to request_firmware interface   o aic94xx: fix hotplug/unplug   o aic94xx: add link error counts to the expander phys   o aic94xx: add transport class phy reset capability   o aic94xx: remove local_attached flag   o Remove README   o Fixup Makefile variable for libsas rename   o Rename sas->libsas   o aic94xx: correct return code for sas_discover_event   o aic94xx: use parent backlink port   o aic94xx: remove channel abstraction   o aic94xx: fix routing algorithms   o aic94xx: add backlink port   o aic94xx: fix cascaded expander properties   o aic94xx: fix sleep under lock   o aic94xx: fix panic on module removal in complex topology   o aic94xx: make use of the new sas_port   o rename sas_port to asd_sas_port   o Fix for eh_strategy_handler move   o aic94xx: move entirely over to correct transport class formulation   o remove last vestages of sas_rphy_alloc()   o update for eh_timed_out move   o Preliminary expander support for aic94xx   o sas: remove event thread   o minor warning cleanups   o remove last vestiges of id mapping arrays   o Further updates   o Convert aic94xx over entirely to the transport class end device and   o update aic94xx/sas to use the new sas transport class end device   o [PATCH] aic94xx: attaching to the sas transport class   o Add missing completion removal from prior patch   o [PATCH] aic94xx: attaching to the sas transport class   o Build fixes from akpm  Jeff Garzik:   o [scsi aic94xx] Remove ->owner from PCI info table  Luben Tuikov:   o initial aic94xx driver  Mike Anderson:   o aic94xx: fix panic on module insertion   o aic94xx: stub out SATA_DEV case   o aic94xx: compile warning cleanups   o aic94xx: sas_alloc_task   o aic94xx: ref count update   o aic94xx nexus loss time value   o [PATCH] aic94xx: driver assertion in non-x86 BIOS env  Randy Dunlap:   o libsas: externs not needed  Robert Tarte:   o aic94xx: sequence patch - fixes SATA support  Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>
f | aic94xx_tmf.c | s | 19K | 628 | Dan Williams | dan.j.williams@intel.com | 1330551771 |  | [SCSI] libsas: don't recover end devices attached to disabled phys  If userspace has decided to disable a phy the kernel should honor that and not inadvertantly re-enable the phy via error recovery.  This is more straightforward in the sata case where link recovery (via libata-eh) is separate from sas_task cancelling in libsas-eh.  Teach libsas to accept -ENODEV as a successful response from I_T_nexus_reset ('successful' in terms of not escalating further).  This is a more comprehensive fix then "libsas: don't recover 'gone' devices in sas_ata_hard_reset()", as it is no longer sata-specific.  aic94xx does check the return value from sas_phy_reset() so if the phy is disabled we proceed with clearing the I_T_nexus.  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | aic94xx.h | s | 3.0K | 82 | Dan Williams | dan.j.williams@intel.com | 1329681342 |  | [SCSI] libsas: use ->set_dmamode to notify lldds of NCQ parameters  sas_discover_sata() notifies lldds of sata devices twice.  Once to allow the 'identify' to be sent, and a second time to allow aic94xx (the only libsas driver that cares about sata_dev.identify) to setup NCQ parameters before the device becomes known to the midlayer.  Replace this double notification and intervening 'identify' with an explicit ->lldd_ata_set_dmamode notification.  With this change all ata internal commands are issued by libata, so we no longer need sas_issue_ata_cmd().  The data from the identify command only needs to be cached in one location so ata_device.id replaces domain_device.sata_dev.identify.  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | aic94xx_dev.c | s | 11K | 315 | Dan Williams | dan.j.williams@intel.com | 1329681342 |  | [SCSI] libsas: use ->set_dmamode to notify lldds of NCQ parameters  sas_discover_sata() notifies lldds of sata devices twice.  Once to allow the 'identify' to be sent, and a second time to allow aic94xx (the only libsas driver that cares about sata_dev.identify) to setup NCQ parameters before the device becomes known to the midlayer.  Replace this double notification and intervening 'identify' with an explicit ->lldd_ata_set_dmamode notification.  With this change all ata internal commands are issued by libata, so we no longer need sas_issue_ata_cmd().  The data from the identify command only needs to be cached in one location so ata_device.id replaces domain_device.sata_dev.identify.  Signed-off-by: Dan Williams <dan.j.williams@intel.com> Signed-off-by: James Bottomley <JBottomley@Parallels.com>
f | aic94xx_sas.h | s | 21K | 692 | Boaz Harrosh | bharrosh@panasas.com | 1202758591 |  | [SCSI] aic94xx: fix ABORT_TASK define conflict  include/scsi/scsi.h as a definition: #define ABORT_TASK          0x0d  on the other hand drivers/scsi/aic94xx/aic94xx_sas.h has: #define ABORT_TASK              0x03  rename the latter to SCB_ABORT_TASK  Signed-off-by: Boaz Harrosh <bharrosh@panasas.com> Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>
