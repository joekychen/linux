d | cxgb4vf |  | 7 items |  | David S. Miller | davem@davemloft.net | 1331332460 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
d | cxgb |  | 24 items |  | Rick Jones | rick.jones2@hp.com | 1321998212 |  | Sweep away N/A fw_version dustbunnies from the .get_drvinfo routine of a number of drivers  Per discussion with Ben Hutchings and David Miller, go through and remove assignments of "N/A" to fw_version in various drivers' .get_drvinfo routines.  While there clean-up some use of bare constants and such.  Signed-off-by: Rick Jones <rick.jones2@hp.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | Kconfig | g | 3.2K |  | Jeff Kirsher | jeffrey.t.kirsher@intel.com | 1314431936 |  | drivers/net/ethernet/*: Enabled vendor Kconfig options  Based on finds for Stephen Rothwell, where current defconfig's enable a ethernet driver and it is not compiled due to the newly added NET_VENDOR_* component of Kconfig.  This patch enables all the "new" Kconfig options so that current defconfig's will continue to compile the expected drivers.  In addition, by enabling all the new Kconfig options does not add any un-expected options.  CC: Stephen Rothwll <sfc@canb.auug.org.au> Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
f | Makefile | g | 199B |  | Jeff Kirsher | jeffrey.t.kirsher@intel.com | 1313031292 |  | chelsio: Move the Chelsio drivers  Moves the drivers for the Chelsio chipsets into drivers/net/ethernet/chelsio/ and the necessary Kconfig and Makefile changes.  CC: Divy Le Ray <divy@chelsio.com> CC: Dimitris Michailidis <dm@chelsio.com> CC: Casey Leedom <leedom@chelsio.com> Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
d | cxgb4 |  | 12 items |  | Vipul Pandya | vipul@chelsio.com | 1337372548 |  | cxgb4: DB Drop Recovery for RDMA and LLD queues  recover LLD EQs for DB drop interrupts.  This includes adding a new db_lock, a spin lock disabling BH too, used by the recovery thread and the ring_tx_db() paths to allow db drop recovery.  Clean up initial DB avoidance code.  Add read_eq_indices() - this allows the LLD to use the PCIe mw to efficiently read hw eq contexts.  Add cxgb4_sync_txq_pidx() - called by iw_cxgb4 to sync up the sw/hw pidx value.  Add flush_eq_cache() and cxgb4_flush_eq_cache().  This allows iw_cxgb4 to flush the sge eq context cache before beginning db drop recovery.  Add module parameter, dbfoifo_int_thresh, to allow tuning the db interrupt threshold value.  Add dbfifo_int_thresh to cxgb4_lld_info so iw_cxgb4 knows the threshold.  Add module parameter, dbfoifo_drain_delay, to allow tuning the amount of time delay between DB FULL and EMPTY upcalls to iw_cxgb4.  Signed-off-by: Vipul Pandya <vipul@chelsio.com> Signed-off-by: Steve Wise <swise@opengridcomputing.com> Signed-off-by: Roland Dreier <roland@purestorage.com>
d | cxgb3 |  | 24 items |  | Roland Dreier | roland@purestorage.com | 1335838124 |  | cxgb3: Don't call cxgb_vlan_mode until q locks are initialized  The driver calls cxgb_vlan_mode() from init_one().  This calls into synchronize_rx(), which locks all the q locks, but the q locks are not initialized until cxgb_up() -> setup_sge_qsets().  So move the call to cxgb_vlan_mode() into cxgb_up(), after the call to setup_sge_qsets(). We also move the body of these functions up higher to avoid having to a forward declaration.  This was found because of the lockdep warning:      INFO: trying to register non-static key.     the code is fine but needs lockdep annotation.     turning off the locking correctness validator.     Pid: 323, comm: work_for_cpu Not tainted 3.4.0-rc5 #28     Call Trace:      [<ffffffff8106e767>] register_lock_class+0x108/0x2d0      [<ffffffff8106ff42>] __lock_acquire+0xd3/0xd06      [<ffffffff81070fd0>] lock_acquire+0xbf/0xfe      [<ffffffff813862a6>] _raw_spin_lock_irq+0x36/0x45      [<ffffffffa01e71aa>] cxgb_vlan_mode+0x96/0xcb [cxgb3]      [<ffffffffa01f90eb>] init_one+0x8c4/0x980 [cxgb3]      [<ffffffff811fcbf0>] local_pci_probe+0x3f/0x70      [<ffffffff81042206>] do_work_for_cpu+0x10/0x22      [<ffffffff810482de>] kthread+0xa1/0xa9      [<ffffffff8138e234>] kernel_thread_helper+0x4/0x10  Contrary to what lockdep says, the code is not fine: we are locking an uninitialized spinlock.  Signed-off-by: Roland Dreier <roland@purestorage.com> Signed-off-by: David S. Miller <davem@davemloft.net>
