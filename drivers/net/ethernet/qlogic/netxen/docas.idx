f | netxen_nic_ctx.c | s | 23K | 793 | Rajesh Borundia | rajesh.borundia@qlogic.com | 1336618384 |  | netxen_nic: Fix estimation of recv MSS in case of LRO  o Linux stack estimates MSS from skb->len or skb_shinfo(skb)->gso_size. In case of LRO skb->len is aggregate of len of number of packets hence MSS obtained using skb->len would be incorrect. Incorrect estimation of recv MSS would lead to delayed acks in some traffic patterns (which sends two or three packets and wait for ack and only then send remaining packets). This leads to drop in performance. Hence we need to set gso_size to MSS obtained from firmware.  o This is fixed recently in firmware hence the MSS is obtained based on capability. If fw is capable of sending the MSS then only driver sets the gso_size.  Signed-off-by: Rajesh Borundia <rajesh.borundia@qlogic.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | netxen_nic_hw.c | s | 67K | 2221 | Santosh Nayak | santoshprasadnayak@gmail.com | 1331961644 |  | netxen: qlogic ethernet : Fix endian bug.  Change the datatype of "ip_addr" to __be32 as 'ip' should be in big endian format.  Adapter needs "ip address" in big endian format stored at lower 32bit of req.word[1]. netxen_config_ipaddr() now receives 'ip' in big endian format. To satisfy adapter's need, use memcpy() to copy byte by byte of 'ip' into lower 32bit of req.word[1].  Mac address and serial number of adapter need to be in little endian format. Change the data type of the related  variables to __le32 / __le64 or cast it explicitly to __le32 / __le64 depending upon the requirement.  Signed-off-by: Santosh Nayak <santoshprasadnayak@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | netxen_nic_hw.h | s | 10K | 251 | Jeff Kirsher | jeffrey.t.kirsher@intel.com | 1313031829 |  | qlogic: Move the QLogic drivers  Moves the QLogic drivers into drivers/net/ethernet/qlogic/ and the necessary Kconfig and Makefile changes.  CC: Ron Mercer <ron.mercer@qlogic.com> CC: Amit Kumar Salecha <amit.salecha@qlogic.com> CC: Anirban Chakraborty <anirban.chakraborty@qlogic.com> Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com> Acked-by: Anirban Chakraborty <anirban.chakraborty@qlogic.com>
f | Makefile | g | 1.1K |  | Jeff Kirsher | jeffrey.t.kirsher@intel.com | 1313031829 |  | qlogic: Move the QLogic drivers  Moves the QLogic drivers into drivers/net/ethernet/qlogic/ and the necessary Kconfig and Makefile changes.  CC: Ron Mercer <ron.mercer@qlogic.com> CC: Amit Kumar Salecha <amit.salecha@qlogic.com> CC: Anirban Chakraborty <anirban.chakraborty@qlogic.com> Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com> Acked-by: Anirban Chakraborty <anirban.chakraborty@qlogic.com>
f | netxen_nic_hdr.h | s | 41K | 957 | Rajesh Borundia | rajesh.borundia@qlogic.com | 1336618384 |  | netxen_nic: Fix estimation of recv MSS in case of LRO  o Linux stack estimates MSS from skb->len or skb_shinfo(skb)->gso_size. In case of LRO skb->len is aggregate of len of number of packets hence MSS obtained using skb->len would be incorrect. Incorrect estimation of recv MSS would lead to delayed acks in some traffic patterns (which sends two or three packets and wait for ack and only then send remaining packets). This leads to drop in performance. Hence we need to set gso_size to MSS obtained from firmware.  o This is fixed recently in firmware hence the MSS is obtained based on capability. If fw is capable of sending the MSS then only driver sets the gso_size.  Signed-off-by: Rajesh Borundia <rajesh.borundia@qlogic.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | netxen_nic_main.c | s | 79K | 2675 | Rajesh Borundia | rajesh.borundia@qlogic.com | 1336618384 |  | netxen_nic: Fix estimation of recv MSS in case of LRO  o Linux stack estimates MSS from skb->len or skb_shinfo(skb)->gso_size. In case of LRO skb->len is aggregate of len of number of packets hence MSS obtained using skb->len would be incorrect. Incorrect estimation of recv MSS would lead to delayed acks in some traffic patterns (which sends two or three packets and wait for ack and only then send remaining packets). This leads to drop in performance. Hence we need to set gso_size to MSS obtained from firmware.  o This is fixed recently in firmware hence the MSS is obtained based on capability. If fw is capable of sending the MSS then only driver sets the gso_size.  Signed-off-by: Rajesh Borundia <rajesh.borundia@qlogic.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | netxen_nic_init.c | s | 46K | 1578 | Linus Torvalds | torvalds@linux-foundation.org | 1337739770 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial  Pull trivial updates from Jiri Kosina:  "As usual, it's mostly typo fixes, redundant code elimination and some   documentation updates."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial: (57 commits)   edac, mips: don't change code that has been removed in edac/mips tree   xtensa: Change mail addresses of Hannes Weiner and Oskar Schirmer   lib: Change mail address of Oskar Schirmer   net: Change mail address of Oskar Schirmer   arm/m68k: Change mail address of Sebastian Hess   i2c: Change mail address of Oskar Schirmer   net: Fix tcp_build_and_update_options comment in struct tcp_sock   atomic64_32.h: fix parameter naming mismatch   Kconfig: replace "--- help ---" with "---help---"   c2port: fix bogus Kconfig "default no"   edac: Fix spelling errors.   qla1280: Remove redundant NULL check before release_firmware() call   remoteproc: remove redundant NULL check before release_firmware()   qla2xxx: Remove redundant NULL check before release_firmware() call.   aic94xx: Get rid of redundant NULL check before release_firmware() call   tehuti: delete redundant NULL check before release_firmware()   qlogic: get rid of a redundant test for NULL before call to release_firmware()   bna: remove redundant NULL test before release_firmware()   tg3: remove redundant NULL test before release_firmware() call   typhoon: get rid of redundant conditional before all to release_firmware()   ...
f | netxen_nic_ethtool.c | s | 26K | 817 | Manish chopra | manish.chopra@qlogic.com | 1336618384 |  | netxen_nic: Allow only useful and recommended firmware dump capture mask values  o 0x3, 0x7, 0xF, 0x1F, 0x3F, 0x7F and 0xFF are the allowed capture masks.  Signed-off-by: Manish chopra <manish.chopra@qlogic.com> Signed-off-by: Rajesh Borundia <rajesh.borundia@qlogic.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | netxen_nic.h | s | 50K | 1598 | Rajesh Borundia | rajesh.borundia@qlogic.com | 1336618384 |  | netxen_nic: Fix estimation of recv MSS in case of LRO  o Linux stack estimates MSS from skb->len or skb_shinfo(skb)->gso_size. In case of LRO skb->len is aggregate of len of number of packets hence MSS obtained using skb->len would be incorrect. Incorrect estimation of recv MSS would lead to delayed acks in some traffic patterns (which sends two or three packets and wait for ack and only then send remaining packets). This leads to drop in performance. Hence we need to set gso_size to MSS obtained from firmware.  o This is fixed recently in firmware hence the MSS is obtained based on capability. If fw is capable of sending the MSS then only driver sets the gso_size.  Signed-off-by: Rajesh Borundia <rajesh.borundia@qlogic.com> Signed-off-by: David S. Miller <davem@davemloft.net>
