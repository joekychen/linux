f | Makefile | g | 2.0K |  | Matthew Garrett | mjg@redhat.com | 1333094964 |  | ACPI: Add support for exposing BGRT data  ACPI 5.0 adds the BGRT, a table that contains a pointer to the firmware boot splash and associated metadata. This simple driver exposes it via /sys/firmware/acpi in order to allow bootsplash applications to draw their splash around the firmware image and reduce the number of jarring graphical transitions during boot.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | internal.h | s | 3.2K | 84 | Thomas Renninger | trenn@suse.de | 1306648204 |  | ACPI: Cleanup custom_method debug stuff  - Move param aml_debug_output to other params into sysfs.c - Split acpi_debugfs_init to prepare custom_method to be   an own .config option and driver.  Signed-off-by: Thomas Renninger <trenn@suse.de> Acked-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: rui.zhang@intel.com Signed-off-by: Len Brown <len.brown@intel.com>
f | pci_link.c | s | 23K | 781 | Kay Sievers | kay@vrfy.org | 1336492526 |  | acpi: use KERN_CONT in printk() continuation lines  Cc: Len Brown <lenb@kernel.org> Signed-off-by: Kay Sievers <kay@vrfy.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | pci_slot.c | s | 10K | 319 | Rusty Russell | rusty@rustcorp.com.au | 1326409340 |  | module_param: make bool parameters really bool (drivers & misc)  module_param(bool) used to counter-intuitively take an int.  In fddd5201 (mid-2009) we allowed bool or int/unsigned int using a messy trick.  It's time to remove the int/unsigned int option.  For this version it'll simply give a warning, but it'll break next kernel version.  Acked-by: Mauro Carvalho Chehab <mchehab@redhat.com> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
f | processor_idle.c | s | 33K | 1108 | Deepthi Dharwar | deepthi@linux.vnet.ibm.com | 1340821133 |  | PM / ACPI: Fix suspend/resume regression caused by cpuidle cleanup.  Commit e978aa7d7d57d04eb5f88a7507c4fb98577def77 ( cpuidle: Move dev->last_residency update to driver enter routine; remove dev->last_state) was  breaking suspend on laptops, as reported in the below link 	- https://lkml.org/lkml/2011/11/11/164  This was fixed in commit 3439a8da16bcad6b0982ece938c9f8299bb53584 (ACPI / cpuidle: Remove acpi_idle_suspend (to fix suspend regression) by removing acpi_idle_suspend flag. 	- https://lkml.org/lkml/2011/11/14/74  But this did fix did not work on all systems as Suspend/resume regression was reported on Lenovo S10-3 recently by Dave. 	- https://lkml.org/lkml/2012/5/27/115 It looked like with commit e978aa7d broke suspend and with commit 3439a8da resume was not working with acpi_idle driver.  This patch fixes the regression that caused this issue in the first place. acpi_idle_suspend flag is essential on some x86 systems to prevent the cpus from going to deeper C-states when suspend is triggered ( commit b04e7bdb984 ) So reverting the commit 3439a8da is essential.  By default, irqs are disabled in cpu_idle arch specific call and re-enabled in idle state return path . During suspend, the acpi_idle_suspend flag is set, which prevents the cpus from going to deeper idle states, it is essential to enabling the irqs in this return path too.  To address the suspend issue, we were not re-enabling the interrupts while returning from acpi_idle_enter_bm() routine if acpi_idle_suspend flag is set. and this caused suspend failure.  In addition to the above, to improve the readability of the code, return of -ENIVAL is replaced with -EBUSY in acpi_idle_suspend return path. Implying that the system is currently busy when suspend is in progress, which prevents the cpus from entering deeper C-states.  Reported-and-Tested-by: Dav Hansen <dave@linux.vnet.ibm.com> Tested-by: Preeti Murthy <preeti@linux.vnet.ibm.com> Signed-off-by: Deepthi Dharwar <deepthi@linux.vnet.ibm.com> Reviewed-by: Srivatsa S Bhat <srivatsa.bhat@linux.vnet.ibm.com> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | ac.c | s | 9.2K | 312 | Phil Carmody | ext-phil.2.carmody@nokia.com | 1311250200 |  | treewide: fix potentially dangerous trailing ';' in #defined values/expressions  All these are instances of   #define NAME value; or   #define NAME(params_opt) value;  These of course fail to build when used in contexts like   if(foo $OP NAME)   while(bar $OP NAME) and may silently generate the wrong code in contexts such as   foo = NAME + 1;    /* foo = value; + 1; */   bar = NAME - 1;    /* bar = value; - 1; */   baz = NAME & quux; /* baz = value; & quux; */  Reported on comp.lang.c, Message-ID: <ab0d55fe-25e5-482b-811e-c475aa6065c3@c29g2000yqd.googlegroups.com> Initial analysis of the dangers provided by Keith Thompson in that thread.  There are many more instances of more complicated macros having unnecessary trailing semicolons, but this pile seems to be all of the cases of simple values suffering from the problem. (Thus things that are likely to be found in one of the contexts above, more complicated ones aren't.)  Signed-off-by: Phil Carmody <ext-phil.2.carmody@nokia.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | acpi_memhotplug.c | s | 14K | 477 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | pci_bind.c | s | 3.1K | 101 | Rafael J. Wysocki | rjw@sisk.pl | 1266884462 |  | PCI / ACPI / PM: Platform support for PCI PME wake-up  Although the majority of PCI devices can generate PMEs that in principle may be used to wake up devices suspended at run time, platform support is generally necessary to convert PMEs into wake-up events that can be delivered to the kernel.  If ACPI is used for this purpose, PME signals generated by a PCI device will trigger the ACPI GPE associated with the device to generate an ACPI wake-up event that we can set up a handler for, provided that everything is configured correctly.  Unfortunately, the subset of PCI devices that have GPEs associated with them is quite limited.  The devices without dedicated GPEs have to rely on the GPEs associated with other devices (in the majority of cases their upstream bridges and, possibly, the root bridge) to generate ACPI wake-up events in response to PME signals from them.  Add ACPI platform support for PCI PME wake-up: o Add a framework making is possible to use ACPI system notify   handlers for run-time PM. o Add new PCI platform callback ->run_wake() to struct   pci_platform_pm_ops allowing us to enable/disable the platform to   generate wake-up events for given device.  Implemet this callback   for the ACPI platform. o Define ACPI wake-up handlers for PCI devices and PCI root buses and   make the PCI-ACPI binding code register wake-up notifiers for all   PCI devices present in the ACPI tables. o Add function pci_dev_run_wake() which can be used by PCI drivers to   check if given device is capable of generating wake-up events at   run time.  Developed in cooperation with Matthew Garrett <mjg@redhat.com>.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
d | acpica |  | 151 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1334945975 |  | Revert "ACPI: ignore FADT reset-reg-sup flag"  This reverts commit cf450136bfde77c7f95065c91bffded4aa7fa731.  It breaks reboot on at least one Thinkpad T43, as reported by Jörg Otte:  "On reboot it shuts down as normal.   The last lines displayed are:    >Unmounting temporary filesystems.. [OK]   >Deactivating swap...               [OK]   >Unmounting local filesystems...    [OK]   >Will now restart   >    Restarting system    Then I hear it accessing the cd-drive, but then it's being stuck."  Jörg bisected the regression to this commit.  That commit fixes another machine (see    https://bugzilla.kernel.org/show_bug.cgi?id=11533  for details) that has a BIOS bug and doesn't support ACPI reset. However, at least one of those other reporters no longer even has the machine in question, and had a different workaround to begin with. Besides, it clearly was a buggy BIOS.  Let's not break the correct case to fix that case.  Reported-and-bisected-by: Jörg Otte <jrg.otte@googlemail.com> Cc: linux-acpi@vger.kernel.org Cc: Len Brown <lenb@kernel.org> Cc: Peter Anvin <hpa@zytor.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | blacklist.c | s | 8.9K | 308 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103833 |  | acpi: delete module.h include from files explicitly not needing it  Files which aren't actually using infrastructure from module.h shouldn't include it, as it is a big header with lots of child includes spawned off.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | utils.c | s | 10K | 353 | Matthew Garrett | mjg@redhat.com | 1336780992 |  | ACPI: Add _PLD support  Add a simple helper function to allow drivers to obtain the physical device location data.  Acked-by: Len Brown <len.brown@intel.com> Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Lan Tianyu <tianyu.lan@intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | acpi_ipmi.c | s | 14K | 460 | Zhao Yakui | yakui.zhao@intel.com | 1292304134 |  | IPMI/ACPI: Add the IPMI opregion driver to enable ACPI to access BMC controller  ACPI 4.0 spec adds the ACPI IPMI opregion, which means that the ACPI AML code can also communicate with the BMC controller. This is to install the ACPI IPMI opregion and enable the ACPI to access the BMC controller through the IPMI message.       It will create IPMI user interface for every IPMI device detected in ACPI namespace and install the corresponding IPMI opregion space handler. Then it can enable ACPI to access the BMC controller through the IPMI message.  The following describes how to process the IPMI request in IPMI space handler:     1. format the IPMI message based on the request in AML code.     IPMI system address. Now the address type is SYSTEM_INTERFACE_ADDR_TYPE     IPMI net function & command     IPMI message payload     2. send the IPMI message by using the function of ipmi_request_settime     3. wait for the completion of IPMI message. It can be done in different routes: One is in handled in IPMI user recv callback function. Another is handled in timeout function.     4. format the IPMI response and return it to ACPI AML code.  At the same time it also addes the module dependency. The ACPI IPMI opregion will depend on the IPMI subsystem.  Signed-off-by: Zhao Yakui <yakui.zhao@intel.com> cc: Bjorn Helgaas <bjorn.helgaas@hp.com> Signed-off-by: Corey Minyard <cminyard@mvista.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | bgrt.c | s | 3.8K | 141 | H. Peter Anvin | hpa@linux.intel.com | 1337264306 |  | acpi, bgrd: Add missing <linux/io.h> to drivers/acpi/bgrt.c  The ACPI BGRT driver uses ioremap() and memcpy_fromio(), which means it needs to #include <linux/io.h>.  [ hpa: This was hidden because <asm/acpi.h> used to include <asm/trampoline.h>,   which then included <asm/io.h> ]  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Link: http://lkml.kernel.org/r/1336597442-9399-1-git-send-email-hpa@linux.intel.com Cc: Matthew Garrett <mjg@redhat.com> Cc: Len Brown <lenb@kernel.org>
f | proc.c | s | 10K | 368 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103834 |  | acpi: add export.h to files using THIS_MODULE/EXPORT_SYMBOL  These files were relying on module.h to come in via the path in an include/acpi header file, but we don't want to have instances of module.h being included from include/* files if it can be avoided.  Have the files include export.h instead.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | acpi_pad.c | s | 13K | 459 | Stuart Hayes | Stuart_Hayes@Dell.com | 1341031873 |  | acpi_pad: fix power_saving thread deadlock  The acpi_pad driver can get stuck in destroy_power_saving_task() waiting for kthread_stop() to stop a power_saving thread.  The problem is that the isolated_cpus_lock mutex is owned when destroy_power_saving_task() calls kthread_stop(), which waits for a power_saving thread to end, and the power_saving thread tries to acquire the isolated_cpus_lock when it calls round_robin_cpu().  This patch fixes the issue by making round_robin_cpu() use its own mutex.  https://bugzilla.kernel.org/show_bug.cgi?id=42981  Cc: stable@vger.kernel.org Signed-off-by: Stuart Hayes <Stuart_Hayes@Dell.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | custom_method.c | s | 2.0K | 80 | Thomas Renninger | trenn@suse.de | 1306648240 |  | ACPI: Split out custom_method functionality into an own driver  With /sys/kernel/debug/acpi/custom_method root can write to arbitrary memory and increase his priveleges, even if these are restricted.  -> Make this an own debug .config option and warn about the security issue in the config description.  -> Still keep acpi/debugfs.c which now only creates an empty    /sys/kernel/debug/acpi directory. There might be other    users of it later.  Signed-off-by: Thomas Renninger <trenn@suse.de> Acked-by: Rafael J. Wysocki <rjw@sisk.pl> Acked-by: rui.zhang@intel.com Signed-off-by: Len Brown <len.brown@intel.com>
f | scan.c | s | 39K | 1350 | Daniel Drake | dsd@laptop.org | 1338319223 |  | ACPI / PM: Generate wakeup events on fixed power button  When the system is woken up by the ACPI fixed power button, currently there is no way of userspace becoming aware that the power button was pressed.  OLPC would like to know this, so that we can respond appropriately. For example, if the system was woken up by a network packet, we know we can go back to sleep very quickly. But if the user explicitly woke the system with the power button, we're going to want to stay awake for a while.  The wakeup count mechanism seems like a good fit for communicating this. Mark the fixed power button as wakeup-enabled, and increment its wakeup counter when the system is woken with the power button. (The wakeup counter is also incremented when the power button is pressed during system operation; this is already handled by an existing acpi-button codepath).  Signed-off-by: Daniel Drake <dsd@laptop.org> Acked-by: Zhang Rui <rui.zhang@intel.com> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | ec.c | s | 27K | 933 | Linus Torvalds | torvalds@linux-foundation.org | 1333151139 |  | Merge branch 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux  Pull ACPI & Power Management changes from Len Brown:  - ACPI 5.0 after-ripples, ACPICA/Linux divergence cleanup  - cpuidle evolving, more ARM use  - thermal sub-system evolving, ditto  - assorted other PM bits  Fix up conflicts in various cpuidle implementations due to ARM cpuidle cleanups (ARM at91 self-refresh and cpu idle code rewritten into "standby" in asm conflicting with the consolidation of cpuidle time keeping), trivial SH include file context conflict and RCU tracing fixes in generic code.  * 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux: (77 commits)   ACPI throttling: fix endian bug in acpi_read_throttling_status()   Disable MCP limit exceeded messages from Intel IPS driver   ACPI video: Don't start video device until its associated input device has been allocated   ACPI video: Harden video bus adding.   ACPI: Add support for exposing BGRT data   ACPI: export acpi_kobj   ACPI: Fix logic for removing mappings in 'acpi_unmap'   CPER failed to handle generic error records with multiple sections   ACPI: Clean redundant codes in scan.c   ACPI: Fix unprotected smp_processor_id() in acpi_processor_cst_has_changed()   ACPI: consistently use should_use_kmap()   PNPACPI: Fix device ref leaking in acpi_pnp_match   ACPI: Fix use-after-free in acpi_map_lsapic   ACPI: processor_driver: add missing kfree   ACPI, APEI: Fix incorrect APEI register bit width check and usage   Update documentation for parameter *notrigger* in einj.txt   ACPI, APEI, EINJ, new parameter to control trigger action   ACPI, APEI, EINJ, limit the range of einj_param   ACPI, APEI, Fix ERST header length check   cpuidle: power_usage should be declared signed integer   ...
f | button.c | s | 12K | 385 | Zhang Rui | rui.zhang@intel.com | 1300850435 |  | ACPI button: remove unused procfs I/F  Remove unused ACPI button procfs interface. Only /proc/acpi/button/lid/LID/state remains.  Signed-off-by: Zhang Rui <rui.zhang@intel.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | cm_sbs.c | s | 3.0K | 96 | Len Brown | len.brown@intel.com | 1251503847 |  | ACPI: Move definition of PREFIX from acpi_bus.h to internal..h  Linux/ACPI core files using internal.h all PREFIX "ACPI: ", however, not all ACPI drivers use/want it -- and they should not have to #undef PREFIX to define their own.  Add GPL commment to internal.h while we are there.  This does not change any actual console output, asside from a whitespace fix.  Signed-off-by: Len Brown <len.brown@intel.com>
f | power.c | s | 19K | 642 | Rafael J. Wysocki | rjw@sisk.pl | 1338319224 |  | ACPI / PM: Make __acpi_bus_get_power() cover D3cold correctly  After recent changes of the ACPI device power states definitions, if power resources are not used for the device's power management, the state returned by __acpi_bus_get_power() cannot exceed D3hot, because the return values of _PSC are 0 through 3.  However, if the _PR3 method is not present for the device and _PS3 returns 3, we have to assume that the device is in D3cold, so the value returned by __acpi_bus_get_power() in that case should be 4.  Similarly, acpi_power_get_inferred_state() should take the power resources for the D3hot state into account in general, so that it can return 3 if those resources are "on" or 4 (D3cold) otherwise.  Fix the the above two issues and make sure that if both _PSC and _PR3 are present for the device, the power resources listed by _PR3 will be used to determine if the number 3 returned by _PSC is meant to represent D3cold or D3hot.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | sbs.c | s | 28K | 928 | Linus Torvalds | torvalds@linux-foundation.org | 1312355822 |  | Merge branch 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6  * 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux-acpi-2.6: (28 commits)   ACPI:  delete stale reference in kernel-parameters.txt   ACPI: add missing _OSI strings   ACPI: remove NID_INVAL   thermal: make THERMAL_HWMON implementation fully internal   thermal: split hwmon lookup to a separate function   thermal: hide CONFIG_THERMAL_HWMON   ACPI print OSI(Linux) warning only once   ACPI: DMI workaround for Asus A8N-SLI Premium and Asus A8N-SLI DELUX   ACPI / Battery: propagate sysfs error in acpi_battery_add()   ACPI / Battery: avoid acpi_battery_add() use-after-free   ACPI: introduce "acpi_rsdp=" parameter for kdump   ACPI: constify ops structs   ACPI: fix CONFIG_X86_REROUTE_FOR_BROKEN_BOOT_IRQS   ACPI: fix 80 char overflow   ACPI / Battery: Resolve the race condition in the sysfs_remove_battery()   ACPI / Battery: Add the check before refresh sysfs in the battery_notify()   ACPI / Battery: Add the hibernation process in the battery_notify()   ACPI / Battery: Rename acpi_battery_quirks2 with acpi_battery_quirks   ACPI / Battery: Change 16-bit signed negative battery current into correct value   ACPI / Battery: Add the power unit macro   ...
f | event.c | s | 6.8K | 252 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103834 |  | acpi: add export.h to files using THIS_MODULE/EXPORT_SYMBOL  These files were relying on module.h to come in via the path in an include/acpi header file, but we don't want to have instances of module.h being included from include/* files if it can be avoided.  Have the files include export.h instead.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | sbshc.c | s | 7.9K | 286 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103832 |  | acpi: add module.h to files implicitly using/relying on it.  These files are using standard module API things like MODULE_AUTHOR etc. and so should not be relying on an implicit presence of the module.h header.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | processor_perflib.c | s | 20K | 667 | Marco Aurelio da Costa | costa@gamic.com | 1336456597 |  | ACPI: Ignore invalid _PSS entries, but use valid ones  The EliteBook 8560W has non-initialized entries in its _PSS ACPI table. Instead of bailing out when the first non-initialized entry is found, ignore it and use only  the valid entries. Only bail out if there is no valid entry at all.  [v3: Fixes suggested by Konrad]  Signed-off-by: Marco Aurelio da Costa <costa@gamic.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | processor_thermal.c | s | 6.8K | 226 | Andi Kleen | andi@firstfloor.org | 1332396974 |  | ACPI: Do cpufreq clamping for throttling per package v2  On Intel CPUs the processor typically uses the highest frequency set by any logical CPU. When the system overheats Linux first forces the frequency to the lowest available one to lower the temperature.  However this was done only per logical CPU, which means all logical CPUs in a package would need to go through this before the frequency is actually lowered.  Worse this delay actually prevents real throttling, because the real throttle code only proceeds when the lowest frequency is already reached.  So when a throttle event happens force the lowest frequency for all CPUs in the package where it happened. The per CPU state is now kept per package, not per logical CPU. An alternative would be to do it per cpufreq unit, but since we want to bring down the temperature of the complete chip it's better to do it for all.  In principle it may even make sense to do it for all CPUs, but I kept it on the package for now.  With this change the frequency is actually lowered, which in terms also allows real throttling to proceed.  I also removed an unnecessary per cpu variable initialization.  v2: Fix package mapping  Cc: <stable@vger.kernel.org> Signed-off-by: Andi Kleen <ak@linux.intel.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | processor_core.c | s | 8.9K | 315 | Lin Ming | ming.m.lin@intel.com | 1326795908 |  | ACPI: processor: fix acpi_get_cpuid for UP processor  For UP processor, it is likely that no _MAT method or MADT table defined. So currently acpi_get_cpuid(...) always return -1 for UP processor. This is wrong. It should return valid value for CPU0.  In the other hand, BIOS may define multiple CPU handles even for UP processor, for example          Scope (_PR)         {             Processor (CPU0, 0x00, 0x00000410, 0x06) {}             Processor (CPU1, 0x01, 0x00000410, 0x06) {}             Processor (CPU2, 0x02, 0x00000410, 0x06) {}             Processor (CPU3, 0x03, 0x00000410, 0x06) {}         }  We should only return valid value for CPU0's acpi handle. And return invalid value for others.  http://marc.info/?t=132329819900003&r=1&w=2  Cc: stable@vger.kernel.org Reported-and-tested-by: wallak@free.fr Signed-off-by: Lin Ming <ming.m.lin@intel.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | ec_sys.c | s | 3.2K | 128 | Stephen Boyd | sboyd@codeaurora.org | 1333664750 |  | simple_open: automatically convert to simple_open()  Many users of debugfs copy the implementation of default_open() when they want to support a custom read/write function op.  This leads to a proliferation of the default_open() implementation across the entire tree.  Now that the common implementation has been consolidated into libfs we can replace all the users of this function with simple_open().  This replacement was done with the following semantic patch:  <smpl> @ open @ identifier open_f != simple_open; identifier i, f; @@ -int open_f(struct inode *i, struct file *f) -{ ( -if (i->i_private) -f->private_data = i->i_private; || -f->private_data = i->i_private; ) -return 0; -}  @ has_open depends on open @ identifier fops; identifier open.open_f; @@ struct file_operations fops = { ... -.open = open_f, +.open = simple_open, ... }; </smpl>  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Stephen Boyd <sboyd@codeaurora.org> Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Julia Lawall <Julia.Lawall@lip6.fr> Acked-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | video.c | s | 46K | 1567 | Len Brown | len.brown@intel.com | 1341032030 |  | Merge branches 'acpi_pad-bugzilla-42981', 'apei-bugzilla-43282', 'video-bugzilla-43168', 'bugzilla-40002' and 'bugfix-misc' into release  bug fixes
f | dock.c | s | 27K | 940 | Rusty Russell | rusty@rustcorp.com.au | 1326409340 |  | module_param: make bool parameters really bool (drivers & misc)  module_param(bool) used to counter-intuitively take an int.  In fddd5201 (mid-2009) we allowed bool or int/unsigned int using a messy trick.  It's time to remove the int/unsigned int option.  For this version it'll simply give a warning, but it'll break next kernel version.  Acked-by: Mauro Carvalho Chehab <mchehab@redhat.com> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
f | processor_throttling.c | s | 31K | 1087 | Dan Carpenter | dan.carpenter@oracle.com | 1333137972 |  | ACPI throttling: fix endian bug in acpi_read_throttling_status()  Using a u64 here creates an endian bug.  We store a u32 number in the top byte which is a larger number than intended on big endian systems. There is no reason to use a 64 bit data type here, I guess it was just an oversight.  I removed the initialization to zero as well.  It's needed with a u64 but with a u32, the variable gets initialized properly inside the call to acpi_os_read_port().  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | sbshc.h | s | 960B | 29 | Alexey Starikovskiy | astarikovskiy@suse.de | 1197663246 |  | ACPI: SBS: Ignore alarms coming from unknown devices  http://bugzilla.kernel.org/show_bug.cgi?id=9362  Signed-off-by: Alexey Starikovskiy <astarikovskiy@suse.de> Signed-off-by: Len Brown <len.brown@intel.com>
f | nvs.c | s | 4.6K | 178 | Bjorn Helgaas | bhelgaas@google.com | 1333090017 |  | ACPI / PM: print physical addresses consistently with other parts of kernel  Print physical address info in a style consistent with the %pR style used elsewhere in the kernel.  Signed-off-by: Bjorn Helgaas <bhelgaas@google.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | video_detect.c | s | 7.3K | 206 | Corentin Chary | corentin.chary@gmail.com | 1332259338 |  | platform/x86: drop deprecated asus_acpi driver  asus_acpi only support old models, it has been deprecated since 2009 in favor of asus-laptop, it's not built by any (sane) distro, so it is time to say good bye.  Thanks to Julien Lerouge and Karol Kozimor for the work they have done on it, I would never have wrote asus-laptop and other asus related drivers without asus_acpi.  Signed-off-by: Corentin Chary <corentin.chary@gmail.com> Signed-off-by: Matthew Garrett <mjg@redhat.com>
f | pci_irq.c | s | 14K | 462 | Vincent Palatin | vpalatin@chromium.org | 1325880676 |  | PCI/PM/Runtime: make PCI traces quieter  When the runtime PM is activated on PCI, if a device switches state frequently (e.g. an EHCI controller with autosuspending USB devices connected) the PCI configuration traces might be very verbose in the kernel log.  Let's guard those traces with DEBUG condition.  Acked-by: "Rafael J. Wysocki" <rjw@sisk.pl> Signed-off-by: Vincent Palatin <vpalatin@chromium.org> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
f | fan.c | s | 5.7K | 183 | Vasiliy Kulikov | segoon@openwall.com | 1310855777 |  | ACPI: constify ops structs  Structs battery_file, acpi_dock_ops, file_operations, thermal_cooling_device_ops, thermal_zone_device_ops, kernel_param_ops are not changed in runtime.  It is safe to make them const. register_hotplug_dock_device() was altered to take const "ops" argument to respect acpi_dock_ops' const notion.  Signed-off-by: Vasiliy Kulikov <segoon@openwall.com> Acked-by: Jeff Garzik <jgarzik@redhat.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | Kconfig | g | 12K |  | Fabio Estevam | festevam@gmail.com | 1338782853 |  | drivers: acpi: Fix dependency for ACPI_HOTPLUG_CPU  Fix the following build warning:  warning: (ACPI_HOTPLUG_CPU) selects ACPI_CONTAINER which has unmet direct dependencies (ACPI && EXPERIMENTAL)  Signed-off-by: Fabio Estevam <fabio.estevam@freescale.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | reboot.c | s | 1.3K | 44 | Linus Torvalds | torvalds@linux-foundation.org | 1334945975 |  | Revert "ACPI: ignore FADT reset-reg-sup flag"  This reverts commit cf450136bfde77c7f95065c91bffded4aa7fa731.  It breaks reboot on at least one Thinkpad T43, as reported by Jörg Otte:  "On reboot it shuts down as normal.   The last lines displayed are:    >Unmounting temporary filesystems.. [OK]   >Deactivating swap...               [OK]   >Unmounting local filesystems...    [OK]   >Will now restart   >    Restarting system    Then I hear it accessing the cd-drive, but then it's being stuck."  Jörg bisected the regression to this commit.  That commit fixes another machine (see    https://bugzilla.kernel.org/show_bug.cgi?id=11533  for details) that has a BIOS bug and doesn't support ACPI reset. However, at least one of those other reporters no longer even has the machine in question, and had a different workaround to begin with. Besides, it clearly was a buggy BIOS.  Let's not break the correct case to fix that case.  Reported-and-bisected-by: Jörg Otte <jrg.otte@googlemail.com> Cc: linux-acpi@vger.kernel.org Cc: Len Brown <lenb@kernel.org> Cc: Peter Anvin <hpa@zytor.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | tables.c | s | 10K | 309 | Len Brown | len.brown@intel.com | 1268614718 |  | ACPI: delete the "acpi=ht" boot option  acpi=ht was important in 2003 -- before ACPI was universally deployed and enabled by default in the major Linux distributions.  At that time, there were a fair number of people who or chose to, or needed to, run with acpi=off, yet also wanted access to Hyper-threading.  Today we find that many invocations of "acpi=ht" are accidental, and thus is it possible that it is doing more harm than good.  In 2.6.34, we warn on invocation of acpi=ht. In 2.6.35, we delete the boot option.  Signed-off-by: Len Brown <len.brown@intel.com>
f | hed.c | s | 2.8K | 96 | Huang Ying | ying.huang@intel.com | 1274323224 |  | ACPI Hardware Error Device (PNP0C33) support  Hardware Error Device (PNP0C33) is used to report some hardware errors notified via SCI, mainly the corrected errors. Some APEI Generic Hardware Error Source (GHES) may use SCI on hardware error device to notify hardware error to kernel.  After receiving notification from ACPI core, it is forwarded to all listeners via a notifier chain. The listener such as APEI GHES should check corresponding error source for new events when notified.  Signed-off-by: Huang Ying <ying.huang@intel.com> Signed-off-by: Andi Kleen <ak@linux.intel.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | osl.c | s | 36K | 1327 | Thomas Gleixner | tglx@linutronix.de | 1334769387 |  | Revert "ACPI: Make ACPI interrupt threaded"  This reverts commit 6fe0d0628245fdcd6fad8b837c81e8f7ebc3364d.  Paul bisected this regression.  The conversion was done blindly and is wrong, as it does not provide a primary handler to disable the level type irq on the device level. Neither does it set the IRQF_ONESHOT flag which handles that at the irq line level.  This can't be done as the interrupt might be shared, though we might extend the core to force it.  So an interrupt on this line will wake up the thread, but immediately unmask the irq after that.  Due to the interrupt being level type the hardware interrupt is raised over and over and prevents the irq thread from handling it.  Fail.  request_irq() unfortunately does not refuse such a request and the patch was obviously never tested with real interrupts.  Bisected-by: Paul Bolle <pebolle@tiscali.nl> Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | battery.c | s | 31K | 974 | Andy Whitcroft | apw@canonical.com | 1336456197 |  | ACPI battery: only refresh the sysfs files when pertinent information changes  We only need to regenerate the sysfs files when the capacity units change, avoid the update otherwise.  The origin of this issue is dates way back to 2.6.38: da8aeb92d4853f37e281f11fddf61f9c7d84c3cd (ACPI / Battery: Update information on info notification and resume)  cc: <stable@vger.kernel.org> Signed-off-by: Andy Whitcroft <apw@canonical.com> Tested-by: Ralf Jung <post@ralfj.de> Signed-off-by: Len Brown <len.brown@intel.com>
f | thermal.c | s | 29K | 1004 | Matthew Garrett | mjg@redhat.com | 1333089511 |  | ACPI: Evaluate thermal trip points before reading temperature  An HP laptop (Pavilion G4-1016tx) has the following code in _TMP:         Store (\_SB.PCI0.LPCB.EC0.RTMP, Local0)        If (LGreaterEqual (Local0, S4TP))        {            Store (One, HTS4)        }  S4TP is initialised at 0 and not programmed further until either _HOT or _CRT is called. If we evaluate _TMP before the trip points then HTS4 will always be set, causing the firmware to generate a message on boot complaining that the system shut down because of overheating. The simplest solution is just to reverse the checking of trip points and _TMP in thermal init.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | debugfs.c | s | 406B | 15 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103834 |  | acpi: add export.h to files using THIS_MODULE/EXPORT_SYMBOL  These files were relying on module.h to come in via the path in an include/acpi header file, but we don't want to have instances of module.h being included from include/* files if it can be avoided.  Have the files include export.h instead.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | sleep.c | s | 25K | 859 | Linus Torvalds | torvalds@linux-foundation.org | 1338779757 |  | Merge branch 'pm-acpi' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm  Pull some left-over PM patches from Rafael J. Wysocki.  * 'pm-acpi' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:   ACPI / PM: Make acpi_pm_device_sleep_state() follow the specification   ACPI / PM: Make __acpi_bus_get_power() cover D3cold correctly   ACPI / PM: Fix error messages in drivers/acpi/bus.c   rtc-cmos / PM: report wakeup event on ACPI RTC alarm   ACPI / PM: Generate wakeup events on fixed power button
f | processor_driver.c | s | 24K | 786 | Linus Torvalds | torvalds@linux-foundation.org | 1333151139 |  | Merge branch 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux  Pull ACPI & Power Management changes from Len Brown:  - ACPI 5.0 after-ripples, ACPICA/Linux divergence cleanup  - cpuidle evolving, more ARM use  - thermal sub-system evolving, ditto  - assorted other PM bits  Fix up conflicts in various cpuidle implementations due to ARM cpuidle cleanups (ARM at91 self-refresh and cpu idle code rewritten into "standby" in asm conflicting with the consolidation of cpuidle time keeping), trivial SH include file context conflict and RCU tracing fixes in generic code.  * 'release' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux: (77 commits)   ACPI throttling: fix endian bug in acpi_read_throttling_status()   Disable MCP limit exceeded messages from Intel IPS driver   ACPI video: Don't start video device until its associated input device has been allocated   ACPI video: Harden video bus adding.   ACPI: Add support for exposing BGRT data   ACPI: export acpi_kobj   ACPI: Fix logic for removing mappings in 'acpi_unmap'   CPER failed to handle generic error records with multiple sections   ACPI: Clean redundant codes in scan.c   ACPI: Fix unprotected smp_processor_id() in acpi_processor_cst_has_changed()   ACPI: consistently use should_use_kmap()   PNPACPI: Fix device ref leaking in acpi_pnp_match   ACPI: Fix use-after-free in acpi_map_lsapic   ACPI: processor_driver: add missing kfree   ACPI, APEI: Fix incorrect APEI register bit width check and usage   Update documentation for parameter *notrigger* in einj.txt   ACPI, APEI, EINJ, new parameter to control trigger action   ACPI, APEI, EINJ, limit the range of einj_param   ACPI, APEI, Fix ERST header length check   cpuidle: power_usage should be declared signed integer   ...
d | apei |  | 10 items |  | Huang Ying | ying.huang@intel.com | 1339474638 |  | ACPI, APEI, Avoid too much error reporting in runtime  This patch fixed the following bug.  https://bugzilla.kernel.org/show_bug.cgi?id=43282  This is caused by a firmware bug checking (checking generic address register provided by firmware) in runtime.  The checking should be done in address mapping time instead of runtime to avoid too much error reporting in runtime.  Reported-by: Pawel Sikora <pluto@agmk.net> Signed-off-by: Huang Ying <ying.huang@intel.com> Tested-by: Jean Delvare <khali@linux-fr.org> Cc: stable@vger.kernel.org Signed-off-by: Len Brown <len.brown@intel.com>
f | sysfs.c | s | 18K | 609 | Pavel Vasilyev | pavel@pavlinux.ru | 1338868925 |  | ACPI sysfs.c strlen fix  Current code is ignoring the last character of "enable" and "disable" in comparisons.  https://bugzilla.kernel.org/show_bug.cgi?id=33732  Signed-off-by: Len Brown <len.brown@intel.com>
f | bus.c | s | 25K | 884 | Rafael J. Wysocki | rjw@sisk.pl | 1338319224 |  | ACPI / PM: Make __acpi_bus_get_power() cover D3cold correctly  After recent changes of the ACPI device power states definitions, if power resources are not used for the device's power management, the state returned by __acpi_bus_get_power() cannot exceed D3hot, because the return values of _PSC are 0 through 3.  However, if the _PR3 method is not present for the device and _PS3 returns 3, we have to assume that the device is in D3cold, so the value returned by __acpi_bus_get_power() in that case should be 4.  Similarly, acpi_power_get_inferred_state() should take the power resources for the D3hot state into account in general, so that it can return 3 if those resources are "on" or 4 (D3cold) otherwise.  Fix the the above two issues and make sure that if both _PSC and _PR3 are present for the device, the power resources listed by _PR3 will be used to determine if the number 3 returned by _PSC is meant to represent D3cold or D3hot.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | numa.c | s | 8.4K | 282 | Kurt Garloff | kurt@garloff.de | 1326791944 |  | ACPI: Store SRAT table revision  In SRAT v1, we had 8bit proximity domain (PXM) fields; SRAT v2 provides 32bits for these. The new fields were reserved before. According to the ACPI spec, the OS must disregrard reserved fields. In order to know whether or not, we must know what version the SRAT table has.  This patch stores the SRAT table revision for later consumption by arch specific __init functions.  Signed-off-by: Kurt Garloff <kurt@garloff.de> Signed-off-by: Len Brown <len.brown@intel.com>
f | pci_root.c | s | 17K | 570 | Matthew Garrett | mjg@redhat.com | 1323109305 |  | PCI: Rework ASPM disable code  Right now we forcibly clear ASPM state on all devices if the BIOS indicates that the feature isn't supported. Based on the Microsoft presentation "PCI Express In Depth for Windows Vista and Beyond", I'm starting to think that this may be an error. The implication is that unless the platform grants full control via _OSC, Windows will not touch any PCIe features - including ASPM. In that case clearing ASPM state would be an error unless the platform has granted us that control.  This patch reworks the ASPM disabling code such that the actual clearing of state is triggered by a successful handoff of PCIe control to the OS. The general ASPM code undergoes some changes in order to ensure that the ability to clear the bits isn't overridden by ASPM having already been disabled. Further, this theoretically now allows for situations where only a subset of PCIe roots hand over control, leaving the others in the BIOS state.  It's difficult to know for sure that this is the right thing to do - there's zero public documentation on the interaction between all of these components. But enough vendors enable ASPM on platforms and then set this bit that it seems likely that they're expecting the OS to leave them alone.  Measured to save around 5W on an idle Thinkpad X220.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
f | wakeup.c | s | 2.7K | 83 | Rafael J. Wysocki | rjw@sisk.pl | 1297471193 |  | ACPI / Wakeup: Enable button GPEs unconditionally during initialization  Commit 9630bdd (ACPI: Use GPE reference counting to support shared GPEs) introduced a suspend regression where boxes resume immediately after being suspended due to the lid or sleep button wakeup status not being cleared properly.  This happens if the GPEs corresponding to those devices are not enabled all the time, which apparently is expected by some BIOSes.  To fix this problem, enable button and lid GPEs unconditionally during initialization and keep them enabled all the time, regardless of whether or not the ACPI button driver is used.  References: https://bugzilla.kernel.org/show_bug.cgi?id=27372 Reported-and-tested-by: Ferenc Wágner <wferi@niif.hu> Cc: stable@kernel.org Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | glue.c | s | 6.0K | 226 | Matthew Garrett | mjg@redhat.com | 1336780992 |  | ACPI: Add stubs for (un)register_acpi_bus_type  It's unreasonable to have CONFIG_ACPI for these in drivers, so add some stub functions.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Lan Tianyu <tianyu.lan@intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | sleep.h | s | 239B | 5 | Stephen Hemminger | shemminger@vyatta.com | 1287510277 |  | ACPI: static sleep_states[] and acpi_gts_bfs_check  Only used in one file so should be static.  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | container.c | s | 6.9K | 231 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
