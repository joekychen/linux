d | cluster |  | 11 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1337729661 |  | 
f | Makefile | g | 74B |  | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: ramster-specific changes to zcache/tmem  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  This patch incorporates changes transforming zcache to work with a remote store.  In tmem.[ch], new "repatriate" (provoke async get) and "localify" (handle incoming data resulting from an async get) routines combine with a handful of changes to existing pamops interfaces allow the generic tmem code to support asynchronous operations.  Also, a new tmem_xhandle struct groups together key information that must be passed to remote tmem stores.  Zcache-main.c is augmented with a large amount of ramster-specific code to handle remote operations and "foreign" pages on both ends of the "remotify" protocol.  New "foreign" pools are auto-created on demand. A "selfshrinker" thread periodically repatriates remote persistent pages when local memory conditions allow.  For certain operations, a queue is necessary to guarantee strict ordering as out-of-order puts/flushes can cause strange race conditions.  Pampd pointers now either point to local memory OR describe a remote page; to allow the same 64-bits to describe either, the LSB is used to differentiate.  Some acrobatics must be performed to ensure local memory is available to handle a remote persistent get, or deal with the data directly anyway if the malloc failed.  Lots of ramster-specific statistics are available via sysfs.  Note: Some debug ifdefs left in for now. Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | tmem.c | s | 23K | 779 | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: ramster-specific changes to zcache/tmem  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  This patch incorporates changes transforming zcache to work with a remote store.  In tmem.[ch], new "repatriate" (provoke async get) and "localify" (handle incoming data resulting from an async get) routines combine with a handful of changes to existing pamops interfaces allow the generic tmem code to support asynchronous operations.  Also, a new tmem_xhandle struct groups together key information that must be passed to remote tmem stores.  Zcache-main.c is augmented with a large amount of ramster-specific code to handle remote operations and "foreign" pages on both ends of the "remotify" protocol.  New "foreign" pools are auto-created on demand. A "selfshrinker" thread periodically repatriates remote persistent pages when local memory conditions allow.  For certain operations, a queue is necessary to guarantee strict ordering as out-of-order puts/flushes can cause strange race conditions.  Pampd pointers now either point to local memory OR describe a remote page; to allow the same 64-bits to describe either, the LSB is used to differentiate.  Some acrobatics must be performed to ensure local memory is available to handle a remote persistent get, or deal with the data directly anyway if the malloc failed.  Lots of ramster-specific statistics are available via sysfs.  Note: Some debug ifdefs left in for now. Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | xvmalloc.h | s | 774B | 23 | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: xvmalloc allocation files  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  Zcache is in the process of converting allocators, from xvmalloc to zsmalloc. Further, RAMster V5 testing to date has been done only with xvmalloc. To avoid merging problems, a linux-3.2 copy of xvmalloc is incorporated by this patch.  Later patches will be able to eliminate xvmalloc and use zsmalloc.  Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | zcache-main.c | s | 91K | 3006 | Linus Torvalds | torvalds@linux-foundation.org | 1338838125 |  | 
f | xvmalloc.c | s | 12K | 421 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1337180975 |  | Revert "ramster: switch over to zsmalloc and crypto interface"  This reverts commit 49b81a3c7415d9b02169f37b8559d468fd17686a.  It causes build breakage under some configurations.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Acked-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | TODO | g | 868B |  | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: ramster-specific new files  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  This patch adds new files necessary for ramster support:  The file ramster.h declares externs and some pampd bitfield manipulation.  The file zcache.h declares some zcache functions that now must be accessed from the ramster glue code.  The file r2net.c is the glue between zcache and the messaging layer, providing routines called from zcache that initiate messages, and routines that handle messages by calling zcache. TODO explains future plans for merging.  Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | xvmalloc_int.h | s | 1.9K | 80 | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: xvmalloc allocation files  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  Zcache is in the process of converting allocators, from xvmalloc to zsmalloc. Further, RAMster V5 testing to date has been done only with xvmalloc. To avoid merging problems, a linux-3.2 copy of xvmalloc is incorporated by this patch.  Later patches will be able to eliminate xvmalloc and use zsmalloc.  Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | Kconfig | g | 643B |  | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1337180975 |  | Revert "ramster: switch over to zsmalloc and crypto interface"  This reverts commit 49b81a3c7415d9b02169f37b8559d468fd17686a.  It causes build breakage under some configurations.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Acked-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | tmem.h | s | 7.1K | 217 | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: ramster-specific changes to zcache/tmem  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  This patch incorporates changes transforming zcache to work with a remote store.  In tmem.[ch], new "repatriate" (provoke async get) and "localify" (handle incoming data resulting from an async get) routines combine with a handful of changes to existing pamops interfaces allow the generic tmem code to support asynchronous operations.  Also, a new tmem_xhandle struct groups together key information that must be passed to remote tmem stores.  Zcache-main.c is augmented with a large amount of ramster-specific code to handle remote operations and "foreign" pages on both ends of the "remotify" protocol.  New "foreign" pools are auto-created on demand. A "selfshrinker" thread periodically repatriates remote persistent pages when local memory conditions allow.  For certain operations, a queue is necessary to guarantee strict ordering as out-of-order puts/flushes can cause strange race conditions.  Pampd pointers now either point to local memory OR describe a remote page; to allow the same 64-bits to describe either, the LSB is used to differentiate.  Some acrobatics must be performed to ensure local memory is available to handle a remote persistent get, or deal with the data directly anyway if the malloc failed.  Lots of ramster-specific statistics are available via sysfs.  Note: Some debug ifdefs left in for now. Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | r2net.c | s | 10K | 352 | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: ramster-specific new files  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  This patch adds new files necessary for ramster support:  The file ramster.h declares externs and some pampd bitfield manipulation.  The file zcache.h declares some zcache functions that now must be accessed from the ramster glue code.  The file r2net.c is the glue between zcache and the messaging layer, providing routines called from zcache that initiate messages, and routines that handle messages by calling zcache. TODO explains future plans for merging.  Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | zcache.h | s | 627B | 19 | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: ramster-specific new files  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  This patch adds new files necessary for ramster support:  The file ramster.h declares externs and some pampd bitfield manipulation.  The file zcache.h declares some zcache functions that now must be accessed from the ramster glue code.  The file r2net.c is the glue between zcache and the messaging layer, providing routines called from zcache that initiate messages, and routines that handle messages by calling zcache. TODO explains future plans for merging.  Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ramster.h | s | 3.5K | 102 | Dan Magenheimer | dan.magenheimer@oracle.com | 1329325323 |  | staging: ramster: ramster-specific new files  RAMster implements peer-to-peer transcendent memory, allowing a "cluster" of kernels to dynamically pool their RAM.  This patch adds new files necessary for ramster support:  The file ramster.h declares externs and some pampd bitfield manipulation.  The file zcache.h declares some zcache functions that now must be accessed from the ramster glue code.  The file r2net.c is the glue between zcache and the messaging layer, providing routines called from zcache that initiate messages, and routines that handle messages by calling zcache. TODO explains future plans for merging.  Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
