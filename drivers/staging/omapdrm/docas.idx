f | omap_debugfs.c | s | 3.4K | 109 | Andy Gross | andy.gross@ti.com | 1331156287 |  | staging: drm/omap: Disable DMM debugfs for OMAP3  OMAP3 does not contain a DMM/Tiler block.  As such, we should not be exposing any DMM debugfs entries on OMAP3 platforms.  Added inline helper function to verify existence of DMM.  Signed-off-by: Andy Gross <andy.gross@ti.com> Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | Makefile | g | 448B |  | Rob Clark | rob@ti.com | 1334082359 |  | staging: drm/omap: dmabuf/prime support  For now just implementing the exporting APIs, not yet importing.  And kmap is rejected on tiled buffers (although the usefulness of that seems questionable, but could be added later if needed).  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | tcm-sita.c | s | 18K | 590 | Justin P. Mattock | justinmattock@gmail.com | 1334079061 |  | staging:omapdrm Fix typos in drivers:omapdrm  The below patch fixes some typos that I found while reading.  Note: I was told to hold off sending anything until *rc1 so hopefully now its alright.(wasnt sure what kernel *rc*)  Signed-off-by: Justin P. Mattock <justinmattock@gmail.com> Reviewed-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | TODO | g | 1.9K |  | Rob Clark | rob@ti.com | 1323385461 |  | drm/omap: add GEM support for tiled/dmm buffers  TILER/DMM provides two features for omapdrm GEM objects: 1) providing a physically contiguous view to discontiguous memory    for hw initiators that cannot otherwise support discontiguous    buffers (DSS scanout, IVAHD video decode/encode, etc) 2) providing untiling for 2d tiled buffers, which are used in some    cases to provide rotation and reduce memory bandwidth for hw    initiators that tend to access data in 2d block patterns.  For 2d tiled buffers, there are some additional complications when it comes to userspace mmap'ings.  For non-tiled buffers, the original (potentially physically discontiguous) pages are used to back the mmap.  For tiled buffers, we need to mmap via the tiler/dmm region to provide an unswizzled view of the buffer.  But (a) the buffer is not necessarily pinned in TILER all the time (it can be unmapped when there is no DMA access to the buffer), and (b) when they are they are pinned, they not necessarily page aligned from the perspective of the CPU.  And non-page aligned userspace buffer mapping is evil.  To solve this, we reserve one or more small regions in each of the 2d containers when the driver is loaded to use as a "user-GART" where we can create a second page-aligned mapping of parts of the buffer being accessed from userspace.  Page faulting is used to evict and remap different regions of whichever buffers are being accessed from user- space.  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | omap_gem_dmabuf.c | s | 5.9K | 188 | Rob Clark | rob@ti.com | 1337270049 |  | staging: drm/omap: initial dmabuf/prime import support  This adds support to re-import omapdrm's own buffers.  Importing buffers allocated by other drivers can be added later, but for now is not needed (we don't yet have any other exportering drivers to test with).  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_drv.c | s | 20K | 708 | Linus Torvalds | torvalds@linux-foundation.org | 1337888574 |  | Merge branch 'drm-core-next' of git://people.freedesktop.org/~airlied/linux  Pull main drm updates from Dave Airlie:  "This is the main merge window request for the drm.    It's big, but jam packed will lots of features and of course 0   regressions.  (okay maybe there'll be one).    Highlights:     - new KMS drivers for server GPU chipsets: ast, mgag200 and cirrus      (qemu only).  These drivers use the generic modesetting drivers.     - initial prime/dma-buf support for i915, nouveau, radeon, udl and      exynos     - switcheroo audio support: so GPUs with HDMI can turn off the sound      driver without crashing stuff.     - There are some patches drifting outside drivers/gpu into x86 and      EFI for better handling of multiple video adapters in Apple Macs,      they've got correct acks except one trivial fixup.     - Core: 	edid parser has better DMT and reduced blanking support, 	crtc properties, 	plane properties,     - Drivers: 	exynos: add 2D core accel support, prime support, hdmi features 	intel: more Haswell support, initial Valleyview support, more 	    hdmi infoframe fixes, update MAINTAINERS for Daniel, lots of 	    cleanups and fixes 	radeon: more HDMI audio support, improved GPU lockup recovery 	    support, remove nested mutexes, less memory copying on PCIE, fix 	    bus master enable race (kexec), improved fence handling 	gma500: cleanups, 1080p support, acpi fixes 	nouveau: better nva3 memory reclocking, kepler accel (needs 	    external firmware rip), async buffer moves on nv84+ hw.    I've some more dma-buf patches that rely on the dma-buf merge for vmap   stuff, and I've a few fixes building up, but I'd decided I'd better   get rid of the main pull sooner rather than later, so the audio guys   are also unblocked."  Fix up trivial conflict due to some duplicated changes in drivers/gpu/drm/i915/intel_ringbuffer.c  * 'drm-core-next' of git://people.freedesktop.org/~airlied/linux: (605 commits)   drm/nouveau/nvd9: Fix GPIO initialisation sequence.   drm/nouveau: Unregister switcheroo client on exit   drm/nouveau: Check dsm on switcheroo unregister   drm/nouveau: fix a minor annoyance in an output string   drm/nouveau: turn a BUG into a WARN   drm/nv50: decode PGRAPH DATA_ERROR = 0x24   drm/nouveau/disp: fix dithering not being enabled on some eDP macbooks   drm/nvd9/copy: initialise copy engine, seems to work like nvc0   drm/nvc0/ttm: use copy engines for async buffer moves   drm/nva3/ttm: use copy engine for async buffer moves   drm/nv98/ttm: add in a (disabled) crypto engine buffer copy method   drm/nv84/ttm: use crypto engine for async buffer copies   drm/nouveau/ttm: untangle code to support accelerated buffer moves   drm/nouveau/fbcon: use fence for sync, rather than notifier   drm/nv98/crypt: non-stub implementation of the engine hooks   drm/nouveau/fifo: turn all fifo modules into engine modules   drm/nv50/graph: remove ability to do interrupt-driven context switching   drm/nv50: remove manual context unload on context destruction   drm/nv50: remove execution engine context saves on suspend   drm/nv50/fifo: use hardware channel kickoff functionality   ...
f | omap_gem.c | s | 37K | 1215 | Rob Clark | rob@ti.com | 1337270048 |  | staging: drm/omap: dmabuf/prime mmap support  Add support for mmap'ing buffers via dmabuf.  For handling mmap of cached buffers correctly, fault handling and PTE shootdown are used to track dirty pages and automagically handle cache flushes before dma access to the buffer.  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_connector.c | s | 10K | 302 | Rob Clark | rob@ti.com | 1322358210 |  | staging: add omapdrm DRM/KMS driver for TI OMAP platforms  A DRM display driver for TI OMAP platform.  Similar to omapfb (fbdev) and omap_vout (v4l2 display) drivers in the past, this driver uses the DSS2 driver to access the display hardware, including support for HDMI, DVI, and various types of LCD panels.  And it implements GEM support for buffer allocation (for KMS as well as offscreen buffers used by the xf86-video-omap userspace xorg driver).  The driver maps CRTCs to overlays, encoders to overlay-managers, and connectors to dssdev's.  Note that this arrangement might change slightly when support for drm_plane overlays is added.  For GEM support, non-scanout buffers are using the shmem backed pages provided by GEM core (In drm_gem_object_init()).  In the case of scanout buffers, which need to be physically contiguous, those are allocated with CMA and use drm_gem_private_object_init().  See userspace xorg driver: git://github.com/robclark/xf86-video-omap.git  Refer to this link for CMA (Continuous Memory Allocator): http://lkml.org/lkml/2011/8/19/302  Links to previous versions of the patch: v1: http://lwn.net/Articles/458137/ v2: http://patches.linaro.org/4156/ v3: http://patches.linaro.org/4688/ v4: http://patches.linaro.org/4791/  History:  v5: move headers from include/drm at Greg KH's request, minor rebasing     on 3.2-rc1, pull in private copies of drm_gem_{get,put}_pages()     because "drm/gem: add functions to get/put pages" patch is not     merged yet v4: bit of rework of encoder/connector _dpms() code, modeset_init()     rework to not use nested functions, update TODO.txt v3: minor cleanups, improved error handling for dev_load(), some minor     API changes that will be needed later for tiled buffer support v2: replace omap_vram with CMA for scanout buffer allocation, remove     unneeded functions, use dma_addr_t for physical addresses, error     handling cleanup, refactor attach/detach pages into common drm     functions, split non-userspace-facing API into omap_priv.h, remove     plugin API  v1: original  Signed-off-by: Rob Clark <rob@ti.com> Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | omap_dmm_tiler.h | s | 3.5K | 114 | Andy Gross | andy.gross@ti.com | 1331156288 |  | staging: drm/omap: Get DMM resources from hwmod  This patch splits the DMM off into a separate sub-device, in order to utilize the platform device information that was created as part of the OMAP hwmod entry for the DMM.  The driver probe function queries the iomem resource and IRQ using standard platform_get functions.  The OMAP DRM driver now calls the platform_driver_register() function for the subordinate DMM driver inside its probe function.  This guarantees the required order for the DMM and ensures the DMM resources are available for use by the DRM driver.  Signed-off-by: Andy Gross <andy.gross@ti.com> Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_dmm_priv.h | s | 4.7K | 156 | Rob Clark | rob@ti.com | 1323736673 |  | staging: drm/omap: DMM based hardware scrolling console  Add support for YWRAP scrolling by shuffling pages around in DMM instead of sw blits.  Note that fbcon only utilizes this mode if the y resolution is divided evenly by the font height.  So, for example, a 1920x1080 display using a 16 pixel tall font will not utilize this, but a 1280x1024 display would.  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | omap_priv.h | s | 1.7K | 47 | Rob Clark | rob@ti.com | 1328739251 |  | staging: drm/omap: add drm_plane support  Because framebuffer layer and overlay scanout video pipes are basically thing in OMAP display subsystem (the only difference being that the first video pipe does not support scaling or YUV formats), much of the CRTC code is pulled into the plane implementation, and a private plane object is used by the CRTC object.  This avoids code duplication between the plane and CRTC.  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | tcm.h | s | 10.0K | 292 | Andy Gross | andy.gross@ti.com | 1323385434 |  | drm/omap: DMM/TILER support for OMAP4+ platform  Dynamic Memory Manager (DMM) is a hardware block in the OMAP4+ processor that contains at least one TILER instance.  TILER, or Tiling and Isometric Lightweight Engine for Rotation, provides IOMMU capabilities through the use of a physical address translation table.  The TILER also provides zero cost rotation and mirroring.  The TILER provides both 1D and 2D access by providing different views or address ranges that can be used to access the physical memory that has been mapped in through the PAT.  Access to the 1D view results in linear access to the underlying memory.  Access to the 2D views result in tiled access to the underlying memory resulted in increased efficiency.  The TILER address space is managed by a tiler container manager (TCM) and allocates the address space through the use of the Simple Tiler Allocation algorithm (SiTA).  The purpose of the algorithm is to keep fragmentation of the address space as low as possible.  Signed-off-by: Andy Gross <andy.gross@ti.com> Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | omap_drv.h | s | 7.3K | 174 | Rob Clark | rob@ti.com | 1337270049 |  | staging: drm/omap: initial dmabuf/prime import support  This adds support to re-import omapdrm's own buffers.  Importing buffers allocated by other drivers can be added later, but for now is not needed (we don't yet have any other exportering drivers to test with).  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_drm.h | s | 4.1K | 106 | Andy Gross | andy.gross@ti.com | 1323385434 |  | drm/omap: DMM/TILER support for OMAP4+ platform  Dynamic Memory Manager (DMM) is a hardware block in the OMAP4+ processor that contains at least one TILER instance.  TILER, or Tiling and Isometric Lightweight Engine for Rotation, provides IOMMU capabilities through the use of a physical address translation table.  The TILER also provides zero cost rotation and mirroring.  The TILER provides both 1D and 2D access by providing different views or address ranges that can be used to access the physical memory that has been mapped in through the PAT.  Access to the 1D view results in linear access to the underlying memory.  Access to the 2D views result in tiled access to the underlying memory resulted in increased efficiency.  The TILER address space is managed by a tiler container manager (TCM) and allocates the address space through the use of the Simple Tiler Allocation algorithm (SiTA).  The purpose of the algorithm is to keep fragmentation of the address space as low as possible.  Signed-off-by: Andy Gross <andy.gross@ti.com> Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | omap_dmm_tiler.c | s | 21K | 713 | Rob Clark | rob@ti.com | 1334076390 |  | staging: omap/drm: dmm should return proper errors  Minor error path clean-up.  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_plane.c | s | 12K | 402 | Rob Clark | rob@ti.com | 1331678684 |  | staging: drm/omap: send page-flip event after endwin  The endwin irq indicates that DSS has finished scanning out a buffer. Use this to trigger page-flip event to userspace, so this happens only *after* the previous buffer is finished.  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_crtc.c | s | 6.4K | 199 | Laurent Pinchart | laurent.pinchart@ideasonboard.com | 1337679315 |  | drm: Make the CRTC gamma_set operation optional  Drivers for hardware without gamma support should not be forced to implement a no-op gamma set operation.  Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com> Cc: Rob Clark <rob.clark@linaro.org> Signed-off-by: Dave Airlie <airlied@redhat.com>
f | omap_fb.c | s | 11K | 338 | Rob Clark | rob@ti.com | 1337270048 |  | staging: drm/omap: dmabuf/prime mmap support  Add support for mmap'ing buffers via dmabuf.  For handling mmap of cached buffers correctly, fault handling and PTE shootdown are used to track dirty pages and automagically handle cache flushes before dma access to the buffer.  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_fbdev.c | s | 10K | 326 | Andy Gross | andy.gross@ti.com | 1339429329 |  | staging: omapdrm: fix crash when freeing bad fb  During unload, don't cleanup the framebuffer if it is not valid.  Signed-off-by: Andy Gross <andy.gross@ti.com> Reviewed-by: Rob Clark <rob.clark@linaro.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_gem_helpers.c | s | 4.4K | 141 | Thomas Meyer | thomas@m3y3r.de | 1328809294 |  | staging: drm/omap: Use ERR_CAST inlined function instead of ERR_PTR(PTR_ERR(..  The semantic patch that makes this change is available in scripts/coccinelle/api/err_cast.cocci.  More information about semantic patching is available at http://coccinelle.lip6.fr/  Signed-off-by: Thomas Meyer <thomas@m3y3r.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | omap_encoder.c | s | 4.5K | 142 | Rob Clark | rob@ti.com | 1323736672 |  | staging: drm/omap: crtc/encoder/fb destroy cleanups  Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | Kconfig | g | 582B |  | Rob Clark | rob@ti.com | 1322358210 |  | staging: add omapdrm DRM/KMS driver for TI OMAP platforms  A DRM display driver for TI OMAP platform.  Similar to omapfb (fbdev) and omap_vout (v4l2 display) drivers in the past, this driver uses the DSS2 driver to access the display hardware, including support for HDMI, DVI, and various types of LCD panels.  And it implements GEM support for buffer allocation (for KMS as well as offscreen buffers used by the xf86-video-omap userspace xorg driver).  The driver maps CRTCs to overlays, encoders to overlay-managers, and connectors to dssdev's.  Note that this arrangement might change slightly when support for drm_plane overlays is added.  For GEM support, non-scanout buffers are using the shmem backed pages provided by GEM core (In drm_gem_object_init()).  In the case of scanout buffers, which need to be physically contiguous, those are allocated with CMA and use drm_gem_private_object_init().  See userspace xorg driver: git://github.com/robclark/xf86-video-omap.git  Refer to this link for CMA (Continuous Memory Allocator): http://lkml.org/lkml/2011/8/19/302  Links to previous versions of the patch: v1: http://lwn.net/Articles/458137/ v2: http://patches.linaro.org/4156/ v3: http://patches.linaro.org/4688/ v4: http://patches.linaro.org/4791/  History:  v5: move headers from include/drm at Greg KH's request, minor rebasing     on 3.2-rc1, pull in private copies of drm_gem_{get,put}_pages()     because "drm/gem: add functions to get/put pages" patch is not     merged yet v4: bit of rework of encoder/connector _dpms() code, modeset_init()     rework to not use nested functions, update TODO.txt v3: minor cleanups, improved error handling for dev_load(), some minor     API changes that will be needed later for tiled buffer support v2: replace omap_vram with CMA for scanout buffer allocation, remove     unneeded functions, use dma_addr_t for physical addresses, error     handling cleanup, refactor attach/detach pages into common drm     functions, split non-userspace-facing API into omap_priv.h, remove     plugin API  v1: original  Signed-off-by: Rob Clark <rob@ti.com> Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | tcm-sita.h | s | 2.9K | 85 | Andy Gross | andy.gross@ti.com | 1323385434 |  | drm/omap: DMM/TILER support for OMAP4+ platform  Dynamic Memory Manager (DMM) is a hardware block in the OMAP4+ processor that contains at least one TILER instance.  TILER, or Tiling and Isometric Lightweight Engine for Rotation, provides IOMMU capabilities through the use of a physical address translation table.  The TILER also provides zero cost rotation and mirroring.  The TILER provides both 1D and 2D access by providing different views or address ranges that can be used to access the physical memory that has been mapped in through the PAT.  Access to the 1D view results in linear access to the underlying memory.  Access to the 2D views result in tiled access to the underlying memory resulted in increased efficiency.  The TILER address space is managed by a tiler container manager (TCM) and allocates the address space through the use of the Simple Tiler Allocation algorithm (SiTA).  The purpose of the algorithm is to keep fragmentation of the address space as low as possible.  Signed-off-by: Andy Gross <andy.gross@ti.com> Signed-off-by: Rob Clark <rob@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
