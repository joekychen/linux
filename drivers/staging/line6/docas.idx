f | driver.c | s | 30K | 1100 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335222799 |  | Staging: line6: use module_usb_driver()  Now that our module_init/exit path is just registering and unregistering the usb driver, we can use module_usb_driver() instead.  This also has the nice side affect of removing the unneeded printk for the module version number.  CC: Markus Grabner <grabner@icg.tugraz.at> CC: Stefan Hajnoczi <stefanha@gmail.com> CC: Julia Lawall <julia@diku.dk> CC: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | variax.h | s | 2.3K | 110 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | dumprequest.c | s | 2.9K | 120 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | Makefile | g | 231B |  | Stefan Hajnoczi | stefanha@gmail.com | 1322352851 |  | staging: line6: add Pod HD300 support  The Pod HD device family uses new MIDI SysEx messages and therefore cannot reuse the existing Pod code.  Instead of hardcoding Pod HD MIDI messages into the driver, leave MIDI up to userspace.  This driver simply presents MIDI and pcm ALSA devices.  This device is similar to the Pod except that it has 48 kHz audio and does not respond to Pod SysEx messages.  Signed-off-by: Stefan Hajnoczi <stefanha@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | usbdefs.h | s | 3.0K | 95 | Markus Grabner | grabner@icg.tugraz.at | 1328807675 |  | staging: line6: separate handling of buffer allocation and stream startup  There are several features of the Line6 USB driver which require PCM data to be exchanged with the device: *) PCM playback and capture via ALSA *) software monitoring (for devices without hardware monitoring) *) optional impulse response measurement However, from the device's point of view, there is just a single capture and playback stream, which must be shared between these subsystems. It is therefore necessary to maintain the state of the subsystems with respect to PCM usage. We define several constants of the form LINE6_BIT_PCM_<subsystem>_<direction>_<resource> with the following meanings: *) <subsystem> is one of -) ALSA: PCM playback and capture via ALSA -) MONITOR: software monitoring -) IMPULSE: optional impulse response measurement *) <direction> is one of -) PLAYBACK: audio output (from host to device) -) CAPTURE: audio input (from device to host) *) <resource> is one of -) BUFFER: buffer required by PCM data stream -) STREAM: actual PCM data stream  The subsystems call line6_pcm_acquire() to acquire the (shared) resources needed for a particular operation (e.g., allocate the buffer for ALSA playback or start the capture stream for software monitoring). When a resource is no longer needed, it is released by calling line6_pcm_release(). Buffer allocation and stream startup are handled separately to allow the ALSA kernel driver to perform them at appropriate places (since the callback which starts a PCM stream is not allowed to sleep).  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | variax.c | s | 18K | 612 | Stefan Hajnoczi | stefanha@gmail.com | 1323487569 |  | staging: line6: eliminate useless NULL checks  The line6 driver checks struct field addresses for NULL where it does not make sense to do so.  The struct has already been checked for NULL and there is no value in checking the first field's address too.  Suggested-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Stefan Hajnoczi <stefanha@gmail.com> Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | control.c | s | 43K | 971 | Greg Kroah-Hartman | gregkh@suse.de | 1290108440 |  | Staging: line6: fix up my fixup for some sysfs attribute permissions  They should be writable by root, not readable. Doh, stupid me with the wrong flags.  Reported-by: Jonathan Cameron <jic23@cam.ac.uk> Cc: Markus Grabner <grabner@icg.tugraz.at> Cc: Mariusz Kozlowski <m.kozlowski@tuxland.pl> Cc: stable <stable@kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | toneport.h | s | 1009B | 42 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | pcm.h | s | 9.4K | 322 | Markus Grabner | grabner@icg.tugraz.at | 1328807675 |  | staging: line6: separate handling of buffer allocation and stream startup  There are several features of the Line6 USB driver which require PCM data to be exchanged with the device: *) PCM playback and capture via ALSA *) software monitoring (for devices without hardware monitoring) *) optional impulse response measurement However, from the device's point of view, there is just a single capture and playback stream, which must be shared between these subsystems. It is therefore necessary to maintain the state of the subsystems with respect to PCM usage. We define several constants of the form LINE6_BIT_PCM_<subsystem>_<direction>_<resource> with the following meanings: *) <subsystem> is one of -) ALSA: PCM playback and capture via ALSA -) MONITOR: software monitoring -) IMPULSE: optional impulse response measurement *) <direction> is one of -) PLAYBACK: audio output (from host to device) -) CAPTURE: audio input (from device to host) *) <resource> is one of -) BUFFER: buffer required by PCM data stream -) STREAM: actual PCM data stream  The subsystems call line6_pcm_acquire() to acquire the (shared) resources needed for a particular operation (e.g., allocate the buffer for ALSA playback or start the capture stream for software monitoring). When a resource is no longer needed, it is released by calling line6_pcm_release(). Buffer allocation and stream startup are handled separately to allow the ALSA kernel driver to perform them at appropriate places (since the callback which starts a PCM stream is not allowed to sleep).  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | podhd.c | s | 3.4K | 133 | Stefan Hajnoczi | stefanha@gmail.com | 1323487569 |  | staging: line6: eliminate useless NULL checks  The line6 driver checks struct field addresses for NULL where it does not make sense to do so.  The struct has already been checked for NULL and there is no value in checking the first field's address too.  Suggested-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Stefan Hajnoczi <stefanha@gmail.com> Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | pod.c | s | 36K | 1170 | Stefan Hajnoczi | stefanha@gmail.com | 1323487569 |  | staging: line6: eliminate useless NULL checks  The line6 driver checks struct field addresses for NULL where it does not make sense to do so.  The struct has already been checked for NULL and there is no value in checking the first field's address too.  Suggested-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Stefan Hajnoczi <stefanha@gmail.com> Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | midibuf.h | s | 1.2K | 34 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | toneport.c | s | 11K | 383 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1334966012 |  | USB: toneport.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Markus Grabner <grabner@icg.tugraz.at> CC: Stefan Hajnoczi <stefanha@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | capture.h | s | 1.2K | 29 | Markus Grabner | grabner@icg.tugraz.at | 1328807675 |  | staging: line6: separate handling of buffer allocation and stream startup  There are several features of the Line6 USB driver which require PCM data to be exchanged with the device: *) PCM playback and capture via ALSA *) software monitoring (for devices without hardware monitoring) *) optional impulse response measurement However, from the device's point of view, there is just a single capture and playback stream, which must be shared between these subsystems. It is therefore necessary to maintain the state of the subsystems with respect to PCM usage. We define several constants of the form LINE6_BIT_PCM_<subsystem>_<direction>_<resource> with the following meanings: *) <subsystem> is one of -) ALSA: PCM playback and capture via ALSA -) MONITOR: software monitoring -) IMPULSE: optional impulse response measurement *) <direction> is one of -) PLAYBACK: audio output (from host to device) -) CAPTURE: audio input (from device to host) *) <resource> is one of -) BUFFER: buffer required by PCM data stream -) STREAM: actual PCM data stream  The subsystems call line6_pcm_acquire() to acquire the (shared) resources needed for a particular operation (e.g., allocate the buffer for ALSA playback or start the capture stream for software monitoring). When a resource is no longer needed, it is released by calling line6_pcm_release(). Buffer allocation and stream startup are handled separately to allow the ALSA kernel driver to perform them at appropriate places (since the callback which starts a PCM stream is not allowed to sleep).  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | capture.c | s | 10K | 362 | Markus Grabner | grabner@icg.tugraz.at | 1328807675 |  | staging: line6: separate handling of buffer allocation and stream startup  There are several features of the Line6 USB driver which require PCM data to be exchanged with the device: *) PCM playback and capture via ALSA *) software monitoring (for devices without hardware monitoring) *) optional impulse response measurement However, from the device's point of view, there is just a single capture and playback stream, which must be shared between these subsystems. It is therefore necessary to maintain the state of the subsystems with respect to PCM usage. We define several constants of the form LINE6_BIT_PCM_<subsystem>_<direction>_<resource> with the following meanings: *) <subsystem> is one of -) ALSA: PCM playback and capture via ALSA -) MONITOR: software monitoring -) IMPULSE: optional impulse response measurement *) <direction> is one of -) PLAYBACK: audio output (from host to device) -) CAPTURE: audio input (from device to host) *) <resource> is one of -) BUFFER: buffer required by PCM data stream -) STREAM: actual PCM data stream  The subsystems call line6_pcm_acquire() to acquire the (shared) resources needed for a particular operation (e.g., allocate the buffer for ALSA playback or start the capture stream for software monitoring). When a resource is no longer needed, it is released by calling line6_pcm_release(). Buffer allocation and stream startup are handled separately to allow the ALSA kernel driver to perform them at appropriate places (since the callback which starts a PCM stream is not allowed to sleep).  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | audio.c | s | 1.5K | 61 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103928 |  | staging: Add export.h for THIS_MODULE/EXPORT_SYMBOL to drivers/staging users.  Lots of drivers have in the past expected the presence of basic things like THIS_MODULE and EXPORT_SYMBOL.  With the header cleanup, they wont have these.  Call out the include explicitly.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | driver.h | s | 5.3K | 197 | Markus Grabner | grabner@icg.tugraz.at | 1323376429 |  | staging/line6: refactor device information and add POD HD 500  This patch refactors the device information code and adds preliminary support for the POD HD 500 device.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | dumprequest.h | s | 2.0K | 66 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | revision.h | s | 98B | 4 | Markus Grabner | grabner@icg.tugraz.at | 1323487569 |  | staging: line6: fixed ALSA/PCM interaction  The PCM subsystem in the Line6 driver is mainly used for PCM playback and capture by ALSA, but also has other tasks, most notably providing a low-latency software monitor for devices which don't support hardware monitoring (e.g., the TonePort series). This patch makes ALSA "play nicely" with the other components, i.e., prevents it from resetting the isochronous USB transfer while other PCM tasks (software monitoring) are running.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | midibuf.c | s | 5.6K | 216 | Johannes Thumshirn | morbidrsa@googlemail.com | 1336596488 |  | staging: line6/midibuf.c changed printk(KERN_DEBUG, ... to pr_debug(  Changed printk(KERN_DEBUG, ...) call to pr_debug call in function void line6_midibuf_status(struct MidiBuffer *this)  Signed-off-by: Johannes Thumshirn <morbidrsa@googlemail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | midi.h | s | 1.5K | 65 | Andor Daam | andor.daam@googlemail.com | 1323376375 |  | Staging: line6/midi.c: Fixed call of obsolete function strict_strtoul  The obsolete function strict_strtoul should be replaced by the kstrto* functions.  In this context kstrtou16 should be use, as midi_mask_receive is only used as unsigned short. All corresponding datatypes were adapted accordingly.  Signed-off-by: Andor Daam <andor.daam@googlemail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | playback.c | s | 14K | 493 | Markus Grabner | grabner@icg.tugraz.at | 1328807675 |  | staging: line6: separate handling of buffer allocation and stream startup  There are several features of the Line6 USB driver which require PCM data to be exchanged with the device: *) PCM playback and capture via ALSA *) software monitoring (for devices without hardware monitoring) *) optional impulse response measurement However, from the device's point of view, there is just a single capture and playback stream, which must be shared between these subsystems. It is therefore necessary to maintain the state of the subsystems with respect to PCM usage. We define several constants of the form LINE6_BIT_PCM_<subsystem>_<direction>_<resource> with the following meanings: *) <subsystem> is one of -) ALSA: PCM playback and capture via ALSA -) MONITOR: software monitoring -) IMPULSE: optional impulse response measurement *) <direction> is one of -) PLAYBACK: audio output (from host to device) -) CAPTURE: audio input (from device to host) *) <resource> is one of -) BUFFER: buffer required by PCM data stream -) STREAM: actual PCM data stream  The subsystems call line6_pcm_acquire() to acquire the (shared) resources needed for a particular operation (e.g., allocate the buffer for ALSA playback or start the capture stream for software monitoring). When a resource is no longer needed, it is released by calling line6_pcm_release(). Buffer allocation and stream startup are handled separately to allow the ALSA kernel driver to perform them at appropriate places (since the callback which starts a PCM stream is not allowed to sleep).  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | control.h | s | 10.0K | 185 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | Kconfig | g | 2.3K |  | Markus Grabner | grabner@icg.tugraz.at | 1283293695 |  | staging: line6: sync with upstream  Big upstream sync.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | midi.c | s | 10K | 366 | Johannes Thumshirn | morbidrsa@googlemail.com | 1336596541 |  | staging: line6/midi.c: Added space between switch and open parenthesis  Added space between switch and open parenthesis to make checkpatch.pl happy  Signed-off-by: Johannes Thumshirn <morbidrsa@googlemail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | playback.h | s | 1.5K | 34 | Markus Grabner | grabner@icg.tugraz.at | 1328807675 |  | staging: line6: separate handling of buffer allocation and stream startup  There are several features of the Line6 USB driver which require PCM data to be exchanged with the device: *) PCM playback and capture via ALSA *) software monitoring (for devices without hardware monitoring) *) optional impulse response measurement However, from the device's point of view, there is just a single capture and playback stream, which must be shared between these subsystems. It is therefore necessary to maintain the state of the subsystems with respect to PCM usage. We define several constants of the form LINE6_BIT_PCM_<subsystem>_<direction>_<resource> with the following meanings: *) <subsystem> is one of -) ALSA: PCM playback and capture via ALSA -) MONITOR: software monitoring -) IMPULSE: optional impulse response measurement *) <direction> is one of -) PLAYBACK: audio output (from host to device) -) CAPTURE: audio input (from device to host) *) <resource> is one of -) BUFFER: buffer required by PCM data stream -) STREAM: actual PCM data stream  The subsystems call line6_pcm_acquire() to acquire the (shared) resources needed for a particular operation (e.g., allocate the buffer for ALSA playback or start the capture stream for software monitoring). When a resource is no longer needed, it is released by calling line6_pcm_release(). Buffer allocation and stream startup are handled separately to allow the ALSA kernel driver to perform them at appropriate places (since the callback which starts a PCM stream is not allowed to sleep).  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | pod.h | s | 3.5K | 170 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | podhd.h | s | 638B | 24 | Stefan Hajnoczi | stefanha@gmail.com | 1322352851 |  | staging: line6: add Pod HD300 support  The Pod HD device family uses new MIDI SysEx messages and therefore cannot reuse the existing Pod code.  Instead of hardcoding Pod HD MIDI messages into the driver, leave MIDI up to userspace.  This driver simply presents MIDI and pcm ALSA devices.  This device is similar to the Pod except that it has 48 kHz audio and does not respond to Pod SysEx messages.  Signed-off-by: Stefan Hajnoczi <stefanha@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | pcm.c | s | 13K | 464 | Johannes Thumshirn | morbidrsa@googlemail.com | 1336596580 |  | staging: line6/pcm.c: Removed trailing whitespace  Removed a line of only whitespace  Signed-off-by: Johannes Thumshirn <morbidrsa@googlemail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | audio.h | s | 526B | 17 | Markus Grabner | grabner@icg.tugraz.at | 1283293696 |  | Staging: line6: another upstream sync  Everything should be in sync now.  Signed-off-by: Markus Grabner <grabner@icg.tugraz.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
