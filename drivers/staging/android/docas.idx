f | Makefile | g | 388B |  | Linus Torvalds | torvalds@linux-foundation.org | 1337729661 |  | 
f | TODO | g | 337B |  | Justin P. Mattock | justinmattock@gmail.com | 1328748470 |  | drivers:staging:android Typos: fix some comments that have typos in them.  Below is a patch that fixes some typos in some comments.  Signed-off-by: Justin P. Mattock <justinmattock@gmail.com> Cc: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | timed_gpio.c | s | 4.3K | 145 | Axel Lin | axel.lin@gmail.com | 1334076509 |  | Staging: android: timed_gpio: Fix resource leak in timed_gpio_probe error paths  If gpio_request fails, we need to free all allocated resources. Current code uses wrong array index to access gpio_data array. So current code actually frees gpio_data[i].gpio by j times.  This patch moves the error handling code to err_out and thus improves readability.  Signed-off-by: Axel Lin <axel.lin@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ashmem.h | s | 1.4K | 38 | Robert Love | rlove@google.com | 1324503508 |  | ashmem: Anonymous shared memory subsystem  The anonymous shared memory (ashmem) subsystem provides a Unix-y,file-based shared memory interface to user-space. It works like anonymous memory (e.g. mmapping fd=0) except if you share the file descriptor via the usual means, you will share the mapping. The shared memory can be accessed via both mmap or file I/O. The backing store is a simple shmem file.  Additionally, ashmem introduces the concept of page pinning. Pinned pages (the default) behave like any anonymous memory. Unpinned pages are available to the kernel for eviction during VM pressure. When repinning the pages, the return value instructs user-space as to any eviction. In this manner, user-space processes may implement caching and similar resource management that efficiently integrates with kernel memory management.  Signed-off-by: Robert Love <rlove@google.com>  ashmem: Don't install fault handler for private mmaps.  Ashmem is used to create named private heaps. If this heap is backed by a tmpfs file it will allocate two pages for every page touched. In 2.6.27, the extra page would later be freed, but 2.6.29 does not scan anonymous pages when running without swap so the memory is not freed while the file is referenced. This change changes the behavior of private ashmem mmaps to match /dev/zero instead tmpfs.  Signed-off-by: Arve Hjønnevåg <arve@android.com>  ashmem: Add common prefix to name reported in /proc/pid/maps  Signed-off-by: Arve Hjønnevåg <arve@android.com>  ashmem: don't require a page aligned size  This makes ashmem more similar to shmem and mmap, by not requiring the specified size to be page aligned, instead rounding it internally as needed.  Signed-off-by: Marco Nelissen <marcone@android.com> [jstultz: Improved commit subject and included patch description from rlove. Also moved ashmem files to staging dir, and reworked code to avoid touching mm/shmem.c while we're in staging.] CC: Brian Swetland <swetland@google.com> CC: Colin Cross <ccross@android.com> CC: Arve Hjønnevåg <arve@android.com> CC: Dima Zavin <dima@android.com> CC: Robert Love <rlove@google.com> Signed-off-by: John Stultz <john.stultz@linaro.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | alarm-dev.c | s | 9.5K | 326 | John Stultz | john.stultz@linaro.org | 1335290505 |  | staging: android-alarm: Switch from wakelocks to wakeup sources  In their current AOSP tree, the Android in-kernel wakelock infrastructure has been reimplemented in terms of wakeup sources: http://git.linaro.org/gitweb?p=people/jstultz/android.git;a=commitdiff;h=e9911f4efdc55af703b8b3bb8c839e6f5dd173bb  The Android alarm driver currently has stubbed out calls to wakelock functionality. So this patch simply converts the stubbed out wakelock calls to wakeup source calls, and removes the empty wakelock macros  Greg, would you mind queuing this in staging-next?  CC: Colin Cross <ccross@android.com> CC: Arve Hjønnevåg <arve@android.com> CC: Greg KH <gregkh@linuxfoundation.org> CC: Android Kernel Team <kernel-team@android.com> Signed-off-by: John Stultz <john.stultz@linaro.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ashmem.c | s | 18K | 623 | Hugh Dickins | hughd@google.com | 1338333742 |  | mm/fs: route MADV_REMOVE to FALLOC_FL_PUNCH_HOLE  Now tmpfs supports hole-punching via fallocate(), switch madvise_remove() to use do_fallocate() instead of vmtruncate_range(): which extends madvise(,,MADV_REMOVE) support from tmpfs to ext4, ocfs2 and xfs.  There is one more user of vmtruncate_range() in our tree, staging/android's ashmem_shrink(): convert it to use do_fallocate() too (but if its unpinned areas are already unmapped - I don't know - then it would do better to use shmem_truncate_range() directly).  Based-on-patch-by: Cong Wang <amwang@redhat.com> Signed-off-by: Hugh Dickins <hughd@google.com> Cc: Christoph Hellwig <hch@infradead.org> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Colin Cross <ccross@android.com> Cc: John Stultz <john.stultz@linaro.org> Cc: Greg Kroah-Hartman <gregkh@linux-foundation.org> Cc: "Theodore Ts'o" <tytso@mit.edu> Cc: Andreas Dilger <adilger@dilger.ca> Cc: Mark Fasheh <mfasheh@suse.de> Cc: Joel Becker <jlbec@evilplan.org> Cc: Dave Chinner <david@fromorbit.com> Cc: Ben Myers <bpm@sgi.com> Cc: Michael Kerrisk <mtk.manpages@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ram_console.c | s | 4.1K | 149 | Anton Vorontsov | anton.vorontsov@linaro.org | 1337269800 |  | staging: android: persistent_ram: Move to fs/pstore/ram_core.c  This is a first step for adding ECC support for pstore RAM backend: we will use the persistent_ram routines, kindly provided by Google.  Basically, persistent_ram is a set of helper routines to deal with the [optionally] ECC-protected persistent ram regions.  A bit of Makefile, Kconfig and header files adjustments were needed because of the move.  Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org> Acked-by: Kees Cook <keescook@chromium.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ram_console.h | s | 728B | 19 | Colin Cross | ccross@android.com | 1322655817 |  | staging: android: ram_console: pass in a boot info string  Allow the board file to pass a boot info string through the platform data that is appended to the /proc/last_kmsg file.  [moved the .h file to drivers/staging/android/ to be self-contained - gregkh]  Signed-off-by: Colin Cross <ccross@android.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | Kconfig | g | 1.3K |  | Linus Torvalds | torvalds@linux-foundation.org | 1337729661 |  | 
f | logger.c | s | 15K | 556 | Tim Bird | tim.bird@am.sony.com | 1336690021 |  | staging: android: logger: Fix some sparse and whitespace issues  Fix a few sparse warnings, and improve whitespace.  Cc: Brian Swetland <swetland@google.com> Signed-off-by: Tim Bird <tim.bird@am.sony.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | binder.c | s | 99K | 3282 | Linus Torvalds | torvalds@linux-foundation.org | 1333069943 |  | Merge branch 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x32 support for x86-64 from Ingo Molnar:  "This tree introduces the X32 binary format and execution mode for x86:   32-bit data space binaries using 64-bit instructions and 64-bit kernel   syscalls.    This allows applications whose working set fits into a 32 bits address   space to make use of 64-bit instructions while using a 32-bit address   space with shorter pointers, more compressed data structures, etc."  Fix up trivial context conflicts in arch/x86/{Kconfig,vdso/vma.c}  * 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (71 commits)   x32: Fix alignment fail in struct compat_siginfo   x32: Fix stupid ia32/x32 inversion in the siginfo format   x32: Add ptrace for x32   x32: Switch to a 64-bit clock_t   x32: Provide separate is_ia32_task() and is_x32_task() predicates   x86, mtrr: Use explicit sizing and padding for the 64-bit ioctls   x86/x32: Fix the binutils auto-detect   x32: Warn and disable rather than error if binutils too old   x32: Only clear TIF_X32 flag once   x32: Make sure TS_COMPAT is cleared for x32 tasks   fs: Remove missed ->fds_bits from cessation use of fd_set structs internally   fs: Fix close_on_exec pointer in alloc_fdtable   x32: Drop non-__vdso weak symbols from the x32 VDSO   x32: Fix coding style violations in the x32 VDSO code   x32: Add x32 VDSO support   x32: Allow x32 to be configured   x32: If configured, add x32 system calls to system call tables   x32: Handle process creation   x32: Signal-related system calls   x86: Add #ifdef CONFIG_COMPAT to <asm/sys_ia32.h>   ...
f | timed_output.c | s | 3.0K | 99 | Kim, Milo | Milo.Kim@ti.com | 1335749795 |  | staging: android: timed_output : disable the timed output device when the device is unregistered  (Life cycle of timed output device driver)  1) register the device as the timed output 2) enable() ops is called via the sysfs    timeout > 0 : timer is activated and device is turned on    timeout = 0 : timer is cancelled and device is off 3) unregister the timed output device if not used any more  So the registered device should be disabled explicitly when the module is removed. ('disabled' means the timer is stopped and the device is turned off)  Rather than implementing that code in each driver, just call enable() with timeout = 0 to clean up the driver.  Signed-off-by: Milo(Woogyom) Kim <milo.kim@ti.com> Cc: Mike Lockwood <lockwood@android.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | binder.h | s | 8.9K | 283 | Emil Goode | emilgoode@gmail.com | 1335290506 |  | staging: android: binder: fix sparse warnings  Fix sparse warnings by adding __user annotation to stucts.  This patch fixes the the following sparse warnings:  drivers/staging/android/binder.c:1343:76: warning: 	incorrect type in argument 2 (different address spaces) 	drivers/staging/android/binder.c:1343:76: 	expected void [noderef] <asn:1>*ptr 	drivers/staging/android/binder.c:1343:76: got void *binder drivers/staging/android/binder.c:1567:57: warning: 	incorrect type in argument 2 (different address spaces) 	drivers/staging/android/binder.c:1567:57: 	expected void const [noderef] <asn:1>*from 	drivers/staging/android/binder.c:1567:57: 	got void const *buffer drivers/staging/android/binder.c:1573:46: warning: 	incorrect type in argument 2 (different address spaces) 	drivers/staging/android/binder.c:1573:46: 	expected void const [noderef] <asn:1>*from 	drivers/staging/android/binder.c:1573:46: 	got void const *offsets drivers/staging/android/binder.c:1603:76: warning: 	incorrect type in argument 2 (different address spaces) 	drivers/staging/android/binder.c:1603:76: 	expected void [noderef] <asn:1>*ptr 	drivers/staging/android/binder.c:1603:76: got void *binder drivers/staging/android/binder.c:1605:64: warning: 	incorrect type in argument 2 (different address spaces) 	drivers/staging/android/binder.c:1605:64: 	expected void [noderef] <asn:1>*ptr 	drivers/staging/android/binder.c:1605:64: got void *binder drivers/staging/android/binder.c:1605:76: warning: 	incorrect type in argument 3 (different address spaces) 	drivers/staging/android/binder.c:1605:76: 	expected void [noderef] <asn:1>*cookie 	drivers/staging/android/binder.c:1605:76: got void *cookie drivers/staging/android/binder.c:1613:40: error: 	incompatible types in comparison  Signed-off-by: Emil Goode <emilgoode@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | logger.h | s | 1.7K | 41 | San Mehat | san@google.com | 1322653206 |  | android: logger: Add new system log for framework/system log messages  Signed-off-by: San Mehat <san@google.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | timed_gpio.h | s | 812B | 28 | Johannes Thumshirn | morbidrsa@googlemail.com | 1330559572 |  | Staging: android: timed_gpio: Removed spaces before tabs  Signed-off-by: Johannes Thumshirn <morbidrsa@googlemail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | timed_output.h | s | 1.1K | 30 | Greg Kroah-Hartman | gregkh@suse.de | 1322651894 |  | Revert "Staging: android: delete android drivers"  This reverts commit b0a0ccfad85b3657fe999805df65f5cfe634ab8a.  Turns out I was wrong, we want these in the tree.  Note, I've disabled the drivers from the build at the moment, so other patches can be applied to fix some build issues due to internal api changes since the code was removed from the tree.  Cc: Arve Hjønnevåg <arve@android.com> Cc: Brian Swetland <swetland@google.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | lowmemorykiller.c | s | 5.5K | 172 | David Rientjes | rientjes@google.com | 1334029724 |  | android, lowmemorykiller: remove task handoff notifier  The task handoff notifier leaks task_struct since it never gets freed after the callback returns NOTIFY_OK, which means it is responsible for doing so.  It turns out the lowmemorykiller actually doesn't need this notifier at all.  It's used to prevent unnecessary killing by waiting for a thread to exit as a result of lowmem_shrink(), however, it's possible to do this in the same way the kernel oom killer works by setting TIF_MEMDIE and avoid killing if we're still waiting for it to exit.  The kernel oom killer will already automatically set TIF_MEMDIE for threads that are attempting to allocate memory that have a fatal signal. The thread selected by lowmem_shrink() will have such a signal after the lowmemorykiller sends it a SIGKILL, so this won't result in an unnecessary use of memory reserves for the thread to exit.  This has the added benefit that we don't have to rely on CONFIG_PROFILING to prevent needlessly killing tasks.  Reported-by: Werner Landgraf <w.landgraf@ru.ru> Cc: stable@vger.kernel.org Signed-off-by: David Rientjes <rientjes@google.com> Acked-by: Colin Cross <ccross@android.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | android_alarm.h | s | 2.1K | 52 | John Stultz | john.stultz@linaro.org | 1334959585 |  | android-alarm: Remove unused android alarm in-kernel interfaces  Now that alarm-dev.c uses the upstreamed alarmtimer interfaces, we can remove the otherwise unused in-kernel android alarm api.  CC: Colin Cross <ccross@android.com> CC: Thomas Gleixner <tglx@linutronix.de> CC: Android Kernel Team <kernel-team@android.com> Signed-off-by: John Stultz <john.stultz@linaro.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
