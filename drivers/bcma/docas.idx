f | driver_pci_host.c | s | 16K | 508 | Nathan Hintz | nlhintz@hotmail.com | 1337186764 |  | bcma: reads/writes are always 4 bytes, so always map 4 bytes  Modify ioremap_nocache calls to reflect the number of bytes read/written.  Signed-off-by: Nathan Hintz <nlhintz@hotmail.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | Makefile | g | 400B |  | Hauke Mehrtens | hauke@hauke-m.de | 1312828166 |  | bcma: add mips driver  This adds a mips driver to bcma. This is only found on embedded devices. For now the driver just initializes the irqs used on this system.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Acked-by: Ralf Baechle <ralf@linux-mips.org> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | TODO | g | 96B |  | Rafał Miłecki | zajec5@gmail.com | 1305057294 |  | bcma: add Broadcom specific AMBA bus driver  Broadcom has released cards based on a new AMBA-based bus type. From a programming point of view, this new bus type differs from AMBA and does not use AMBA common registers. It also differs enough from SSB. We decided that a new bus driver is needed to keep the code clean.  In its current form, the driver detects devices present on the bus and registers them in the system. It allows registering BCMA drivers for specified bus devices and provides them basic operations. The bus driver itself includes two important bus managing drivers: ChipCommon core driver and PCI(c) core driver. They are early used to allow correct initialization.  Currently code is limited to supporting buses on PCI(e) devices, however the driver is designed to be used also on other hosts. The host abstraction layer is implemented and already used for PCI(e).  Support for PCI(e) hosts is working and seems to be stable (access to 80211 core was tested successfully on a few devices). We can still optimize it by using some fixed windows, but this can be done later without affecting any external code. Windows are just ranges in MMIO used for accessing cores on the bus.  Cc: Greg KH <greg@kroah.com> Cc: Michael Büsch <mb@bu3sch.de> Cc: Larry Finger <Larry.Finger@lwfinger.net> Cc: George Kashperko <george@znau.edu.ua> Cc: Arend van Spriel <arend@broadcom.com> Cc: linux-arm-kernel@lists.infradead.org Cc: Russell King <rmk@arm.linux.org.uk> Cc: Arnd Bergmann <arnd@arndb.de> Cc: Andy Botting <andy@andybotting.com> Cc: linuxdriverproject <devel@linuxdriverproject.org> Cc: linux-kernel@vger.kernel.org <linux-kernel@vger.kernel.org> Signed-off-by: Rafał Miłecki <zajec5@gmail.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | scan.h | s | 1.7K | 48 | Rafał Miłecki | zajec5@gmail.com | 1305057294 |  | bcma: add Broadcom specific AMBA bus driver  Broadcom has released cards based on a new AMBA-based bus type. From a programming point of view, this new bus type differs from AMBA and does not use AMBA common registers. It also differs enough from SSB. We decided that a new bus driver is needed to keep the code clean.  In its current form, the driver detects devices present on the bus and registers them in the system. It allows registering BCMA drivers for specified bus devices and provides them basic operations. The bus driver itself includes two important bus managing drivers: ChipCommon core driver and PCI(c) core driver. They are early used to allow correct initialization.  Currently code is limited to supporting buses on PCI(e) devices, however the driver is designed to be used also on other hosts. The host abstraction layer is implemented and already used for PCI(e).  Support for PCI(e) hosts is working and seems to be stable (access to 80211 core was tested successfully on a few devices). We can still optimize it by using some fixed windows, but this can be done later without affecting any external code. Windows are just ranges in MMIO used for accessing cores on the bus.  Cc: Greg KH <greg@kroah.com> Cc: Michael Büsch <mb@bu3sch.de> Cc: Larry Finger <Larry.Finger@lwfinger.net> Cc: George Kashperko <george@znau.edu.ua> Cc: Arend van Spriel <arend@broadcom.com> Cc: linux-arm-kernel@lists.infradead.org Cc: Russell King <rmk@arm.linux.org.uk> Cc: Arnd Bergmann <arnd@arndb.de> Cc: Andy Botting <andy@andybotting.com> Cc: linuxdriverproject <devel@linuxdriverproject.org> Cc: linux-kernel@vger.kernel.org <linux-kernel@vger.kernel.org> Signed-off-by: Rafał Miłecki <zajec5@gmail.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | scan.c | s | 13K | 479 | Linus Torvalds | torvalds@linux-foundation.org | 1337885669 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net  Pull more networking updates from David Miller:  "Ok, everything from here on out will be bug fixes."  1) One final sync of wireless and bluetooth stuff from John Linville.    These changes have all been in his tree for more than a week, and    therefore have had the necessary -next exposure.  John was just away    on a trip and didn't have a change to send the pull request until a    day or two ago.  2) Put back some defines in user exposed header file areas that were    removed during the tokenring purge.  From Stephen Hemminger and Paul    Gortmaker.  3) A bug fix for UDP hash table allocation got lost in the pile due to    one of those "you got it..  no I've got it.." situations.  :-)     From Tim Bird.  4) SKB coalescing in TCP needs to have stricter checks, otherwise we'll    try to coalesce overlapping frags and crash.  Fix from Eric Dumazet.  5) RCU routing table lookups can race with free_fib_info(), causing    crashes when we deref the device pointers in the route.  Fix by    releasing the net device in the RCU callback.  From Yanmin Zhang.  * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (293 commits)   tcp: take care of overlaps in tcp_try_coalesce()   ipv4: fix the rcu race between free_fib_info and ip_route_output_slow   mm: add a low limit to alloc_large_system_hash   ipx: restore token ring define to include/linux/ipx.h   if: restore token ring ARP type to header   xen: do not disable netfront in dom0   phy/micrel: Fix ID of KSZ9021   mISDN: Add X-Tensions USB ISDN TA XC-525   gianfar:don't add FCB length to hard_header_len   Bluetooth: Report proper error number in disconnection   Bluetooth: Create flags for bt_sk()   Bluetooth: report the right security level in getsockopt   Bluetooth: Lock the L2CAP channel when sending   Bluetooth: Restore locking semantics when looking up L2CAP channels   Bluetooth: Fix a redundant and problematic incoming MTU check   Bluetooth: Add support for Foxconn/Hon Hai AR5BBU22 0489:E03C   Bluetooth: Fix EIR data generation for mgmt_device_found   Bluetooth: Fix Inquiry with RSSI event mask   Bluetooth: improve readability of l2cap_seq_list code   Bluetooth: Fix skb length calculation   ...
f | driver_chipcommon_pmu.c | s | 7.8K | 272 | Seth Forshee | seth.forshee@canonical.com | 1338838000 |  | bcma: add ext PA workaround for BCM4331 and BCM43431  MacBook Pro models with BCM4331 wireless have been found to have the ext PA lines disabled after resuming from S3 without external power attach. This causes them to be unable to transmit. Add a workaround to ensure that the ext PA lines are enabled on BCM4331. Also extend all handling of ext PA line muxing to BCM43431 as is done in the Broadcom SDK.  BugLink: http://bugs.launchpad.net/bugs/925577 Cc: Arend van Spriel <arend@broadcom.com> Cc: Hauke Mehrtens <hauke@hauke-m.de> Cc: stable@vger.kernel.org Signed-off-by: Seth Forshee <seth.forshee@canonical.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | driver_chipcommon.c | s | 4.2K | 134 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103922 |  | bcma: fix implicit use of export.h contents  Fix in advance, or we will get things like this:  drivers/bcma/core.c:20: warning: data definition has no type or storage class drivers/bcma/core.c:20: warning: type defaults to 'int' in declaration of 'EXPORT_SYMBOL_GPL' drivers/bcma/core.c:20: warning: parameter names (without types) in function declaration  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | driver_mips.c | s | 6.2K | 217 | Hauke Mehrtens | hauke@hauke-m.de | 1312828169 |  | bcma: get CPU clock  Add method to return the clock of the CPU. This is needed by the arch code to calculate the mips_hpt_frequency.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Acked-by: Ralf Baechle <ralf@linux-mips.org> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | host_pci.c | s | 7.2K | 252 | Nathan Hintz | nlhintz@hotmail.com | 1337186764 |  | bcma: Add __devexit to bcma_host_pci_remove  Add missing __devexit attribute to bcma_host_pci_remove.  Signed-off-by: Nathan Hintz <nlhintz@hotmail.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | driver_pci.c | s | 7.5K | 235 | Hauke Mehrtens | hauke@hauke-m.de | 1339177627 |  | bcma: fix null pointer in bcma_core_pci_irq_ctl  pc could be null if hosttype != BCMA_HOSTTYPE_PCI. If we are on a device without a pci core this function is called with pc = null by b43 and brcmsmac. If the host type is PCI we have a pci core as well and pc can not be null.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | host_soc.c | s | 3.6K | 158 | Hauke Mehrtens | hauke@hauke-m.de | 1312828165 |  | bcma: add SOC bus  This patch adds support for using bcma on a Broadcom SoC as the system bus. An SoC like the bcm4716 could register this bus and use it to searches for the bcma cores and register the devices on this bus.  BCMA_HOSTTYPE_NONE was intended for SoCs at first but BCMA_HOSTTYPE_SOC is a better name.  Acked-by: Rafał Miłecki <zajec5@gmail.com> Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Acked-by: Ralf Baechle <ralf@linux-mips.org> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | README | g | 956B |  | Rafał Miłecki | zajec5@gmail.com | 1305057294 |  | bcma: add Broadcom specific AMBA bus driver  Broadcom has released cards based on a new AMBA-based bus type. From a programming point of view, this new bus type differs from AMBA and does not use AMBA common registers. It also differs enough from SSB. We decided that a new bus driver is needed to keep the code clean.  In its current form, the driver detects devices present on the bus and registers them in the system. It allows registering BCMA drivers for specified bus devices and provides them basic operations. The bus driver itself includes two important bus managing drivers: ChipCommon core driver and PCI(c) core driver. They are early used to allow correct initialization.  Currently code is limited to supporting buses on PCI(e) devices, however the driver is designed to be used also on other hosts. The host abstraction layer is implemented and already used for PCI(e).  Support for PCI(e) hosts is working and seems to be stable (access to 80211 core was tested successfully on a few devices). We can still optimize it by using some fixed windows, but this can be done later without affecting any external code. Windows are just ranges in MMIO used for accessing cores on the bus.  Cc: Greg KH <greg@kroah.com> Cc: Michael Büsch <mb@bu3sch.de> Cc: Larry Finger <Larry.Finger@lwfinger.net> Cc: George Kashperko <george@znau.edu.ua> Cc: Arend van Spriel <arend@broadcom.com> Cc: linux-arm-kernel@lists.infradead.org Cc: Russell King <rmk@arm.linux.org.uk> Cc: Arnd Bergmann <arnd@arndb.de> Cc: Andy Botting <andy@andybotting.com> Cc: linuxdriverproject <devel@linuxdriverproject.org> Cc: linux-kernel@vger.kernel.org <linux-kernel@vger.kernel.org> Signed-off-by: Rafał Miłecki <zajec5@gmail.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | core.c | s | 2.9K | 111 | Nathan Hintz | nlhintz@hotmail.com | 1337186764 |  | bcma: Add flush for BCMA_RESET_CTL write  Adds a missing read to flush the previous write (per the Broadcom SDK).  Signed-off-by: Nathan Hintz <nlhintz@hotmail.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | bcma_private.h | s | 1.6K | 46 | Hauke Mehrtens | hauke@hauke-m.de | 1328557984 |  | bcma: add PCIe host controller  Some SoCs have a PCIe host controller to make it possible to attach some other devices to it, like an other Wifi card. This code was tested with an Netgear WNDR3400 (bcm4716 based), but should work with all bcma based SoCs.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | Kconfig | g | 1.1K |  | Paul Gortmaker | paul.gortmaker@windriver.com | 1334081610 |  | bcma: fix build error on MIPS; implicit pcibios_enable_device  The following is seen during allmodconfig builds for MIPS:  drivers/bcma/driver_pci_host.c:518:2: error: implicit declaration of function 'pcibios_enable_device' [-Werror=implicit-function-declaration] cc1: some warnings being treated as errors make[3]: *** [drivers/bcma/driver_pci_host.o] Error 1  Most likey introduced by commit 49dc9577155576b10ff79f0c1486c816b01f58bf      "bcma: add PCIe host controller"  Add the header instead of implicitly assuming it will be present. Sounds like a good idea, but that alone doesn't fix anything.  The real problem is that the Kconfig has settings related to whether PCI is possible, i.e.    config BCMA_HOST_PCI_POSSIBLE         bool         depends on BCMA && PCI = y         default y    config BCMA_HOST_PCI         bool "Support for BCMA on PCI-host bus"         depends on BCMA_HOST_PCI_POSSIBLE  ...but what is missing is that BCMA_DRIVER_PCI_HOSTMODE doesn't have any dependencies on the above.  Add one.  CC: Hauke Mehrtens <hauke@hauke-m.de> CC: John W. Linville <linville@tuxdriver.com> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Acked-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | main.c | s | 8.9K | 324 | Hauke Mehrtens | hauke@hauke-m.de | 1330978850 |  | bcma: export bcma_find_core  This function is needed by the bcm47xx arch code to get the number of the ieee80211 core.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: John W. Linville <linville@tuxdriver.com>
f | sprom.c | s | 19K | 518 | Seth Forshee | seth.forshee@canonical.com | 1338838000 |  | bcma: add ext PA workaround for BCM4331 and BCM43431  MacBook Pro models with BCM4331 wireless have been found to have the ext PA lines disabled after resuming from S3 without external power attach. This causes them to be unable to transmit. Add a workaround to ensure that the ext PA lines are enabled on BCM4331. Also extend all handling of ext PA line muxing to BCM43431 as is done in the Broadcom SDK.  BugLink: http://bugs.launchpad.net/bugs/925577 Cc: Arend van Spriel <arend@broadcom.com> Cc: Hauke Mehrtens <hauke@hauke-m.de> Cc: stable@vger.kernel.org Signed-off-by: Seth Forshee <seth.forshee@canonical.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
