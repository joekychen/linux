f | dm-mpath.c | s | 39K | 1419 | Mikulas Patocka | mpatocka@redhat.com | 1338679798 |  | dm mpath: allow ioctls to trigger pg init  After the failure of a group of paths, any alternative paths that need initialising do not become available until further I/O is sent to the device.  Until this has happened, ioctls return -EAGAIN.  With this patch, new paths are made available in response to an ioctl too.  The processing of the ioctl gets delayed until this has happened.  Instead of returning an error, we submit a work item to kmultipathd (that will potentially activate the new path) and retry in ten milliseconds.  Note that the patch doesn't retry an ioctl if the ioctl itself fails due to a path failure.  Such retries should be handled intelligently by the code that generated the ioctl in the first place, noting that some SCSI commands should not be retried because they are not idempotent (XOR write commands).  For commands that could be retried, there is a danger that if the device rejected the SCSI command, the path could be errorneously marked as failed, and the request would be retried on another path which might fail too.  It can be determined if the failure happens on the device or on the SCSI controller, but there is no guarantee that all SCSI drivers set these flags correctly.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-service-time.c | s | 8.2K | 282 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm.h | s | 4.6K | 133 | Alasdair G Kergon | agk@redhat.com | 1320092344 |  | dm table: add immutable feature  Introduce DM_TARGET_IMMUTABLE to indicate that the target type cannot be mixed with any other target type, and once loaded into a device, it cannot be replaced with a table containing a different type.  The thin provisioning pool device will use this.  Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-uevent.c | s | 5.3K | 185 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103879 |  | md: Add in export.h for files using EXPORT_SYMBOL  These files were getting the defines for EXPORT_SYMBOL because device.h was including module.h.  But we are going to put an end to that.  So add the proper export.h include now.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | persistent-data |  | 21 items |  | Mike Snitzer | snitzer@redhat.com | 1341316537 |  | dm persistent data: fix allocation failure in space map checker init  If CONFIG_DM_DEBUG_SPACE_MAPS is enabled and memory is fragmented and a sufficiently-large metadata device is used in a thin pool then the space map checker will fail to allocate the memory it requires.  Switch from kmalloc to vmalloc to allow larger virtually contiguous allocations for the space map checker's internal count arrays.  Reported-by: Vivek Goyal <vgoyal@redhat.com> Cc: stable@kernel.org Signed-off-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-log-userspace-base.c | s | 19K | 694 | Linus Torvalds | torvalds@linux-foundation.org | 1320637487 |  | Merge branch 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux  * 'modsplit-Oct31_2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux: (230 commits)   Revert "tracing: Include module.h in define_trace.h"   irq: don't put module.h into irq.h for tracking irqgen modules.   bluetooth: macroize two small inlines to avoid module.h   ip_vs.h: fix implicit use of module_get/module_put from module.h   nf_conntrack.h: fix up fallout from implicit moduleparam.h presence   include: replace linux/module.h with "struct module" wherever possible   include: convert various register fcns to macros to avoid include chaining   crypto.h: remove unused crypto_tfm_alg_modname() inline   uwb.h: fix implicit use of asm/page.h for PAGE_SIZE   pm_runtime.h: explicitly requires notifier.h   linux/dmaengine.h: fix implicit use of bitmap.h and asm/page.h   miscdevice.h: fix up implicit use of lists and types   stop_machine.h: fix implicit use of smp.h for smp_processor_id   of: fix implicit use of errno.h in include/linux/of.h   of_platform.h: delete needless include <linux/module.h>   acpi: remove module.h include from platform/aclinux.h   miscdevice.h: delete unnecessary inclusion of module.h   device_cgroup.h: delete needless include <linux/module.h>   net: sch_generic remove redundant use of <linux/module.h>   net: inet_timewait_sock doesnt need <linux/module.h>   ...  Fix up trivial conflicts (other header files, and  removal of the ab3550 mfd driver) in  - drivers/media/dvb/frontends/dibx000_common.c  - drivers/media/video/{mt9m111.c,ov6650.c}  - drivers/mfd/ab3550-core.c  - include/linux/dmaengine.h
f | Makefile | g | 1.8K |  | Mikulas Patocka | mpatocka@redhat.com | 1332956618 |  | dm: add verity target  This device-mapper target creates a read-only device that transparently validates the data on one underlying device against a pre-generated tree of cryptographic checksums stored on a second device.  Two checksum device formats are supported: version 0 which is already shipping in Chromium OS and version 1 which incorporates some improvements.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Mandeep Singh Baines <msb@chromium.org> Signed-off-by: Will Drewry <wad@chromium.org> Signed-off-by: Elly Jones <ellyjones@chromium.org> Cc: Milan Broz <mbroz@redhat.com> Cc: Olof Johansson <olofj@chromium.org> Cc: Steffen Klassert <steffen.klassert@secunet.com> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-region-hash.c | s | 17K | 597 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | raid1.c | s | 78K | 2656 | NeilBrown | neilb@suse.de | 1341301531 |  | md: fix up plugging (again).  The value returned by "mddev_check_plug" is only valid until the next 'schedule' as that will unplug things.  This could happen at any call to mempool_alloc. So just calling mddev_check_plug at the start doesn't really make sense.  So call it just before, or just after, queuing things for the thread. As the action that happens at unplug is to wake the thread, this makes lots of sense. If we cannot add a plug (which requires a small GFP_ATOMIC alloc) we wake thread immediately.  RAID5 is a bit different.  Requests are queued for the thread and the thread is woken by release_stripe.  So we don't need to wake the thread on failure. However the thread doesn't perform certain actions when there is any active plug, so it is important to install a plug before waking the thread.  So for RAID5 we install the plug *before* queuing the request and waking the thread.  Without this patch it is possible for raid1 or raid10 to queue a request without then waking the thread, resulting in the array locking up.  Also change raid10 to only flush_pending_write when there are not active plugs, just like raid1.  This patch is suitable for 3.0 or later.  I plan to submit it to -stable, but I'll like to let it spend a few weeks in mainline first to be sure it is completely safe.  Signed-off-by: NeilBrown <neilb@suse.de>
f | raid5.h | s | 20K | 496 | Shaohua Li | shli@kernel.org | 1337658905 |  | raid5: support sync request  REQ_SYNC is ignored in current raid5 code. Block layer does use it to do policy, for example ioscheduler. This patch adds it.  Signed-off-by: Shaohua Li <shli@fusionio.com> Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-raid1.c | s | 34K | 1225 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-target.c | s | 2.6K | 120 | Mike Snitzer | snitzer@redhat.com | 1281582854 |  | dm: error return error for discards  Have the error target respond to a discard request with a hard -EIO rather than fail the request with -EOPNOTSUPP.  Signed-off-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | md.c | s | 221K | 7642 | NeilBrown | neilb@suse.de | 1341295146 |  | md: support re-add of recovering devices.  We currently only allow a device to be re-added if it appear to be in-sync.  This is overly restrictive as it may be desirable to re-add a device that is in the middle of recovery.  So remove the test for "InSync" - the test on rdev->raid_disk is sufficient to ensure that the re-add will succeed.  Reported-by: Alexander Lyakas <alex.bolshoy@gmail.com> Tested-by: Alexander Lyakas <alex.bolshoy@gmail.com> Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-raid.c | s | 33K | 1099 | Jonathan Brassow | jbrassow@redhat.com | 1337658931 |  | DM RAID: Use md_error() in place of simply setting Faulty bit  When encountering an error while reading the superblock, call md_error.  We are currently setting the 'Faulty' bit on one of the array devices when an error is encountered while reading the superblock of a dm-raid array.  We should be calling md_error(), as it handles the error more completely.  Signed-off-by: Jonathan Brassow <jbrassow@redhat.com> Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-bufio.c | s | 41K | 1424 | Mikulas Patocka | mpatocka@redhat.com | 1332956489 |  | dm bufio: prefetch  This patch introduces a new function dm_bufio_prefetch. It prefetches the specified range of blocks into dm-bufio cache without waiting for i/o completion.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-linear.c | s | 3.8K | 147 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-table.c | s | 36K | 1291 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-bufio.h | s | 3.6K | 100 | Mikulas Patocka | mpatocka@redhat.com | 1332956489 |  | dm bufio: prefetch  This patch introduces a new function dm_bufio_prefetch. It prefetches the specified range of blocks into dm-bufio cache without waiting for i/o completion.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-round-robin.c | s | 4.6K | 173 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-exception-store.h | s | 5.6K | 183 | Mikulas Patocka | mpatocka@redhat.com | 1281582831 |  | dm snapshot: test chunk size against both origin and snapshot  Validate chunk size against both origin and snapshot sector size  Don't allow chunk size smaller than either origin or snapshot logical sector size. Reading or writing data not aligned to sector size is not allowed and causes immediate errors.  This requires us to open the origin before initialising the exception store and to export dm_snap_origin.  Cc: stable@kernel.org Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Reviewed-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | raid5.c | s | 171K | 5530 | NeilBrown | neilb@suse.de | 1341301531 |  | md: fix up plugging (again).  The value returned by "mddev_check_plug" is only valid until the next 'schedule' as that will unplug things.  This could happen at any call to mempool_alloc. So just calling mddev_check_plug at the start doesn't really make sense.  So call it just before, or just after, queuing things for the thread. As the action that happens at unplug is to wake the thread, this makes lots of sense. If we cannot add a plug (which requires a small GFP_ATOMIC alloc) we wake thread immediately.  RAID5 is a bit different.  Requests are queued for the thread and the thread is woken by release_stripe.  So we don't need to wake the thread on failure. However the thread doesn't perform certain actions when there is any active plug, so it is important to install a plug before waking the thread.  So for RAID5 we install the plug *before* queuing the request and waking the thread.  Without this patch it is possible for raid1 or raid10 to queue a request without then waking the thread, resulting in the array locking up.  Also change raid10 to only flush_pending_write when there are not active plugs, just like raid1.  This patch is suitable for 3.0 or later.  I plan to submit it to -stable, but I'll like to let it spend a few weeks in mainline first to be sure it is completely safe.  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-thin-metadata.c | s | 34K | 1247 | Joe Thornber | ejt@redhat.com | 1338679801 |  | dm thin: provide userspace access to pool metadata  This patch implements two new messages that can be sent to the thin pool target allowing it to take a snapshot of the _metadata_.  This, read-only snapshot can be accessed by userland, concurrently with the live target.  Only one metadata snapshot can be held at a time.  The pool's status line will give the block location for the current msnap.  Since version 0.1.5 of the userland thin provisioning tools, the thin_dump program displays the msnap as follows:      thin_dump -m <msnap root> <metadata dev>  Available here: https://github.com/jthornber/thin-provisioning-tools  Now that userland can access the metadata we can do various things that have traditionally been kernel side tasks:       i) Incremental backups.       By using metadata snapshots we can work out what blocks have      changed over time.  Combined with data snapshots we can ensure      the data doesn't change while we back it up.       A short proof of concept script can be found here:       https://github.com/jthornber/thinp-test-suite/blob/master/incremental_backup_example.rb       ii) Migration of thin devices from one pool to another.       iii) Merging snapshots back into an external origin.       iv) Asyncronous replication.  Signed-off-by: Joe Thornber <ejt@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | raid0.c | s | 19K | 646 | Jes Sorensen | Jes.Sorensen@redhat.com | 1333431446 |  | md: Avoid OOPS when reshaping raid1 to raid0  raid1 arrays do not have the notion of chunk size. Calculate the largest chunk sector size we can use to avoid a divide by zero OOPS when aligning the size of the new array to the chunk size.  Signed-off-by: Jes Sorensen <Jes.Sorensen@redhat.com> Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-log-userspace-transfer.c | s | 7.1K | 241 | Eric W. Biederman | ebiederm@xmission.com | 1336706499 |  | connector/userns: replace netlink uses of cap_raised() with capable()  In 2009 Philip Reiser notied that a few users of netlink connector interface needed a capability check and added the idiom cap_raised(nsp->eff_cap, CAP_SYS_ADMIN) to a few of them, on the premise that netlink was asynchronous.  In 2011 Patrick McHardy noticed we were being silly because netlink is synchronous and removed eff_cap from the netlink_skb_params and changed the idiom to cap_raised(current_cap(), CAP_SYS_ADMIN).  Looking at those spots with a fresh eye we should be calling capable(CAP_SYS_ADMIN).  The only reason I can see for not calling capable is that it once appeared we were not in the same task as the caller which would have made calling capable() impossible.  In the initial user_namespace the only difference between between cap_raised(current_cap(), CAP_SYS_ADMIN) and capable(CAP_SYS_ADMIN) are a few sanity checks and the fact that capable(CAP_SYS_ADMIN) sets PF_SUPERPRIV if we use the capability.  Since we are going to be using root privilege setting PF_SUPERPRIV seems the right thing to do.  The motivation for this that patch is that in a child user namespace cap_raised(current_cap(),...) tests your capabilities with respect to that child user namespace not capabilities in the initial user namespace and thus will allow processes that should be unprivielged to use the kernel services that are only protected with cap_raised(current_cap(),..).  To fix possible user_namespace issues and to just clean up the code replace cap_raised(current_cap(), CAP_SYS_ADMIN) with capable(CAP_SYS_ADMIN).  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com> Cc: Patrick McHardy <kaber@trash.net> Cc: Philipp Reisner <philipp.reisner@linbit.com> Acked-by: Serge E. Hallyn <serge.hallyn@canonical.com> Acked-by: Andrew G. Morgan <morgan@kernel.org> Cc: Vasiliy Kulikov <segoon@openwall.com> Cc: David Howells <dhowells@redhat.com> Reviewed-by: James Morris <james.l.morris@oracle.com> Cc: David Miller <davem@davemloft.net> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: David S. Miller <davem@davemloft.net>
f | linear.c | s | 8.8K | 301 | majianpeng | majianpeng@gmail.com | 1333324117 |  | md/linear: If md_integrity_register() fails, linear_run() must free the mem.   Signed-off-by: majianpeng <majianpeng@gmail.com> Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-snap.c | s | 52K | 1900 | Mikulas Patocka | mpatocka@redhat.com | 1312284724 |  | dm snapshot: skip reading origin when overwriting complete chunk  If we write a full chunk in the snapshot, skip reading the origin device because the whole chunk will be overwritten anyway.  This patch changes the snapshot write logic when a full chunk is written. In this case:   1. allocate the exception   2. dispatch the bio (but don't report the bio completion to device mapper)   3. write the exception record   4. report bio completed  Callbacks must be done through the kcopyd thread, because callbacks must not race with each other.  So we create two new functions:    dm_kcopyd_prepare_callback: allocate a job structure and prepare the callback.   (This function must not be called from interrupt context.)    dm_kcopyd_do_callback: submit callback.   (This function may be called from interrupt context.)  Performance test (on snapshots with 4k chunk size):   without the patch:     non-direct-io sequential write (dd):    17.7MB/s     direct-io sequential write (dd):        20.9MB/s     non-direct-io random write (mkfs.ext2): 0.44s    with the patch:     non-direct-io sequential write (dd):    26.5MB/s     direct-io sequential write (dd):        33.2MB/s     non-direct-io random write (mkfs.ext2): 0.27s  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-kcopyd.c | s | 16K | 629 | Mikulas Patocka | mpatocka@redhat.com | 1320092338 |  | dm kcopyd: add dm_kcopyd_zero to zero an area  This patch introduces dm_kcopyd_zero() to make it easy to use kcopyd to write zeros into the requested areas instead instead of copying.  It is implemented by passing a NULL copying source to dm_kcopyd_copy().  The forthcoming thin provisioning target uses this.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-io.c | s | 12K | 434 | Milan Broz | mbroz@redhat.com | 1331147377 |  | dm io: fix discard support  This patch fixes a crash by recognising discards in dm_io.  Currently dm_mirror can send REQ_DISCARD bios if running over a discard-enabled device and without support in dm_io the system crashes badly.  BUG: unable to handle kernel paging request at 00800000 IP:  __bio_add_page.part.17+0xf5/0x1e0 ...  bio_add_page+0x56/0x70  dispatch_io+0x1cf/0x240 [dm_mod]  ? km_get_page+0x50/0x50 [dm_mod]  ? vm_next_page+0x20/0x20 [dm_mod]  ? mirror_flush+0x130/0x130 [dm_mirror]  dm_io+0xdc/0x2b0 [dm_mod] ...  Introduced in 2.6.38-rc1 by commit 5fc2ffeabb9ee0fc0e71ff16b49f34f0ed3d05b4 (dm raid1: support discard).  Signed-off-by: Milan Broz <mbroz@redhat.com> Cc: stable@kernel.org Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm.c | s | 60K | 2261 | Hannes Reinecke | hare@suse.de | 1332956485 |  | dm: clear bi_end_io on remapping failure  As a precaution, set bi_end_io to NULL when failing to remap.  Signed-off-by: Hannes Reinecke <hare@suse.de> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-queue-length.c | s | 5.4K | 209 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | multipath.h | s | 611B | 26 | NeilBrown | neilb@suse.de | 1318312137 |  | md/multipath: typedef removal: multipath_conf_t -> struct mpconf  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-path-selector.h | s | 2.5K | 79 | Kiyoshi Ueda | k-ueda@ct.jp.nec.com | 1245661947 |  | dm mpath: add start_io and nr_bytes to path selectors  This patch makes two additions to the dm path selector interface for dynamic load balancers:   o a new hook, start_io()   o a new parameter 'nr_bytes' to select_path()/start_io()/end_io()     to pass the size of the I/O  start_io() is called when a target driver actually submits I/O to the selected path. Path selectors can use it to start accounting of the I/O. (e.g. counting the number of in-flight I/Os.) The start_io hook is based on the patch posted by Stefan Bader: https://www.redhat.com/archives/dm-devel/2005-October/msg00050.html  nr_bytes, the size of the I/O, is so path selectors can take the size of the I/O into account when deciding which path to use. dm-service-time uses it to estimate service time, for example. (Added the nr_bytes member to dm_mpath_io instead of using existing  details.bi_size, since request-based dm patch deletes it.)  Signed-off-by: Stefan Bader <stefan.bader@canonical.com> Signed-off-by: Kiyoshi Ueda <k-ueda@ct.jp.nec.com> Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | raid10.h | s | 4.3K | 148 | NeilBrown | neilb@suse.de | 1337658827 |  | md/raid10: add reshape support  A 'near' or 'offset' lay RAID10 array can be reshaped to a different 'near' or 'offset' layout, a different chunk size, and a different number of devices. However the number of copies cannot change.  Unlike RAID5/6, we do not support having user-space backup data that is being relocated during a 'critical section'.  Rather, the data_offset of each device must change so that when writing any block to a new location, it will not over-write any data that is still 'live'.  This means that RAID10 reshape is not supportable on v0.90 metadata.  The different between the old data_offset and the new_offset must be at least the larger of the chunksize multiplied by offset copies of each of the old and new layout. (for 'near' mode, offset_copies == 1).  A larger difference of around 64M seems useful for in-place reshapes as more data can be moved between metadata updates. Very large differences (e.g. 512M) seem to slow the process down due to lots of long seeks (on oldish consumer graded devices at least).  Metadata needs to be updated whenever the place we are about to write to is considered - by the current metadata - to still contain data in the old layout.  [unbalanced locking fix from Dan Carpenter <dan.carpenter@oracle.com>]  Signed-off-by: NeilBrown <neilb@suse.de>
f | bitmap.c | s | 59K | 2007 | NeilBrown | neilb@suse.de | 1337658934 |  | md/bitmap: record the space available for the bitmap in the superblock.  Now that bitmaps can grow and shrink it is best if we record how much space is available.  This means that when we reduce the size of the bitmap we won't "lose" the space for late when we might want to increase the size of the bitmap again.  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-ioctl.c | s | 37K | 1452 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-crypt.c | s | 44K | 1568 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | raid1.h | s | 5.1K | 153 | NeilBrown | neilb@suse.de | 1324595876 |  | md/raid1: Allocate spare to store replacement devices and their bios.  In RAID1, a replacement is much like a normal device, so we just double the size of the relevant arrays and look at all possible devices for reads and writes.  This means that the array looks like it is now double the size in some way - we need to be careful about that. In particular, we checking if the array is still degraded while creating a recovery request we need to only consider the first 'half' - i.e. the real (non-replacement) devices.  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-stripe.c | s | 10K | 370 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-sysfs.c | s | 2.2K | 88 | Emese Revfy | re.emese@gmail.com | 1268010289 |  | Driver core: Constify struct sysfs_ops in struct kobj_type  Constify struct sysfs_ops.  This is part of the ops structure constification effort started by Arjan van de Ven et al.  Benefits of this constification:   * prevents modification of data that is shared    (referenced) by many other structure instances    at runtime   * detects/prevents accidental (but not intentional)    modification attempts on archs that enforce    read-only kernel data at runtime   * potentially better optimized code as the compiler    can assume that the const data cannot be changed   * the compiler/linker move const data into .rodata    and therefore exclude them from false sharing  Signed-off-by: Emese Revfy <re.emese@gmail.com> Acked-by: David Teigland <teigland@redhat.com> Acked-by: Matt Domsch <Matt_Domsch@dell.com> Acked-by: Maciej Sosnowski <maciej.sosnowski@intel.com> Acked-by: Hans J. Koch <hjk@linutronix.de> Acked-by: Pekka Enberg <penberg@cs.helsinki.fi> Acked-by: Jens Axboe <jens.axboe@oracle.com> Acked-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | dm-log-userspace-transfer.h | s | 467B | 14 | Jonathan Brassow | jbrassow@redhat.com | 1252093234 |  | dm log: userspace add luid to distinguish between concurrent log instances  Device-mapper userspace logs (like the clustered log) are identified by a universally unique identifier (UUID).  This identifier is used to associate requests from the kernel to a specific log in userspace.  The UUID must be unique everywhere, since multiple machines may use this identifier when communicating about a particular log, as is the case for cluster logs.  Sometimes, device-mapper/LVM may re-use a UUID.  This is the case during pvmoves, when moving from one segment of an LV to another, or when resizing a mirror, etc.  In these cases, a new log is created with the same UUID and loaded in the "inactive" slot.  When a device-mapper "resume" is issued, the "live" table is deactivated and the new "inactive" table becomes "live".  (The "inactive" table can also be removed via a device-mapper 'clear' command.)  The above two issues were colliding.  More than one log was being created with the same UUID, and there was no way to distinguish between them.  So, sometimes the wrong log would be swapped out during the exchange.  The solution is to create a locally unique identifier, 'luid', to go along with the UUID.  This new identifier is used to determine exactly which log is being referenced by the kernel when the log exchange is made.  The identifier is not universally safe, but it does not need to be, since create/destroy/suspend/resume operations are bound to a specific machine; and these are the operations that make up the exchange.  Signed-off-by: Jonathan Brassow <jbrassow@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-thin-metadata.h | s | 4.8K | 138 | Joe Thornber | ejt@redhat.com | 1338679801 |  | dm thin: provide userspace access to pool metadata  This patch implements two new messages that can be sent to the thin pool target allowing it to take a snapshot of the _metadata_.  This, read-only snapshot can be accessed by userland, concurrently with the live target.  Only one metadata snapshot can be held at a time.  The pool's status line will give the block location for the current msnap.  Since version 0.1.5 of the userland thin provisioning tools, the thin_dump program displays the msnap as follows:      thin_dump -m <msnap root> <metadata dev>  Available here: https://github.com/jthornber/thin-provisioning-tools  Now that userland can access the metadata we can do various things that have traditionally been kernel side tasks:       i) Incremental backups.       By using metadata snapshots we can work out what blocks have      changed over time.  Combined with data snapshots we can ensure      the data doesn't change while we back it up.       A short proof of concept script can be found here:       https://github.com/jthornber/thinp-test-suite/blob/master/incremental_backup_example.rb       ii) Migration of thin devices from one pool to another.       iii) Merging snapshots back into an external origin.       iv) Asyncronous replication.  Signed-off-by: Joe Thornber <ejt@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | bitmap.h | s | 9.2K | 228 | NeilBrown | neilb@suse.de | 1337658934 |  | md/bitmap: record the space available for the bitmap in the superblock.  Now that bitmaps can grow and shrink it is best if we record how much space is available.  This means that when we reduce the size of the bitmap we won't "lose" the space for late when we might want to increase the size of the bitmap again.  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-log.c | s | 20K | 742 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-snap-transient.c | s | 3.7K | 127 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103879 |  | md: Add in export.h for files using EXPORT_SYMBOL  These files were getting the defines for EXPORT_SYMBOL because device.h was including module.h.  But we are going to put an end to that.  So add the proper export.h include now.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | md.h | s | 21K | 567 | NeilBrown | neilb@suse.de | 1337658907 |  | md/bitmap: add new 'space' attribute for bitmaps.  If we are to allow bitmaps to be resized when the array is resized, we need to know how much space there is.  So create an attribute to store this information and set appropriate defaults.  It can be set more precisely via sysfs, or future metadata extensions may allow it to be recorded.  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-thin.c | s | 68K | 2375 | Joe Thornber | ejt@redhat.com | 1341316531 |  | dm thin: commit metadata before creating metadata snapshot  Userland sometimes sees a corrupt metadata block if metadata is changing rapidly when a metadata snapshot is reserved for userland,  To make the problem go away, commit before we take the metadata snapshot (which is a sensible thing to do anyway).  The checksums mean userland spots this corruption immediately so there's no risk of acting on incorrect data.  No corruption exists from the kernel's point of view, and thin_check passes after pool shutdown.  I believe this is to do with shared blocks at the first level of the {device, mapping} btree.  Prior to the metadata-snap support no sharing at this level was possible, so this patch is only required after commit cc8394d86f045b86ff303d3c9e4ce47d97148951 ("dm thin: provide userspace access to pool metadata").  Signed-off-by: Joe Thornber <ejt@redhat.com> Signed-off-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | raid0.h | s | 490B | 16 | NeilBrown | neilb@suse.de | 1332121599 |  | md: add proper merge_bvec handling to RAID0 and Linear.  These personalities currently set a max request size of one page when any member device has a merge_bvec_fn because they don't bother to call that function.  This causes extra works in splitting and combining requests.  So make the extra effort to call the merge_bvec_fn when it exists so that we end up with larger requests out the bottom.  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-path-selector.c | s | 2.4K | 103 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103878 |  | md: Add module.h to all files using it implicitly  A pending cleanup will mean that module.h won't be implicitly everywhere anymore.  Make sure the modular drivers in md dir are actually calling out for <module.h> explicitly in advance.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | raid10.c | s | 124K | 4110 | NeilBrown | neilb@suse.de | 1341358535 |  | md/raid10: fix careless build error  build error introduced by commit b357f04a67c2aeee8  That function doesn't get extra args until a later patch.  Bother.  Reported-by: Fengguang Wu <wfg@linux.intel.com> Reported-by: Simon Kirby <sim@hostway.ca> Reported-by: Tobias Klausmann <tobias.johannes.klausmann@mni.thm.de> Signed-off-by: NeilBrown <neilb@suse.de>
f | Kconfig | g | 12K |  | Mikulas Patocka | mpatocka@redhat.com | 1332956618 |  | dm: add verity target  This device-mapper target creates a read-only device that transparently validates the data on one underlying device against a pre-generated tree of cryptographic checksums stored on a second device.  Two checksum device formats are supported: version 0 which is already shipping in Chromium OS and version 1 which incorporates some improvements.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Mandeep Singh Baines <msb@chromium.org> Signed-off-by: Will Drewry <wad@chromium.org> Signed-off-by: Elly Jones <ellyjones@chromium.org> Cc: Milan Broz <mbroz@redhat.com> Cc: Olof Johansson <olofj@chromium.org> Cc: Steffen Klassert <steffen.klassert@secunet.com> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-exception-store.c | s | 6.5K | 240 | Andrei Warkentin | andrey.warkentin@gmail.com | 1332956482 |  | dm exception store: fix init error path  Call the correct exit function on failure in dm_exception_store_init.  Signed-off-by: Andrei Warkentin <andrey.warkentin@gmail.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Cc: stable@kernel.org Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-uevent.h | s | 1.6K | 52 | Mike Anderson | andmike@linux.vnet.ibm.com | 1192842086 |  | dm: uevent generate events  This patch adds support for the dm_path_event dm_send_event functions which create and send udev events.  Signed-off-by: Mike Anderson <andmike@linux.vnet.ibm.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-snap-persistent.c | s | 20K | 744 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103879 |  | md: Add in export.h for files using EXPORT_SYMBOL  These files were getting the defines for EXPORT_SYMBOL because device.h was including module.h.  But we are going to put an end to that.  So add the proper export.h include now.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | faulty.c | s | 8.8K | 313 | NeilBrown | neilb@suse.de | 1332121599 |  | md: tidy up rdev_for_each usage.  md.h has an 'rdev_for_each()' macro for iterating the rdevs in an mddev.  However it uses the 'safe' version of list_for_each_entry, and so requires the extra variable, but doesn't include 'safe' in the name, which is useful documentation.  Consequently some places use this safe version without needing it, and many use an explicity list_for_each entry.  So:  - rename rdev_for_each to rdev_for_each_safe  - create a new rdev_for_each which uses the plain    list_for_each_entry,  - use the 'safe' version only where needed, and convert all other    list_for_each_entry calls to use rdev_for_each.  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-mpath.h | s | 415B | 17 | Kiyoshi Ueda | k-ueda@ct.jp.nec.com | 1223642218 |  | dm mpath: remove is_active from struct dm_path  This patch moves 'is_active' from struct dm_path to struct pgpath as it does not need exporting.  Signed-off-by: Kiyoshi Ueda <k-ueda@ct.jp.nec.com> Signed-off-by: Jun'ichi Nomura <j-nomura@ce.jp.nec.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-verity.c | s | 22K | 768 | Mikulas Patocka | mpatocka@redhat.com | 1332956618 |  | dm: add verity target  This device-mapper target creates a read-only device that transparently validates the data on one underlying device against a pre-generated tree of cryptographic checksums stored on a second device.  Two checksum device formats are supported: version 0 which is already shipping in Chromium OS and version 1 which incorporates some improvements.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Mandeep Singh Baines <msb@chromium.org> Signed-off-by: Will Drewry <wad@chromium.org> Signed-off-by: Elly Jones <ellyjones@chromium.org> Cc: Milan Broz <mbroz@redhat.com> Cc: Olof Johansson <olofj@chromium.org> Cc: Steffen Klassert <steffen.klassert@secunet.com> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | multipath.c | s | 14K | 479 | NeilBrown | neilb@suse.de | 1341295012 |  | md: make 'name' arg to md_register_thread non-optional.  Having the 'name' arg optional and defaulting to the current personality name is no necessary and leads to errors, as when changing the level of an array we can end up using the name of the old level instead of the new one.  So make it non-optional and always explicitly pass the name of the level that the array will be.  Reported-by: majianpeng <majianpeng@gmail.com> Signed-off-by: NeilBrown <neilb@suse.de>
f | linear.h | s | 212B | 13 | NeilBrown | neilb@suse.de | 1318312134 |  | md/linear: typedef removal: linear_conf_t -> struct linear_conf  Signed-off-by: NeilBrown <neilb@suse.de>
f | dm-delay.c | s | 8.4K | 315 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-bio-record.h | s | 1.6K | 59 | Mikulas Patocka | mpatocka@redhat.com | 1238698523 |  | dm: preserve bi_io_vec when resubmitting bios  Device mapper saves and restores various fields in the bio, but it doesn't save bi_io_vec.  If the device driver modifies this after a partially successful request, dm-raid1 and dm-multipath may attempt to resubmit a bio that has bi_size inconsistent with the size of vector.  To make requests resubmittable in dm-raid1 and dm-multipath, we must save and restore the bio vector as well.  To reduce the memory overhead involved in this, we do not save the pages in a vector and use a 16-bit field size if the page size is less than 65536.  Cc: stable@kernel.org Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-flakey.c | s | 9.8K | 362 | Mikulas Patocka | mpatocka@redhat.com | 1332956486 |  | dm: reject trailing characters in sccanf input  Device mapper uses sscanf to convert arguments to numbers. The problem is that the way we use it ignores additional unmatched characters in the scanned string.  For example, this `if (sscanf(string, "%d", &number) == 1)' will match a number, but also it will match number with some garbage appended, like "123abc".  As a result, device mapper accepts garbage after some numbers. For example the command `dmsetup create vg1-new --table "0 16384 linear 254:1bla 34816bla"' will pass without an error.  This patch fixes all sscanf uses in device mapper. It appends "%c" with a pointer to a dummy character variable to every sscanf statement.  The construct `if (sscanf(string, "%d%c", &number, &dummy) == 1)' succeeds only if string is a null-terminated number (optionally preceded by some whitespace characters). If there is some character appended after the number, sscanf matches "%c", writes the character to the dummy variable and returns 2. We check the return value for 1 and consequently reject numbers with some garbage appended.  Signed-off-by: Mikulas Patocka <mpatocka@redhat.com> Acked-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
f | dm-zero.c | s | 1.5K | 69 | Mike Snitzer | snitzer@redhat.com | 1281582852 |  | dm: zero silently drop discards  Have the zero target silently drop a discard rather than fail the request with -EOPNOTSUPP.  Signed-off-by: Mike Snitzer <snitzer@redhat.com> Signed-off-by: Alasdair G Kergon <agk@redhat.com>
