f | Makefile | g | 358B |  | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780575 |  | usb: chipidea: add host role  This adds EHCI host support to the chipidea driver. We want it to be part of the hdrc driver and not a standalone (sub-)driver module, as the structure of ehci-hcd.c suggests, so for chipidea controller we hack it to not provide platform-related code, but only the ehci hcd.  The ehci-platform driver won't work for us here too, because the controller uses the same registers for both device and host mode and also otg-related bits, so it's not really possible to put ehci registers into a separate resource.  This is not a pretty solution, but the alternative is exporting symbols from the chipidea driver to a ehci-chipidea driver and doing all the module refcounting.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | host.c | s | 3.4K | 129 | Marek Vasut | marex@denx.de | 1337096620 |  | USB: CI13xxx: Use usb_put_hcd() on failure to drop HCD  Use usb_put_hcd() call instead of usb_remove_hcd() as that's the appropriate call to drop hcd which failed registration.  Signed-off-by: Marek Vasut <marex@denx.de> Cc: Alan Stern <stern@rowland.harvard.edu> Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com> Cc: Felipe Balbi <balbi@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | debug.c | s | 19K | 700 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780191 |  | usb: chipidea: split the driver code into units  Split the driver into the following parts:   * core  -- resources, register access, capabilities, etc;   * udc   -- device controller functionality;   * debug -- logging events.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | debug.h | s | 1.3K | 47 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780191 |  | usb: chipidea: split the driver code into units  Split the driver into the following parts:   * core  -- resources, register access, capabilities, etc;   * udc   -- device controller functionality;   * debug -- logging events.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ci.h | s | 7.4K | 276 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780776 |  | usb: chipidea: drop unused field "device" from ci13xxx_ep  It was used as a shorthand for gadget's device in request mapping/unmapping code, but now it's not used any more.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | bits.h | s | 2.6K | 76 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780575 |  | usb: chipidea: add host role  This adds EHCI host support to the chipidea driver. We want it to be part of the hdrc driver and not a standalone (sub-)driver module, as the structure of ehci-hcd.c suggests, so for chipidea controller we hack it to not provide platform-related code, but only the ehci hcd.  The ehci-platform driver won't work for us here too, because the controller uses the same registers for both device and host mode and also otg-related bits, so it's not really possible to put ehci registers into a separate resource.  This is not a pretty solution, but the alternative is exporting symbols from the chipidea driver to a ehci-chipidea driver and doing all the module refcounting.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ci13xxx_pci.c | s | 4.6K | 155 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780775 |  | usb: chipidea: add power_budget limit for ehci to platform data  Some implementations need this limitation to work correctly.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | udc.h | s | 2.4K | 81 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780775 |  | usb: chipidea: use generic map/unmap routines  We're one of the remaining drivers to map/unmap requests by hand. Switch to using generic gadget routines for that instead.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | udc.c | s | 43K | 1530 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780776 |  | usb: chipidea: drop unused field "device" from ci13xxx_ep  It was used as a shorthand for gadget's device in request mapping/unmapping code, but now it's not used any more.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | Kconfig | g | 833B |  | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780575 |  | usb: chipidea: add host role  This adds EHCI host support to the chipidea driver. We want it to be part of the hdrc driver and not a standalone (sub-)driver module, as the structure of ehci-hcd.c suggests, so for chipidea controller we hack it to not provide platform-related code, but only the ehci hcd.  The ehci-platform driver won't work for us here too, because the controller uses the same registers for both device and host mode and also otg-related bits, so it's not really possible to put ehci registers into a separate resource.  This is not a pretty solution, but the alternative is exporting symbols from the chipidea driver to a ehci-chipidea driver and doing all the module refcounting.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ci13xxx_msm.c | s | 2.7K | 90 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780369 |  | usb: chipidea: remove unused field "regs" from ci13xxx  The old implementation used global hw_bank, the new implementation uses udc-local hw_bank. This field seems to be a leftover from previous coding experiments.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | host.h | s | 289B | 11 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780575 |  | usb: chipidea: add host role  This adds EHCI host support to the chipidea driver. We want it to be part of the hdrc driver and not a standalone (sub-)driver module, as the structure of ehci-hcd.c suggests, so for chipidea controller we hack it to not provide platform-related code, but only the ehci hcd.  The ehci-platform driver won't work for us here too, because the controller uses the same registers for both device and host mode and also otg-related bits, so it's not really possible to put ehci registers into a separate resource.  This is not a pretty solution, but the alternative is exporting symbols from the chipidea driver to a ehci-chipidea driver and doing all the module refcounting.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | core.c | s | 11K | 396 | Richard Zhao | richard.zhao@freescale.com | 1337096620 |  | usb: chipidea: remove zero check of hw_ep_max  It's 0 for host only device.  Signed-off-by: Richard Zhao <richard.zhao@freescale.com> Cc: Marek Vasut <marex@denx.de> Cc: Alan Stern <stern@rowland.harvard.edu> Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com> Cc: Felipe Balbi <balbi@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
