f | message.c | s | 60K | 1772 | Daniel Mack | zonque@gmail.com | 1339719214 |  | USB: fix gathering of interface associations  TEAC's UD-H01 (and probably other devices) have a gap in the interface number allocation of their descriptors:    Configuration Descriptor:     bLength                 9     bDescriptorType         2     wTotalLength          220     bNumInterfaces          3     [...]     Interface Descriptor:       bLength                 9       bDescriptorType         4       bInterfaceNumber        0       bAlternateSetting       0       [...]     Interface Association:       bLength                 8       bDescriptorType        11       bFirstInterface         2       bInterfaceCount         2       bFunctionClass          1 Audio       bFunctionSubClass       0       bFunctionProtocol      32       iFunction               4     Interface Descriptor:       bLength                 9       bDescriptorType         4       bInterfaceNumber        2       bAlternateSetting       0       [...]  Once a configuration is selected, usb_set_configuration() walks the known interfaces of a given configuration and calls find_iad() on each of them to set the interface association pointer the interface is included in.  The problem here is that the loop variable is taken for the interface number in the comparison logic that gathers the association. Which is fine as long as the descriptors are sane.  In the case above, however, the logic gets out of sync and the interface association fields of all interfaces beyond the interface number gap are wrong.  Fix this by passing the interface's bInterfaceNumber to find_iad() instead.  Signed-off-by: Daniel Mack <zonque@gmail.com> Reported-by: bEN <ml_all@circa.be> Reported-by: Ivan Perrone <ivanperrone@hotmail.com> Tested-by: ivan perrone <ivanperrone@hotmail.com> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | driver.c | s | 52K | 1550 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380919 |  | USB: Disable USB 3.0 LPM in critical sections.  There are several places where the USB core needs to disable USB 3.0 Link PM:  - usb_bind_interface  - usb_unbind_interface  - usb_driver_claim_interface  - usb_port_suspend/usb_port_resume  - usb_reset_and_verify_device  - usb_set_interface  - usb_reset_configuration  - usb_set_configuration  Use the new LPM disable/enable functions to temporarily disable LPM around these critical sections.  We need to protect the critical section around binding and unbinding USB interface drivers.  USB drivers may want to disable hub-initiated USB 3.0 LPM, which will change the value of the U1/U2 timeouts that the xHCI driver will install.  We need to disable LPM completely until the driver is bound to the interface, and the driver has a chance to enable whatever alternate interface setting it needs in its probe routine. Then re-enable USB3 LPM, and recalculate the U1/U2 timeout values.  We also need to disable LPM in usb_driver_claim_interface, because drivers like usbfs can bind to an interface through that function.  Note, there is no way currently for userspace drivers to disable hub-initiated USB 3.0 LPM.  Revisit this later.  When a driver is unbound, the U1/U2 timeouts may change because we are unbinding the last driver that needed hub-initiated USB 3.0 LPM to be disabled.  USB LPM must be disabled when a USB device is going to be suspended. The USB 3.0 spec does not define a state transition from U1 or U2 into U3, so we need to bring the device into U0 by disabling LPM before we can place it into U3.  Therefore, call usb_unlocked_disable_lpm() in usb_port_suspend(), and call usb_unlocked_enable_lpm() in usb_port_resume().  If the port suspend fails, make sure to re-enable LPM by calling usb_unlocked_enable_lpm(), since usb_port_resume() will not be called on a failed port suspend.  USB 3.0 devices lose their USB 3.0 LPM settings (including whether USB device-initiated LPM is enabled) across device suspend.  Therefore, disable LPM before the device will be reset in usb_reset_and_verify_device(), and re-enable LPM after the reset is complete and the configuration/alt settings are re-installed.  The calculated U1/U2 timeout values are heavily dependent on what USB device endpoints are currently enabled.  When any of the enabled endpoints on the device might change, due to a new configuration, or new alternate interface setting, we need to first disable USB 3.0 LPM, add or delete endpoints from the xHCI schedule, install the new interfaces and alt settings, and then re-enable LPM.  Do this in usb_set_interface, usb_reset_configuration, and usb_set_configuration.  Basically, there is a call to disable and then enable LPM in all functions that lock the bandwidth_mutex.  One exception is usb_disable_device, because the device is disconnecting or otherwise going away, and we should not care about whether USB 3.0 LPM is enabled.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | Makefile | g | 370B |  | Matthew Garrett | mjg@redhat.com | 1336781173 |  | usb: Bind devices to ACPI devices when possible  Built-in USB devices will typically have a representation in the system ACPI tables. Add support for binding the two together so the USB code can make use of the associated methods.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Lan Tianyu <tianyu.lan@intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | devices.c | s | 18K | 611 | Kuninori Morimoto | kuninori.morimoto.gx@renesas.com | 1314118060 |  | USB: use usb_endpoint_maxp() instead of le16_to_cpu()  Now ${LINUX}/drivers/usb/* can use usb_endpoint_maxp(desc) to get maximum packet size instead of le16_to_cpu(desc->wMaxPacketSize). This patch fix it up  Cc: Armin Fuerst <fuerst@in.tum.de> Cc: Pavel Machek <pavel@ucw.cz> Cc: Johannes Erdfelt <johannes@erdfelt.com> Cc: Vojtech Pavlik <vojtech@suse.cz> Cc: Oliver Neukum <oliver@neukum.name> Cc: David Kubicek <dave@awk.cz> Cc: Johan Hovold <jhovold@gmail.com> Cc: Brad Hards <bhards@bigpond.net.au> Acked-by: Felipe Balbi <balbi@ti.com> Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de> Cc: Thomas Dahlmann <dahlmann.thomas@arcor.de> Cc: David Brownell <david-b@pacbell.net> Cc: David Lopo <dlopo@chipidea.mips.com> Cc: Alan Stern <stern@rowland.harvard.edu> Cc: Michal Nazarewicz <m.nazarewicz@samsung.com> Cc: Xie Xiaobo <X.Xie@freescale.com> Cc: Li Yang <leoli@freescale.com> Cc: Jiang Bo <tanya.jiang@freescale.com> Cc: Yuan-hsin Chen <yhchen@faraday-tech.com> Cc: Darius Augulis <augulis.darius@gmail.com> Cc: Xiaochen Shen <xiaochen.shen@intel.com> Cc: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> Cc: OKI SEMICONDUCTOR, <toshiharu-linux@dsn.okisemi.com> Cc: Robert Jarzmik <robert.jarzmik@free.fr> Cc: Ben Dooks <ben@simtec.co.uk> Cc: Thomas Abraham <thomas.ab@samsung.com> Cc: Herbert Pötzl <herbert@13thfloor.at> Cc: Arnaud Patard <arnaud.patard@rtp-net.org> Cc: Roman Weissgaerber <weissg@vienna.at> Acked-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: Tony Olech <tony.olech@elandigitalsystems.com> Cc: Florian Floe Echtler <echtler@fs.tum.de> Cc: Christian Lucht <lucht@codemercs.com> Cc: Juergen Stuber <starblue@sourceforge.net> Cc: Georges Toth <g.toth@e-biz.lu> Cc: Bill Ryder <bryder@sgi.com> Cc: Kuba Ober <kuba@mareimbrium.org> Cc: Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com> Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | quirks.c | s | 6.1K | 152 | Steffen Müller | steffen.mueller@radio-frei.de | 1335796002 |  | usb: add USB_QUIRK_RESET_RESUME for M-Audio 88es  Tested-by: Steffen Müller <steffen.mueller@radio-frei.de> Signed-off-by: Steffen Müller <steffen.mueller@radio-frei.de> Signed-off-by: Stefan Seyfried <seife+kernel@b1-systems.com> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | usb.h | s | 5.3K | 133 | Matthew Garrett | mjg@redhat.com | 1336781173 |  | usb: Bind devices to ACPI devices when possible  Built-in USB devices will typically have a representation in the system ACPI tables. Add support for binding the two together so the USB code can make use of the associated methods.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Lan Tianyu <tianyu.lan@intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | config.c | s | 24K | 757 | Andiry Xu | andiry.xu@amd.com | 1317077468 |  | usbcore: get BOS descriptor set  This commit gets BOS(Binary Device Object Store) descriptor set for Super Speed devices and High Speed devices which support BOS descriptor.  BOS descriptor is used to report additional USB device-level capabilities that are not reported via the Device descriptor. By getting BOS descriptor set, driver can check device's device-level capability such as LPM capability.  Signed-off-by: Andiry Xu <andiry.xu@amd.com> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | endpoint.c | s | 5.1K | 189 | Kuninori Morimoto | kuninori.morimoto.gx@renesas.com | 1314118060 |  | USB: use usb_endpoint_maxp() instead of le16_to_cpu()  Now ${LINUX}/drivers/usb/* can use usb_endpoint_maxp(desc) to get maximum packet size instead of le16_to_cpu(desc->wMaxPacketSize). This patch fix it up  Cc: Armin Fuerst <fuerst@in.tum.de> Cc: Pavel Machek <pavel@ucw.cz> Cc: Johannes Erdfelt <johannes@erdfelt.com> Cc: Vojtech Pavlik <vojtech@suse.cz> Cc: Oliver Neukum <oliver@neukum.name> Cc: David Kubicek <dave@awk.cz> Cc: Johan Hovold <jhovold@gmail.com> Cc: Brad Hards <bhards@bigpond.net.au> Acked-by: Felipe Balbi <balbi@ti.com> Cc: Sebastian Andrzej Siewior <bigeasy@linutronix.de> Cc: Thomas Dahlmann <dahlmann.thomas@arcor.de> Cc: David Brownell <david-b@pacbell.net> Cc: David Lopo <dlopo@chipidea.mips.com> Cc: Alan Stern <stern@rowland.harvard.edu> Cc: Michal Nazarewicz <m.nazarewicz@samsung.com> Cc: Xie Xiaobo <X.Xie@freescale.com> Cc: Li Yang <leoli@freescale.com> Cc: Jiang Bo <tanya.jiang@freescale.com> Cc: Yuan-hsin Chen <yhchen@faraday-tech.com> Cc: Darius Augulis <augulis.darius@gmail.com> Cc: Xiaochen Shen <xiaochen.shen@intel.com> Cc: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> Cc: OKI SEMICONDUCTOR, <toshiharu-linux@dsn.okisemi.com> Cc: Robert Jarzmik <robert.jarzmik@free.fr> Cc: Ben Dooks <ben@simtec.co.uk> Cc: Thomas Abraham <thomas.ab@samsung.com> Cc: Herbert Pötzl <herbert@13thfloor.at> Cc: Arnaud Patard <arnaud.patard@rtp-net.org> Cc: Roman Weissgaerber <weissg@vienna.at> Acked-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: Tony Olech <tony.olech@elandigitalsystems.com> Cc: Florian Floe Echtler <echtler@fs.tum.de> Cc: Christian Lucht <lucht@codemercs.com> Cc: Juergen Stuber <starblue@sourceforge.net> Cc: Georges Toth <g.toth@e-biz.lu> Cc: Bill Ryder <bryder@sgi.com> Cc: Kuba Ober <kuba@mareimbrium.org> Cc: Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com> Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | hcd.c | s | 76K | 2332 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380913 |  | USB: Make sure to fetch the BOS desc for roothubs.  The BOS descriptor is normally fetched and stored in the usb_device->bos during enumeration.  USB 3.0 roothubs don't undergo enumeration, but we need them to have a BOS descriptor, since each xHCI host has a different U1 and U2 exit latency.  Make sure to fetch the BOS descriptor for USB 3.0 roothubs.  It will be freed when the roothub usb_device is released.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: Andiry Xu <andiry.xu@amd.com>
f | generic.c | s | 6.9K | 216 | Alan Stern | stern@rowland.harvard.edu | 1281476143 |  | USB: accept RNDIS configs if there's no alternative  This patch (as1410) makes a slight change to the strategy used for choosing a default configuration.  Currently we skip configs whose first interface is RNDIS, if the kernel wasn't built with the corresponding driver.  This risks losing access to the other interfaces in those configs.  In addition, if there is only one config then we will end up not configuring the device at all.  This changes the logic; now such configurations will be skipped only if there is at least one other config.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Tested-by: Adam Kropelin <akropel1@rochester.rr.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | buffer.c | s | 3.2K | 130 | Tobias Ollmann | tobias.ollmann@gmx.at | 1295753739 |  | USB: Core: Fix minor coding style issues  Fixing all coding style issues in buffer.c  Signed-off-by: Tobias Ollmann <tobias.ollmann@gmx.at> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | otg_whitelist.h | s | 3.2K | 90 | Greg Kroah-Hartman | gregkh@suse.de | 1201905307 |  | USB: fix codingstyle issues in drivers/usb/core/*.h  Fixes a number of coding style issues in the USB internal header files.  Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | Kconfig | g | 3.4K |  | David Herrmann | dh.herrmann@googlemail.com | 1337010590 |  | usb: Kconfig: remove unneeded default value  If no default value is specified, then 'n' is used so the default value used here is not needed. Furthermore, we should never change default values depending on EXPERT mode. EXPERT mode should only make options visible, not change them.  Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Signed-off-by: David Herrmann <dh.herrmann@googlemail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | devio.c | s | 51K | 1853 | Huajun Li | huajun.li.lee@gmail.com | 1337384275 |  | USB: Remove races in devio.c  There exist races in devio.c, below is one case, and there are similar races in destroy_async() and proc_unlinkurb().  Remove these races.   cancel_bulk_urbs()        async_completed() -------------------                -----------------------  spin_unlock(&ps->lock);                             list_move_tail(&as->asynclist, 		                    &ps->async_completed);                             wake_up(&ps->wait);                             Lead to free_async() be triggered,                            then urb and 'as' will be freed.   usb_unlink_urb(as->urb);  ===> refer to the freed 'as'  Signed-off-by: Huajun Li <huajun.li.lee@gmail.com> Cc: Alan Stern <stern@rowland.harvard.edu> Cc: Oncaphillis <oncaphillis@snafu.de> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | hub.c | s | 139K | 4323 | Dan Carpenter | dan.carpenter@oracle.com | 1339630641 |  | USB: Checking the wrong variable in usb_disable_lpm()  We check "u1_params" instead of checking "u2_params".  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | urb.c | s | 28K | 819 | Oliver Neukum | oliver@neukum.org | 1335892933 |  | usbhid: prevent deadlock during timeout  On some HCDs usb_unlink_urb() can directly call the completion handler. That limits the spinlocks that can be taken in the handler to locks not held while calling usb_unlink_urb() To prevent a race with resubmission, this patch exposes usbcore's infrastructure for blocking submission, uses it and so drops the lock without causing a race in usbhid.  Signed-off-by: Oliver Neukum <oneukum@suse.de> Acked-by: Jiri Kosina <jkosina@suse.cz> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | usb.c | s | 30K | 957 | Sasha Levin | levinsasha928@gmail.com | 1337171359 |  | usb: fix breakage on systems without ACPI  Commit da0af6e ("usb: Bind devices to ACPI devices when possible") really tries to force-bind devices even when impossible, unlike what it says in the subject.  CONFIG_ACPI is not an indication that ACPI tables are actually present, nor is an indication that any USB relevant information is present in them. There is no reason to fail the creation of a USB bus if it can't bind it to ACPI device during initialization.  On systems with CONFIG_ACPI set but without ACPI tables it would cause a boot panic.  Signed-off-by: Sasha Levin <levinsasha928@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | hcd-pci.c | s | 15K | 505 | Alan Stern | stern@rowland.harvard.edu | 1339618299 |  | USB: add NO_D3_DURING_SLEEP flag and revert 151b61284776be2  This patch (as1558) fixes a problem affecting several ASUS computers: The machine crashes or corrupts memory when going into suspend if the ehci-hcd driver is bound to any controllers.  Users have been forced to unbind or unload ehci-hcd before putting their systems to sleep.  After extensive testing, it was determined that the machines don't like going into suspend when any EHCI controllers are in the PCI D3 power state.  Presumably this is a firmware bug, but there's nothing we can do about it except to avoid putting the controllers in D3 during system sleep.  The patch adds a new flag to indicate whether the problem is present, and avoids changing the controller's power state if the flag is set. Runtime suspend is unaffected; this matters only for system suspend. However as a side effect, the controller will not respond to remote wakeup requests while the system is asleep.  Hence USB wakeup is not functional -- but of course, this is already true in the current state of affairs.  A similar patch has already been applied as commit 151b61284776be2d6f02d48c23c3625678960b97 (USB: EHCI: fix crash during suspend on ASUS computers).  The patch supersedes that one and reverts it.  There are two differences:  	The old patch added the flag at the USB level; this patch 	adds it at the PCI level.  	The old patch applied to all chipsets with the same vendor, 	subsystem vendor, and product IDs; this patch makes an 	exception for a known-good system (based on DMI information).  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Tested-by: Dâniel Fraga <fragabr@gmail.com> Tested-by: Andrey Rahmatullin <wrar@wrar.name> Tested-by: Steven Rostedt <rostedt@goodmis.org> Cc: stable <stable@vger.kernel.org> Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | sysfs.c | s | 23K | 793 | Alan Stern | stern@rowland.harvard.edu | 1337023196 |  | sysfs: get rid of some lockdep false positives  This patch (as1554) fixes a lockdep false-positive report.  The problem arises because lockdep is unable to deal with the tree-structured locks created by the device core and sysfs.  This particular problem involves a sysfs attribute method that unregisters itself, not from the device it was called for, but from a descendant device.  Lockdep doesn't understand the distinction and reports a possible deadlock, even though the operation is safe.  This is the sort of thing that would normally be handled by using a nested lock annotation; unfortunately it's not feasible to do that here.  There's no sensible way to tell sysfs when attribute removal occurs in the context of a parent attribute method.  As a workaround, the patch adds a new flag to struct attribute telling sysfs not to inform lockdep when it acquires a readlock on a sysfs_dirent instance for the attribute.  The readlock is still acquired, but lockdep doesn't know about it and hence does not complain about impossible deadlock scenarios.  Also added are macros for static initialization of attribute structures with the ignore_lockdep flag set.  The three offending attributes in the USB subsystem are converted to use the new macros.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Acked-by: Tejun Heo <tj@kernel.org> CC: Eric W. Biederman <ebiederm@xmission.com> CC: Peter Zijlstra <peterz@infradead.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | file.c | s | 6.2K | 219 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335933215 |  | USB: file.c: remove dbg() usage  dbg() was a very old USB-specific macro that should no longer be used. This patch removes it from being used in the driver and uses dev_dbg() instead.  CC: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | usb-acpi.c | s | 2.5K | 93 | Matthew Garrett | mjg@redhat.com | 1336781222 |  | usb: Set device removable state based on ACPI USB data  ACPI offers two methods that allow us to infer whether or not a USB port is removable. The _PLD method gives us information on whether the port is "user visible" or not. If that's not present then we can fall back to the _UPC method which tells us whether or not a port is connectable.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Lan Tianyu <tianyu.lan@intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | notify.c | s | 1.8K | 59 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103885 |  | usb: Add export.h for EXPORT_SYMBOL/THIS_MODULE where needed  With module.h being implicitly everywhere via device.h, the absence of explicitly including something for EXPORT_SYMBOL went unnoticed. Since we are heading to fix things up and clean module.h from the device.h file, we need to explicitly include these files now.  Use the lightweight version of the header that has just THIS_MODULE and EXPORT_SYMBOL variants.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
