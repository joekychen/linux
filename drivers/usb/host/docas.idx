f | xhci-mem.c | s | 74K | 2191 | Takashi Iwai | tiwai@suse.de | 1339630650 |  | xhci: Don't free endpoints in xhci_mem_cleanup()  This patch fixes a few issues introduced in the recent fix [f8a9e72d: USB: fix resource leak in xhci power loss path]  - The endpoints listed in bw table are just links and each entry is an  array member of dev->eps[].  But the commit above adds a kfree() call  to these instances, and thus it results in memory corruption.  - It clears only the first entry of rh_bw[], but there can be multiple   ports.  - It'd be safer to clear the list_head of ep as well, not only   removing from the list, as it's checked in   xhci_discover_or_reset_device().  This patch should be backported to kernels as old as 3.2, that contain the commit 839c817ce67178ca3c7c7ad534c571bba1e69ebe "xhci: Store information about roothubs and TTs."  Signed-off-by: Takashi Iwai <tiwai@suse.de> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Reviewed-by: Oliver Neukum <oneukum@suse.de> Cc: <stable@vger.kernel.org>
f | ehci-hcd.c | s | 40K | 1283 | Ricardo Martins | rasm@fe.up.pt | 1339633494 |  | USB: fix PS3 EHCI systems  After commit aaa0ef289afe9186f81e2340114ea413eef0492a "PS3 EHCI QH read work-around", Terratec Grabby (em28xx) stopped working with AMD Geode LX 800 (USB controller AMD CS5536). Since this is a PS3 only fix, the following patch adds a conditional block around it.  Signed-off-by: Ricardo Martins <rasm@fe.up.pt> Acked-by: Alan Stern <stern@rowland.harvard.edu> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-atmel.c | s | 5.9K | 210 | Nicolas Ferre | nicolas.ferre@atmel.com | 1333557343 |  | USB: ehci-atmel: add needed of.h header file  Compilation error in case of non-DT configuration without this of.h header file.  Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com> Acked-by: Jean-Christophe PLAGNIOL-VILLARD <plagnioj@jcrosoft.com> Acked-by: Alan Stern <stern@rowland.harvard.edu>
f | imx21-hcd.c | s | 47K | 1619 | Linus Torvalds | torvalds@linux-foundation.org | 1326139787 |  | Merge branch 'usb-next' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb  * 'usb-next' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (232 commits)   USB: Add USB-ID for Multiplex RC serial adapter to cp210x.c   xhci: Clean up 32-bit build warnings.   USB: update documentation for usbmon   usb: usb-storage doesn't support dynamic id currently, the patch disables the feature to fix an oops   drivers/usb/class/cdc-acm.c: clear dangling pointer   drivers/usb/dwc3/dwc3-pci.c: introduce missing kfree   drivers/usb/host/isp1760-if.c: introduce missing kfree   usb: option: add ZD Incorporated HSPA modem   usb: ch9: fix up MaxStreams helper   USB: usb-skeleton.c: cleanup open_count   USB: usb-skeleton.c: fix open/disconnect race   xhci: Properly handle COMP_2ND_BW_ERR   USB: remove dead code from suspend/resume path   USB: add quirk for another camera   drivers: usb: wusbcore: Fix dependency for USB_WUSB   xhci: Better debugging for critical host errors.   xhci: Be less verbose during URB cancellation.   xhci: Remove debugging about ring structure allocation.   xhci: Remove debugging about toggling cycle bits.   xhci: Remove debugging for individual transfers.   ...
f | ehci-q.c | s | 36K | 1128 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335933215 |  | USB: ehci-q.c: remove dbg() usage  dbg() was a very old USB-specific macro that should no longer be used. This patch removes it from being used in the driver and uses dev_dbg() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-spear.c | s | 5.9K | 215 | Viresh Kumar | viresh.kumar@st.com | 1334784823 |  | USB: ehci: ohci: Add clk_{un}prepare() support  clk_{un}prepare is mandatory for platforms using common clock framework. Since these drivers are used by SPEAr platform, which supports common clock framework, add clk_{un}prepare() support for them.  Signed-off-by: Viresh Kumar <viresh.kumar@st.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | sl811-hcd.c | s | 45K | 1569 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | ehci.h | s | 23K | 650 | Alan Stern | stern@rowland.harvard.edu | 1334011401 |  | EHCI: keep track of ports being resumed and indicate in hub_status_data  This patch (as1537) adds a bit-array to ehci-hcd for keeping track of which ports are undergoing a resume transition.  If any of the bits are set when ehci_hub_status_data() is called, the routine will return a nonzero value even if no ports have any status changes pending. This will allow usbcore to handle races between root-hub suspend and port wakeup.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> CC: Sarah Sharp <sarah.a.sharp@linux.intel.com> CC: Chen Peter-B29397 <B29397@freescale.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | bcma-hcd.c | s | 7.9K | 282 | Geert Uytterhoeven | geert@linux-m68k.org | 1335212520 |  | usb/bcma: Add missing #include <linux/slab.h>  m68k/allmodconfig:  drivers/usb/host/bcma-hcd.c: In function ‘bcma_hcd_probe’: drivers/usb/host/bcma-hcd.c:234: error: implicit declaration of function ‘kzalloc’ drivers/usb/host/bcma-hcd.c:234: warning: assignment makes pointer from integer without a cast drivers/usb/host/bcma-hcd.c:264: error: implicit declaration of function ‘kfree’  Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | Makefile | g | 1.4K |  | Hauke Mehrtens | hauke@hauke-m.de | 1334781810 |  | USB: Add driver for the ssb bus  This adds a USB driver using the generic platform device driver for the USB controller found on the Broadcom ssb bus. The ssb bus just exposes one device which serves the OHCI and the EHCI controller at the same time. This driver probes for this USB controller and creates and registers two new platform devices which will be probed by the new generic platform device driver. This makes it possible to use the EHCI and the OCHI controller on the ssb bus at the same time.  The old ssb OHCI USB driver will be removed in the next step as this driver also provide an OHCI driver and an EHCI for the cores supporting it.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-platform.c | s | 4.3K | 157 | Masanari Iida | standby24x7@gmail.com | 1334782646 |  | usb: Fix various typo within usb  Correct spelling typo within usb  Signed-off-by: Masanari Iida <standby24x7@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-vt8500.c | s | 4.1K | 146 | Geoff Levand | geoff@infradead.org | 1323365933 |  | usb: Remove ehci_reset call from ehci_run  Remove the ehci_reset() call done in the ehci_run() routine of the USB EHCI host controller driver and add an ehci_reset() call to the probe processing of all EHCI platform drivers that do not already call ehci_reset().  The call to ehci_reset() from ehci_run() was problematic for several platform drivers, and unnecessary for others.  This change moves the decision to call ehci_reset() at driver startup to the platform driver code.  Signed-off-by: Geoff Levand <geoff@infradead.org> Acked-by: Alan Stern <stern@rowland.harvard.edu>
f | ehci-tegra.c | s | 21K | 715 | Linus Torvalds | torvalds@linux-foundation.org | 1338060147 |  | 
f | xhci.c | s | 136K | 4072 | Andiry Xu | andiry.xu@gmail.com | 1339630778 |  | xHCI: Increase the timeout for controller save/restore state operation  When system software decides to power down the xHC with the intent of resuming operation at a later time, it will ask xHC to save the internal state and restore it when resume to correctly recover from a power event. Two bits are used to enable this operation: Save State and Restore State.  xHCI spec 4.23.2 says software should "Set the Controller Save/Restore State flag in the USBCMD register and wait for the Save/Restore State Status flag in the USBSTS register to transition to '0'". However, it does not define how long software should wait for the SSS/RSS bit to transition to 0.  Currently the timeout is set to 1ms. There is bug report (https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1002697) indicates that the timeout is too short for ASMedia ASM1042 host controller to save/restore the state successfully. Increase the timeout to 10ms helps to resolve the issue.  This patch should be backported to stable kernels as old as 2.6.37, that contain the commit 5535b1d5f8885695c6ded783c692e3c0d0eda8ca "USB: xHCI: PCI power management implementation"  Signed-off-by: Andiry Xu <andiry.xu@gmail.com> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: Ming Lei <ming.lei@canonical.com> Cc: stable@vger.kernel.org
f | ohci-au1xxx.c | s | 5.3K | 190 | Paul Gortmaker | paul.gortmaker@windriver.com | 1335911769 |  | usb: [MIPS] fix unresolved err() reference in host/ohci-au1xxx.c  Commit af4e1ee04026908086d7ed252db2619a8ceaa333 (usb-next)      "USB: remove err() macro"  was preceeded by a tree-wide cleanup of users, however this one squeaked through the cracks because it had whitespace between the function name and the bracket for the args.  Map it onto dev_err, just like all the "pre-commits" made in advance of af4e1ee04026, such as the example seen in the commit d57b177208b6ec20cacd7321ee32ef02f9f9e7fa:      "USB: ohci-xls.c: remove err() usage"  Build tested with the MIPS gpr_defconfig settings.  Cc: Ralf Baechle <ralf@linux-mips.org> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | uhci-hcd.h | s | 21K | 562 | Jan Andersson | jan@gaisler.com | 1305848600 |  | USB: UHCI: Add support for big endian descriptors  This patch adds support for universal host controllers that use big endian descriptors. Support for BE descriptors requires a non-PCI host controller. For kernels with PCI-only UHCI there should be no change in behaviour.  This patch tries to replicate the technique used to support BE descriptors in the EHCI HCD. Parts added to uhci-hcd.h are basically copy'n'paste from ehci.h.  Signed-off-by: Jan Andersson <jan@gaisler.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | uhci-hcd.c | s | 25K | 797 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | ehci-xls.c | s | 3.7K | 134 | Greg Kroah-Hartman | gregkh@suse.de | 1322365608 |  | Merge 3.2-rc3 into usb-linus  This pulls in the latest USB bugfixes and helps a few of the drivers merge nicer in the future due to changes in both branches.  Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ehci-grlib.c | s | 5.5K | 191 | Joe Perches | joe@perches.com | 1307710536 |  | treewide: Convert uses of struct resource to resource_size(ptr)  Several fixes as well where the +1 was missing.  Done via coccinelle scripts like:  @@ struct resource *ptr; @@  - ptr->end - ptr->start + 1 + resource_size(ptr)  and some grep and typing.  Mostly uncompiled, no cross-compilers.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | xhci-dbg.c | s | 16K | 510 | Alex He | alex.he@amd.com | 1334096512 |  | xHCI: correct to print the true HSEE of USBCMD  Correct the print of HSEE of USBCMD in xhci-dbg.c.  Signed-off-by: Alex He <alex.he@amd.com> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | xhci-pci.c | s | 9.7K | 298 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380924 |  | xhci: Add Intel U1/U2 timeout policy.  All Intel xHCI host controllers support USB 3.0 Link Power Management.  The Panther Point xHCI host controller needs the xHCI driver to calculate the U1 and U2 timeout values, because it will blindly accept a MEL that would cause scheduling issues.  The Lynx Point xHCI host controller will reject MEL values that are too high, but internally it implements the same algorithm that is needed for Panther Point xHCI.  Simplify the code paths by just having the xHCI driver calculate what the U1/U2 timeouts should be.  Comments on the policy are in the code.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | ohci-hcd.c | s | 33K | 1085 | Hauke Mehrtens | hauke@hauke-m.de | 1334781810 |  | USB: OHCI: remove old SSB OHCI driver  This is now replaced by the new ssb USB driver, which also supports devices with an EHCI controller.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-ixp4xx.c | s | 3.7K | 131 | Joe Perches | joe@perches.com | 1307710536 |  | treewide: Convert uses of struct resource to resource_size(ptr)  Several fixes as well where the +1 was missing.  Done via coccinelle scripts like:  @@ struct resource *ptr; @@  - ptr->end - ptr->start + 1 + resource_size(ptr)  and some grep and typing.  Mostly uncompiled, no cross-compilers.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | fhci-dbg.c | s | 3.6K | 116 | Eric Lescouet | Eric.Lescouet@virtuallogix.com | 1274386890 |  | USB: make hcd.h public (drivers dependency)  The usbcore headers: hcd.h and hub.h are shared between usbcore, HCDs and a couple of other drivers (e.g. USBIP modules). So, it makes sense to move them into a more public location and to cleanup dependency of those modules on kernel internal headers. This patch moves hcd.h from drivers/usb/core into include/linux/usb/  Signed-of-by: Eric Lescouet <eric@lescouet.org> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ohci-omap.c | s | 13K | 458 | Linus Torvalds | torvalds@linux-foundation.org | 1337727046 |  | 
f | ohci-exynos.c | s | 6.2K | 221 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551081 |  | USB: ohci-exynos.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | imx21-dbg.c | s | 12K | 442 | Masanari Iida | standby24x7@gmail.com | 1329172354 |  | usb: Fix typo in imx21-dbg.c  Correct spelling "alocate" to "allocate" in drivers/usb/host/imx21-dbg.c  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | r8a66597.h | s | 8.6K | 294 | Yoshihiro Shimoda | yoshihiro.shimoda.uh@renesas.com | 1310162231 |  | usb: r8a66597-hcd: add function for external controller  R8A66597 has the pin of WR0 and WR1. So, if one write-pin of CPU connects to the pins, we have to change the setting of FIFOSEL register in the controller. If we don't change the setting, the controller cannot send the data of odd length.  Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | u132-hcd.c | s | 90K | 3130 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | ohci-q.c | s | 31K | 993 | Alan Stern | stern@rowland.harvard.edu | 1321642260 |  | OHCI: remove uses of hcd->state  This patch (as1500) removes all uses of the objectionable hcd->state variable from the ohci-hcd family of drivers.  It is replaced by a private ohci->rh_state field, just as in uhci-hcd and ehci-hcd.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | fhci-sched.c | s | 23K | 774 | Jerry Huang | r66093@freescale.com | 1318971094 |  | QE/FHCI: fixed the CONTROL bug  For USB CONTROL transaction, when the data length is zero, the IN package is needed to finish this transaction in status stage.  Signed-off-by: Jerry Huang <r66093@freescale.com> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | sl811_cs.c | s | 5.0K | 170 | Joe Perches | joe@perches.com | 1304660782 |  | pcmcia: Convert pcmcia_device_id declarations to const  Saves about 50KB of data.  Old/new size of all objects:    text	   data	    bss	    dec	    hex	filename  563015	  80096	 130684	 773795	  bcea3	(TOTALS)  610916	  32256	 130632	 773804	  bceac	(TOTALS)  Signed-off-by: Joe Perches <joe@perches.com> Acked-by: Kurt Van Dijck <kurt.van.dijck@eia.be> (for drivers/net/can/softing/softing_cs.c) Signed-off-by: Dominik Brodowski <linux@dominikbrodowski.net>
f | ehci-omap.c | s | 13K | 451 | Anand Gadiyar | gadiyar@ti.com | 1339634182 |  | Fix OMAP EHCI suspend/resume failure (i693)  Its observed with some PHY, the 60Mhz clock gets cut too soon for OMAP EHCI, leaving OMAP-EHCI in a bad state.  So on starting port suspend, make sure the 60Mhz clock to EHCI is kept alive using an internal clock, so that EHCi can cleanly transition its hw state machine on a port suspend.  Its not proven if this is the issue hit on USB3333, but the symptoms look very similar.  Signed-off-by: Anand Gadiyar <gadiyar@ti.com> Signed-off-by: Vikram Pandita <vikram.pandita@ti.com> Signed-off-by: Volodymyr Mieshkov <x0182794@ti.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Acked-by: Felipe Balbi <balbi@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-ep93xx.c | s | 5.0K | 179 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335933218 |  | USB: ohci-ep93xx.c: remove dbg() usage  dbg() was a very old USB-specific macro that should no longer be used. This patch removes it from being used in the driver and uses dev_dbg() instead.  CC: Alan Stern <stern@rowland.harvard.edu> CC: Lennert Buytenhek <kernel@wantstofly.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-dbg.c | s | 28K | 954 | Alan Stern | stern@rowland.harvard.edu | 1335207944 |  | EHCI: maintain the ehci->command value properly  The ehci-hcd driver is a little haphazard about keeping track of the state of the USBCMD register.  The ehci->command field is supposed to hold the register's value (apart from a few special bits) at all times, but it isn't maintained properly.  This patch (as1543) cleans up the situation.  It keeps ehci->command up-to-date, and uses that value rather than reading the register from the hardware whenever possible.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-sm501.c | s | 6.7K | 222 | Alan Stern | stern@rowland.harvard.edu | 1321642260 |  | OHCI: remove uses of hcd->state  This patch (as1500) removes all uses of the objectionable hcd->state variable from the ohci-hcd family of drivers.  It is replaced by a private ohci->rh_state field, just as in uhci-hcd and ehci-hcd.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | xhci-hub.c | s | 30K | 976 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380912 |  | xhci: Add roothub code to set U1/U2 timeouts.  USB 3.0 hubs can be put into a mode where the hub can automatically request that the link go into a deeper link power state after the link has been idle for a specified amount of time.  Each of the new USB 3.0 link states (U1 and U2) have their own timeout that can be programmed per port.  Change the xHCI roothub emulation code to handle the request to set the U1 and U2 timeouts.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | ehci-fsl.h | s | 2.5K | 60 | Ramneek Mehresh | ramneek.mehresh@freescale.com | 1334782002 |  | fsl/usb: Add controller version based ULPI and UTMI phy support  Add support for ULPI and UTMI PHYs based on usb controller version info read from device-tree  Example of USB Controller versioning info: Version 1.2 and below : MPC8536, MPC8315, etc Version 1.6 : P1020, P1010, P2020, P5020, etc Version 2.2 : PSC9131, PSC9132, P3060, etc  No changes for non-DT users  Signed-off-by: Ramneek Mehresh <ramneek.mehresh@freescale.com> Acked-by: Li Yang <leoli@freescale.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-pci.c | s | 10K | 350 | Alessandro Rubini | rubini@gnudd.com | 1327443337 |  | usb: add support for STA2X11 host driver  Signed-off-by: Alessandro Rubini <rubini@gnudd.com> Acked-by: Giancarlo Asnaghi <giancarlo.asnaghi@st.com> Cc: Alan Cox <alan@linux.intel.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ohci-cns3xxx.c | s | 4.0K | 141 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551080 |  | USB: ohci-cns3xxx.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | fsl-mph-dr-of.c | s | 8.8K | 287 | Ramneek Mehresh | ramneek.mehresh@freescale.com | 1334782002 |  | fsl/usb: Add controller version based ULPI and UTMI phy support  Add support for ULPI and UTMI PHYs based on usb controller version info read from device-tree  Example of USB Controller versioning info: Version 1.2 and below : MPC8536, MPC8315, etc Version 1.6 : P1020, P1010, P2020, P5020, etc Version 2.2 : PSC9131, PSC9132, P3060, etc  No changes for non-DT users  Signed-off-by: Ramneek Mehresh <ramneek.mehresh@freescale.com> Acked-by: Li Yang <leoli@freescale.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-da8xx.c | s | 10K | 379 | Jan Luebbe | jlu@pengutronix.de | 1336494370 |  | ohci-da8xx: set MODULE_ALIAS to allow autoloading  The Davinci USB platform device (in mach-davinci/usb.c) uses "ohci" as the name. To allow autoloading of the relevant driver, the module needs to set the MODULE_ALIAS.  Signed-off-by: Jan Luebbe <jlu@pengutronix.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-ps3.c | s | 6.3K | 201 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551083 |  | USB: ohci-ps3.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Geoff Levand <geoff@infradead.org> CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | oxu210hp.h | s | 14K | 379 | Harvey Harrison | harvey.harrison@gmail.com | 1237936833 |  | USB: replace uses of __constant_{endian}  The base versions handle constant folding now.  Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ehci-sead3.c | s | 6.5K | 215 | Steven J. Hill | sjhill@mips.com | 1336774650 |  | usb: host: mips: sead3: Fix for big endian.  Fix driver to work properly in big endian mode.  Signed-off-by: Steven J. Hill <sjhill@mips.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-ppc-soc.c | s | 4.9K | 180 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551082 |  | USB: ohci-ppc-soc.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | pci-quirks.h | s | 694B | 17 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1306523256 |  | Intel xhci: Support EHCI/xHCI port switching.  The Intel Panther Point chipsets contain an EHCI and xHCI host controller that shares some number of skew-dependent ports.  These ports can be switched from the EHCI to the xHCI host (and vice versa) by a hardware MUX that is controlled by registers in the xHCI PCI configuration space.  The USB 3.0 SuperSpeed terminations on the xHCI ports can be controlled separately from the USB 2.0 data wires.  This switchover mechanism is there to support users who do a custom install of certain non-Linux operating systems that don't have official USB 3.0 support.  By default, the ports are under EHCI, SuperSpeed terminations are off, and USB 3.0 devices will show up under the EHCI controller at reduced speeds.  (This was more palatable for the marketing folks than having completely dead USB 3.0 ports if no xHCI drivers are available.)  Users should be able to turn on xHCI by default through a BIOS option, but users are happiest when they don't have to change random BIOS settings.  This patch introduces a driver method to switchover the ports from EHCI to xHCI before the EHCI driver finishes PCI enumeration.  We want to switch the ports over before the USB core has the chance to enumerate devices under EHCI, or boot from USB mass storage will fail if the boot device connects under EHCI first, and then gets disconnected when the port switches over to xHCI.  Add code to the xHCI PCI quirk to switch the ports from EHCI to xHCI.  The PCI quirks code will run before any other PCI probe function is called, so this avoids the issue with boot devices.  Another issue is with BIOS behavior during system resume from hibernate. If the BIOS doesn't support xHCI, it may switch the devices under EHCI to allow use of the USB keyboard, mice, and mass storage devices.  It's supposed to remember the value of the port routing registers and switch them back when the OS attempts to take control of the xHCI host controller, but we all know not to trust BIOS writers.  Make both the xHCI driver and the EHCI driver attempt to switchover the ports in their PCI resume functions.  We can't guarantee which PCI device will be resumed first, so this avoids any race conditions.  Writing a '1' to an already set port switchover bit or a '0' to a cleared port switchover bit should have no effect.  The xHCI PCI configuration registers will be documented in the EDS-level chipset spec, which is not public yet.  I have permission from legal and the Intel chipset group to release this patch early to allow good Linux support at product launch.  I've tried to document the registers as much as possible, so please let me know if anything is unclear.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | imx21-hcd.h | s | 12K | 394 | Martin Fuzzey | mfuzzey@gmail.com | 1287768123 |  | USB: imx21-hcd accept arbitary transfer buffer alignement.  The hardware can only do DMA to 4 byte aligned addresses. When this requirement is not met use PIO or a bounce buffer.  PIO is used when the buffer is small enough to directly use the hardware data memory (2*maxpacket).  A bounce buffer is used for larger transfers.  Signed-off-by: Martin Fuzzey <mfuzzey@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ssb-hcd.c | s | 6.8K | 227 | Geert Uytterhoeven | geert@linux-m68k.org | 1335212520 |  | usb/ssb: Add missing #include <linux/slab.h>  m68k/allmodconfig:  drivers/usb/host/ssb-hcd.c: In function ‘ssb_hcd_probe’: drivers/usb/host/ssb-hcd.c:170: error: implicit declaration of function ‘kzalloc’ drivers/usb/host/ssb-hcd.c:170: warning: assignment makes pointer from integer without a cast drivers/usb/host/ssb-hcd.c:205: error: implicit declaration of function ‘kfree’  Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | fhci-hcd.c | s | 19K | 686 | Axel Lin | axel.lin@gmail.com | 1322430512 |  | usb: convert drivers/usb/* to use module_platform_driver()  This patch converts the drivers in drivers/usb/* to use the module_platform_driver() macro which makes the code smaller and a bit simpler.  Cc: Felipe Balbi <balbi@ti.com> Cc: Li Yang <leoli@freescale.com> Cc: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com> Cc: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: Jiri Kosina <jkosina@suse.cz> Cc: Lucas De Marchi <lucas.demarchi@profusion.mobi> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Axel Lin <axel.lin@gmail.com> Acked-by: Peter Korsgaard <jacmet@sunsite.dk> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ehci-ls1x.c | s | 3.4K | 129 | Kelvin Cheung | keguang.zhang@gmail.com | 1327447682 |  | USB: Add EHCI bus glue for Loongson1x SoCs (UPDATED)  Use ehci_setup() in ehci_ls1x_reset().  The Loongson1x SoCs have a built-in EHCI controller. This patch adds the necessary glue code to make the generic EHCI driver usable for them.  Signed-off-by: Kelvin Cheung <keguang.zhang@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | sl811.h | s | 6.7K | 220 | Arjan van de Ven | arjan@linux.intel.com | 1217008409 |  | Rename WARN() to WARNING() to clear the namespace  We want to use WARN() as a variant of WARN_ON(), however a few drivers are using WARN() internally.  This patch renames these to WARNING() to avoid the namespace clash.  A few cases were defining but not using the thing, for those cases I just deleted the definition.  Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Acked-by: Greg KH <greg@kroah.com> Cc: Karsten Keil <kkeil@suse.de> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ohci-ppc-of.c | s | 5.7K | 208 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551082 |  | USB: ohci-ppc-of.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> CC: Grant Likely <grant.likely@secretlab.ca> CC: Rob Herring <rob.herring@calxeda.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | alchemy-common.c | s | 15K | 535 | Manuel Lauss | manuel.lauss@googlemail.com | 1323295325 |  | MIPS: Alchemy: Au1300 SoC support  Add basic support for the Au1300 variant(s): - New GPIO/Interrupt controller - DBDMA ids - USB setup - MMC support - enable various PSC drivers - detection code.  Signed-off-by: Manuel Lauss <manuel.lauss@googlemail.com> To: linux-mips@linux-mips.org Patchwork: https://patchwork.linux-mips.org/patch/2866/ Signed-off-by: Ralf Baechle <ralf@linux-mips.org>
f | ohci-jz4740.c | s | 6.1K | 220 | Stefan Weil | weil@mail.berlios.de | 1289488447 |  | USB: ohci-jz4740: Fix spelling in MODULE_ALIAS  platfrom -> platform  Cc: David Brownell <dbrownell@users.sourceforge.net> Signed-off-by: Stefan Weil <weil@mail.berlios.de> Reviewed-by: Jesper Juhl <jj@chaosbits.net> Cc: stable <stable@kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | fhci-hub.c | s | 8.8K | 294 | Eric Lescouet | Eric.Lescouet@virtuallogix.com | 1274386890 |  | USB: make hcd.h public (drivers dependency)  The usbcore headers: hcd.h and hub.h are shared between usbcore, HCDs and a couple of other drivers (e.g. USBIP modules). So, it makes sense to move them into a more public location and to cleanup dependency of those modules on kernel internal headers. This patch moves hcd.h from drivers/usb/core into include/linux/usb/  Signed-of-by: Eric Lescouet <eric@lescouet.org> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | isp1362-hcd.c | s | 86K | 2488 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | ehci-w90x900.c | s | 4.0K | 152 | Geoff Levand | geoff@infradead.org | 1323365933 |  | usb: Remove ehci_reset call from ehci_run  Remove the ehci_reset() call done in the ehci_run() routine of the USB EHCI host controller driver and add an ehci_reset() call to the probe processing of all EHCI platform drivers that do not already call ehci_reset().  The call to ehci_reset() from ehci_run() was problematic for several platform drivers, and unnecessary for others.  This change moves the decision to call ehci_reset() at driver startup to the platform driver code.  Signed-off-by: Geoff Levand <geoff@infradead.org> Acked-by: Alan Stern <stern@rowland.harvard.edu>
f | fhci-mem.c | s | 2.6K | 98 | Eric Lescouet | Eric.Lescouet@virtuallogix.com | 1274386890 |  | USB: make hcd.h public (drivers dependency)  The usbcore headers: hcd.h and hub.h are shared between usbcore, HCDs and a couple of other drivers (e.g. USBIP modules). So, it makes sense to move them into a more public location and to cleanup dependency of those modules on kernel internal headers. This patch moves hcd.h from drivers/usb/core into include/linux/usb/  Signed-of-by: Eric Lescouet <eric@lescouet.org> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | fhci.h | s | 18K | 522 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | r8a66597-hcd.c | s | 63K | 2156 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1337012437 |  | Revert "usb: move struct usb_device->children to struct usb_hub_port->child"  This reverts commit bebc56d58dc780539777d2b1ca80df5566e2ad87.  The call here is fragile and not well thought out, so revert it, it's not fully baked yet and I don't want this to go into 3.5.  Cc: Lan Tianyu <tianyu.lan@intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-xls.c | s | 3.4K | 133 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551085 |  | USB: ohci-xls.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-sh.c | s | 3.2K | 119 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551084 |  | USB: ohci-sh.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-sysfs.c | s | 5.2K | 159 | Kirill Smelkov | kirr@mns.spb.ru | 1310161893 |  | USB: EHCI: Allow users to override 80% max periodic bandwidth  There are cases, when 80% max isochronous bandwidth is too limiting.  For example I have two USB video capture cards which stream uncompressed video, and to stream full NTSC + PAL videos we'd need      NTSC 640x480 YUV422 @30fps      ~17.6 MB/s     PAL  720x576 YUV422 @25fps      ~19.7 MB/s  isoc bandwidth.  Now, due to limited alt settings in capture devices NTSC one ends up streaming with max_pkt_size=2688  and  PAL with max_pkt_size=2892, both with interval=1. In terms of microframe time allocation this gives      NTSC    ~53us     PAL     ~57us  and together      ~110us  >  100us == 80% of 125us uframe time.  So those two devices can't work together simultaneously because the'd over allocate isochronous bandwidth.  80% seemed a bit arbitrary to me, and I've tried to raise it to 90% and both devices started to work together, so I though sometimes it would be a good idea for users to override hardcoded default of max 80% isoc bandwidth.  After all, isn't it a user who should decide how to load the bus? If I can live with 10% or even 5% bulk bandwidth that should be ok. I'm a USB newcomer, but that 80% set in stone by USB 2.0 specification seems to be chosen pretty arbitrary to me, just to serve as a reasonable default.  NOTE 1 ~~~~~~  for two streams with max_pkt_size=3072 (worst case) both time allocation would be 60us+60us=120us which is 96% periodic bandwidth leaving 4% for bulk and control.  Alan Stern suggested that bulk then would be problematic (less than 300*8 bittimes left per microframe), but I think that is still enough for control traffic.  NOTE 2 ~~~~~~  Sarah Sharp expressed concern that maxing out periodic bandwidth could lead to vendor-specific hardware bugs on host controllers, because  > It's entirely possible that you'll run into > vendor-specific bugs if you try to pack the schedule with isochronous > transfers.  I don't think any hardware designer would seriously test or > validate their hardware with a schedule that is basically a violation of > the USB bus spec (more than 80% for periodic transfers).  So far I've only tested this patch on my HP Mini 5103 with N10 chipset      kirr@mini:~$ lspci     00:00.0 Host bridge: Intel Corporation N10 Family DMI Bridge     00:02.0 VGA compatible controller: Intel Corporation N10 Family Integrated Graphics Controller     00:02.1 Display controller: Intel Corporation N10 Family Integrated Graphics Controller     00:1b.0 Audio device: Intel Corporation N10/ICH 7 Family High Definition Audio Controller (rev 02)     00:1c.0 PCI bridge: Intel Corporation N10/ICH 7 Family PCI Express Port 1 (rev 02)     00:1c.3 PCI bridge: Intel Corporation N10/ICH 7 Family PCI Express Port 4 (rev 02)     00:1d.0 USB Controller: Intel Corporation N10/ICH 7 Family USB UHCI Controller #1 (rev 02)     00:1d.1 USB Controller: Intel Corporation N10/ICH 7 Family USB UHCI Controller #2 (rev 02)     00:1d.2 USB Controller: Intel Corporation N10/ICH 7 Family USB UHCI Controller #3 (rev 02)     00:1d.3 USB Controller: Intel Corporation N10/ICH 7 Family USB UHCI Controller #4 (rev 02)     00:1d.7 USB Controller: Intel Corporation N10/ICH 7 Family USB2 EHCI Controller (rev 02)     00:1e.0 PCI bridge: Intel Corporation 82801 Mobile PCI Bridge (rev e2)     00:1f.0 ISA bridge: Intel Corporation NM10 Family LPC Controller (rev 02)     00:1f.2 SATA controller: Intel Corporation N10/ICH7 Family SATA AHCI Controller (rev 02)     01:00.0 Network controller: Broadcom Corporation BCM4313 802.11b/g/n Wireless LAN Controller (rev 01)     02:00.0 Ethernet controller: Marvell Technology Group Ltd. 88E8059 PCI-E Gigabit Ethernet Controller (rev 11)  and the system works stable with 110us/uframe (~88%) isoc bandwith allocated for above-mentioned isochronous transfers.  NOTE 3 ~~~~~~  This feature is off by default. I mean max periodic bandwidth is set to 100us/uframe by default exactly as it was before the patch. So only those of us who need the extreme settings are taking the risk - normal users who do not alter uframe_periodic_max sysfs attribute should not see any change at all.  NOTE 4 ~~~~~~  I've tried to update documentation in Documentation/ABI/ thoroughly, but only "TBD" was put into Documentation/usb/ehci.txt -- the text there seems to be outdated and much needing refreshing, before it could be amended.  Cc: Sarah Sharp <sarah.a.sharp@linux.intel.com> Signed-off-by: Kirill Smelkov <kirr@mns.spb.ru> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ohci-hub.c | s | 21K | 716 | Roland Stigge | stigge@antcom.de | 1339633571 |  | USB: ohci-hub: Mark ohci_finish_controller_resume() as __maybe_unused  ohci_finish_controller_resume() is intended to be used in platform specific drivers ohci-*.c, included from ohci-hcd.c. Some of them don't actually use ohci_finish_controller_resume(), so mark it as __maybe_unused.  Signed-off-by: Roland Stigge <stigge@antcom.de> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-platform.c | s | 4.6K | 161 | Hauke Mehrtens | hauke@hauke-m.de | 1337384275 |  | USB: ehci-platform: remove update_device  The update_device callback is not needed and the function used here is from the pci ehci driver. Without this patch we get a compile error if ehci-platform is compiled without ehci-pci.  Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Cc: stable <stable@vger.kernel.org> [3.4] Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-pnx8550.c | s | 5.7K | 197 | Paul Gortmaker | paul.gortmaker@windriver.com | 1335911769 |  | usb: [MIPS] fix unresolved err() reference in host/ohci-pnx8550.c  Commit af4e1ee04026908086d7ed252db2619a8ceaa333 (usb-next)      "USB: remove err() macro"  was preceeded by a tree-wide cleanup of users, however this one squeaked through the cracks because it had whitespace between the function name and the bracket for the args.  Map it onto dev_err, just like all the "pre-commits" made in advance of af4e1ee04026, such as the example seen in the commit d57b177208b6ec20cacd7321ee32ef02f9f9e7fa:      "USB: ohci-xls.c: remove err() usage"  Build tested with the MIPS pnx8550-jbs_defconfig settings.  Cc: Ralf Baechle <ralf@linux-mips.org> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-ppc-of.c | s | 6.2K | 228 | Joe Perches | joe@perches.com | 1307710536 |  | treewide: Convert uses of struct resource to resource_size(ptr)  Several fixes as well where the +1 was missing.  Done via coccinelle scripts like:  @@ struct resource *ptr; @@  - ptr->end - ptr->start + 1 + resource_size(ptr)  and some grep and typing.  Mostly uncompiled, no cross-compilers.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | ehci-mxc.c | s | 7.7K | 277 | Sascha Hauer | s.hauer@pengutronix.de | 1335366221 |  | USB ehci mxc: sanitize clock handling  Every i.MX ehci controller has a ahb and a ipg clock, so request it on every SoC. Do not make a special case for the usb phy clock of the i.MX51. Just request it but make it optional.  Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
f | ehci-sched.c | s | 65K | 2169 | Alan Stern | stern@rowland.harvard.edu | 1337025022 |  | USB: EHCI: improve full-speed isochronous scheduling routine  This patch (as1555) improves the code ehci-hcd uses while checking the periodic schedule for isochronous transfers to full-speed devices.  In addition to making sure that a new transfer does not violate the restrictions on the high-speed schedule, it also has to check the restrictions on the full-speed part of the bus, i.e., the part beyond the Transaction Translator (TT).  It does this by calling tt_available() (or tt_no_collision() if CONFIG_USB_EHCI_TT_NEWSCHED isn't enabled).  However it calls that routine on each pass through a loop over the frames being modified, which is an unnecessary expense because tt_available() (or tt_no_collision) already does its own loop over frames.  It is sufficient to do the check just once, before starting the loop.  In addition, the function calls incorrectly converted the transfer's period from microframes to frames by doing a left shift instead of a right shift.  The patch fixes this while moving the calls.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-s5p.c | s | 7.7K | 251 | Jingoo Han | jg1.han@samsung.com | 1334782356 |  | USB: ehci-s5p: add clock gating to suspend/resume  This patch adds clock gating to suspend and resume functions.  Signed-off-by: Jingoo Han <jg1.han@samsung.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-xilinx-of.c | s | 7.8K | 250 | Herton Ronaldo Krzesinski | herton.krzesinski@canonical.com | 1339633494 |  | USB: EHCI: Fix build warning in xilinx ehci driver  This fixes the following warning: In file included from drivers/usb/host/ehci-hcd.c:1246:0: drivers/usb/host/ehci-xilinx-of.c:293:2: warning: initialization from incompatible pointer type [enabled by default] drivers/usb/host/ehci-xilinx-of.c:293:2: warning: (near initialization for 'ehci_hcd_xilinx_of_driver.shutdown') [enabled by default]  Signed-off-by: Herton Ronaldo Krzesinski <herton.krzesinski@canonical.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-at91.c | s | 16K | 578 | Nicolas Ferre | nicolas.ferre@atmel.com | 1336602147 |  | USB: ohci-at91: add a reset function to fix race condition  A possible race condition appears because we are not initializing the ohci->regs before calling usb_hcd_request_irqs(). We move the call to ohci_init() in hcd->driver->reset() instead of hcd->driver->start() to fix this. This was experienced when we share the same IRQ line between OHCI and EHCI controllers.  Signed-off-by: Nicolas Ferre <nicolas.ferre@atmel.com> Tested-by: Christian Eggers <christian.eggers@kathrein.de> Cc: stable <stable@vger.kernel.org> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-dbg.c | s | 21K | 748 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335933217 |  | USB: ohci-dbg.c: remove dbg() usage  dbg() was a very old USB-specific macro that should no longer be used. This patch removes it from being used in the driver and uses dev_dbg() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | uhci-grlib.c | s | 5.4K | 168 | Joe Perches | joe@perches.com | 1307710536 |  | treewide: Convert uses of struct resource to resource_size(ptr)  Several fixes as well where the +1 was missing.  Done via coccinelle scripts like:  @@ struct resource *ptr; @@  - ptr->end - ptr->start + 1 + resource_size(ptr)  and some grep and typing.  Mostly uncompiled, no cross-compilers.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
d | whci |  | 12 items |  | Greg Kroah-Hartman | gregkh@suse.de | 1323731993 |  | Merge branch 'for-next/dwc3' of git://git.kernel.org/pub/scm/linux/kernel/git/balbi/usb into usb-next  * 'for-next/dwc3' of git://git.kernel.org/pub/scm/linux/kernel/git/balbi/usb: (392 commits)   usb: dwc3: ep0: fix for possible early delayed_status   usb: dwc3: gadget: fix stream enable bit   usb: dwc3: ep0: fix GetStatus handling (again)   usb: dwc3: ep0: use dwc3_request for ep0 requsts instead of usb_request   usb: dwc3: use correct hwparam register for power mgm check   usb: dwc3: omap: move to module_platform_driver   usb: dwc3: workaround: missing disconnect event   usb: dwc3: workaround: missing USB3 Reset event   usb: dwc3: workaround: U1/U2 -> U0 transiton   usb: dwc3: gadget: return early in dwc3_cleanup_done_reqs()   usb: dwc3: ep0: handle delayed_status again   usb: dwc3: ep0: push ep0state into xfernotready processing   usb: dwc3: fix sparse errors   usb: dwc3: fix few coding style problems   usb: dwc3: move generic dwc3 code from gadget into core   usb: dwc3: use a helper function for operation mode setting   usb: dwc3: ep0: don't use ep0in for transfers   usb: dwc3: ep0: use proper endianess in SetFeature for wIndex   usb: dwc3: core: drop DWC3_EVENT_BUFFERS_MAX   usb: dwc3: omap: add multiple instances support to OMAP   ...
f | ehci-pci.c | s | 15K | 487 | Alan Stern | stern@rowland.harvard.edu | 1339618299 |  | USB: add NO_D3_DURING_SLEEP flag and revert 151b61284776be2  This patch (as1558) fixes a problem affecting several ASUS computers: The machine crashes or corrupts memory when going into suspend if the ehci-hcd driver is bound to any controllers.  Users have been forced to unbind or unload ehci-hcd before putting their systems to sleep.  After extensive testing, it was determined that the machines don't like going into suspend when any EHCI controllers are in the PCI D3 power state.  Presumably this is a firmware bug, but there's nothing we can do about it except to avoid putting the controllers in D3 during system sleep.  The patch adds a new flag to indicate whether the problem is present, and avoids changing the controller's power state if the flag is set. Runtime suspend is unaffected; this matters only for system suspend. However as a side effect, the controller will not respond to remote wakeup requests while the system is asleep.  Hence USB wakeup is not functional -- but of course, this is already true in the current state of affairs.  A similar patch has already been applied as commit 151b61284776be2d6f02d48c23c3625678960b97 (USB: EHCI: fix crash during suspend on ASUS computers).  The patch supersedes that one and reverts it.  There are two differences:  	The old patch added the flag at the USB level; this patch 	adds it at the PCI level.  	The old patch applied to all chipsets with the same vendor, 	subsystem vendor, and product IDs; this patch makes an 	exception for a known-good system (based on DMI information).  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Tested-by: Dâniel Fraga <fragabr@gmail.com> Tested-by: Andrey Rahmatullin <wrar@wrar.name> Tested-by: Steven Rostedt <rostedt@goodmis.org> Cc: stable <stable@vger.kernel.org> Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | hwa-hc.c | s | 25K | 771 | Linus Torvalds | torvalds@linux-foundation.org | 1326139787 |  | Merge branch 'usb-next' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb  * 'usb-next' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (232 commits)   USB: Add USB-ID for Multiplex RC serial adapter to cp210x.c   xhci: Clean up 32-bit build warnings.   USB: update documentation for usbmon   usb: usb-storage doesn't support dynamic id currently, the patch disables the feature to fix an oops   drivers/usb/class/cdc-acm.c: clear dangling pointer   drivers/usb/dwc3/dwc3-pci.c: introduce missing kfree   drivers/usb/host/isp1760-if.c: introduce missing kfree   usb: option: add ZD Incorporated HSPA modem   usb: ch9: fix up MaxStreams helper   USB: usb-skeleton.c: cleanup open_count   USB: usb-skeleton.c: fix open/disconnect race   xhci: Properly handle COMP_2ND_BW_ERR   USB: remove dead code from suspend/resume path   USB: add quirk for another camera   drivers: usb: wusbcore: Fix dependency for USB_WUSB   xhci: Better debugging for critical host errors.   xhci: Be less verbose during URB cancellation.   xhci: Remove debugging about ring structure allocation.   xhci: Remove debugging about toggling cycle bits.   xhci: Remove debugging for individual transfers.   ...
f | ohci-omap3.c | s | 5.9K | 201 | Keshava Munegowda | Keshava_mgowda@ti.com | 1324034997 |  | ARM: OMAP: USBHOST: Replace usbhs core driver APIs by Runtime pm APIs  The ehci and ohci drivers does not use the APIs of the usbhs core driver; the runtime pm APIs are used for clock enable/disable. Since usbhs is parent platform device of the ehci and ohci devices, the runtime apis indirectly uses the usb hs core device as input parameter to for clock functions.  Signed-off-by: Keshava Munegowda <keshava_mgowda@ti.com> Reviewed-by: Kevin Hilman <khilman@ti.com> Reviewed-by: Partha Basak <parthab@india.ti.com> Acked-by: Felipe Balbi <balbi@ti.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Paul Walmsley <paul@pwsan.com>
f | uhci-hub.c | s | 10K | 361 | Alan Stern | stern@rowland.harvard.edu | 1334011401 |  | UHCI: hub_status_data should indicate if ports are resuming  This patch (as1538) causes uhci_hub_status_data() to return a nonzero value when any port is undergoing a resume transition while the root hub is suspended.  This will allow usbcore to handle races between root-hub suspend and port wakeup.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-pxa27x.c | s | 14K | 442 | Paul Gortmaker | paul.gortmaker@windriver.com | 1335911769 |  | usb: [ARM] fix unresolved err() reference in host/ohci-pxa27x.c  Commit af4e1ee04026908086d7ed252db2619a8ceaa333 (usb-next)      "USB: remove err() macro"  was preceeded by a tree-wide cleanup of users, however this one squeaked through the cracks because it had whitespace between the function name and the bracket for the args.  Map it onto dev_err, just like all the "pre-commits" made in advance of af4e1ee04026, such as the example seen in the commit d57b177208b6ec20cacd7321ee32ef02f9f9e7fa:      "USB: ohci-xls.c: remove err() usage"  Build tested with the ARM magician_defconfig settings.  Cc: Eric Miao <eric.y.miao@gmail.com> Cc: Russell King <linux@arm.linux.org.uk> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-s3c2410.c | s | 12K | 435 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551083 |  | USB: ohci-s3c2410.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> CC: Ben Dooks <ben-linux@fluff.org> CC: Kukjin Kim <kgene.kim@samsung.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | uhci-debug.c | s | 14K | 505 | Jan Andersson | jan@gaisler.com | 1305848600 |  | USB: UHCI: Add support for big endian descriptors  This patch adds support for universal host controllers that use big endian descriptors. Support for BE descriptors requires a non-PCI host controller. For kernels with PCI-only UHCI there should be no change in behaviour.  This patch tries to replicate the technique used to support BE descriptors in the EHCI HCD. Parts added to uhci-hcd.h are basically copy'n'paste from ehci.h.  Signed-off-by: Jan Andersson <jan@gaisler.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | isp116x.h | s | 17K | 536 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | xhci-ext-caps.h | s | 5.2K | 136 | Alex He | alex.he@amd.com | 1334158266 |  | xHCI: Correct the #define XHCI_LEGACY_DISABLE_SMI  Re-define XHCI_LEGACY_DISABLE_SMI and used it in right way. All SMI enable bits will be cleared to zero and flag bits 29:31 are also cleared to zero. Other bits should be presvered as Table 146.  This patch should be backported to kernels as old as 2.6.31.  Signed-off-by: Alex He <alex.he@amd.com> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: stable@vger.kernel.org
f | isp1760-hcd.h | s | 5.8K | 181 | Joachim Foerster | joachim.foerster@missinglinkelectronics.com | 1319056146 |  | usb/isp1760: Allow to optionally trigger low-level chip reset via GPIOLIB.  Properly triggering the reset wire is necessary with the ISP1761 used on Terasic DE4 Altera-FPGA boards using a NIOS2 processor, for example.  This is an optional implementation for the OF binding only. The other bindings just pass an invalid GPIO to the isp1760_register() routine.  Example, usage in DTS:         gpios = <&pio_isp1761rst_0 0 1>; to point to a GPIO controller from within the ISP1761 node: GPIO 0, active low.  Signed-off-by: Joachim Foerster <joachim.foerster@missinglinkelectronics.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | isp1362.h | s | 31K | 912 | Christian Dietrich | qy03fugy@stud.informatik.uni-erlangen.de | 1281476140 |  | USB: host: Remove dead CONFIG_ARCH_KARO  CONFIG_ARCH_KARO doesn't exist in Kconfig and is never defined anywhere else, therefore removing all references for it from the source code.  Signed-off-by: Christian Dietrich <qy03fugy@stud.informatik.uni-erlangen.de> Acked-by: Ryan Mallon <ryan@bluewatersys.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | xhci-plat.c | s | 4.7K | 168 | Sebastian Andrzej Siewior | bigeasy@linutronix.de | 1331659859 |  | usb: host: xhci: add platform driver support  This adds a fairly simple xhci-platform driver support. Currently it is used by the dwc3 driver for supporting host mode.  Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de> Signed-off-by: Felipe Balbi <balbi@ti.com> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | ehci-sh.c | s | 5.3K | 201 | Shimoda, Yoshihiro | yoshihiro.shimoda.uh@renesas.com | 1339719214 |  | usb: ehci-sh: fix illegal phy_init() running when platform_data is NULL  If the platform_data is not set, pdata will be uninitialized value. Since the driver has the following code, if the condition is true when the pdata is uninitialized value, the driver may jump to the illegal phy_init().  	if (pdata && pdata->phy_init) 		pdata->phy_init();  This patch also fixes the following warning:    CC      drivers/usb/host/ehci-hcd.o drivers/usb/host/ehci-sh.c: In function ‘ehci_hcd_sh_probe’: drivers/usb/host/ehci-sh.c:104: warning: ‘pdata’ may be used uninitialized in this function  Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-sa1111.c | s | 6.0K | 215 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335933219 |  | USB: ohci-sa1111.c: remove dbg() usage  dbg() was a very old USB-specific macro that should no longer be used. This patch removes it from being used in the driver and uses dev_dbg() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-pmcmsp.c | s | 9.0K | 317 | Joe Perches | joe@perches.com | 1307710536 |  | treewide: Convert uses of struct resource to resource_size(ptr)  Several fixes as well where the +1 was missing.  Done via coccinelle scripts like:  @@ struct resource *ptr; @@  - ptr->end - ptr->start + 1 + resource_size(ptr)  and some grep and typing.  Mostly uncompiled, no cross-compilers.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | ohci-octeon.c | s | 4.3K | 166 | Yong Zhang | yong.zhang0@gmail.com | 1316335176 |  | USB: irq: Remove IRQF_DISABLED  This flag is a NOOP and can be removed now.  Signed-off-by: Yong Zhang <yong.zhang0@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ehci-spear.c | s | 7.4K | 254 | Viresh Kumar | viresh.kumar@st.com | 1334784823 |  | USB: ehci: ohci: Add clk_{un}prepare() support  clk_{un}prepare is mandatory for platforms using common clock framework. Since these drivers are used by SPEAr platform, which supports common clock framework, add clk_{un}prepare() support for them.  Signed-off-by: Viresh Kumar <viresh.kumar@st.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-tmio.c | s | 9.6K | 309 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335551084 |  | USB: ohci-tmio.c: remove err() usage  err() was a very old USB-specific macro that I thought had gone away.  This patch removes it from being used in the driver and uses dev_err() instead.  CC: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci.h | s | 22K | 626 | Heikki Krogerus | heikki.krogerus@linux.intel.com | 1329132876 |  | usb: otg: Rename otg_transceiver to usb_phy  This is the first step in separating USB transceivers from USB OTG utilities.  Includes fixes to IMX code from Sascha Hauer.  Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com> Acked-by: Sascha Hauer <s.hauer@pengutronix.de> Acked-by: Pavankumar Kondeti <pkondeti@codeaurora.org> Acked-by: Li Yang <leoli@freescale.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Acked-by: Igor Grinberg <grinberg@compulab.co.il> Reviewed-by: Marek Vasut <marek.vasut@gmail.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | octeon2-common.c | s | 4.9K | 168 | David Daney | ddaney@caviumnetworks.com | 1304442572 |  | usb: Configure octeon2 glue logic for proper uSOF cycle period.  The reset value of the uSOF cycle period is incorrect.  Set it to 60,000 bits.  Without this, several commercial USB flash memory devices and hubs fail to work properly.  Signed-off-by: David Daney <ddaney@caviumnetworks.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | isp116x-hcd.c | s | 43K | 1504 | David Howells | dhowells@redhat.com | 1332955803 |  | Remove all #inclusions of asm/system.h  Remove all #inclusions of asm/system.h preparatory to splitting and killing it.  Performed with the following command:  perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`  Signed-off-by: David Howells <dhowells@redhat.com>
f | ehci-cns3xxx.c | s | 4.2K | 142 | Joe Perches | joe@perches.com | 1307710536 |  | treewide: Convert uses of struct resource to resource_size(ptr)  Several fixes as well where the +1 was missing.  Done via coccinelle scripts like:  @@ struct resource *ptr; @@  - ptr->end - ptr->start + 1 + resource_size(ptr)  and some grep and typing.  Mostly uncompiled, no cross-compilers.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | fhci-q.c | s | 6.9K | 239 | Eric Lescouet | Eric.Lescouet@virtuallogix.com | 1274386890 |  | USB: make hcd.h public (drivers dependency)  The usbcore headers: hcd.h and hub.h are shared between usbcore, HCDs and a couple of other drivers (e.g. USBIP modules). So, it makes sense to move them into a more public location and to cleanup dependency of those modules on kernel internal headers. This patch moves hcd.h from drivers/usb/core into include/linux/usb/  Signed-of-by: Eric Lescouet <eric@lescouet.org> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | uhci-pci.c | s | 8.2K | 248 | Jan Andersson | jan@gaisler.com | 1304731440 |  | USB: UHCI: Move PCI specific functions to uhci-pci.c  This patch is part of a series that extend the UHCI HCD to support non-PCI controllers.  This patch moves PCI specific functions to uhci-pci.c and includes this file in uhci-hcd.c. It also renames the function uhci_init to uhci_pci_init.  uhci_init/uhci_pci_init is modified so that the port-detection logic is kept in a new separate function uhci_count_ports() in uhci-hcd.c.  Signed-off-by: Jan Andersson <jan@gaisler.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | xhci.h | s | 61K | 1672 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380924 |  | xhci: Add Intel U1/U2 timeout policy.  All Intel xHCI host controllers support USB 3.0 Link Power Management.  The Panther Point xHCI host controller needs the xHCI driver to calculate the U1 and U2 timeout values, because it will blindly accept a MEL that would cause scheduling issues.  The Lynx Point xHCI host controller will reject MEL values that are too high, but internally it implements the same algorithm that is needed for Panther Point xHCI.  Simplify the code paths by just having the xHCI driver calculate what the U1/U2 timeouts should be.  Comments on the policy are in the code.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | ehci-msm.c | s | 5.8K | 204 | Heikki Krogerus | heikki.krogerus@linux.intel.com | 1330350112 |  | usb: otg: Convert all users to pass struct usb_otg for OTG functions  This changes the otg functions so that they receive struct otg instead of struct usb_phy as parameter and converts all users of these functions to pass the otg member of their usb_phy.  Includes fixes to IMX code from Sascha Hauer.  [ balbi@ti.com : fixed a compile warning on ehci-mv.c ]  Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com> Acked-by: Sascha Hauer <s.hauer@pengutronix.de> Acked-by: Igor Grinberg <grinberg@compulab.co.il> Acked-by: Pavankumar Kondeti <pkondeti@codeaurora.org> Acked-by: Li Yang <leoli@freescale.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Reviewed-by: Marek Vasut <marek.vasut@gmail.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | ehci-au1xxx.c | s | 6.4K | 216 | Geoff Levand | geoff@infradead.org | 1323365933 |  | usb: Remove ehci_reset call from ehci_run  Remove the ehci_reset() call done in the ehci_run() routine of the USB EHCI host controller driver and add an ehci_reset() call to the probe processing of all EHCI platform drivers that do not already call ehci_reset().  The call to ehci_reset() from ehci_run() was problematic for several platform drivers, and unnecessary for others.  This change moves the decision to call ehci_reset() at driver startup to the platform driver code.  Signed-off-by: Geoff Levand <geoff@infradead.org> Acked-by: Alan Stern <stern@rowland.harvard.edu>
f | ohci-mem.c | s | 3.3K | 119 | Mike Nuss | mike@terascala.com | 1192226099 |  | USB: OHCI handles more ZFMicro quirks  The ZF Micro OHCI controller exhibits unexpected behavior that seems to be related to high load.  Under certain conditions, the controller will complete a TD, remove it from the endpoint's queue, and fail to add it to the donelist. This causes the endpoint to appear to stop responding. Worse, if the device is removed while in that state, OHCI will hang while waiting for the orphaned TD to complete.  The situation is not recoverable without rebooting.  This fix enhances the scope of the existing OHCI_QUIRK_ZFMICRO flag:   1. A watchdog routine periodically scans the OHCI structures to check     for orphaned TDs. In these cases the TD is taken back from the     controller and completed normally.   2. If a device is removed while the endpoint is hung but before the     watchdog catches the situation, any outstanding TDs are taken back     from the controller in the 'sanitize' phase.  The ohci-hcd driver used to print "INTR_SF lossage" in this situation; this changes it to the universally accurate "ED unlink timeout".  Other instances of this message presumably have different root causes.  Both this Compaq quirk and a NEC quirk are now properly compiled out for non-PCI builds of this driver.  Signed-off-by: Mike Nuss <mike@terascala.com> Signed-off-by: David Brownell <dbrownell@users.sourceforge.net> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | Kconfig | g | 21K |  | Linus Torvalds | torvalds@linux-foundation.org | 1337739770 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial  Pull trivial updates from Jiri Kosina:  "As usual, it's mostly typo fixes, redundant code elimination and some   documentation updates."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial: (57 commits)   edac, mips: don't change code that has been removed in edac/mips tree   xtensa: Change mail addresses of Hannes Weiner and Oskar Schirmer   lib: Change mail address of Oskar Schirmer   net: Change mail address of Oskar Schirmer   arm/m68k: Change mail address of Sebastian Hess   i2c: Change mail address of Oskar Schirmer   net: Fix tcp_build_and_update_options comment in struct tcp_sock   atomic64_32.h: fix parameter naming mismatch   Kconfig: replace "--- help ---" with "---help---"   c2port: fix bogus Kconfig "default no"   edac: Fix spelling errors.   qla1280: Remove redundant NULL check before release_firmware() call   remoteproc: remove redundant NULL check before release_firmware()   qla2xxx: Remove redundant NULL check before release_firmware() call.   aic94xx: Get rid of redundant NULL check before release_firmware() call   tehuti: delete redundant NULL check before release_firmware()   qlogic: get rid of a redundant test for NULL before call to release_firmware()   bna: remove redundant NULL test before release_firmware()   tg3: remove redundant NULL test before release_firmware() call   typhoon: get rid of redundant conditional before all to release_firmware()   ...
f | xhci-ring.c | s | 113K | 3337 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380920 |  | xhci: Some Evaluate Context commands must succeed.  The upcoming USB 3.0 Link PM patches will introduce new API to enable and disable low-power link states.  We must be able to disable LPM in order to reset a device, or place the device into U3 (device suspend). Therefore, we need to make sure the Evaluate Context command to disable the LPM timeouts can't fail due to there being no room on the command ring.  Introduce a new flag to the function that queues the Evaluate Context command, command_must_succeed.  This tells the ring handler that a TRB has already been reserved for the command (by incrementing xhci->cmd_ring_reserved_trbs), and basically ensures that prepare_ring() won't fail.  A similar flag was already implemented for the Configure Endpoint command queuing function.  All functions that currently call xhci_configure_endpoint() to issue an Evaluate Context command pass "false" for the "must_succeed" parameter, so this patch should have no effect on current xHCI driver behavior.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | isp1760-hcd.c | s | 57K | 1933 | Michael Grzeschik | m.grzeschik@pengutronix.de | 1334782279 |  | isp1760-hcd: fix possible memory leak if urb could not be enqueued  After packetize_urb was called, we could still run into an error path and will not hand over the prepared qtd to the qtd_list. Make sure to free the prepared qtd in that case to avoid memory leaks.  Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-ps3.c | s | 7.1K | 221 | Geoff Levand | geoff@infradead.org | 1323365933 |  | usb: PS3 EHCI HC reset work-around  PS3 EHCI HC errata fix 316 - The PS3 EHCI HC will reset its internal INSNREGXX setup regs back to the chip default values on Host Controller Reset (CMD_RESET) or Light Host Controller Reset (CMD_LRESET).  The work-around for this is for the HC driver to re-initialise these regs when ever the HC is reset.  Adds a new helper routine ps3_ehci_setup_insnreg() which is called from ps3_ehci_hc_reset().  Signed-off-by: Geoff Levand <geoff@infradead.org> Acked-by: Alan Stern <stern@rowland.harvard.edu>
f | ehci-fsl.c | s | 18K | 601 | Jarkko Nikula | jarkko.nikula@bitmer.com | 1337010590 |  | USB: ehci-fsl: Use usb_put_transceiver instead of put_device  Currently usb_put_transceiver calls put_device so this is a no-op but it is better to keep API usage consistent as ehci->transceiver is allocated with usb_get_transceiver.  While at there remove one extra ehci->transceiver test as the code block has already tested it.  Signed-off-by: Jarkko Nikula <jarkko.nikula@bitmer.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-octeon.c | s | 4.6K | 167 | Geoff Levand | geoff@infradead.org | 1323365933 |  | usb: Remove ehci_reset call from ehci_run  Remove the ehci_reset() call done in the ehci_run() routine of the USB EHCI host controller driver and add an ehci_reset() call to the probe processing of all EHCI platform drivers that do not already call ehci_reset().  The call to ehci_reset() from ehci_run() was problematic for several platform drivers, and unnecessary for others.  This change moves the decision to call ehci_reset() at driver startup to the platform driver code.  Signed-off-by: Geoff Levand <geoff@infradead.org> Acked-by: Alan Stern <stern@rowland.harvard.edu>
f | isp1760-if.c | s | 11K | 404 | Michael Grzeschik | m.grzeschik@pengutronix.de | 1334782244 |  | isp1760-if: make module unloads correctly  Without this patch, the prepared disable routines will not be called on module unloading.  Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | fhci-tds.c | s | 16K | 544 | Masanari Iida | standby24x7@gmail.com | 1334782646 |  | usb: Fix various typo within usb  Correct spelling typo within usb  Signed-off-by: Masanari Iida <standby24x7@gmail.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci-nxp.c | s | 11K | 385 | Roland Stigge | stigge@antcom.de | 1335893778 |  | USB: ohci-nxp: Use isp1301 driver  ohci-nxp duplicates the isp1301 driver. This patch removes this code and makes ohci-nxp use the new separate isp1301 driver instead.  Signed-off-by: Roland Stigge <stigge@antcom.de> Acked-by: Arnd Bergmann <arnd@arndb.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | oxu210hp-hcd.c | s | 98K | 3343 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1335933223 |  | USB: oxu210hp-hcd.c: remove dbg() usage  dbg() was a very old USB-specific macro that should no longer be used. This patch removes it from being used in the driver and uses dev_dbg() instead.  CC: Rusty Russell <rusty@rustcorp.com.au> CC: David Howells <dhowells@redhat.com> CC: Alan Stern <stern@rowland.harvard.edu> CC: Mauro Carvalho Chehab <mchehab@redhat.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-orion.c | s | 7.5K | 283 | Andrew Lunn | andrew@lunn.ch | 1336520039 |  | ARM: Orion: EHCI: Add support for enabling clocks  Not all platforms support gating the clock, so it is not an error if the clock does not exist. However, if it does exist, we should enable/disable it as appropriate.  Signed-off-by: Andrew Lunn <andrew@lunn.ch> Tested-by: Jamie Lentin <jm@lentin.co.uk> Signed-off-by: Mike Turquette <mturquette@linaro.org>
f | ehci-lpm.c | s | 2.6K | 79 | Maksim Rayskiy | mrayskiy@broadcom.com | 1297968475 |  | USB: Mark EHCI LPM functions as __maybe_unused  ehci_lpm_set_da and ehci_lpm_check are EHCI 1.1 specific functions which are not used on many platforms but do generate annoying gcc warnings  Signed-off-by: Maksim Rayskiy <mrayskiy@broadcom.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | pci-quirks.c | s | 25K | 809 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1336076320 |  | xhci: Add Lynx Point to list of Intel switchable hosts.  The upcoming Intel Lynx Point chipset includes an xHCI host controller that can have ports switched from the EHCI host controller, just like the Intel Panther Point xHCI host.  This time, ports from both EHCI hosts can be switched to the xHCI host controller.  The PCI config registers to do the port switching are in the exact same place in the xHCI PCI configuration registers, with the same semantics.  Hooray for shipping patches for next-gen hardware before the current gen hardware is even available for purchase!  This patch should be backported to stable kernels as old as 3.0, that contain commit 69e848c2090aebba5698a1620604c7dccb448684 "Intel xhci: Support EHCI/xHCI port switching."  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: stable@vger.kernel.org
f | ehci-hub.c | s | 29K | 958 | Alan Stern | stern@rowland.harvard.edu | 1335207944 |  | EHCI: maintain the ehci->command value properly  The ehci-hcd driver is a little haphazard about keeping track of the state of the USBCMD register.  The ehci->command field is supposed to hold the register's value (apart from a few special bits) at all times, but it isn't maintained properly.  This patch (as1543) cleans up the situation.  It keeps ehci->command up-to-date, and uses that value rather than reading the register from the hardware whenever possible.  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ehci-mv.c | s | 8.7K | 323 | Heikki Krogerus | heikki.krogerus@linux.intel.com | 1330350112 |  | usb: otg: Convert all users to pass struct usb_otg for OTG functions  This changes the otg functions so that they receive struct otg instead of struct usb_phy as parameter and converts all users of these functions to pass the otg member of their usb_phy.  Includes fixes to IMX code from Sascha Hauer.  [ balbi@ti.com : fixed a compile warning on ehci-mv.c ]  Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com> Acked-by: Sascha Hauer <s.hauer@pengutronix.de> Acked-by: Igor Grinberg <grinberg@compulab.co.il> Acked-by: Pavankumar Kondeti <pkondeti@codeaurora.org> Acked-by: Li Yang <leoli@freescale.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Reviewed-by: Marek Vasut <marek.vasut@gmail.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | uhci-q.c | s | 46K | 1526 | Clemens Ladisch | clemens@ladisch.de | 1323476299 |  | usb: fix number of mapped SG DMA entries  Add a new field num_mapped_sgs to struct urb so that we have a place to store the number of mapped entries and can also retain the original value of entries in num_sgs.  Previously, usb_hcd_map_urb_for_dma() would overwrite this with the number of mapped entries, which would break dma_unmap_sg() because it requires the original number of entries.  This fixes warnings like the following when using USB storage devices:  ------------[ cut here ]------------  WARNING: at lib/dma-debug.c:902 check_unmap+0x4e4/0x695()  ehci_hcd 0000:00:12.2: DMA-API: device driver frees DMA sg list with different entry count [map count=4] [unmap count=1]  Modules linked in: ohci_hcd ehci_hcd  Pid: 0, comm: kworker/0:1 Not tainted 3.2.0-rc2+ #319  Call Trace:   <IRQ>  [<ffffffff81036d3b>] warn_slowpath_common+0x80/0x98   [<ffffffff81036de7>] warn_slowpath_fmt+0x41/0x43   [<ffffffff811fa5ae>] check_unmap+0x4e4/0x695   [<ffffffff8105e92c>] ? trace_hardirqs_off+0xd/0xf   [<ffffffff8147208b>] ? _raw_spin_unlock_irqrestore+0x33/0x50   [<ffffffff811fa84a>] debug_dma_unmap_sg+0xeb/0x117   [<ffffffff8137b02f>] usb_hcd_unmap_urb_for_dma+0x71/0x188   [<ffffffff8137b166>] unmap_urb_for_dma+0x20/0x22   [<ffffffff8137b1c5>] usb_hcd_giveback_urb+0x5d/0xc0   [<ffffffffa0000d02>] ehci_urb_done+0xf7/0x10c [ehci_hcd]   [<ffffffffa0001140>] qh_completions+0x429/0x4bd [ehci_hcd]   [<ffffffffa000340a>] ehci_work+0x95/0x9c0 [ehci_hcd]   ...  ---[ end trace f29ac88a5a48c580 ]---  Mapped at:   [<ffffffff811faac4>] debug_dma_map_sg+0x45/0x139   [<ffffffff8137bc0b>] usb_hcd_map_urb_for_dma+0x22e/0x478   [<ffffffff8137c494>] usb_hcd_submit_urb+0x63f/0x6fa   [<ffffffff8137d01c>] usb_submit_urb+0x2c7/0x2de   [<ffffffff8137dcd4>] usb_sg_wait+0x55/0x161  Signed-off-by: Clemens Ladisch <clemens@ladisch.de> Cc: stable <stable@vger.kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ehci-mem.c | s | 6.7K | 226 | Andiry Xu | andiry.xu@amd.com | 1289943400 |  | USB: EHCI: AMD periodic frame list table quirk  On AMD SB700/SB800/Hudson-2/3 platforms, USB EHCI controller may read/write to memory space not allocated to USB controller if there is longer than normal latency on DMA read encountered. In this condition the exposure will be encountered only if the driver has following format of Periodic Frame List link pointer structure:  For any idle periodic schedule, the Frame List link pointers that have the T-bit set to 1 intending to terminate the use of frame list link pointer as a physical memory pointer.  Idle periodic schedule Frame List Link pointer shoule be in the following format to avoid the issue:  Frame list link pointer should be always contains a valid pointer to a inactive QHead with T-bit set to 0.  Signed-off-by: Andiry Xu <andiry.xu@amd.com> Acked-by: David Brownell <dbrownell@users.sourceforge.net> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
