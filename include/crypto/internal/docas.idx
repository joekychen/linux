f | skcipher.h | s | 3.0K | 90 | Steffen Klassert | steffen.klassert@secunet.com | 1333021967 |  | crypto: user - Fix lookup of algorithms with IV generator  We lookup algorithms with crypto_alg_mod_lookup() when instantiating via crypto_add_alg(). However, algorithms that are wrapped by an IV genearator (e.g. aead or genicv type algorithms) need special care. The userspace process hangs until it gets a timeout when we use crypto_alg_mod_lookup() to lookup these algorithms. So export the lookup functions for these algorithms and use them in crypto_add_alg().  Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com> Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
f | hash.h | s | 5.7K | 176 | Herbert Xu | herbert@gondor.apana.org.au | 1247632840 |  | crypto: ahash - Add unaligned handling and default operations  This patch exports the finup operation where available and adds a default finup operation for ahash.  The operations final, finup and digest also will now deal with unaligned result pointers by copying it.  Finally export/import operations are will now be exported too.  Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
f | aead.h | s | 2.1K | 65 | Steffen Klassert | steffen.klassert@secunet.com | 1333021967 |  | crypto: user - Fix lookup of algorithms with IV generator  We lookup algorithms with crypto_alg_mod_lookup() when instantiating via crypto_add_alg(). However, algorithms that are wrapped by an IV genearator (e.g. aead or genicv type algorithms) need special care. The userspace process hangs until it gets a timeout when we use crypto_alg_mod_lookup() to lookup these algorithms. So export the lookup functions for these algorithms and use them in crypto_add_alg().  Signed-off-by: Steffen Klassert <steffen.klassert@secunet.com> Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
f | rng.h | s | 664B | 21 | Neil Horman | nhorman@tuxdriver.com | 1219989004 |  | crypto: rng - RNG interface and implementation  This patch adds a random number generator interface as well as a cryptographic pseudo-random number generator based on AES.  It is meant to be used in cases where a deterministic CPRNG is required.  One of the first applications will be as an input in the IPsec IV generation process.  Signed-off-by: Neil Horman <nhorman@tuxdriver.com> Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
f | compress.h | s | 974B | 24 | Geert Uytterhoeven | Geert.Uytterhoeven@sonycom.com | 1236150333 |  | crypto: compress - Add pcomp interface  The current "comp" crypto interface supports one-shot (de)compression only, i.e. the whole data buffer to be (de)compressed must be passed at once, and the whole (de)compressed data buffer will be received at once. In several use-cases (e.g. compressed file systems that store files in big compressed blocks), this workflow is not suitable. Furthermore, the "comp" type doesn't provide for the configuration of (de)compression parameters, and always allocates workspace memory for both compression and decompression, which may waste memory.  To solve this, add a "pcomp" partial (de)compression interface that provides the following operations:   - crypto_compress_{init,update,final}() for compression,   - crypto_decompress_{init,update,final}() for decompression,   - crypto_{,de}compress_setup(), to configure (de)compression parameters     (incl. allocating workspace memory).  The (de)compression methods take a struct comp_request, which was mimicked after the z_stream object in zlib, and contains buffer pointer and length pairs for input and output.  The setup methods take an opaque parameter pointer and length pair. Parameters are supposed to be encoded using netlink attributes, whose meanings depend on the actual (name of the) (de)compression algorithm.  Signed-off-by: Geert Uytterhoeven <Geert.Uytterhoeven@sonycom.com> Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
