f | grant_table.h | s | 6.5K | 157 | Daniel De Graaf | dgdegra@tycho.nsa.gov | 1337608398 |  | xenbus: Add support for xenbus backend in stub domain  Add an ioctl to the /dev/xen/xenbus_backend device allowing the xenbus backend to be started after the kernel has booted. This allows xenstore to run in a different domain from the dom0.  Signed-off-by: Daniel De Graaf <dgdegra@tycho.nsa.gov> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | balloon.h | s | 1.1K | 34 | Kay Sievers | kay.sievers@vrfy.org | 1323905570 |  | xen-balloon: convert sysdev_class to a regular subsystem  After all sysdev classes are ported to regular driver core entities, the sysdev implementation will be entirely removed from the kernel.  Cc: Jeremy Fitzhardinge <jeremy@goop.org> Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Signed-off-by: Kay Sievers <kay.sievers@vrfy.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | platform_pci.h | s | 1.5K | 41 | Daniel De Graaf | dgdegra@tycho.nsa.gov | 1321463622 |  | xen: Remove hanging references to CONFIG_XEN_PLATFORM_PCI  In 5fbdc10395cd500d6ff844825a918c4e6f38de37 the XEN_PLATFORM_PCI config option was removed, but references in header files remained. Clean up those references.  Signed-off-by: Daniel De Graaf <dgdegra@tycho.nsa.gov> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | features.h | s | 463B | 17 | Jeremy Fitzhardinge | jeremy@xensource.com | 1184773662 |  | xen: Core Xen implementation  This patch is a rollup of all the core pieces of the Xen implementation, including:  - booting and setup  - pagetable setup  - privileged instructions  - segmentation  - interrupt flags  - upcalls  - multicall batching  BOOTING AND SETUP  The vmlinux image is decorated with ELF notes which tell the Xen domain builder what the kernel's requirements are; the domain builder then constructs the address space accordingly and starts the kernel.  Xen has its own entrypoint for the kernel (contained in an ELF note). The ELF notes are set up by xen-head.S, which is included into head.S. In principle it could be linked separately, but it seems to provoke lots of binutils bugs.  Because the domain builder starts the kernel in a fairly sane state (32-bit protected mode, paging enabled, flat segments set up), there's not a lot of setup needed before starting the kernel proper.  The main steps are:   1. Install the Xen paravirt_ops, which is simply a matter of a      structure assignment.   2. Set init_mm to use the Xen-supplied pagetables (analogous to the      head.S generated pagetables in a native boot).   3. Reserve address space for Xen, since it takes a chunk at the top      of the address space for its own use.   4. Call start_kernel()  PAGETABLE SETUP  Once we hit the main kernel boot sequence, it will end up calling back via paravirt_ops to set up various pieces of Xen specific state.  One of the critical things which requires a bit of extra care is the construction of the initial init_mm pagetable.  Because Xen places tight constraints on pagetables (an active pagetable must always be valid, and must always be mapped read-only to the guest domain), we need to be careful when constructing the new pagetable to keep these constraints in mind.  It turns out that the easiest way to do this is use the initial Xen-provided pagetable as a template, and then just insert new mappings for memory where a mapping doesn't already exist.  This means that during pagetable setup, it uses a special version of xen_set_pte which ignores any attempt to remap a read-only page as read-write (since Xen will map its own initial pagetable as RO), but lets other changes to the ptes happen, so that things like NX are set properly.  PRIVILEGED INSTRUCTIONS AND SEGMENTATION  When the kernel runs under Xen, it runs in ring 1 rather than ring 0. This means that it is more privileged than user-mode in ring 3, but it still can't run privileged instructions directly.  Non-performance critical instructions are dealt with by taking a privilege exception and trapping into the hypervisor and emulating the instruction, but more performance-critical instructions have their own specific paravirt_ops.  In many cases we can avoid having to do any hypercalls for these instructions, or the Xen implementation is quite different from the normal native version.  The privileged instructions fall into the broad classes of:   Segmentation: setting up the GDT and the GDT entries, LDT,      TLS and so on.  Xen doesn't allow the GDT to be directly      modified; all GDT updates are done via hypercalls where the new      entries can be validated.  This is important because Xen uses      segment limits to prevent the guest kernel from damaging the      hypervisor itself.   Traps and exceptions: Xen uses a special format for trap entrypoints,      so when the kernel wants to set an IDT entry, it needs to be      converted to the form Xen expects.  Xen sets int 0x80 up specially      so that the trap goes straight from userspace into the guest kernel      without going via the hypervisor.  sysenter isn't supported.   Kernel stack: The esp0 entry is extracted from the tss and provided to      Xen.   TLB operations: the various TLB calls are mapped into corresponding      Xen hypercalls.   Control registers: all the control registers are privileged.  The most      important is cr3, which points to the base of the current pagetable,      and we handle it specially.  Another instruction we treat specially is CPUID, even though its not privileged.  We want to control what CPU features are visible to the rest of the kernel, and so CPUID ends up going into a paravirt_op. Xen implements this mainly to disable the ACPI and APIC subsystems.  INTERRUPT FLAGS  Xen maintains its own separate flag for masking events, which is contained within the per-cpu vcpu_info structure.  Because the guest kernel runs in ring 1 and not 0, the IF flag in EFLAGS is completely ignored (and must be, because even if a guest domain disables interrupts for itself, it can't disable them overall).  (A note on terminology: "events" and interrupts are effectively synonymous.  However, rather than using an "enable flag", Xen uses a "mask flag", which blocks event delivery when it is non-zero.)  There are paravirt_ops for each of cli/sti/save_fl/restore_fl, which are implemented to manage the Xen event mask state.  The only thing worth noting is that when events are unmasked, we need to explicitly see if there's a pending event and call into the hypervisor to make sure it gets delivered.  UPCALLS  Xen needs a couple of upcall (or callback) functions to be implemented by each guest.  One is the event upcalls, which is how events (interrupts, effectively) are delivered to the guests.  The other is the failsafe callback, which is used to report errors in either reloading a segment register, or caused by iret.  These are implemented in i386/kernel/entry.S so they can jump into the normal iret_exc path when necessary.  MULTICALL BATCHING  Xen provides a multicall mechanism, which allows multiple hypercalls to be issued at once in order to mitigate the cost of trapping into the hypervisor.  This is particularly useful for context switches, since the 4-5 hypercalls they would normally need (reload cr3, update TLS, maybe update LDT) can be reduced to one.  This patch implements a generic batching mechanism for hypercalls, which gets used in many places in the Xen code.  Signed-off-by: Jeremy Fitzhardinge <jeremy@xensource.com> Signed-off-by: Chris Wright <chrisw@sous-sol.org> Cc: Ian Pratt <ian.pratt@xensource.com> Cc: Christian Limpach <Christian.Limpach@cl.cam.ac.uk> Cc: Adrian Bunk <bunk@stusta.de>
f | events.h | s | 3.6K | 90 | Stefano Stabellini | stefano.stabellini@eu.citrix.com | 1337623896 |  | xen: do not map the same GSI twice in PVHVM guests.  PV on HVM guests map GSIs into event channels. At restore time the event channels are resumed by restore_pirqs.  Device drivers might try to register the same GSI again through ACPI at restore time, but the GSI has already been mapped and bound by restore_pirqs. This patch detects these situations and avoids  mapping the same GSI multiple times.  Without this patch we get: (XEN) irq.c:2235: dom4: pirq 23 or emuirq 28 already mapped and waste a pirq.  CC: stable@kernel.org Signed-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
d | interface |  | 15 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1332616825 |  | 
f | privcmd.h | s | 2.6K | 68 | Randy Dunlap | randy.dunlap@oracle.com | 1289933825 |  | xen: fix header export to userspace  scripts/headers_install.pl prevents "__user" from being exported to userspace headers, so just use compiler.h to make sure that __user is defined and avoid the error.  unifdef: linux-next-20101112/xx64/usr/include/xen/privcmd.h.tmp: 79: Premature EOF (#if line 33 depth 1)  Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com> Cc:	Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> Cc:	Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Cc:	xen-devel@lists.xensource.com (moderated for non-subscribers) Cc:	virtualization@lists.osdl.org Cc:	Tony Finch <dot@dotat.at> Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
f | xencomm.h | s | 2.5K | 67 | Isaku Yamahata | yamahata@valinux.co.jp | 1209074252 |  | xen: import arch generic part of xencomm  On xen/ia64 and xen/powerpc hypercall arguments are passed by pseudo physical address (guest physical address) so that it's necessary to convert from virtual address into pseudo physical address. The frame work is called xencomm. Import arch generic part of xencomm.  Signed-off-by: Isaku Yamahata <yamahata@valinux.co.jp> Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | xenbus.h | s | 7.7K | 188 | Joe Perches | joe@perches.com | 1332547116 |  | include/ and checkpatch: prefer __scanf to __attribute__((format(scanf,...)  It's equivalent to __printf, so prefer __scanf.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | gntalloc.h | s | 2.6K | 75 | Daniel De Graaf | dgdegra@tycho.nsa.gov | 1297710977 |  | xen/gntalloc,gntdev: Add unmap notify ioctl  This ioctl allows the users of a shared page to be notified when the other end exits abnormally.  [v2: updated description in structs] Signed-off-by: Daniel De Graaf <dgdegra@tycho.nsa.gov> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | swiotlb-xen.h | s | 2.1K | 52 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1332945391 |  | X86 & IA64: adapt for dma_map_ops changes  Adapt core x86 and IA64 architecture code for dma_map_ops changes: replace alloc/free_coherent with generic alloc/free methods.  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> Acked-by: Kyungmin Park <kyungmin.park@samsung.com> [removed swiotlb related changes and replaced it with wrappers,  merged with IA64 patch to avoid inter-patch dependences in intel-iommu code] Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Reviewed-by: Arnd Bergmann <arnd@arndb.de> Acked-by: Tony Luck <tony.luck@intel.com>
f | acpi.h | s | 2.1K | 52 | Konrad Rzeszutek Wilk | konrad.wilk@oracle.com | 1336419198 |  | xen/acpi/sleep: Enable ACPI sleep via the __acpi_os_prepare_sleep  Provide the registration callback to call in the Xen's ACPI sleep functionality. This means that during S3/S5 we make a hypercall XENPF_enter_acpi_sleep with the proper PM1A/PM1B registers.  Based of Ke Yu's <ke.yu@intel.com> initial idea. [ From http://xenbits.xensource.com/linux-2.6.18-xen.hg change c68699484a65 ]  [v1: Added Copyright and license] [v2: Added check if PM1A/B the 16-bits MSB contain something. The spec      only uses 16-bits but might have more in future] Signed-off-by: Liang Tang <liang.tang@oracle.com> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | hvm.h | s | 695B | 25 | Sheng Yang | sheng@linux.intel.com | 1279842359 |  | x86/xen: event channels delivery on HVM.  Set the callback to receive evtchns from Xen, using the callback vector delivery mechanism.  The traditional way for receiving event channel notifications from Xen is via the interrupts from the platform PCI device. The callback vector is a newer alternative that allow us to receive notifications on any vcpu and doesn't need any PCI support: we allocate a vector exclusively to receive events, in the vector handler we don't need to interact with the vlapic, therefore we avoid a VMEXIT.  Signed-off-by: Stefano Stabellini <stefano.stabellini@eu.citrix.com> Signed-off-by: Sheng Yang <sheng@linux.intel.com> Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
f | Kbuild | g | 43B |  | Jeremy Fitzhardinge | jeremy@goop.org | 1287616949 |  | xen: add privcmd driver  The privcmd interface in xenfs allows the tool stack in the privileged domain to get fairly direct access to the hypervisor in order to do various management things such as domain construction.  [ Impact: new xenfs interface for privileged operations ]  Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
f | evtchn.h | s | 2.9K | 80 | Ian Campbell | ian.campbell@citrix.com | 1238430409 |  | xen: add /dev/xen/evtchn driver  This driver is used by application which wish to receive notifications from the hypervisor or other guests via Xen's event channel mechanism. In particular it is used by the xenstore daemon in domain 0.  Signed-off-by: Ian Campbell <ian.campbell@citrix.com> Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
f | xen.h | s | 856B | 26 | Jeremy Fitzhardinge | jeremy@goop.org | 1257353244 |  | xen: move Xen-testing predicates to common header  Move xen_domain and related tests out of asm-x86 to xen/xen.h so they can be included whenever they are necessary.  Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
f | xenbus_dev.h | s | 1.8K | 39 | Daniel De Graaf | dgdegra@tycho.nsa.gov | 1337608398 |  | xenbus: Add support for xenbus backend in stub domain  Add an ioctl to the /dev/xen/xenbus_backend device allowing the xenbus backend to be started after the kernel has booted. This allows xenstore to run in a different domain from the dom0.  Signed-off-by: Daniel De Graaf <dgdegra@tycho.nsa.gov> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | page.h | s | 347B | 12 | David Vrabel | david.vrabel@citrix.com | 1317309130 |  | xen: allow balloon driver to use more than one memory region  Allow the xen balloon driver to populate its list of extra pages from more than one region of memory.  This will allow platforms to provide (for example) a region of low memory and a region of high memory.  The maximum possible number of extra regions is 128 (== E820MAX) which is quite large so xen_extra_mem is placed in __initdata.  This is safe as both xen_memory_setup() and balloon_init() are in __init.  The balloon regions themselves are not altered (i.e., there is still only the one region).  Signed-off-by: David Vrabel <david.vrabel@citrix.com> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | tmem.h | s | 155B | 6 | Jan Beulich | JBeulich@suse.com | 1332272058 |  | xen/tmem: cleanup  Use 'bool' for boolean variables. Do proper section placement. Eliminate an unnecessary export.  Signed-off-by: Jan Beulich <jbeulich@suse.com> Acked-by: Dan Magenheimer <dan.magenheimer@oracle.com> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | gntdev.h | s | 5.6K | 141 | Daniel De Graaf | dgdegra@tycho.nsa.gov | 1297710977 |  | xen/gntalloc,gntdev: Add unmap notify ioctl  This ioctl allows the users of a shared page to be notified when the other end exits abnormally.  [v2: updated description in structs] Signed-off-by: Daniel De Graaf <dgdegra@tycho.nsa.gov> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | hvc-console.h | s | 479B | 15 | Joe Perches | joe@perches.com | 1320107454 |  | treewide: use __printf not __attribute__((format(printf,...)))  Standardize the style for compiler based printf format verification. Standardized the location of __printf too.  Done via script and a little typing.  $ grep -rPl --include=*.[ch] -w "__attribute__" * || \   grep -vP "^(tools||scripts||include/linux/compiler-gcc.h)" || \   xargs perl -n -i -e 'local $/; while (<>) { s/\b__attribute__\s*\(\s*\(\s*format\s*\(\s*printf\s*,\s*(.+)\s*,\s*(.+)\s*\)\s*\)\s*\)/__printf($1, $2)/g ; print; }'  [akpm@linux-foundation.org: revert arch bits] Signed-off-by: Joe Perches <joe@perches.com> Cc: "Kirill A. Shutemov" <kirill@shutemov.name> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | xen-ops.h | s | 875B | 22 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for IA64  Disintegrate asm/system.h for IA64.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Tony Luck <tony.luck@intel.com> cc: linux-ia64@vger.kernel.org
