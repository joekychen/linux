f | nf_conntrack.h | s | 9.4K | 265 | Eric Dumazet | edumazet@google.com | 1336498593 |  | netfilter: nf_conntrack: use this_cpu_inc()  this_cpu_inc() is IRQ safe and faster than local_bh_disable()/__this_cpu_inc()/local_bh_enable(), at least on x86.  Signed-off-by: Eric Dumazet <edumazet@google.com> Cc: Patrick McHardy <kaber@trash.net> Cc: Christoph Lameter <cl@linux.com> Cc: Tejun Heo <tj@kernel.org> Reviewed-by: Christoph Lameter <cl@linux.com> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_timeout.h | s | 1.8K | 64 | Pablo Neira Ayuso | pablo@netfilter.org | 1332460321 |  | netfilter: cttimeout: fix dependency with l4protocol conntrack module  This patch introduces nf_conntrack_l4proto_find_get() and nf_conntrack_l4proto_put() to fix module dependencies between timeout objects and l4-protocol conntrack modules.  Thus, we make sure that the module cannot be removed if it is used by any of the cttimeout objects.  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_protocol.h | s | 2.4K | 54 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_extend.h | s | 2.7K | 92 | Pablo Neira Ayuso | pablo@netfilter.org | 1331138485 |  | netfilter: nf_ct_ext: add timeout extension  This patch adds the timeout extension, which allows you to attach specific timeout policies to flows.  This extension is only used by the template conntrack.  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_helper.h | s | 1.7K | 49 | Patrick McHardy | kaber@trash.net | 1265887629 |  | netfilter: nf_nat: support mangling a single TCP packet multiple times  nf_nat_mangle_tcp_packet() can currently only handle a single mangling per window because it only maintains two sequence adjustment positions: the one before the last adjustment and the one after.  This patch makes sequence number adjustment tracking in nf_nat_mangle_tcp_packet() optional and allows a helper to manually update the offsets after the packet has been fully handled.  Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nf_conntrack_zones.h | s | 608B | 20 | Patrick McHardy | kaber@trash.net | 1266516284 |  | netfilter: nf_defrag_ipv4: fix compilation error with NF_CONNTRACK=n  As reported by Randy Dunlap <randy.dunlap@oracle.com>, compilation of nf_defrag_ipv4 fails with:  include/net/netfilter/nf_conntrack.h:94: error: field 'ct_general' has incomplete type include/net/netfilter/nf_conntrack.h:178: error: 'const struct sk_buff' has no member named 'nfct' include/net/netfilter/nf_conntrack.h:185: error: implicit declaration of function 'nf_conntrack_put' include/net/netfilter/nf_conntrack.h:294: error: 'const struct sk_buff' has no member named 'nfct' net/ipv4/netfilter/nf_defrag_ipv4.c:45: error: 'struct sk_buff' has no member named 'nfct' net/ipv4/netfilter/nf_defrag_ipv4.c:46: error: 'struct sk_buff' has no member named 'nfct'  net/nf_conntrack.h must not be included with NF_CONNTRACK=n, add a few #ifdefs. Long term the header file should be fixed to be usable even with NF_CONNTRACK=n.  Tested-by: Randy Dunlap <randy.dunlap@oracle.com> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nfnetlink_log.h | s | 356B | 12 | Pablo Neira Ayuso | pablo@netfilter.org | 1279186061 |  | nfnetlink_log: do not expose NFULNL_COPY_DISABLED to user-space  This patch moves NFULNL_COPY_PACKET definition from linux/netfilter/nfnetlink_log.h to net/netfilter/nfnetlink_log.h since this copy mode is only for internal use.  I have also changed the value from 0x03 to 0xff. Thus, we avoid a gap from user-space that may confuse users if we add new copy modes in the future.  This change was introduced in: http://www.spinics.net/lists/netfilter-devel/msg13535.html  Since this change is not included in any stable Linux kernel, I think it's safe to make this change now. Anyway, this copy mode does not make any sense from user-space, so this patch should not break any existing setup.  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nf_nat_rule.h | s | 454B | 13 | Patrick McHardy | kaber@trash.net | 1276747946 |  | netfilter: nf_nat: support user-specified SNAT rules in LOCAL_IN  2.6.34 introduced 'conntrack zones' to deal with cases where packets from multiple identical networks are handled by conntrack/NAT. Packets are looped through veth devices, during which they are NATed to private addresses, after which they can continue normally through the stack and possibly have NAT rules applied a second time.  This works well, but is needlessly complicated for cases where only a single SNAT/DNAT mapping needs to be applied to these packets. In that case, all that needs to be done is to assign each network to a seperate zone and perform NAT as usual. However this doesn't work for packets destined for the machine performing NAT itself since its corrently not possible to configure SNAT mappings for the LOCAL_IN chain.  This patch adds a new INPUT chain to the NAT table and changes the targets performing SNAT to be usable in that chain.  Example usage with two identical networks (192.168.0.0/24) on eth0/eth1:  iptables -t raw -A PREROUTING -i eth0 -j CT --zone 1 iptables -t raw -A PREROUTING -i eth0 -j MARK --set-mark 1 iptables -t raw -A PREROUTING -i eth1 -j CT --zone 2 iptabels -t raw -A PREROUTING -i eth1 -j MARK --set-mark 2  iptables -t nat -A INPUT       -m mark --mark 1 -j NETMAP --to 10.0.0.0/24 iptables -t nat -A POSTROUTING -m mark --mark 1 -j NETMAP --to 10.0.0.0/24 iptables -t nat -A INPUT       -m mark --mark 2 -j NETMAP --to 10.0.1.0/24 iptables -t nat -A POSTROUTING -m mark --mark 2 -j NETMAP --to 10.0.1.0/24  iptables -t raw -A PREROUTING -d 10.0.0.0/24 -j CT --zone 1 iptables -t raw -A OUTPUT     -d 10.0.0.0/24 -j CT --zone 1 iptables -t raw -A PREROUTING -d 10.0.1.0/24 -j CT --zone 2 iptables -t raw -A OUTPUT     -d 10.0.1.0/24 -j CT --zone 2  iptables -t nat -A PREROUTING -d 10.0.0.0/24 -j NETMAP --to 192.168.0.0/24 iptables -t nat -A OUTPUT     -d 10.0.0.0/24 -j NETMAP --to 192.168.0.0/24 iptables -t nat -A PREROUTING -d 10.0.1.0/24 -j NETMAP --to 192.168.0.0/24 iptables -t nat -A OUTPUT     -d 10.0.1.0/24 -j NETMAP --to 192.168.0.0/24  Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nf_tproxy_core.h | s | 6.2K | 188 | Eric Dumazet | eric.dumazet@gmail.com | 1323645916 |  | net: use IS_ENABLED(CONFIG_IPV6)  Instead of testing defined(CONFIG_IPV6) |||| defined(CONFIG_IPV6_MODULE)  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | ipv6 |  | 3 items |  | KOVACS Krisztian | hidden@balabit.hu | 1294860308 |  | netfilter: fix compilation when conntrack is disabled but tproxy is enabled  The IPv6 tproxy patches split IPv6 defragmentation off of conntrack, but failed to update the #ifdef stanzas guarding the defragmentation related fields and code in skbuff and conntrack related code in nf_defrag_ipv6.c.  This patch adds the required #ifdefs so that IPv6 tproxy can truly be used without connection tracking.  Original report: http://marc.info/?l=linux-netdev&m=129010118516341&w=2  Reported-by: Randy Dunlap <randy.dunlap@oracle.com> Acked-by: Randy Dunlap <randy.dunlap@oracle.com> Signed-off-by: KOVACS Krisztian <hidden@balabit.hu> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_acct.h | s | 1.6K | 50 | Eric Dumazet | eric.dumazet@gmail.com | 1324167559 |  | netfilter: nf_conntrack: use atomic64 for accounting counters  We can use atomic64_t infrastructure to avoid taking a spinlock in fast path, and remove inaccuracies while reading values in ctnetlink_dump_counters() and connbytes_mt() on 32bit arches.  Suggested by Pablo.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_queue.h | s | 941B | 28 | Jan Engelhardt | jengelh@medozas.de | 1223458500 |  | netfilter: Use unsigned types for hooknum and pf vars  and (try to) consistently use u_int8_t for the L3 family.  Signed-off-by: Jan Engelhardt <jengelh@medozas.de> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nf_conntrack_tuple.h | s | 4.5K | 158 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_ecache.h | s | 6.1K | 207 | Pablo Neira Ayuso | pablo@netfilter.org | 1321918487 |  | netfilter: nf_conntrack: make event callback registration per-netns  This patch fixes an oops that can be triggered following this recipe:  0) make sure nf_conntrack_netlink and nf_conntrack_ipv4 are loaded. 1) container is started. 2) connect to it via lxc-console. 3) generate some traffic with the container to create some conntrack    entries in its table. 4) stop the container: you hit one oops because the conntrack table    cleanup tries to report the destroy event to user-space but the    per-netns nfnetlink socket has already gone (as the nfnetlink    socket is per-netns but event callback registration is global).  To fix this situation, we make the ctnl_notifier per-netns so the callback is registered/unregistered if the container is created/destroyed.  Alex Bligh and Alexey Dobriyan originally proposed one small patch to check if the nfnetlink socket is gone in nfnetlink_has_listeners, but this is a very visited path for events, thus, it may reduce performance and it looks a bit hackish to check for the nfnetlink socket only to workaround this situation. As a result, I decided to follow the bigger path choice, which seems to look nicer to me.  Cc: Alexey Dobriyan <adobriyan@gmail.com> Reported-by: Alex Bligh <alex@alex.org.uk> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_expect.h | s | 3.0K | 85 | Pablo Neira Ayuso | pablo@netfilter.org | 1324647399 |  | netfilter: rework user-space expectation helper support  This partially reworks bc01befdcf3e40979eb518085a075cbf0aacede0 which added userspace expectation support.  This patch removes the nf_ct_userspace_expect_list since now we force to use the new iptables CT target feature to add the helper extension for conntracks that have attached expectations from userspace.  A new version of the proof-of-concept code to implement userspace helpers from userspace is available at:  http://people.netfilter.org/pablo/userspace-conntrack-helpers/nf-ftp-helper-POC.tar.bz2  This patch also modifies the CT target to allow to set the conntrack's userspace helper status flags. This flag is used to tell the conntrack system to explicitly allocate the helper extension.  This helper extension is useful to link the userspace expectations with the master conntrack that is being tracked from one userspace helper.  This feature fixes a problem in the current approach of the userspace helper support. Basically, if the master conntrack that has got a userspace expectation vanishes, the expectations point to one invalid memory address. Thus, triggering an oops in the expectation deletion event path.  I decided not to add a new revision of the CT target because I only needed to add a new flag for it. I'll document in this issue in the iptables manpage. I have also changed the return value from EINVAL to EOPNOTSUPP if one flag not supported is specified. Thus, in the future adding new features that only require a new flag can be added without a new revision.  There is no official code using this in userspace (apart from the proof-of-concept) that uses this infrastructure but there will be some by beginning 2012.  Reported-by: Sam Roberts <vieuxtech@gmail.com> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_l3proto.h | s | 2.7K | 77 | Eric W. Biederman | ebiederm@xmission.com | 1334971350 |  | net: Convert nf_conntrack_proto to use register_net_sysctl  There isn't much advantage here except that strings paths are a bit easier to read, and converting everything to them allows me to kill off ctl_path.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com> Acked-by: Pavel Emelyanov <xemul@parallels.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | xt_log.h | s | 1004B | 46 | Jan Beulich | JBeulich@suse.com | 1332763228 |  | netfilter: xt_LOG: don't use xchg() for simple assignment  At least on ia64 the (bogus) use of xchg() here results in the compiler warning about an unused expression result. As only an assignment is intended here, convert it to such.  Signed-off-by: Jan Beulich <jbeulich@suse.com> Acked-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_helper.h | s | 2.6K | 64 | Eric Leblond | eric@regit.org | 1336498518 |  | netfilter: nf_ct_helper: allow to disable automatic helper assignment  This patch allows you to disable automatic conntrack helper lookup based on TCP/UDP ports, eg.  echo 0 > /proc/sys/net/netfilter/nf_conntrack_helper  [ Note: flows that already got a helper will keep using it even   if automatic helper assignment has been disabled ]  Once this behaviour has been disabled, you have to explicitly use the iptables CT target to attach helper to flows.  There are good reasons to stop supporting automatic helper assignment, for further information, please read:  http://www.netfilter.org/news.html#2012-04-03  This patch also adds one message to inform that automatic helper assignment is deprecated and it will be removed soon (this is spotted only once, with the first flow that gets a helper attached to make it as less annoying as possible).  Signed-off-by: Eric Leblond <eric@regit.org> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_timestamp.h | s | 1.4K | 54 | Patrick McHardy | kaber@trash.net | 1295552812 |  | netfilter: nf_conntrack: fix linker error with NF_CONNTRACK_TIMESTAMP=n  net/built-in.o: In function `nf_conntrack_init_net': net/netfilter/nf_conntrack_core.c:1521: 	undefined reference to `nf_conntrack_tstamp_init' net/netfilter/nf_conntrack_core.c:1531: 	undefined reference to `nf_conntrack_tstamp_fini'  Add dummy inline functions for the =n case to fix this.  Reported-by: John Fastabend <john.r.fastabend@intel.com> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nf_conntrack_core.h | s | 2.4K | 65 | Eric Dumazet | eric.dumazet@gmail.com | 1276006192 |  | netfilter: nf_conntrack: IPS_UNTRACKED bit  NOTRACK makes all cpus share a cache line on nf_conntrack_untracked twice per packet. This is bad for performance. __read_mostly annotation is also a bad choice.  This patch introduces IPS_UNTRACKED bit so that we can use later a per_cpu untrack structure more easily.  A new helper, nf_ct_untracked_get() returns a pointer to nf_conntrack_untracked.  Another one, nf_ct_untracked_status_or() is used by nf_nat_init() to add IPS_NAT_DONE_MASK bits to untracked status.  nf_ct_is_untracked() prototype is changed to work on a nf_conn pointer.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nf_nat.h | s | 1.9K | 57 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_core.h | s | 996B | 29 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_log.h | s | 1.7K | 55 | Joe Perches | joe@perches.com | 1320107454 |  | treewide: use __printf not __attribute__((format(printf,...)))  Standardize the style for compiler based printf format verification. Standardized the location of __printf too.  Done via script and a little typing.  $ grep -rPl --include=*.[ch] -w "__attribute__" * || \   grep -vP "^(tools||scripts||include/linux/compiler-gcc.h)" || \   xargs perl -n -i -e 'local $/; while (<>) { s/\b__attribute__\s*\(\s*\(\s*format\s*\(\s*printf\s*,\s*(.+)\s*,\s*(.+)\s*\)\s*\)\s*\)/__printf($1, $2)/g ; print; }'  [akpm@linux-foundation.org: revert arch bits] Signed-off-by: Joe Perches <joe@perches.com> Cc: "Kirill A. Shutemov" <kirill@shutemov.name> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | ipv4 |  | 2 items |  | Jan Kasprzak | kas@fi.muni.cz | 1244469223 |  | netfilter: nf_ct_icmp: keep the ICMP ct entries longer  Current conntrack code kills the ICMP conntrack entry as soon as the first reply is received. This is incorrect, as we then see only the first ICMP echo reply out of several possible duplicates as ESTABLISHED, while the rest will be INVALID. Also this unnecessarily increases the conntrackd traffic on H-A firewalls.  Make all the ICMP conntrack entries (including the replied ones) last for the default of nf_conntrack_icmp{,v6}_timeout seconds.  Signed-off-by: Jan "Yenya" Kasprzak <kas@fi.muni.cz> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | nf_conntrack_l4proto.h | s | 4.8K | 123 | Pablo Neira Ayuso | pablo@netfilter.org | 1332460321 |  | netfilter: cttimeout: fix dependency with l4protocol conntrack module  This patch introduces nf_conntrack_l4proto_find_get() and nf_conntrack_l4proto_put() to fix module dependencies between timeout objects and l4-protocol conntrack modules.  Thus, we make sure that the module cannot be removed if it is used by any of the cttimeout objects.  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | xt_rateest.h | s | 637B | 18 | Patrick McHardy | kaber@trash.net | 1276615866 |  | Merge branch 'master' of /repos/git/net-next-2.6  Conflicts: 	include/net/netfilter/xt_rateest.h 	net/bridge/br_netfilter.c 	net/netfilter/nf_conntrack_core.c  Signed-off-by: Patrick McHardy <kaber@trash.net>
