f | tc_mirred.h | s | 343B | 14 | stephen hemminger | shemminger@vyatta.com | 1280030660 |  | net sched: fix race in mirred device removal  This fixes hang when target device of mirred packet classifier action is removed.  If a mirror or redirection action is configured to cause packets to go to another device, the classifier holds a ref count, but was assuming the adminstrator cleaned up all redirections before removing. The fix is to add a notifier and cleanup during unregister.  The new list is implicitly protected by RTNL mutex because it is held during filter add/delete as well as notifier.  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Acked-by: Jamal Hadi Salim <hadi@cyberus.ca> Signed-off-by: David S. Miller <davem@davemloft.net>
f | tc_pedit.h | s | 307B | 12 | David S. Miller | davem@sunset.davemloft.net | 1158962110 |  | [PKT_SCHED]: Kill pkt_act.h inlining.  This was simply making templates of functions and mostly causing a lot of code duplication in the classifier action modules.  We solve this more cleanly by having a common "struct tcf_common" that hash worker functions contained once in act_api.c can work with.  Callers work with real action objects that have the common struct plus their module specific struct members.  You go from a common object to the higher level one using a "to_foo()" macro which makes use of container_of() to do the dirty work.  This also kills off act_generic.h which was only used by act_simple.c and keeping it around was more work than the it's value.  Signed-off-by: David S. Miller <davem@davemloft.net>
f | tc_gact.h | s | 328B | 14 | David S. Miller | davem@sunset.davemloft.net | 1158962110 |  | [PKT_SCHED]: Kill pkt_act.h inlining.  This was simply making templates of functions and mostly causing a lot of code duplication in the classifier action modules.  We solve this more cleanly by having a common "struct tcf_common" that hash worker functions contained once in act_api.c can work with.  Callers work with real action objects that have the common struct plus their module specific struct members.  You go from a common object to the higher level one using a "to_foo()" macro which makes use of container_of() to do the dirty work.  This also kills off act_generic.h which was only used by act_simple.c and keeping it around was more work than the it's value.  Signed-off-by: David S. Miller <davem@davemloft.net>
f | tc_nat.h | s | 356B | 16 | Herbert Xu | herbert@gondor.apana.org.au | 1192060391 |  | [PKT_SCHED]: Add stateless NAT  Stateless NAT is useful in controlled environments where restrictions are placed on through traffic such that we don't need connection tracking to correctly NAT protocol-specific data.  In particular, this is of interest when the number of flows or the number of addresses being NATed is large, or if connection tracking information has to be replicated and where it is not practical to do so.  Previously we had stateless NAT functionality which was integrated into the IPv4 routing subsystem.  This was a great solution as long as the NAT worked on a subnet to subnet basis such that the number of NAT rules was relatively small.  The reason is that for SNAT the routing based system had to perform a linear scan through the rules.  If the number of rules is large then major renovations would have take place in the routing subsystem to make this practical.  For the time being, the least intrusive way of achieving this is to use the u32 classifier written by Alexey Kuznetsov along with the actions infrastructure implemented by Jamal Hadi Salim.  The following patch is an attempt at this problem by creating a new nat action that can be invoked from u32 hash tables which would allow large number of stateless NAT rules that can be used/updated in constant time.  The actual NAT code is mostly based on the previous stateless NAT code written by Alexey.  In future we might be able to utilise the protocol NAT code from netfilter to improve support for other protocols.  Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au> Signed-off-by: David S. Miller <davem@davemloft.net>
f | tc_skbedit.h | s | 1.1K | 32 | jamal | hadi@cyberus.ca | 1256273802 |  | pkt_sched: skbedit add support for setting mark  This adds support for setting the skb mark.  Signed-off-by: Jamal Hadi Salim <hadi@cyberus.ca> Signed-off-by: David S. Miller <davem@davemloft.net>
f | tc_ipt.h | s | 309B | 13 | David S. Miller | davem@sunset.davemloft.net | 1158962110 |  | [PKT_SCHED]: Kill pkt_act.h inlining.  This was simply making templates of functions and mostly causing a lot of code duplication in the classifier action modules.  We solve this more cleanly by having a common "struct tcf_common" that hash worker functions contained once in act_api.c can work with.  Callers work with real action objects that have the common struct plus their module specific struct members.  You go from a common object to the higher level one using a "to_foo()" macro which makes use of container_of() to do the dirty work.  This also kills off act_generic.h which was only used by act_simple.c and keeping it around was more work than the it's value.  Signed-off-by: David S. Miller <davem@davemloft.net>
f | tc_defact.h | s | 272B | 11 | David S. Miller | davem@sunset.davemloft.net | 1158962110 |  | [PKT_SCHED]: Kill pkt_act.h inlining.  This was simply making templates of functions and mostly causing a lot of code duplication in the classifier action modules.  We solve this more cleanly by having a common "struct tcf_common" that hash worker functions contained once in act_api.c can work with.  Callers work with real action objects that have the common struct plus their module specific struct members.  You go from a common object to the higher level one using a "to_foo()" macro which makes use of container_of() to do the dirty work.  This also kills off act_generic.h which was only used by act_simple.c and keeping it around was more work than the it's value.  Signed-off-by: David S. Miller <davem@davemloft.net>
f | tc_csum.h | s | 265B | 11 | Gr√©goire Baron | baronchon@n7mm.org | 1282293779 |  | net/sched: add ACT_CSUM action to update packets checksums  net/sched: add ACT_CSUM action to update packets checksums  ACT_CSUM can be called just after ACT_PEDIT in order to re-compute some altered checksums in IPv4 and IPv6 packets. The following checksums are supported by this patch:  - IPv4: IPv4 header, ICMP, IGMP, TCP, UDP & UDPLite  - IPv6: ICMPv6, TCP, UDP & UDPLite It's possible to request in the same action to update different kind of checksums, if the packets flow mix TCP, UDP and UDPLite, ...  An example of usage is done in the associated iproute2 patch.  Version 3 changes:  - remove useless goto instructions  - improve IPv6 hop options decoding  Version 2 changes:  - coding style correction  - remove useless arguments of some functions  - use stack in tcf_csum_dump()  - add tcf_csum_skb_nextlayer() to factor code  Signed-off-by: Gregoire Baron <baronchon@n7mm.org> Acked-by: jamal <hadi@cyberus.ca> Signed-off-by: David S. Miller <davem@davemloft.net>
