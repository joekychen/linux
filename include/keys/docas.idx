f | encrypted-type.h | s | 1.2K | 33 | Roberto Sassu | roberto.sassu@polito.it | 1309180245 |  | encrypted-keys: add key format support  This patch introduces a new parameter, called 'format', that defines the format of data stored by encrypted keys. The 'default' format identifies encrypted keys containing only the symmetric key, while other formats can be defined to support additional information. The 'format' parameter is written in the datablob produced by commands 'keyctl print' or 'keyctl pipe' and is integrity protected by the HMAC.  Signed-off-by: Roberto Sassu <roberto.sassu@polito.it> Acked-by: Gianluca Ramunno <ramunno@polito.it> Acked-by: David Howells <dhowells@redhat.com> Signed-off-by: Mimi Zohar <zohar@linux.vnet.ibm.com>
f | rxrpc-type.h | s | 4.0K | 118 | Anton Blanchard | anton@au1.ibm.com | 1299133133 |  | RxRPC: Fix v1 keys  commit 339412841d7 (RxRPC: Allow key payloads to be passed in XDR form) broke klog for me. I notice the v1 key struct had a kif_version field added:  -struct rxkad_key { -       u16     security_index;         /* RxRPC header security index */ -       u16     ticket_len;             /* length of ticket[] */ -       u32     expiry;                 /* time at which expires */ -       u32     kvno;                   /* key version number */ -       u8      session_key[8];         /* DES session key */ -       u8      ticket[0];              /* the encrypted ticket */ -};  +struct rxrpc_key_data_v1 { +       u32             kif_version;            /* 1 */ +       u16             security_index; +       u16             ticket_length; +       u32             expiry;                 /* time_t */ +       u32             kvno; +       u8              session_key[8]; +       u8              ticket[0]; +};  However the code in rxrpc_instantiate strips it away:  	data += sizeof(kver); 	datalen -= sizeof(kver);  Removing kif_version fixes my problem.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | ceph-type.h | s | 123B | 5 | Tommi Virtanen | tommi.virtanen@dreamhost.com | 1301425884 |  | libceph: Create a new key type "ceph".  This allows us to use existence of the key type as a feature test, from userspace.  Signed-off-by: Tommi Virtanen <tommi.virtanen@dreamhost.com> Signed-off-by: Sage Weil <sage@newdream.net>
f | trusted-type.h | s | 770B | 25 | Mimi Zohar | zohar@linux.vnet.ibm.com | 1290981325 |  | keys: add new trusted key-type  Define a new kernel key-type called 'trusted'.  Trusted keys are random number symmetric keys, generated and RSA-sealed by the TPM.  The TPM only unseals the keys, if the boot PCRs and other criteria match. Userspace can only ever see encrypted blobs.  Based on suggestions by Jason Gunthorpe, several new options have been added to support additional usages.  The new options are: migratable=  designates that the key may/may not ever be updated              (resealed under a new key, new pcrinfo or new auth.)  pcrlock=n    extends the designated PCR 'n' with a random value,              so that a key sealed to that PCR may not be unsealed              again until after a reboot.  keyhandle=   specifies the sealing/unsealing key handle.  keyauth=     specifies the sealing/unsealing key auth.  blobauth=    specifies the sealed data auth.  Implementation of a kernel reserved locality for trusted keys will be investigated for a possible future extension.  Changelog: - Updated and added examples to Documentation/keys-trusted-encrypted.txt - Moved generic TPM constants to include/linux/tpm_command.h   (David Howell's suggestion.) - trusted_defined.c: replaced kzalloc with kmalloc, added pcrlock failure   error handling, added const qualifiers where appropriate. - moved to late_initcall - updated from hash to shash (suggestion by David Howells) - reduced worst stack usage (tpm_seal) from 530 to 312 bytes - moved documentation to Documentation directory (suggestion by David Howells) - all the other code cleanups suggested by David Howells - Add pcrlock CAP_SYS_ADMIN dependency (based on comment by Jason Gunthorpe) - New options: migratable, pcrlock, keyhandle, keyauth, blobauth (based on   discussions with Jason Gunthorpe) - Free payload on failure to create key(reported/fixed by Roberto Sassu) - Updated Kconfig and other descriptions (based on Serge Hallyn's suggestion) - Replaced kzalloc() with kmalloc() (reported by Serge Hallyn)  Signed-off-by: David Safford <safford@watson.ibm.com> Signed-off-by: Mimi Zohar <zohar@us.ibm.com> Signed-off-by: James Morris <jmorris@namei.org>
f | keyring-type.h | s | 909B | 26 | David Howells | dhowells@redhat.com | 1336730216 |  | KEYS: Permit in-place link replacement in keyring list  Make use of the previous patch that makes the garbage collector perform RCU synchronisation before destroying defunct keys.  Key pointers can now be replaced in-place without creating a new keyring payload and replacing the whole thing as the discarded keys will not be destroyed until all currently held RCU read locks are released.  If the keyring payload space needs to be expanded or contracted, then a replacement will still need allocating, and the original will still have to be freed by RCU.  Signed-off-by: David Howells <dhowells@redhat.com>
f | user-type.h | s | 1.7K | 41 | Jeff Layton | jlayton@redhat.com | 1326861580 |  | keys: add a "logon" key type  For CIFS, we want to be able to store NTLM credentials (aka username and password) in the keyring. We do not, however want to allow users to fetch those keys back out of the keyring since that would be a security risk.  Unfortunately, due to the nuances of key permission bits, it's not possible to do this. We need to grant search permissions so the kernel can find these keys, but that also implies permissions to read the payload.  Resolve this by adding a new key_type. This key type is essentially the same as key_type_user, but does not define a .read op. This prevents the payload from ever being visible from userspace. This key type also vets the description to ensure that it's "qualified" by checking to ensure that it has a ':' in it that is preceded by other characters.  Acked-by: David Howells <dhowells@redhat.com> Signed-off-by: Jeff Layton <jlayton@redhat.com> Signed-off-by: Steve French <smfrench@gmail.com>
f | dns_resolver-type.h | s | 689B | 18 | Wang Lei | wang840925@gmail.com | 1281028671 |  | DNS: Separate out CIFS DNS Resolver code  Separate out the DNS resolver key type from the CIFS filesystem into its own module so that it can be made available for general use, including the AFS filesystem module.  This facility makes it possible for the kernel to upcall to userspace to have it issue DNS requests, package up the replies and present them to the kernel in a useful form.  The kernel is then able to cache the DNS replies as keys can be retained in keyrings.  Resolver keys are of type "dns_resolver" and have a case-insensitive description that is of the form "[<type>:]<domain_name>".  The optional <type> indicates the particular DNS lookup and packaging that's required.  The <domain_name> is the query to be made.  If <type> isn't given, a basic hostname to IP address lookup is made, and the result is stored in the key in the form of a printable string consisting of a comma-separated list of IPv4 and IPv6 addresses.  This key type is supported by userspace helpers driven from /sbin/request-key and configured through /etc/request-key.conf.  The cifs.upcall utility is invoked for UNC path server name to IP address resolution.  The CIFS functionality is encapsulated by the dns_resolve_unc_to_ip() function, which is used to resolve a UNC path to an IP address for CIFS filesystem.  This part remains in the CIFS module for now.  See the added Documentation/networking/dns_resolver.txt for more information.  Signed-off-by: Wang Lei <wang840925@gmail.com> Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Jeff Layton <jlayton@redhat.com> Signed-off-by: Steve French <sfrench@us.ibm.com>
