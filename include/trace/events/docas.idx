f | jbd.h | s | 4.3K | 139 | Jan Kara | jack@suse.cz | 1337117677 |  | jbd: Write journal superblock with WRITE_FUA after checkpointing  If journal superblock is written only in disk's caches and other transaction starts reusing space of the transaction cleaned from the log, it can happen blocks of a new transaction reach the disk before journal superblock. When power failure happens in such case, subsequent journal replay would still try to replay the old transaction but some of it's blocks may be already overwritten by the new transaction. For this reason we must use WRITE_FUA when updating log tail and we must first write new log tail to disk and update in-memory information only after that.  Signed-off-by: Jan Kara <jack@suse.cz>
f | power.h | s | 5.9K | 190 | Arve Hjønnevåg | arve@android.com | 1335900325 |  | PM / Sleep: Add wakeup_source_activate and wakeup_source_deactivate tracepoints  Add tracepoints to wakeup_source_activate and wakeup_source_deactivate. Useful for checking that specific wakeup sources overlap as expected.  Signed-off-by: Arve Hjønnevåg <arve@android.com> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl>
f | workqueue.h | s | 2.7K | 93 | Stephen Boyd | sboyd@codeaurora.org | 1334047787 |  | workqueue: Fix workqueue_execute_end() comment  workqueue_execute_end() is called after the callback function, not before.  Signed-off-by: Stephen Boyd <sboyd@codeaurora.org> Acked-by: Tejun Heo <tj@kernel.org> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | udp.h | s | 593B | 22 | Satoru Moriya | satoru.moriya@hds.com | 1308697570 |  | udp: add tracepoints for queueing skb to rcvbuf  This patch adds a tracepoint to __udp_queue_rcv_skb to get the return value of ip_queue_rcv_skb. It indicates why kernel drops a packet at this point.  ip_queue_rcv_skb returns following values in the packet drop case:  rcvbuf is full                 : -ENOMEM sk_filter returns error        : -EINVAL, -EACCESS, -ENOMEM, etc. __sk_mem_schedule returns error: -ENOBUF  Signed-off-by: Satoru Moriya <satoru.moriya@hds.com> Acked-by: Neil Horman <nhorman@tuxdriver.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | kmem.h | s | 6.9K | 231 | Konstantin Khlebnikov | khlebnikov@openvz.org | 1326241841 |  | mm-tracepoint: rename page-free events  Rename mm_page_free_direct into mm_page_free and mm_pagevec_free into mm_page_free_batched  Since v2.6.33-5426-gc475dab the kernel triggers mm_page_free_direct for all freed pages, not only for directly freed.  So, let's name it properly.  For pages freed via page-list we also trigger mm_page_free_batched event.  Signed-off-by: Konstantin Khlebnikov <khlebnikov@openvz.org> Cc: Mel Gorman <mel@csn.ul.ie> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Reviewed-by: Minchan Kim <minchan.kim@gmail.com> Cc: Hugh Dickins <hughd@google.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | timer.h | s | 7.4K | 256 | Arjan van de Ven | arjan@linux.intel.com | 1282215641 |  | tracing: Fix timer tracing  PowerTOP would like to be able to trace timers.  Unfortunately, the current timer tracing is not very useful: the actual timer function is not recorded in the trace at the start of timer execution.  Although this is recorded for timer "start" time (when it gets armed), this is not useful; most timers get started early, and a tracer like PowerTOP will never see this event, but will only see the actual running of the  timer.  This patch just adds the function to the timer tracing; I've verified with PowerTOP that now it can get useful information about timers.  Signed-off-by: Arjan van de Ven <arjan@linux.intel.com> Cc: xiaoguangrong@cn.fujitsu.com Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: <stable@kernel.org> # .35.x, .34.x, .33.x LKML-Reference: <4C6C5FA9.3000405@linux.intel.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | lock.h | s | 1.7K | 58 | Frederic Weisbecker | fweisbec@gmail.com | 1273405535 |  | tracing: Factorize lock events in a lock class  lock_acquired, lock_contended and lock_release now share the same prototype and format. Let's factorize them into a lock event class.  Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Hitoshi Mitake <mitake@dcl.info.waseda.ac.jp> Cc: Steven Rostedt <rostedt@goodmis.org>
f | regulator.h | s | 2.4K | 89 | Mark Brown | broonie@opensource.wolfsonmicro.com | 1294842780 |  | regulator: Add basic trace facilities  Provide some basic trace facilities to the regulator API. We generate events on regulator enable, disable and voltage setting over the actual hardware operations (which are assumed to be the expensive ones which require interaction with the actual device). This is intended to facilitate debug of the performance and behaviour with consumers allowing unified traces to be generated including the regulator operations within the context of the other components of the system.  For enable we log the explicit delay for the voltage ramp separately to the interaction with the hardware to highlight the time consumed in I/O. We should add a similar delay for voltage changes, though there the relatively small magnitude of the changes in the context of the I/O costs makes it much less critical for most regulators.  Only hardware interactions are currently traced as the primary focus is on the performance and synchronisation of actual hardware interactions. Additional tracepoints for debugging of the logical operations can be added later if required.  Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com> Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>
f | ext3.h | s | 18K | 669 | Eric W. Biederman | ebiederm@xmission.com | 1337119167 |  | userns: Convert ext3 to use kuid/kgid where appropriate  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | rpm.h | s | 2.3K | 78 | Paul Gortmaker | paul.gortmaker@windriver.com | 1331908704 |  | device.h: audit and cleanup users in main include dir  The <linux/device.h> header includes a lot of stuff, and it in turn gets a lot of use just for the basic "struct device" which appears so often.  Clean up the users as follows:  1) For those headers only needing "struct device" as a pointer in fcn args, replace the include with exactly that.  2) For headers not really using anything from device.h, simply delete the include altogether.  3) For headers relying on getting device.h implicitly before being included themselves, now explicitly include device.h  4) For files in which doing #1 or #2 uncovers an implicit dependency on some other header, fix by explicitly adding the required header(s).  Any C files that were implicitly relying on device.h to be present have already been dealt with in advance.  Total removals from #1 and #2: 51.  Total additions coming from #3: 9.  Total other implicit dependencies from #4: 7.  As of 3.3-rc1, there were 110, so a net removal of 42 gives about a 38% reduction in device.h presence in include/*  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | printk.h | s | 1.1K | 32 | Johannes Berg | johannes.berg@intel.com | 1329158765 |  | printk/tracing: Add console output tracing  Add a printk.console trace point to record any printk messages into the trace, regardless of the current console loglevel. This can help correlate (existing) printk debugging with other tracing.  Link: http://lkml.kernel.org/r/1322161388.5366.54.camel@jlt3.sipsolutions.net  Acked-by: Frederic Weisbecker <fweisbec@gmail.com> Cc: Christoph Hellwig <hch@infradead.org> Cc: Ingo Molnar <mingo@redhat.com> Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Acked-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Johannes Berg <johannes.berg@intel.com> Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | oom.h | s | 715B | 24 | KAMEZAWA Hiroyuki | kamezawa.hiroyu@jp.fujitsu.com | 1326241844 |  | tracepoint: add tracepoints for debugging oom_score_adj  oom_score_adj is used for guarding processes from OOM-Killer.  One of problem is that it's inherited at fork().  When a daemon set oom_score_adj and make children, it's hard to know where the value is set.  This patch adds some tracepoints useful for debugging. This patch adds 3 trace points.   - creating new task   - renaming a task (exec)   - set oom_score_adj  To debug, users need to enable some trace pointer. Maybe filtering is useful as  # EVENT=/sys/kernel/debug/tracing/events/task/ # echo "oom_score_adj != 0" > $EVENT/task_newtask/filter # echo "oom_score_adj != 0" > $EVENT/task_rename/filter # echo 1 > $EVENT/enable # EVENT=/sys/kernel/debug/tracing/events/oom/ # echo 1 > $EVENT/enable  output will be like this. # grep oom /sys/kernel/debug/tracing/trace bash-7699  [007] d..3  5140.744510: oom_score_adj_update: pid=7699 comm=bash oom_score_adj=-1000 bash-7699  [007] ...1  5151.818022: task_newtask: pid=7729 comm=bash clone_flags=1200011 oom_score_adj=-1000 ls-7729  [003] ...2  5151.818504: task_rename: pid=7729 oldcomm=bash newcomm=ls oom_score_adj=-1000 bash-7699  [002] ...1  5175.701468: task_newtask: pid=7730 comm=bash clone_flags=1200011 oom_score_adj=-1000 grep-7730  [007] ...2  5175.701993: task_rename: pid=7730 oldcomm=bash newcomm=grep oom_score_adj=-1000  Signed-off-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Acked-by: David Rientjes <rientjes@google.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | vmscan.h | s | 8.8K | 291 | Mel Gorman | mgorman@suse.de | 1338333739 |  | mm: vmscan: remove reclaim_mode_t  There is little motiviation for reclaim_mode_t once RECLAIM_MODE_[A]SYNC and lumpy reclaim have been removed.  This patch gets rid of reclaim_mode_t as well and improves the documentation about what reclaim/compaction is and when it is triggered.  Signed-off-by: Mel Gorman <mgorman@suse.de> Acked-by: Rik van Riel <riel@redhat.com> Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Cc: Konstantin Khlebnikov <khlebnikov@openvz.org> Cc: Hugh Dickins <hughd@google.com> Cc: Ying Han <yinghan@google.com> Cc: Andy Whitcroft <apw@shadowen.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | block.h | s | 15K | 464 | Namhyung Kim | namhyung@gmail.com | 1313051765 |  | blktrace: add FLUSH/FUA support  Add FLUSH/FUA support to blktrace. As FLUSH precedes WRITE and/or FUA follows WRITE, use the same 'F' flag for both cases and distinguish them by their (relative) position. The end results look like (other flags might be shown also):   - WRITE:            W  - WRITE_FLUSH:      FW  - WRITE_FUA:        WF  - WRITE_FLUSH_FUA:  FWF  Note that we reuse TC_BARRIER due to lack of bit space of act_mask so that the older versions of blktrace tools will report flush requests as barriers from now on.  Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@redhat.com> Signed-off-by: Namhyung Kim <namhyung@gmail.com> Reviewed-by: Jeff Moyer <jmoyer@redhat.com> Signed-off-by: Jens Axboe <jaxboe@fusionio.com>
f | napi.h | s | 780B | 26 | Neil Horman | nhorman@tuxdriver.com | 1283874661 |  | napi: Convert trace_napi_poll to TRACE_EVENT  This patch converts trace_napi_poll from DECLARE_EVENT to TRACE_EVENT to improve the usability of napi_poll tracepoint.            <idle>-0     [001] 241302.750777: napi_poll: napi poll on napi struct f6acc480 for device eth3           <idle>-0     [000] 241302.852389: napi_poll: napi poll on napi struct f5d0d70c for device eth1  The original patch is below: http://marc.info/?l=linux-kernel&m=126021713809450&w=2  [ sanagi.koki@jp.fujitsu.com: And add a fix by Steven Rostedt: http://marc.info/?l=linux-kernel&m=126150506519173&w=2 ]  Signed-off-by: Neil Horman <nhorman@tuxdriver.com> Acked-by: David S. Miller <davem@davemloft.net> Acked-by: Neil Horman <nhorman@tuxdriver.com> Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com> Cc: Kaneshige Kenji <kaneshige.kenji@jp.fujitsu.com> Cc: Izumo Taku <izumi.taku@jp.fujitsu.com> Cc: Kosaki Motohiro <kosaki.motohiro@jp.fujitsu.com> Cc: Lai Jiangshan <laijs@cn.fujitsu.com> Cc: Scott Mcmillan <scott.a.mcmillan@intel.com> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Eric Dumazet <eric.dumazet@gmail.com> LKML-Reference: <4C7242D7.4050009@jp.fujitsu.com> Signed-off-by: Koki Sanagi <sanagi.koki@jp.fujitsu.com> Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
f | net.h | s | 1.6K | 60 | Koki Sanagi | sanagi.koki@jp.fujitsu.com | 1307048791 |  | net: tracepoint of net_dev_xmit sees freed skb and causes panic  Because there is a possibility that skb is kfree_skb()ed and zero cleared after ndo_start_xmit, we should not see the contents of skb like skb->len and skb->dev->name after ndo_start_xmit. But trace_net_dev_xmit does that and causes panic by NULL pointer dereference. This patch fixes trace_net_dev_xmit not to see the contents of skb directly.  If you want to reproduce this panic,  1. Get tracepoint of net_dev_xmit on 2. Create 2 guests on KVM 2. Make 2 guests use virtio_net 4. Execute netperf from one to another for a long time as a network burden 5. host will panic(It takes about 30 minutes)  Signed-off-by: Koki Sanagi <sanagi.koki@jp.fujitsu.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | scsi.h | s | 12K | 328 | Martin K. Petersen | martin.petersen@oracle.com | 1300145762 |  | [SCSI] Include protection operation in SCSI command trace  When debugging DIF/DIX it is very helpful to be able to see which DIX operation is associated with the scsi_cmnd. Include the protection op in the SCSI command trace.  Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com> Signed-off-by: James Bottomley <James.Bottomley@suse.de>
f | mce.h | s | 1.7K | 59 | David Sharp | dhsharp@google.com | 1299771268 |  | tracing: Fix event alignment: mce:mce_record  Signed-off-by: David Sharp <dhsharp@google.com> LKML-Reference: <1291421609-14665-9-git-send-email-dhsharp@google.com> Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | compaction.h | s | 1.5K | 52 | Mel Gorman | mel@csn.ul.ie | 1294968753 |  | mm: compaction: add trace events for memory compaction activity  In preparation for a patches promoting the use of memory compaction over lumpy reclaim, this patch adds trace points for memory compaction activity.  Using them, we can monitor the scanning activity of the migration and free page scanners as well as the number and success rates of pages passed to page migration.  Signed-off-by: Mel Gorman <mel@csn.ul.ie> Cc: Andrea Arcangeli <aarcange@redhat.com> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Cc: Rik van Riel <riel@redhat.com> Cc: Johannes Weiner <hannes@cmpxchg.org> Cc: Andy Whitcroft <apw@shadowen.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | 9p.h | s | 5.5K | 157 | Aneesh Kumar K.V | aneesh.kumar@linux.vnet.ibm.com | 1319472792 |  | net/9p: Convert net/9p protocol dumps to tracepoints  This helps in more control over debugging. root@qemu-img-64:~# ls /pass/123 ls: cannot access /pass/123: No such file or directory root@qemu-img-64:~# cat /sys/kernel/debug/tracing/trace # tracer: nop # #           TASK-PID    CPU#    TIMESTAMP  FUNCTION #              || ||       ||          ||         ||               ls-1536  [001]    70.928584: 9p_protocol_dump: clnt 18446612132784021504 P9_TWALK(tag = 1) 000: 16 00 00 00 6e 01 00 01 00 00 00 02 00 00 00 01 010: 00 03 00 31 32 33 00 00 00 ff ff ff ff 00 00 00                ls-1536  [001]    70.928587: <stack trace>  => trace_9p_protocol_dump  => p9pdu_finalize  => p9_client_rpc  => p9_client_walk  => v9fs_vfs_lookup  => d_alloc_and_lookup  => walk_component  => path_lookupat               ls-1536  [000]    70.929696: 9p_protocol_dump: clnt 18446612132784021504 P9_RLERROR(tag = 1) 000: 0b 00 00 00 07 01 00 02 00 00 00 4e 03 00 02 00 010: 00 00 00 00 03 00 02 00 00 00 00 00 ff 43 00 00                ls-1536  [000]    70.929697: <stack trace>  => trace_9p_protocol_dump  => p9_client_rpc  => p9_client_walk  => v9fs_vfs_lookup  => d_alloc_and_lookup  => walk_component  => path_lookupat  => do_path_lookup  Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com> Signed-off-by: Eric Van Hensbergen <ericvh@gmail.com>
f | rcu.h | s | 16K | 467 | Paul E. McKenney | paul.mckenney@linaro.org | 1339040607 |  | rcu: Update RCU_FAST_NO_HZ tracing for lazy callbacks  In the current code, a short dyntick-idle interval (where there is at least one non-lazy callback on the CPU) and a long dyntick-idle interval (where there are only lazy callbacks on the CPU) are traced identically, which can be less than helpful.  This commit therefore emits different event traces in these two cases.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Tested-by: Heiko Carstens <heiko.carstens@de.ibm.com> Tested-by: Pascal Chapperon <pascal.chapperon@wanadoo.fr>
f | asoc.h | s | 8.0K | 282 | Liam Girdwood | lrg@ti.com | 1335183335 |  | ASoC: dapm: Fix x86_64 build warning.  Fixes the following build warning on x86_64.  In file included from include/trace/ftrace.h:567:0,                  from include/trace/define_trace.h:86,                  from include/trace/events/asoc.h:410,                  from sound/soc/soc-core.c:45: include/trace/events/asoc.h: In function 'ftrace_raw_event_snd_soc_dapm_output_path': include/trace/events/asoc.h:246:1: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast] include/trace/events/asoc.h: In function 'ftrace_raw_event_snd_soc_dapm_input_path': include/trace/events/asoc.h:275:1: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]  Signed-off-by: Liam Girdwood <lrg@ti.com> Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
f | ext4.h | s | 50K | 1661 | Eric W. Biederman | ebiederm@xmission.com | 1337119167 |  | userns: Convert ext4 to user kuid/kgid where appropriate  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | jbd2.h | s | 6.4K | 198 | Jan Kara | jack@suse.cz | 1331691774 |  | jbd2: issue cache flush after checkpointing even with internal journal  When we reach jbd2_cleanup_journal_tail(), there is no guarantee that checkpointed buffers are on a stable storage - especially if buffers were written out by jbd2_log_do_checkpoint(), they are likely to be only in disk's caches. Thus when we update journal superblock effectively removing old transaction from journal, this write of superblock can get to stable storage before those checkpointed buffers which can result in filesystem corruption after a crash. Thus we must unconditionally issue a cache flush before we update journal superblock in these cases.  A similar problem can also occur if journal superblock is written only in disk's caches, other transaction starts reusing space of the transaction cleaned from the log and power failure happens. Subsequent journal replay would still try to replay the old transaction but some of it's blocks may be already overwritten by the new transaction. For this reason we must use WRITE_FUA when updating log tail and we must first write new log tail to disk and update in-memory information only after that.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | writeback.h | s | 13K | 431 | Jan Kara | jack@suse.cz | 1336283018 |  | writeback: Move requeueing when I_SYNC set to writeback_sb_inodes()  When writeback_single_inode() is called on inode which has I_SYNC already set while doing WB_SYNC_NONE, inode is moved to b_more_io list. However this makes sense only if the caller is flusher thread. For other callers of writeback_single_inode() it doesn't really make sense and may be even wrong - flusher thread may be doing WB_SYNC_ALL writeback in parallel.  So we move requeueing from writeback_single_inode() to writeback_sb_inodes().  Reviewed-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | sunrpc.h | s | 3.8K | 126 | Steve Dickson | steved@redhat.com | 1328542673 |  | SUNRPC: Adding status trace points  This patch adds three trace points to the status routines in the sunrpc state machine.  The goal of these trace points is to give an Admin the ability to check on binding status or connection status to see if there is a potential problem.  Signed-off-by: Steve Dickson <steved@redhat.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | xen.h | s | 15K | 461 | Jeremy Fitzhardinge | jeremy.fitzhardinge@citrix.com | 1311634262 |  | xen/tracing: fix compile errors when tracing is disabled.  When CONFIG_FUNCTION_TRACER is disabled, compilation fails as follows:   CC      arch/x86/xen/setup.o In file included from arch/x86/include/asm/xen/hypercall.h:42,                  from arch/x86/xen/setup.c:19: include/trace/events/xen.h:31: warning: 'struct multicall_entry' declared inside parameter list include/trace/events/xen.h:31: warning: its scope is only this definition or declaration, which is probably not what you want include/trace/events/xen.h:31: warning: 'struct multicall_entry' declared inside parameter list include/trace/events/xen.h:31: warning: 'struct multicall_entry' declared inside parameter list include/trace/events/xen.h:31: warning: 'struct multicall_entry' declared inside parameter list [...] arch/x86/xen/trace.c:5: error: '__HYPERVISOR_set_trap_table' undeclared here (not in a function) arch/x86/xen/trace.c:5: error: array index in initializer not of integer type arch/x86/xen/trace.c:5: error: (near initialization for 'xen_hypercall_names') arch/x86/xen/trace.c:6: error: '__HYPERVISOR_mmu_update' undeclared here (not in a function) arch/x86/xen/trace.c:6: error: array index in initializer not of integer type arch/x86/xen/trace.c:6: error: (near initialization for 'xen_hypercall_names')  Fix this by making sure struct multicall_entry has a declaration in scope at all times, and don't bother compiling xen/trace.c when tracing is disabled.  Reported-by: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com>
f | module.h | s | 2.7K | 92 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103952 |  | include: replace linux/module.h with "struct module" wherever possible  The <linux/module.h> pretty much brings in the kitchen sink along with it, so it should be avoided wherever reasonably possible in terms of being included from other commonly used <linux/something.h> files, as it results in a measureable increase on compile times.  The worst culprit was probably device.h since it is used everywhere. This file also had an implicit dependency/usage of mutex.h which was masked by module.h, and is also fixed here at the same time.  There are over a dozen other headers that simply declare the struct instead of pulling in the whole file, so follow their lead and simply make it a few more.  Most of the implicit dependencies on module.h being present by these headers pulling it in have been now weeded out, so we can finally make this change with hopefully minimal breakage.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | regmap.h | s | 3.3K | 120 | Linus Torvalds | torvalds@linux-foundation.org | 1332610897 |  | 
f | syscalls.h | s | 1.5K | 49 | Frederic Weisbecker | fweisbec@gmail.com | 1290087463 |  | tracing: Allow raw syscall trace events for non privileged users  This allows non privileged users to use the raw syscall trace events for task bound tracing in perf.  It is safe because raw syscall trace events don't leak system wide informations.  Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Arnaldo Carvalho de Melo <acme@redhat.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Li Zefan <lizf@cn.fujitsu.com> Cc: Jason Baron <jbaron@redhat.com>
f | task.h | s | 1.4K | 46 | KAMEZAWA Hiroyuki | kamezawa.hiroyu@jp.fujitsu.com | 1326241844 |  | tracepoint: add tracepoints for debugging oom_score_adj  oom_score_adj is used for guarding processes from OOM-Killer.  One of problem is that it's inherited at fork().  When a daemon set oom_score_adj and make children, it's hard to know where the value is set.  This patch adds some tracepoints useful for debugging. This patch adds 3 trace points.   - creating new task   - renaming a task (exec)   - set oom_score_adj  To debug, users need to enable some trace pointer. Maybe filtering is useful as  # EVENT=/sys/kernel/debug/tracing/events/task/ # echo "oom_score_adj != 0" > $EVENT/task_newtask/filter # echo "oom_score_adj != 0" > $EVENT/task_rename/filter # echo 1 > $EVENT/enable # EVENT=/sys/kernel/debug/tracing/events/oom/ # echo 1 > $EVENT/enable  output will be like this. # grep oom /sys/kernel/debug/tracing/trace bash-7699  [007] d..3  5140.744510: oom_score_adj_update: pid=7699 comm=bash oom_score_adj=-1000 bash-7699  [007] ...1  5151.818022: task_newtask: pid=7729 comm=bash clone_flags=1200011 oom_score_adj=-1000 ls-7729  [003] ...2  5151.818504: task_rename: pid=7729 oldcomm=bash newcomm=ls oom_score_adj=-1000 bash-7699  [002] ...1  5175.701468: task_newtask: pid=7730 comm=bash clone_flags=1200011 oom_score_adj=-1000 grep-7730  [007] ...2  5175.701993: task_rename: pid=7730 oldcomm=bash newcomm=grep oom_score_adj=-1000  Signed-off-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Acked-by: David Rientjes <rientjes@google.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | sock.h | s | 1.5K | 52 | Satoru Moriya | satoru.moriya@hds.com | 1308697570 |  | core: add tracepoints for queueing skb to rcvbuf  This patch adds 2 tracepoints to get a status of a socket receive queue and related parameter.  One tracepoint is added to sock_queue_rcv_skb. It records rcvbuf size and its usage. The other tracepoint is added to __sk_mem_schedule and it records limitations of memory for sockets and current usage.  By using these tracepoints we're able to know detailed reason why kernel drop the packet.  Signed-off-by: Satoru Moriya <satoru.moriya@hds.com> Acked-by: Neil Horman <nhorman@tuxdriver.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | irq.h | s | 3.4K | 117 | Shaohua Li | shaohua.li@intel.com | 1308090339 |  | rcu: Use softirq to address performance regression  Commit a26ac2455ffcf3(rcu: move TREE_RCU from softirq to kthread) introduced performance regression. In an AIM7 test, this commit degraded performance by about 40%.  The commit runs rcu callbacks in a kthread instead of softirq. We observed high rate of context switch which is caused by this. Out test system has 64 CPUs and HZ is 1000, so we saw more than 64k context switch per second which is caused by RCU's per-CPU kthread.  A trace showed that most of the time the RCU per-CPU kthread doesn't actually handle any callbacks, but instead just does a very small amount of work handling grace periods. This means that RCU's per-CPU kthreads are making the scheduler do quite a bit of work in order to allow a very small amount of RCU-related processing to be done.  Alex Shi's analysis determined that this slowdown is due to lock contention within the scheduler.  Unfortunately, as Peter Zijlstra points out, the scheduler's real-time semantics require global action, which means that this contention is inherent in real-time scheduling.  (Yes, perhaps someone will come up with a workaround -- otherwise, -rt is not going to do well on large SMP systems -- but this patch will work around this issue in the meantime.  And "the meantime" might well be forever.)  This patch therefore re-introduces softirq processing to RCU, but only for core RCU work.  RCU callbacks are still executed in kthread context, so that only a small amount of RCU work runs in softirq context in the common case.  This should minimize ksoftirqd execution, allowing us to skip boosting of ksoftirqd for CONFIG_RCU_BOOST=y kernels.  Signed-off-by: Shaohua Li <shaohua.li@intel.com> Tested-by: "Alex,Shi" <alex.shi@intel.com> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | kvm.h | s | 6.6K | 236 | Xiao Guangrong | xiaoguangrong@cn.fujitsu.com | 1294824537 |  | KVM: cleanup async_pf tracepoints  Use 'DECLARE_EVENT_CLASS' to cleanup async_pf tracepoints  Acked-by: Gleb Natapov <gleb@redhat.com> Signed-off-by: Xiao Guangrong <xiaoguangrong@cn.fujitsu.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | gfpflags.h | s | 1.7K | 40 | Mel Gorman | mgorman@suse.de | 1305165045 |  | mm: tracing: add missing GFP flags to tracing  include/linux/gfp.h and include/trace/events/gfpflags.h are out of sync. When tracing is enabled, certain flags are not recognised and the text output is less useful as a result.  Add the missing flags.  Signed-off-by: Mel Gorman <mgorman@suse.de> Cc: Andrea Arcangeli <aarcange@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | gpio.h | s | 1.0K | 40 | Uwe Kleine-König | u.kleine-koenig@pengutronix.de | 1305873619 |  | gpio: add trace events for setting direction and value  This patch allows to trace gpio operations using ftrace  Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de> Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
f | sched.h | s | 9.7K | 342 | Oleg Nesterov | oleg@redhat.com | 1333187602 |  | tracing, sched, vfs: Fix 'old_pid' usage in trace_sched_process_exec()  1. TRACE_EVENT(sched_process_exec) forgets to actually use the    old pid argument, it sets ->old_pid = p->pid.  2. search_binary_handler() uses the wrong pid number. tracepoint    needs the global pid_t from the root namespace, while old_pid    is the virtual pid number as it seen by the tracer/parent.  With this patch we have two pid_t's in search_binary_handler(), not really nice. Perhaps we should switch to "struct pid*", but in this case it would be better to cleanup the current code first and move the "depth == 0" code outside.  Signed-off-by: Oleg Nesterov <oleg@redhat.com> Cc: David Smith <dsmith@redhat.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Denys Vlasenko <dvlasenk@redhat.com> Link: http://lkml.kernel.org/r/20120330162636.GA4857@redhat.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | btrfs.h | s | 23K | 720 | Jeff Mahoney | jeffm@suse.com | 1332377134 |  | btrfs: return void in functions without error conditions  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | skb.h | s | 1.3K | 53 | David Sharp | dhsharp@google.com | 1299771271 |  | tracing: Fix event alignment: skb:kfree_skb  Acked-by: Neil Horman <nhorman@tuxdriver.com> Signed-off-by: David Sharp <dhsharp@google.com> LKML-Reference: <1291421609-14665-10-git-send-email-dhsharp@google.com> Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | signal.h | s | 3.4K | 107 | Oleg Nesterov | oleg@redhat.com | 1326476930 |  | tracing: let trace_signal_generate() report more info, kill overflow_fail/lose_info  __send_signal()->trace_signal_generate() doesn't report enough info. The users want to know was the signal actually delivered or not, and they also need the shared/private info.  The patch moves trace_signal_generate() at the end of __send_signal() and adds the 2 additional arguments.  This also allows us to kill trace_signal_overflow_fail/lose_info, we can simply add the appropriate TRACE_SIGNAL_ "result" codes.  Reported-by: Seiji Aguchi <saguchi@redhat.com> Reviewed-by: Seiji Aguchi <seiji.aguchi@hds.com> Acked-by: Steven Rostedt <rostedt@goodmis.org> Signed-off-by: Oleg Nesterov <oleg@redhat.com>
