f | composite.h | s | 16K | 351 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1336677763 |  | usb: gadget: composite: add iSerialNumber to usb_composite_driver  Add iSerialNumber to usb_composite_driver to allow setting a default value. This is useful when the module is compiled-in. Then the composite_bind is executed at kernel boot and string id for iSerialNumber can be overridden even if there is no iSerialNumber kernel commandline parameter. If the string id is not overridden, then get_string will never attempt to look for the alternative string contents using cdev->serial_override.  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | wusb.h | s | 9.8K | 334 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | video.h | s | 15K | 497 | Laurent Pinchart | laurent.pinchart@ideasonboard.com | 1280778195 |  | V4L/DVB: uvc: Move constants and structures definitions to linux/usb/video.h  The UVC host and gadget drivers both define constants and structures in private header files. Move all those definitions to linux/usb/video.h where they can be shared by the two drivers (and be available for userspace applications).  Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de> Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>
f | net2280.h | s | 23K | 430 | Greg Kroah-Hartman | gregkh@suse.de | 1274386907 |  | USB: include/usb/*.h checkpatch cleanup  Lots of minor formatting cleanups in includes/usb/ to make checkpatch happier.  Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | otg.h | s | 6.2K | 221 | Grazvydas Ignotas | notasas@gmail.com | 1334074308 |  | usb: musb: wake the device before ulpi transfers  musb can be suspended at the time some other driver wants to do ulpi transfers using usb_phy_io_* functions, and that can cause data abort, as it happened with isp1704_charger: http://article.gmane.org/gmane.linux.kernel/1226122  Add pm_runtime to ulpi functions to rectify this. This also adds io_dev to usb_phy so that pm_runtime_* functions can be used.  Cc: Felipe Contreras <felipe.contreras@gmail.com> Signed-off-by: Grazvydas Ignotas <notasas@gmail.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | renesas_usbhs.h | s | 3.9K | 175 | Shimoda, Yoshihiro | yoshihiro.shimoda.uh@renesas.com | 1327397584 |  | usb: renesas_usbhs: add support for SUDMAC  The SUDMAC uses 8-bit width only. So, when the driver uses SUDMAC, we have to clear the MBW_32.  Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | irda.h | s | 3.4K | 117 | Felipe Balbi | me@felipebalbi.com | 1216678587 |  | usb: irda: cleanup on ir-usb module  General cleanup on ir-usb module. Introduced a common header that could be used also on usb gadget framework.  Lot's of cleanups and now using macros from the header file.  Signed-off-by: Felipe Balbi <me@felipebalbi.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | tmc.h | s | 1.6K | 38 | Greg Kroah-Hartman | gregkh@suse.de | 1224279651 |  | USB: add USB test and measurement class driver  This driver was originaly written by Stefan Kopp, but massively reworked by Greg for submission.  Thanks to Felipe Balbi <me@felipebalbi.com> for lots of work in cleaning up this driver.  Thanks to Oliver Neukum <oliver@neukum.org> for reviewing previous versions and pointing out problems.   Cc: Stefan Kopp <stefan_kopp@agilent.com> Cc: Marcel Janssen <korgull@home.nl> Cc: Felipe Balbi <me@felipebalbi.com> Cc: Oliver Neukum <oliver@neukum.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | chipidea.h | s | 698B | 23 | Alexander Shishkin | alexander.shishkin@linux.intel.com | 1336780775 |  | usb: chipidea: add power_budget limit for ehci to platform data  Some implementations need this limitation to work correctly.  Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | gpio_vbus.h | s | 1.1K | 31 | Shinya Kuribayashi | shinya.kuribayashi.px@renesas.com | 1337278834 |  | USB: gpio_vbus: wakeup support on GPIO VBUS interrupts  We'd like to see the system waking up from the system-wide suspend when it gets plugged-in, or the USB cable is pulled out.  Also makes it configurable via platform data 'wakeup'.  Signed-off-by: Shinya Kuribayashi <shinya.kuribayashi.px@renesas.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | association.h | s | 4.6K | 136 | Harvey Harrison | harvey.harrison@gmail.com | 1231351191 |  | USB: wusb: annotate association types withe proper endianness  Also a trivial annotation in rh.c for: drivers/usb/wusbcore/rh.c:366:9: warning: incorrect type in assignment (different base types) drivers/usb/wusbcore/rh.c:366:9:    expected unsigned short [unsigned] [short] [usertype] <noident> drivers/usb/wusbcore/rh.c:366:9:    got restricted __le16 [usertype] <noident> drivers/usb/wusbcore/rh.c:367:9: warning: incorrect type in assignment (different base types) drivers/usb/wusbcore/rh.c:367:9:    expected unsigned short [unsigned] [short] [usertype] <noident> drivers/usb/wusbcore/rh.c:367:9:    got restricted __le16 [usertype] <noident>  Association types annotation fixes piles of warnings similar to: drivers/usb/wusbcore/cbaf.c:238:30: warning: incorrect type in initializer (different base types) drivers/usb/wusbcore/cbaf.c:238:30:    expected restricted __le16 [usertype] id drivers/usb/wusbcore/cbaf.c:238:30:    got int drivers/usb/wusbcore/cbaf.c:238:30: warning: incorrect type in initializer (different base types) drivers/usb/wusbcore/cbaf.c:238:30:    expected restricted __le16 [usertype] len drivers/usb/wusbcore/cbaf.c:238:30:    got int  Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com> Cc: David Vrabel <david.vrabel@csr.com> Cc: Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | c67x00.h | s | 1.8K | 41 | Peter Korsgaard | jacmet@sunsite.dk | 1209749156 |  | USB: add Cypress c67x00 OTG controller core driver  This patch add the core driver for the c67x00 USB OTG controller.  The core driver is responsible for the platform bus binding and creating either USB HCD or USB Gadget instances for each of the serial interface engines on the chip.  This driver does not directly implement the HCD or gadget behaviours; it just controls access to the chip.  Signed-off-by: Peter Korsgaard <jacmet@sunsite.dk> Acked-by: David Brownell <dbrownell@users.sourceforge.net> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | rndis_host.h | s | 5.9K | 185 | Linus Walleij | linus.walleij@linaro.org | 1336849342 |  | usb/net: rndis: break out <linux/rndis.h> defines  As a first step to consolidate the RNDIS implementations, break out a common file with all the #defines and move it to <linux/rndis.h>.  This also deletes the immediate duplicated defines in the <linux/rndis.h> file that yields a lot of compilation warnings.  Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com> Signed-off-by: Linus Walleij <linus.walleij@linaro.org> Signed-off-by: David S. Miller <davem@davemloft.net>
f | serial.h | s | 16K | 381 | Greg Kroah-Hartman | gregkh@linuxfoundation.org | 1337121600 |  | USB: serial: hook up reset_resume callback  The callback is now hooked up for any USB to serial driver that wants it.  We only register the callback if any of the usb-serial structures want it, this keeps the USB core happy.  Thanks to Alan Stern for the ideas on how to do this.  Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | msm_hsusb.h | s | 5.4K | 174 | Heikki Krogerus | heikki.krogerus@linux.intel.com | 1329132938 |  | usb: otg: msm: Start using struct usb_otg  Use struct usb_otg members with OTG specific functions instead of usb_phy members.  Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com> Acked-by: Pavankumar Kondeti <pkondeti@codeaurora.org> Reviewed-by: Marek Vasut <marek.vasut@gmail.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | ehci_def.h | s | 8.8K | 203 | Jan Andersson | jan@gaisler.com | 1304448201 |  | USB: EHCI: Support controllers with big endian capability regs  The two first HC capability registers (CAPLENGTH and HCIVERSION) are defined as one 8-bit and one 16-bit register. Most HC implementations have selected to treat these registers as part of a 32-bit register, giving the same layout for both big and small endian systems.  This patch adds a new quirk, big_endian_capbase, to support controllers with big endian register interfaces that treat HCIVERSION and CAPLENGTH as individual registers.  Signed-off-by: Jan Andersson <jan@gaisler.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | hcd.h | s | 23K | 546 | Alan Stern | stern@rowland.harvard.edu | 1339618299 |  | USB: add NO_D3_DURING_SLEEP flag and revert 151b61284776be2  This patch (as1558) fixes a problem affecting several ASUS computers: The machine crashes or corrupts memory when going into suspend if the ehci-hcd driver is bound to any controllers.  Users have been forced to unbind or unload ehci-hcd before putting their systems to sleep.  After extensive testing, it was determined that the machines don't like going into suspend when any EHCI controllers are in the PCI D3 power state.  Presumably this is a firmware bug, but there's nothing we can do about it except to avoid putting the controllers in D3 during system sleep.  The patch adds a new flag to indicate whether the problem is present, and avoids changing the controller's power state if the flag is set. Runtime suspend is unaffected; this matters only for system suspend. However as a side effect, the controller will not respond to remote wakeup requests while the system is asleep.  Hence USB wakeup is not functional -- but of course, this is already true in the current state of affairs.  A similar patch has already been applied as commit 151b61284776be2d6f02d48c23c3625678960b97 (USB: EHCI: fix crash during suspend on ASUS computers).  The patch supersedes that one and reverts it.  There are two differences:  	The old patch added the flag at the USB level; this patch 	adds it at the PCI level.  	The old patch applied to all chipsets with the same vendor, 	subsystem vendor, and product IDs; this patch makes an 	exception for a known-good system (based on DMI information).  Signed-off-by: Alan Stern <stern@rowland.harvard.edu> Tested-by: Dâniel Fraga <fragabr@gmail.com> Tested-by: Andrey Rahmatullin <wrar@wrar.name> Tested-by: Steven Rostedt <rostedt@goodmis.org> Cc: stable <stable@vger.kernel.org> Reviewed-by: Rafael J. Wysocki <rjw@sisk.pl> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | uas.h | s | 1.1K | 60 | Sebastian Andrzej Siewior | bigeasy@linutronix.de | 1328223079 |  | usb/uas: add usb_pipe_usage_descriptor  usb_pipe_usage_descriptor defines the struct which is used to describe the type of the endpoint in UAS (status/command/data in+out). It will be used by the UAS gadget, the host code is using a char array for the access.  Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | r8a66597.h | s | 17K | 431 | Yoshihiro Shimoda | yoshihiro.shimoda.uh@renesas.com | 1318527519 |  | usb: gadget: r8a66597-udc: add support for SUDMAC  SH7757 has a USB function with internal DMA controller (SUDMAC). This patch supports the SUDMAC. The SUDMAC is incompatible with general-purpose DMAC. So, it doesn't use dmaengine.  Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | sl811.h | s | 799B | 21 | Robert P. J. Day | rpjday@crashcourse.ca | 1209097002 |  | USB: Standardize inclusion protection and add where missing.  For the header files in include/linux/usb, add missing multiple inclusion protection and standardize what's already there.  The apparent standards:    * macro name of __LINUX_USB_headerfile_H   * inclusion protection placed after leading comment block   * macro name added as a comment on the final #endif   * any obvious trivial whitespace cleanup associated with the above  Signed-off-by: Robert P. J. Day <rpjday@crashcourse.ca> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ch9.h | s | 30K | 859 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380922 |  | USB: Add macros for interrupt endpoint types.  The USB 3.0 spec defines a new way of differentiating interrupt endpoints.  The idea is that some interrupt endpoints are used for notifications, i.e. they continually NAK the transfer until something changes on the device.  Other interrupt endpoints are used as a way to periodically transfer data.  The USB 3.0 endpoint descriptor uses bits 5:4 of bmAttributes for interrupt endpoints, to define the endpoint as either a Notification endpoint, or a Periodic endpoint.  Introduce macros to dig out that information.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | usbnet.h | s | 7.8K | 191 | Ming Lei | tom.leiming@gmail.com | 1337103702 |  | usbnet: fix skb traversing races during unlink(v2)  Commit 4231d47e6fe69f061f96c98c30eaf9fb4c14b96d(net/usbnet: avoid recursive locking in usbnet_stop()) fixes the recursive locking problem by releasing the skb queue lock before unlink, but may cause skb traversing races: 	- after URB is unlinked and the queue lock is released, 	the refered skb and skb->next may be moved to done queue, 	even be released 	- in skb_queue_walk_safe, the next skb is still obtained 	by next pointer of the last skb 	- so maybe trigger oops or other problems  This patch extends the usage of entry->state to describe 'start_unlink' state, so always holding the queue(rx/tx) lock to change the state if the referd skb is in rx or tx queue because we need to know if the refered urb has been started unlinking in unlink_urbs.  The other part of this patch is based on Huajun's patch: always traverse from head of the tx/rx queue to get skb which is to be unlinked but not been started unlinking.  Signed-off-by: Huajun Li <huajun.li.lee@gmail.com> Signed-off-by: Ming Lei <tom.leiming@gmail.com> Cc: Oliver Neukum <oneukum@suse.de> Cc: stable@kernel.org Signed-off-by: David S. Miller <davem@davemloft.net>
f | cdc-wdm.h | s | 578B | 16 | Bjørn Mork | bjorn@mork.no | 1331240808 |  | usb: cdc-wdm: adding usb_cdc_wdm_register subdriver support  This driver can be used as a subdriver of another USB driver, allowing it to export a Device Managment interface consisting of a single interrupt endpoint with no dedicated USB interface.  Some devices provide a Device Management function combined with a wwan function in a single USB interface having three endpoints (bulk in/out + interrupt).  If the interrupt endpoint is used exclusively for DM notifications, then this driver can support that as a subdriver provided that the wwan driver calls the appropriate entry points on probe, suspend, resume, pre_reset, post_reset and disconnect.  The main driver must have full control over all interface related settings, including the needs_remote_wakeup flag. A manage_power function must be provided by the main driver.  A manage_power stub doing direct flag manipulation is used in normal driver mode.  Signed-off-by: Bjørn Mork <bjorn@mork.no> Acked-by: Oliver Neukum <oneukum@suse.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ohci_pdriver.h | s | 1.3K | 35 | Hauke Mehrtens | hauke@hauke-m.de | 1331840518 |  | USB: OHCI: Add a generic platform device driver  This adds a generic driver for platform devices. It works like the PCI driver and is based on it. This is for devices which do not have an own bus but their OHCI controller works like a PCI controller. It will be used for the Broadcom bcma and ssb USB OHCI controller.  Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ch11.h | s | 7.6K | 232 | Sarah Sharp | sarah.a.sharp@linux.intel.com | 1337380918 |  | USB: Add support to enable/disable USB3 link states.  There are various functions within the USB core that will need to disable USB 3.0 link power states.  For example, when a USB device driver is being bound to an interface, we need to disable USB 3.0 LPM until we know if the driver will allow hub-initiated LPM transitions. Another example is when the USB core is switching alternate interface settings.  The USB 3.0 timeout values are dependent on what endpoints are enabled, so we want to ensure that LPM is disabled until the new alt setting is fully installed.  Multiple functions need to disable LPM, and those functions can even be nested.  For example, usb_bind_interface() could disable LPM, and then call into the driver probe function, which may attempt to switch to a different alt setting.  Therefore, we need to keep a count of the number of functions that require LPM to be disabled at any point in time.  Introduce two new USB core API calls, usb_disable_lpm() and usb_enable_lpm().  These functions increment and decrement a new variable in the usb_device, lpm_disable_count.  If usb_disable_lpm() fails, it will call usb_enable_lpm() in order to balance the lpm_disable_count.  These two new functions must be called with the bandwidth_mutex locked. If the bandwidth_mutex is not already held by the caller, it should instead call usb_unlocked_disable_lpm() and usb_enable_lpm(), which take the bandwidth_mutex before calling usb_disable_lpm() and usb_enable_lpm(), respectively.  Introduce a new variable (timeout) in the usb3_lpm_params structure to keep track of the currently enabled U1/U2 timeout values.  When usb_disable_lpm() is called, and the USB device has the U1 or U2 timeouts set to a non-zero value (meaning either device-initiated or hub-initiated LPM is enabled), attempt to disable LPM, regardless of the state of the lpm_disable_count.  We want to ensure that all callers can be guaranteed that LPM is disabled if usb_disable_lpm() returns zero.  Otherwise the following scenario could occur:  1. Driver A is being bound to interface 1.  usb_probe_interface() disables LPM.  Driver A doesn't care if hub-initiated LPM is enabled, so even though usb_disable_lpm() fails, the probe of the driver continues, and the bandwidth mutex is dropped.  2. Meanwhile, Driver B is being bound to interface 2. usb_probe_interface() grabs the bandwidth mutex and calls usb_disable_lpm().  That call should attempt to disable LPM, even though the lpm_disable_count is set to 1 by Driver A.  For usb_enable_lpm(), we attempt to enable LPM only when the lpm_disable_count is zero.  If some step in enabling LPM fails, it will only have a minimal impact on power consumption, and all USB device drivers should still work properly.  Therefore don't bother to return any error codes.  Don't enable device-initiated LPM if the device is unconfigured.  The USB device will only accept the U1/U2_ENABLE control transfers in the configured state.  Do enable hub-initiated LPM in that case, since devices are allowed to accept the LGO_Ux link commands in any state.  Don't enable or disable LPM if the device is marked as not being LPM capable.  This can happen if:  - the USB device doesn't have a SS BOS descriptor,  - the device's parent hub has a zeroed bHeaderDecodeLatency value, or  - the xHCI host doesn't support LPM.  Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com> Cc: Andiry Xu <andiry.xu@amd.com> Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
f | cdc.h | s | 11K | 340 | Alexey Orishko | alexey.orishko@gmail.com | 1297202082 |  | CDC NCM errata updates for cdc.h  Changes are based on the following documents: - CDC NCM errata: http://www.usb.org/developers/devclass_docs/NCM10_012011.zip - CDC and WMC errata link: http://www.usb.org/developers/devclass_docs/CDC1.2_WMC1.1_012011.zip  Signed-off-by: Alexey Orishko <alexey.orishko@stericsson.com> Acked-by: Greg Kroah-Hartman <gregkh@suse.de> Signed-off-by: David S. Miller <davem@davemloft.net>
f | g_printer.h | s | 1.3K | 31 | Robert P. J. Day | rpjday@crashcourse.ca | 1209097002 |  | USB: Standardize inclusion protection and add where missing.  For the header files in include/linux/usb, add missing multiple inclusion protection and standardize what's already there.  The apparent standards:    * macro name of __LINUX_USB_headerfile_H   * inclusion protection placed after leading comment block   * macro name added as a comment on the final #endif   * any obvious trivial whitespace cleanup associated with the above  Signed-off-by: Robert P. J. Day <rpjday@crashcourse.ca> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | isp1301.h | s | 2.3K | 64 | Roland Stigge | stigge@antcom.de | 1335893582 |  | USB: Add driver for NXP ISP1301 USB transceiver  This new driver registers the NXP ISP1301 chip via the I2C subsystem.  The chip is the USB transceiver shared by ohci-nxp, lpc32xx_udc (gadget) and isp1301_omap.  ISP1301 is a very low-level driver that primarily separates out the I2C client registration of the ISP1301 chip (including instantiation via DT), used by other drivers, and declares the chip's registers. It's only a helper driver for some OHCI and USB device drivers.  The driver can be considered as a register set extension of ohci-nxp, lpc32xx-udc and isp1301_omap, which in turn know best what to do with the low level functionality (individual ISP1301 registers and timing, see the different initialization strategies in those drivers). Those drivers previously internally duplicated ISP1301 register definitions which is solved by this new isp1301 driver. The ISP1301 registers exposed via isp1301.h can be accessed by other drivers using it with standard i2c_smbus_*() accesses.  Following patches let the respective USB host and gadget drivers use this driver, instead of duplicating ISP1301 handling.  Signed-off-by: Roland Stigge <stigge@antcom.de> Acked-by: Arnd Bergmann <arnd@arndb.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | gadget.h | s | 36K | 890 | Felipe Balbi | balbi@ti.com | 1330433303 |  | usb: gadget: add generic map/unmap request utilities  such utilities are currently duplicated on all UDC drivers basically with the same structure. Let's group all implementations into one generic implementation and get rid of that duplication.  Signed-off-by: Felipe Balbi <balbi@ti.com>
f | functionfs.h | s | 5.8K | 157 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1337012744 |  | FunctionFS: enable multiple functions  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Acked-by: Michal Nazarewicz <mina86@mina86.com> Cc: Felipe Balbi <balbi@ti.com> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | intel_mid_otg.h | s | 4.7K | 155 | Heikki Krogerus | heikki.krogerus@linux.intel.com | 1329132876 |  | usb: otg: Rename otg_transceiver to usb_phy  This is the first step in separating USB transceivers from USB OTG utilities.  Includes fixes to IMX code from Sascha Hauer.  Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com> Acked-by: Sascha Hauer <s.hauer@pengutronix.de> Acked-by: Pavankumar Kondeti <pkondeti@codeaurora.org> Acked-by: Li Yang <leoli@freescale.com> Acked-by: Alan Stern <stern@rowland.harvard.edu> Acked-by: Igor Grinberg <grinberg@compulab.co.il> Reviewed-by: Marek Vasut <marek.vasut@gmail.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | Kbuild | g | 204B |  | Laurent Pinchart | laurent.pinchart@ideasonboard.com | 1316830046 |  | USB: export video.h to the includes available for userspace  The uvcvideo extension unit API requires constants defined in the video.h header. Add it to the list of includes exported to userspace.  Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com> Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>
f | m66592.h | s | 1.4K | 37 | Yoshihiro Shimoda | yoshihiro.shimoda.uh@renesas.com | 1310162919 |  | usb: gadget: m66592-udc: add function for external controller  M66592 has the pin of WR0 and WR1. So, if one write-pin of CPU connects to the pins, we have to change the setting of FIFOSEL register in the controller. If we don't change the setting, the controller cannot send the data of odd length.  Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | isp116x.h | s | 1.1K | 30 | Robert P. J. Day | rpjday@crashcourse.ca | 1209097002 |  | USB: Standardize inclusion protection and add where missing.  For the header files in include/linux/usb, add missing multiple inclusion protection and standardize what's already there.  The apparent standards:    * macro name of __LINUX_USB_headerfile_H   * inclusion protection placed after leading comment block   * macro name added as a comment on the final #endif   * any obvious trivial whitespace cleanup associated with the above  Signed-off-by: Robert P. J. Day <rpjday@crashcourse.ca> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | iowarrior.h | s | 1.3K | 37 | Robert P. J. Day | rpjday@crashcourse.ca | 1209097002 |  | USB: Standardize inclusion protection and add where missing.  For the header files in include/linux/usb, add missing multiple inclusion protection and standardize what's already there.  The apparent standards:    * macro name of __LINUX_USB_headerfile_H   * inclusion protection placed after leading comment block   * macro name added as a comment on the final #endif   * any obvious trivial whitespace cleanup associated with the above  Signed-off-by: Robert P. J. Day <rpjday@crashcourse.ca> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | isp1362.h | s | 1.6K | 43 | Lothar Wassmann | LW@KARO-electronics.de | 1253713590 |  | USB: NXP ISP1362 USB host driver  Signed-off-by: Lothar Wassmann <LW@KARO-electronics.de> Signed-off-by: Michael Hennerich <michael.hennerich@analog.com> Signed-off-by: Bryan Wu <cooloney@kernel.org> Signed-off-by: Mike Frysinger <vapier@gentoo.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | storage.h | s | 2.5K | 71 | Sebastian Andrzej Siewior | bigeasy@linutronix.de | 1330456282 |  | usb/storage: remove Filler member from struct bulk_cs_wrap  As Alan Stern pointed out this member has nothing to do with the Command Status Wrapper (CSW) as specified by the Universal Serial Bus Mass Storage Class Bulk-Only Transport rev 1.0. It defines the structure without the additional 18 filler bytes and defines the total size of the struct to exactly 13 bytes. Larger responses should be dropped. All in-tree users use a defines instead of sizeof() of this struct as far I can tell.  Cc: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | msm_hsusb_hw.h | s | 2.1K | 48 | Pavankumar Kondeti | pkondeti@codeaurora.org | 1304731669 |  | USB: OTG: msm: Add PHY suspend support for MSM8960  Signed-off-by: Pavankumar Kondeti <pkondeti@codeaurora.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | input.h | s | 680B | 21 | Robert P. J. Day | rpjday@crashcourse.ca | 1209097002 |  | USB: Standardize inclusion protection and add where missing.  For the header files in include/linux/usb, add missing multiple inclusion protection and standardize what's already there.  The apparent standards:    * macro name of __LINUX_USB_headerfile_H   * inclusion protection placed after leading comment block   * macro name added as a comment on the final #endif   * any obvious trivial whitespace cleanup associated with the above  Signed-off-by: Robert P. J. Day <rpjday@crashcourse.ca> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | ehci_pdriver.h | s | 1.6K | 43 | Hauke Mehrtens | hauke@hauke-m.de | 1331840527 |  | USB: EHCI: Add a generic platform device driver  This adds a generic driver for platform devices. It works like the PCI driver and is based on it. This is for devices which do not have an own bus but their EHCI controller works like a PCI controller. It will be used for the Broadcom bcma and ssb USB EHCI controller.  Acked-by: Alan Stern <stern@rowland.harvard.edu> Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ulpi.h | s | 6.0K | 168 | Heikki Krogerus | heikki.krogerus@linux.intel.com | 1329132956 |  | usb: otg: ulpi: Start using struct usb_otg  Use struct usb_otg members with OTG specific functions instead of usb_phy members.  Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com> Acked-by: Igor Grinberg <grinberg@compulab.co.il> Acked-by: Sascha Hauer <s.hauer@pengutronix.de> Reviewed-by: Marek Vasut <marek.vasut@gmail.com> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | quirks.h | s | 1.1K | 24 | Phil Dibowitz | phil@ipom.com | 1281476141 |  | USB delay init quirk for logitech Harmony 700-series devices  The Logitech Harmony 700 series needs an extra delay during initialization.  This patch adds a USB quirk which enables such a delay and adds the device to the quirks list.  Signed-off-by: Phil Dibowitz <phil@ipom.com> Cc: stable <stable@kernel.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | midi.h | s | 3.3K | 95 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | g_hid.h | s | 1.1K | 29 | Fabien Chouteau | fabien.chouteau@barco.com | 1274386895 |  | USB: gadget: add HID gadget driver  g_hid is a USB gadget driver implementing the Human Interface Device class specification. The driver handles basic HID protocol handling in the kernel, and allows userspace to read/write HID reports trough /dev/hidgX character devices.  Signed-off-by: Fabien Chouteau <fabien.chouteau@barco.com> Signed-off-by: Peter Korsgaard <peter.korsgaard@barco.com> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | atmel_usba_udc.h | s | 382B | 20 | Greg Kroah-Hartman | gregkh@suse.de | 1274386907 |  | USB: include/usb/*.h checkpatch cleanup  Lots of minor formatting cleanups in includes/usb/ to make checkpatch happier.  Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | audio-v2.h | s | 13K | 396 | Jassi Brar | jaswinder.singh@linaro.org | 1329293411 |  | usb: uac2: Add ACHeader and FormatType descriptor  Add missing, but needed, ACHeader and FormatType descriptor definitions.  Signed-off-by: Yadi Brar <yadi.brar01@gmail.com> Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org> Signed-off-by: Felipe Balbi <balbi@ti.com>
f | gadgetfs.h | s | 2.7K | 72 | Greg Kroah-Hartman | gregkh@suse.de | 1274386907 |  | USB: include/usb/*.h checkpatch cleanup  Lots of minor formatting cleanups in includes/usb/ to make checkpatch happier.  Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | wusb-wa.h | s | 7.0K | 249 | Greg Kroah-Hartman | gregkh@suse.de | 1274386907 |  | USB: include/usb/*.h checkpatch cleanup  Lots of minor formatting cleanups in includes/usb/ to make checkpatch happier.  Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | musb.h | s | 4.1K | 118 | Greg Kroah-Hartman | gregkh@suse.de | 1292522706 |  | Merge branch 'usb-next' into musb-merge  * usb-next: (132 commits)   USB: uas: Use GFP_NOIO instead of GFP_KERNEL in I/O submission path   USB: uas: Ensure we only bind to a UAS interface   USB: uas: Rename sense pipe and sense urb to status pipe and status urb   USB: uas: Use kzalloc instead of kmalloc   USB: uas: Fix up the Sense IU   usb: musb: core: kill unneeded #include's   DA8xx: assign name to MUSB IRQ resource   usb: gadget: g_ncm added   usb: gadget: f_ncm.c added   usb: gadget: u_ether: prepare for NCM   usb: pch_udc: Fix setup transfers with data out   usb: pch_udc: Fix compile error, warnings and checkpatch warnings   usb: add ab8500 usb transceiver driver   USB: gadget: Implement runtime PM for MSM bus glue driver   USB: gadget: Implement runtime PM for ci13xxx gadget   USB: gadget: Add USB controller driver for MSM SoC   USB: gadget: Introduce ci13xxx_udc_driver struct   USB: gadget: Initialize ci13xxx gadget device's coherent DMA mask   USB: gadget: Fix "scheduling while atomic" bugs in ci13xxx_udc   USB: gadget: Separate out PCI bus code from ci13xxx_udc   ...
f | audio.h | s | 16K | 483 | Daniel Mack | daniel@caiaq.de | 1277302166 |  | ALSA: usb-audio: unify UAC macros and struct names  Get rid of the last occurances of _v1 suffixes, and move the version number right after the "uac" string. Now things are consitent again.  Sorry for the forth and back, but it just looks much nicer this way.  Signed-off-by: Daniel Mack <daniel@caiaq.de> Signed-off-by: Takashi Iwai <tiwai@suse.de>
f | isp1760.h | s | 594B | 15 | Michael Hennerich | michael.hennerich@analog.com | 1253713589 |  | USB: isp1760: allow platform devices to customize devflags  Platform device support was merged earlier, but support for boards to customize the devflags aspect of the controller was not.  We want this on Blackfin systems to control the bus width, but might as well expose all of the fields while we're at it.  Signed-off-by: Michael Hennerich <michael.hennerich@analog.com> Signed-off-by: Bryan Wu <cooloney@kernel.org> Signed-off-by: Mike Frysinger <vapier@gentoo.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
