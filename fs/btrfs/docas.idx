f | ordered-data.c | s | 26K | 879 | Josef Bacik | josef@redhat.com | 1339723854 |  | Btrfs: call filemap_fdatawrite twice for compression  I removed this in an earlier commit and I was wrong.  Because compression can return from filemap_fdatawrite() without having actually set any of it's pages as writeback() it can make filemap_fdatawait() do essentially nothing, and then we won't find any ordered extents because they may not have been created yet.  So not only does this make fsync() completely useless, but it will also screw up if you truncate on a non-page aligned offset since we zero out the end and then wait on ordered extents and then call drop caches. We can drop the cache before the io completes and then we try to unpin the extent we just wrote we won't find it and everything goes sideways.  So fix this by putting it back and put a giant comment there to keep me from trying to remove it in the future.  Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
f | tree-log.h | s | 2.1K | 49 | Jeff Mahoney | jeffm@suse.com | 1332377134 |  | btrfs: return void in functions without error conditions  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | compat.h | s | 162B | 5 | Chris Mason | chris.mason@oracle.com | 1231252735 |  | Btrfs: drop remaining LINUX_KERNEL_VERSION checks and compat code  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | hash.h | s | 878B | 25 | David Woodhouse | dwmw2@infradead.org | 1244647793 |  | Btrfs: remove crc32c.h and use libcrc32c directly.  There's no need to preserve this abstraction; it used to let us use hardware crc32c support directly, but libcrc32c is already doing that for us through the crypto API -- so we're already using the Intel crc32c acceleration where appropriate.  Signed-off-by: David Woodhouse <David.Woodhouse@intel.com> Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | file-item.c | s | 22K | 767 | Linus Torvalds | torvalds@linux-foundation.org | 1333136669 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs  Pull btrfs fixes and features from Chris Mason:  "We've merged in the error handling patches from SuSE.  These are   already shipping in the sles kernel, and they give btrfs the ability   to abort transactions and go readonly on errors.  It involves a lot of   churn as they clarify BUG_ONs, and remove the ones we now properly   deal with.    Josef reworked the way our metadata interacts with the page cache.   page->private now points to the btrfs extent_buffer object, which   makes everything faster.  He changed it so we write an whole extent   buffer at a time instead of allowing individual pages to go down,,   which will be important for the raid5/6 code (for the 3.5 merge   window ;)    Josef also made us more aggressive about dropping pages for metadata   blocks that were freed due to COW.  Overall, our metadata caching is   much faster now.    We've integrated my patch for metadata bigger than the page size.   This allows metadata blocks up to 64KB in size.  In practice 16K and   32K seem to work best.  For workloads with lots of metadata, this cuts   down the size of the extent allocation tree dramatically and fragments   much less.    Scrub was updated to support the larger block sizes, which ended up   being a fairly large change (thanks Stefan Behrens).    We also have an assortment of fixes and updates, especially to the   balancing code (Ilya Dryomov), the back ref walker (Jan Schmidt) and   the defragging code (Liu Bo)."  Fixed up trivial conflicts in fs/btrfs/scrub.c that were just due to removal of the second argument to k[un]map_atomic() in commit 7ac687d9e047.  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs: (75 commits)   Btrfs: update the checks for mixed block groups with big metadata blocks   Btrfs: update to the right index of defragment   Btrfs: do not bother to defrag an extent if it is a big real extent   Btrfs: add a check to decide if we should defrag the range   Btrfs: fix recursive defragment with autodefrag option   Btrfs: fix the mismatch of page->mapping   Btrfs: fix race between direct io and autodefrag   Btrfs: fix deadlock during allocating chunks   Btrfs: show useful info in space reservation tracepoint   Btrfs: don't use crc items bigger than 4KB   Btrfs: flush out and clean up any block device pages during mount   btrfs: disallow unequal data/metadata blocksize for mixed block groups   Btrfs: enhance superblock sanity checks   Btrfs: change scrub to support big blocks   Btrfs: minor cleanup in scrub   Btrfs: introduce common define for max number of mirrors   Btrfs: fix infinite loop in btrfs_shrink_device()   Btrfs: fix memory leak in resolver code   Btrfs: allow dup for data chunks in mixed mode   Btrfs: validate target profiles only if we are going to use them   ...
f | locking.c | s | 6.9K | 251 | Jeff Mahoney | jeffm@suse.com | 1332377134 |  | btrfs: return void in functions without error conditions  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | print-tree.c | s | 10K | 329 | Stefan Behrens | sbehrens@giantdisaster.de | 1338387821 |  | Btrfs: read device stats on mount, write modified ones during commit  The device statistics are written into the device tree with each transaction commit. Only modified statistics are written. When a filesystem is mounted, the device statistics for each involved device are read from the device tree and used to initialize the counters.  Signed-off-by: Stefan Behrens <sbehrens@giantdisaster.de>
f | Makefile | g | 618B |  | Chris Mason | chris.mason@oracle.com | 1326745678 |  | Merge branch 'integrity-check-patch-v2' of git://btrfs.giantdisaster.de/git/btrfs into integration  Conflicts: 	fs/btrfs/ctree.h 	fs/btrfs/super.c  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | transaction.c | s | 40K | 1325 | Josef Bacik | josef@redhat.com | 1339723753 |  | Btrfs: abort the transaction if the commit fails  If a transaction commit fails we don't abort it so we don't set an error on the file system.  This patch fixes that by actually calling the abort stuff and then adding a check for a fs error in the transaction start stuff to make sure it is caught properly.  Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
f | btrfs_inode.h | s | 5.7K | 176 | Josef Bacik | josef@redhat.com | 1339723854 |  | Btrfs: call filemap_fdatawrite twice for compression  I removed this in an earlier commit and I was wrong.  Because compression can return from filemap_fdatawrite() without having actually set any of it's pages as writeback() it can make filemap_fdatawait() do essentially nothing, and then we won't find any ordered extents because they may not have been created yet.  So not only does this make fsync() completely useless, but it will also screw up if you truncate on a non-page aligned offset since we zero out the end and then wait on ordered extents and then call drop caches. We can drop the cache before the io completes and then we try to unpin the extent we just wrote we won't find it and everything goes sideways.  So fix this by putting it back and put a giant comment there to keep me from trying to remove it in the future.  Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
f | inode-item.c | s | 6.4K | 212 | Chris Mason | chris.mason@oracle.com | 1332981097 |  | Merge branch 'error-handling' into for-linus  Conflicts: 	fs/btrfs/ctree.c 	fs/btrfs/disk-io.c 	fs/btrfs/extent-tree.c 	fs/btrfs/extent_io.c 	fs/btrfs/extent_io.h 	fs/btrfs/inode.c 	fs/btrfs/scrub.c  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | lzo.c | s | 9.8K | 358 | Cong Wang | amwang@redhat.com | 1332251301 |  | btrfs: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | volumes.c | s | 124K | 4230 | Josef Bacik | josef@redhat.com | 1339723756 |  | Btrfs: use rcu to protect device->name  Al pointed out that we can just toss out the old name on a device and add a new one arbitrarily, so anybody who uses device->name in printk could possibly use free'd memory.  Instead of adding locking around all of this he suggested doing it with RCU, so I've introduced a struct rcu_string that does just that and have gone through and protected all accesses to device->name that aren't under the uuid_mutex with rcu_read_lock().  This protects us and I will use it for dealing with removing the device that we used to mount the file system in a later patch.  Thanks,  Reviewed-by: David Sterba <dsterba@suse.cz> Signed-off-by: Josef Bacik <josef@redhat.com>
f | dir-item.c | s | 11K | 369 | Jeff Mahoney | jeffm@suse.com | 1332413574 |  | btrfs: replace many BUG_ONs with proper error handling   btrfs currently handles most errors with BUG_ON. This patch is a work-in-  progress but aims to handle most errors other than internal logic  errors and ENOMEM more gracefully.   This iteration prevents most crashes but can run into lockups with  the page lock on occasion when the timing "works out."  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | free-space-cache.c | s | 73K | 2542 | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
f | version.h | s | 95B | 4 | Chris Mason | chris.mason@oracle.com | 1222371719 |  | Update Btrfs files for in-kernel usage  btrfs had magic to put the chagneset id into a printk on module load. This removes that from the Makefile and hardcodes the printk to print "Btrfs"  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | backref.h | s | 2.3K | 55 | Jan Schmidt | list.btrfs@jan-o-sch.net | 1338383854 |  | Btrfs: use the tree modification log for backref resolving  This enables backref resolving on life trees while they are changing. This is a prerequisite for quota groups and just nice to have for everything else.  Signed-off-by: Jan Schmidt <list.btrfs@jan-o-sch.net>
f | check-integrity.c | s | 102K | 3051 | Josef Bacik | josef@redhat.com | 1339723756 |  | Btrfs: use rcu to protect device->name  Al pointed out that we can just toss out the old name on a device and add a new one arbitrarily, so anybody who uses device->name in printk could possibly use free'd memory.  Instead of adding locking around all of this he suggested doing it with RCU, so I've introduced a struct rcu_string that does just that and have gone through and protected all accesses to device->name that aren't under the uuid_mutex with rcu_read_lock().  This protects us and I will use it for dealing with removing the device that we used to mount the file system in a later patch.  Thanks,  Reviewed-by: David Sterba <dsterba@suse.cz> Signed-off-by: Josef Bacik <josef@redhat.com>
f | compression.c | s | 26K | 902 | Linus Torvalds | torvalds@linux-foundation.org | 1334371287 |  | Merge branch 'for-linus-min' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs  Pull the minimal btrfs branch from Chris Mason:  "We have a use-after-free in there, along with errors when mount -o   discard is enabled, and a BUG_ON(we should compile with UP more   often)."  * 'for-linus-min' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs:   Btrfs: use commit root when loading free space cache   Btrfs: fix use-after-free in __btrfs_end_transaction   Btrfs: check return value of bio_alloc() properly   Btrfs: remove lock assert from get_restripe_target()   Btrfs: fix eof while discarding extents   Btrfs: fix uninit variable in repair_eb_io_failure   Revert "Btrfs: increase the global block reserve estimates"
f | struct-funcs.c | s | 5.0K | 135 | Chris Mason | chris.mason@oracle.com | 1332795863 |  | Btrfs: add the ability to cache a pointer into the eb  This cuts down on the CPU time used by map_private_extent_buffer  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | ctree.c | s | 134K | 4613 | Chris Mason | chris.mason@fusionio.com | 1339805214 |  | Btrfs: init old_generation in get_old_root  gcc was giving an uninit variable warning here.  Strictly speaking we don't need to init it, but this will make things much less error prone.  Signed-off-by: Chris Mason <chris.mason@fusionio.com>
f | xattr.h | s | 1.7K | 37 | Eric Paris | eparis@redhat.com | 1296576749 |  | fs/vfs/security: pass last path component to LSM on inode creation  SELinux would like to implement a new labeling behavior of newly created inodes.  We currently label new inodes based on the parent and the creating process.  This new behavior would also take into account the name of the new object when deciding the new label.  This is not the (supposed) full path, just the last component of the path.  This is very useful because creating /etc/shadow is different than creating /etc/passwd but the kernel hooks are unable to differentiate these operations.  We currently require that userspace realize it is doing some difficult operation like that and than userspace jumps through SELinux hoops to get things set up correctly.  This patch does not implement new behavior, that is obviously contained in a seperate SELinux patch, but it does pass the needed name down to the correct LSM hook.  If no such name exists it is fine to pass NULL.  Signed-off-by: Eric Paris <eparis@redhat.com>
f | print-tree.h | s | 906B | 22 | Chris Mason | chris.mason@oracle.com | 1222355036 |  | Btrfs: Create extent_buffer interface for large blocksizes  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | check-integrity.h | s | 1.2K | 32 | Stefan Behrens | sbehrens@giantdisaster.de | 1324491249 |  | Btrfs: add optional integrity check code  The two files added in this patch contain all the code that is required to implement the integrity checks.  Signed-off-by: Stefan Behrens <sbehrens@giantdisaster.de>
f | ulist.h | s | 1.9K | 65 | Chris Mason | chris.mason@oracle.com | 1338497393 |  | Merge branch 'for-chris' of git://git.jan-o-sch.net/btrfs-unstable into for-linus  Conflicts: 	fs/btrfs/ulist.h  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | extent-tree.c | s | 213K | 7036 | Chris Mason | chris.mason@oracle.com | 1338497393 |  | Merge branch 'for-chris' of git://git.jan-o-sch.net/btrfs-unstable into for-linus  Conflicts: 	fs/btrfs/ulist.h  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | xattr.c | s | 10K | 373 | Josef Bacik | josef@redhat.com | 1338387807 |  | Btrfs: use i_version instead of our own sequence  We've been keeping around the inode sequence number in hopes that somebody would use it, but nobody uses it and people actually use i_version which serves the same purpose, so use i_version where we used the incore inode's sequence number and that way the sequence is updated properly across the board, and not just in file write.  Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
f | relocation.c | s | 104K | 3884 | Daniel J Blueman | daniel@quora.org | 1335549314 |  | Btrfs: Fix space checking during fs resize  Fix out-of-space checking, addressing a warning and potential resource leak when resizing the filesystem down while allocating blocks.  Signed-off-by: Daniel J Blueman <daniel@quora.org> Reviewed-by: Josef Bacik <josef@redhat.com> Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | volumes.h | s | 9.2K | 279 | Josef Bacik | josef@redhat.com | 1339723756 |  | Btrfs: use rcu to protect device->name  Al pointed out that we can just toss out the old name on a device and add a new one arbitrarily, so anybody who uses device->name in printk could possibly use free'd memory.  Instead of adding locking around all of this he suggested doing it with RCU, so I've introduced a struct rcu_string that does just that and have gone through and protected all accesses to device->name that aren't under the uuid_mutex with rcu_read_lock().  This protects us and I will use it for dealing with removing the device that we used to mount the file system in a later patch.  Thanks,  Reviewed-by: David Sterba <dsterba@suse.cz> Signed-off-by: Josef Bacik <josef@redhat.com>
f | extent_io.c | s | 121K | 4403 | Josef Bacik | josef@redhat.com | 1339723756 |  | Btrfs: use rcu to protect device->name  Al pointed out that we can just toss out the old name on a device and add a new one arbitrarily, so anybody who uses device->name in printk could possibly use free'd memory.  Instead of adding locking around all of this he suggested doing it with RCU, so I've introduced a struct rcu_string that does just that and have gone through and protected all accesses to device->name that aren't under the uuid_mutex with rcu_read_lock().  This protects us and I will use it for dealing with removing the device that we used to mount the file system in a later patch.  Thanks,  Reviewed-by: David Sterba <dsterba@suse.cz> Signed-off-by: Josef Bacik <josef@redhat.com>
f | inode-map.h | s | 455B | 10 | Li Zefan | lizf@cn.fujitsu.com | 1303721171 |  | Btrfs: Support reading/writing on disk free ino cache  This is similar to block group caching.  We dedicate a special inode in fs tree to save free ino cache.  At the very first time we create/delete a file after mount, the free ino cache will be loaded from disk into memory. When the fs tree is commited, the cache will be written back to disk.  To keep compatibility, we check the root generation against the generation of the special inode when loading the cache, so the loading will fail if the btrfs filesystem was mounted in an older kernel before.  Signed-off-by: Li Zefan <lizf@cn.fujitsu.com>
f | free-space-cache.h | s | 4.1K | 105 | Li Zefan | lizf@cn.fujitsu.com | 1303721171 |  | Btrfs: Support reading/writing on disk free ino cache  This is similar to block group caching.  We dedicate a special inode in fs tree to save free ino cache.  At the very first time we create/delete a file after mount, the free ino cache will be loaded from disk into memory. When the fs tree is commited, the cache will be written back to disk.  To keep compatibility, we check the root generation against the generation of the special inode when loading the cache, so the loading will fail if the btrfs filesystem was mounted in an older kernel before.  Signed-off-by: Li Zefan <lizf@cn.fujitsu.com>
f | scrub.c | s | 65K | 2168 | Josef Bacik | josef@redhat.com | 1339723756 |  | Btrfs: use rcu to protect device->name  Al pointed out that we can just toss out the old name on a device and add a new one arbitrarily, so anybody who uses device->name in printk could possibly use free'd memory.  Instead of adding locking around all of this he suggested doing it with RCU, so I've introduced a struct rcu_string that does just that and have gone through and protected all accesses to device->name that aren't under the uuid_mutex with rcu_read_lock().  This protects us and I will use it for dealing with removing the device that we used to mount the file system in a later patch.  Thanks,  Reviewed-by: David Sterba <dsterba@suse.cz> Signed-off-by: Josef Bacik <josef@redhat.com>
f | extent_io.h | s | 12K | 303 | Chris Mason | chris.mason@oracle.com | 1338497393 |  | Merge branch 'for-chris' of git://git.jan-o-sch.net/btrfs-unstable into for-linus  Conflicts: 	fs/btrfs/ulist.h  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | tree-log.c | s | 86K | 3004 | Josef Bacik | josef@redhat.com | 1338387822 |  | Btrfs: fix return code in drop_objectid_items  So dpkg fsync()'s the file and the directory containing the file whenever it writes to a file which is really slow in btrfs.  This is partly because fsync()'ing a directory _always_ committed the transaction instead of just going to the tree log.  This is because drop_objectid_items() would return 1 since it does a btrfs_search_slot() which returns 1.  In tree-log jargon this means that we have to commit the transaction to be safe.  So just check if ret is greater than 0 and set it to 0 if it does.  With this patch we now use the tree-log instead of committing the entire transaction, which is twice as fast on my box.  Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
f | async-thread.h | s | 3.8K | 101 | Jeff Mahoney | jeffm@suse.com | 1332377134 |  | btrfs: return void in functions without error conditions  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | super.c | s | 42K | 1449 | Josef Bacik | josef@redhat.com | 1339723837 |  | Btrfs: implement ->show_devname  Because btrfs can remove the device that was mounted we need to have a ->show_devname so that in this case we can print out some other device in the file system to /proc/mount.  So if there are multiple devices in a btrfs file system we will just print the device with the lowest devid that we can find.  This will make everything consistent and deal with device removal properly.  The drawback is if you mount with a device that is higher than the lowest devicd it won't show up as the mounted device in /proc/mounts, but this is a small price to pay. This was inspired by Miao Xie's patch. Thanks,  Reviewed-by: Miao Xie <miaox@cn.fujitsu.com> Signed-off-by: Josef Bacik <josef@redhat.com>
f | disk-io.h | s | 4.3K | 98 | Asias He | asias@redhat.com | 1338387819 |  | btrfs: Drop unused function btrfs_abort_devices()  1) This function is not used anywhere.  2) Using the blk_abort_queue() to abort the queue seems not correct. blk_abort_queue() is used for timeout handling (block/blk-timeout.c).  Cc: Chris Mason <chris.mason@oracle.com> Cc: linux-btrfs@vger.kernel.org Cc: Jens Axboe <axboe@kernel.dk> Cc: linux-kernel@vger.kernel.org Signed-off-by: Asias He <asias@redhat.com>
f | root-tree.c | s | 10K | 400 | Jeff Mahoney | jeffm@suse.com | 1332413574 |  | btrfs: replace many BUG_ONs with proper error handling   btrfs currently handles most errors with BUG_ON. This patch is a work-in-  progress but aims to handle most errors other than internal logic  errors and ENOMEM more gracefully.   This iteration prevents most crashes but can run into lockups with  the page lock on occasion when the timing "works out."  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | extent_map.h | s | 1.8K | 56 | David Sterba | dsterba@suse.cz | 1329320425 |  | btrfs: fix structs where bitfields and spinlock/atomic share 8B word  On ia64, powerpc64 and sparc64 the bitfield is modified through a RMW cycle and current gcc rewrites the adjacent 4B word, which in case of a spinlock or atomic has disaterous effect.  https://lkml.org/lkml/2012/2/1/220  Signed-off-by: David Sterba <dsterba@suse.cz>
f | disk-io.c | s | 99K | 3162 | Linus Torvalds | torvalds@linux-foundation.org | 1340311267 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs  Pull btrfs fixes from Chris Mason:  "This is a small pull with btrfs fixes.  The biggest of the bunch is   another fix for the new backref walking code.    We're still hammering out one btrfs dio vs buffered reads problem, but   that one will have to wait for the next rc."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs:   Btrfs: delay iput with async extents   Btrfs: add a missing spin_lock   Btrfs: don't assume to be on the correct extent in add_all_parents   Btrfs: introduce btrfs_next_old_item
f | inode.c | s | 202K | 6801 | Linus Torvalds | torvalds@linux-foundation.org | 1340311267 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs  Pull btrfs fixes from Chris Mason:  "This is a small pull with btrfs fixes.  The biggest of the bunch is   another fix for the new backref walking code.    We're still hammering out one btrfs dio vs buffered reads problem, but   that one will have to wait for the next rc."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs:   Btrfs: delay iput with async extents   Btrfs: add a missing spin_lock   Btrfs: don't assume to be on the correct extent in add_all_parents   Btrfs: introduce btrfs_next_old_item
f | export.c | s | 7.6K | 260 | Al Viro | viro@zeniv.linux.org.uk | 1338348513 |  | ->encode_fh() API change  pass inode + parent's inode or NULL instead of dentry + bool saying whether we want the parent or not.  NOTE: that needs ceph fix folded in.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | compression.h | s | 2.8K | 72 | Jeff Mahoney | jeffm@suse.com | 1332377134 |  | btrfs: return void in functions without error conditions  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | ctree.h | s | 100K | 2744 | Linus Torvalds | torvalds@linux-foundation.org | 1340311267 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs  Pull btrfs fixes from Chris Mason:  "This is a small pull with btrfs fixes.  The biggest of the bunch is   another fix for the new backref walking code.    We're still hammering out one btrfs dio vs buffered reads problem, but   that one will have to wait for the next rc."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs:   Btrfs: delay iput with async extents   Btrfs: add a missing spin_lock   Btrfs: don't assume to be on the correct extent in add_all_parents   Btrfs: introduce btrfs_next_old_item
f | reada.c | s | 23K | 839 | Stefan Behrens | sbehrens@giantdisaster.de | 1338387823 |  | Btrfs: set ioprio of scrub readahead to idle  Reduce ioprio class of scrub readahead threads to idle priority. This setting is fixed. This priority has shown the best performance during all measurements.  Signed-off-by: Stefan Behrens <sbehrens@giantdisaster.de>
f | delayed-inode.c | s | 49K | 1605 | Miao Xie | miaox@cn.fujitsu.com | 1339774948 |  | Btrfs: destroy the items of the delayed inodes in error handling routine  the items of the delayed inodes were forgotten to be freed, this patch fixes it.  Signed-off-by: Miao Xie <miaox@cn.fujitsu.com> Signed-off-by: Chris Mason <chris.mason@fusionio.com>
f | extent_map.c | s | 8.7K | 318 | Li Zefan | lizf@cn.fujitsu.com | 1312223450 |  | Btrfs: clean up code for merging extent maps  unpin_extent_cache() and add_extent_mapping() shares the same code that merges extent maps.  Signed-off-by: Li Zefan <lizf@cn.fujitsu.com> Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | delayed-ref.h | s | 7.6K | 223 | Jan Schmidt | list.btrfs@jan-o-sch.net | 1338394701 |  | Btrfs: use delayed ref sequence numbers for all fs-tree updates  The sequence number for delayed refs is needed to postpone certain delayed refs for a very short period while walking backrefs. Before the tree modification log, we thought we'd only have to hold back those references that don't have a counter operation.  While now we've the tree mod log, we're rewinding fs tree blocks to a defined consistent state. We cannot know in advance for which tree block we'll be doing rewind operations later. Therefore, we must postpone all the delayed refs for fs-tree blocks, even those having a counter operation.  Signed-off-by: Jan Schmidt <list.btrfs@jan-o-sch.net>
f | ioctl.h | s | 11K | 318 | Stefan Behrens | sbehrens@giantdisaster.de | 1338387820 |  | Btrfs: add ioctl to get and reset the device stats  An ioctl interface is added to get the device statistic counters. A second ioctl is added to atomically get and reset these counters.  Signed-off-by: Stefan Behrens <sbehrens@giantdisaster.de>
f | delayed-inode.h | s | 4.4K | 126 | Miao Xie | miaox@cn.fujitsu.com | 1339774948 |  | Btrfs: destroy the items of the delayed inodes in error handling routine  the items of the delayed inodes were forgotten to be freed, this patch fixes it.  Signed-off-by: Miao Xie <miaox@cn.fujitsu.com> Signed-off-by: Chris Mason <chris.mason@fusionio.com>
f | orphan.c | s | 2.1K | 74 | Jeff Mahoney | jeffm@suse.com | 1332413574 |  | btrfs: replace many BUG_ONs with proper error handling   btrfs currently handles most errors with BUG_ON. This patch is a work-in-  progress but aims to handle most errors other than internal logic  errors and ENOMEM more gracefully.   This iteration prevents most crashes but can run into lockups with  the page lock on occasion when the timing "works out."  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | ioctl.c | s | 82K | 2971 | Chris Mason | chris.mason@fusionio.com | 1339805237 |  | Btrfs: cast devid to unsigned long long for printk %llu  Avoid warning in 32 bit machines  Signed-off-by: Chris Mason <chris.mason@fusionio.com>
f | ulist.c | s | 5.9K | 201 | Chris Mason | chris.mason@oracle.com | 1338497393 |  | Merge branch 'for-chris' of git://git.jan-o-sch.net/btrfs-unstable into for-linus  Conflicts: 	fs/btrfs/ulist.h  Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | acl.c | s | 5.7K | 234 | Josef Bacik | josef@redhat.com | 1338387807 |  | Btrfs: cache no acl on new inodes  When running compilebench I noticed we were spending some time looking up acls on new inodes, which shouldn't be happening since there were no acls. This is because when we init acls on the inode after creating them we don't cache the fact there are no acls if there aren't any.  Doing this adds a little bit of a bump to my compilebench runs.  Thanks, Btrfs: cache no acl on new inodes  Signed-off-by: Josef Bacik <josef@redhat.com>
f | Kconfig | g | 1.8K |  | Stefan Behrens | sbehrens@giantdisaster.de | 1324491256 |  | Btrfs: add config option to enable btrfs integrity check  Added the BTRFS_FS_CHECK_INTEGRITY option to Kconfig. It depends on BTRFS_FS.  Signed-off-by: Stefan Behrens <sbehrens@giantdisaster.de>
f | delayed-ref.c | s | 20K | 678 | Jan Schmidt | list.btrfs@jan-o-sch.net | 1338394701 |  | Btrfs: use delayed ref sequence numbers for all fs-tree updates  The sequence number for delayed refs is needed to postpone certain delayed refs for a very short period while walking backrefs. Before the tree modification log, we thought we'd only have to hold back those references that don't have a counter operation.  While now we've the tree mod log, we're rewinding fs tree blocks to a defined consistent state. We cannot know in advance for which tree block we'll be doing rewind operations later. Therefore, we must postpone all the delayed refs for fs-tree blocks, even those having a counter operation.  Signed-off-by: Jan Schmidt <list.btrfs@jan-o-sch.net>
f | ordered-data.h | s | 5.9K | 157 | Josef Bacik | josef@redhat.com | 1338387813 |  | Btrfs: finish ordered extents in their own thread  We noticed that the ordered extent completion doesn't really rely on having a page and that it could be done independantly of ending the writeback on a page.  This patch makes us not do the threaded endio stuff for normal buffered writes and direct writes so we can end page writeback as soon as possible (in irq context) and only start threads to do the ordered work when it is actually done.  Compression needs to be reworked some to take advantage of this as well, but atm it has to do a find_get_page in its endio handler so it must be done in its own thread.  This makes direct writes quite a bit faster.  Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
f | locking.h | s | 2.1K | 54 | Jeff Mahoney | jeffm@suse.com | 1332377134 |  | btrfs: return void in functions without error conditions  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | sysfs.c | s | 1.2K | 40 | Maarten Lankhorst | m.b.lankhorst@gmail.com | 1308336858 |  | btrfs: Remove unused sysfs code  Removes code no longer used. The sysfs file itself is kept, because the btrfs developers expressed interest in putting new entries to sysfs.  Signed-off-by: Maarten Lankhorst <m.b.lankhorst@gmail.com> Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | file.c | s | 49K | 1725 | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
f | transaction.h | s | 4.2K | 111 | Jeff Mahoney | jeffm@suse.com | 1332377140 |  | btrfs: enhance transaction abort infrastructure  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
f | rcu-string.h | s | 1.5K | 50 | Josef Bacik | josef@redhat.com | 1339723756 |  | Btrfs: use rcu to protect device->name  Al pointed out that we can just toss out the old name on a device and add a new one arbitrarily, so anybody who uses device->name in printk could possibly use free'd memory.  Instead of adding locking around all of this he suggested doing it with RCU, so I've introduced a struct rcu_string that does just that and have gone through and protected all accesses to device->name that aren't under the uuid_mutex with rcu_read_lock().  This protects us and I will use it for dealing with removing the device that we used to mount the file system in a later patch.  Thanks,  Reviewed-by: David Sterba <dsterba@suse.cz> Signed-off-by: Josef Bacik <josef@redhat.com>
f | export.h | s | 301B | 13 | Balaji Rao | balajirrao@gmail.com | 1222355046 |  | NFS support for btrfs - v3  Date: Mon, 21 Jul 2008 02:01:56 +0530 Here's an implementation of NFS support for btrfs. It relies on the fixes which are going in to 2.6.28 for the NFS readdir/lookup deadlock.  This uses the btrfs_iget helper introduced previously.  [dwmw2: Tidy up a little, switch to d_obtain_alias() w/compat routine, 	change fh_type,	store parent's root object ID where needed, 	fix some get_parent() and fs_to_dentry() bugs]  Signed-off-by: Balaji Rao <balajirrao@gmail.com> Signed-off-by: David Woodhouse <David.Woodhouse@intel.com> Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | backref.c | s | 42K | 1445 | Alexander Block | ablock84@googlemail.com | 1340277574 |  | Btrfs: don't assume to be on the correct extent in add_all_parents  add_all_parents did assume that path is already at a correct extent data item, which may not be true in case of data extents that were partly rewritten and splitted.  We need to check if we're on a matching extent for every item and only for the ones after the first. The loop is changed to do this now.  This patch also fixes a bug introduced with commit 3b127fd8 "Btrfs: remove obsolete btrfs_next_leaf call from __resolve_indirect_ref". The removal of next_leaf did sometimes result in slot==nritems when the above described case happens, and thus resulting in invalid values (e.g. wanted_obejctid) in add_all_parents (leading to missed backrefs or even crashes).  Signed-off-by: Alexander Block <ablock84@googlemail.com> Signed-off-by: Jan Schmidt <list.btrfs@jan-o-sch.net> Signed-off-by: Chris Mason <chris.mason@fusionio.com>
f | inode-map.c | s | 14K | 486 | Liu Bo | liubo2009@cn.fujitsu.com | 1333029464 |  | Btrfs: show useful info in space reservation tracepoint  o For space info, the type of space info is useful for debug. o For transaction handle, its transid is useful.  Signed-off-by: Liu Bo <liubo2009@cn.fujitsu.com> Signed-off-by: Chris Mason <chris.mason@oracle.com>
f | tree-defrag.c | s | 3.5K | 130 | David Sterba | dsterba@suse.cz | 1304337442 |  | btrfs: drop unused parameter from btrfs_release_path  parameter tree root it's not used since commit 5f39d397dfbe140a14edecd4e73c34ce23c4f9ee ("Btrfs: Create extent_buffer interface for large blocksizes")  Signed-off-by: David Sterba <dsterba@suse.cz>
f | zlib.c | s | 10K | 346 | Cong Wang | amwang@redhat.com | 1332251301 |  | btrfs: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | async-thread.c | s | 17K | 608 | Jeff Mahoney | jeffm@suse.com | 1332377134 |  | btrfs: return void in functions without error conditions  Signed-off-by: Jeff Mahoney <jeffm@suse.com>
