f | inode.c | s | 8.0K | 304 | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
f | expire.c | s | 13K | 496 | Steven Rostedt | rostedt@goodmis.org | 1329183937 |  | autofs4 - fix lockdep splat in autofs  When recursing down the locks when traversing a tree/list in get_next_positive_dentry() or get_next_positive_subdir() a lock can change from being nested to being a parent which breaks lockdep. This patch tells lockdep about what we did.  Signed-off-by: Steven Rostedt <rostedt@goodmis.org> Acked-by: Ian Kent <raven@themaw.net> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | init.c | s | 1.2K | 42 | Al Viro | viro@zeniv.linux.org.uk | 1332293386 |  | autofs: set things up *before* registering fs type  it's not a serious race, but we really want misc device before anybody gets to mount this sucker.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | Makefile | g | 174B |  | Ian Kent | raven@themaw.net | 1224181299 |  | autofs4: add miscellaneous device for ioctls  Add a miscellaneous device to the autofs4 module for routing ioctls.  This provides the ability to obtain an ioctl file handle for an autofs mount point that is possibly covered by another mount.  The actual problem with autofs is that it can't reconnect to existing mounts.  Immediately one things of just adding the ability to remount autofs file systems would solve it, but alas, that can't work.  This is because autofs direct mounts and the implementation of "on demand mount and expire" of nested mount trees have the file system mounted on top of the mount trigger dentry.  To resolve this a miscellaneous device node for routing ioctl commands to these mount points has been implemented in the autofs4 kernel module and a library added to autofs.  This provides the ability to open a file descriptor for these over mounted autofs mount points.  Please refer to Documentation/filesystems/autofs4-mount-control.txt for a discussion of the problem, implementation alternatives considered and a description of the interface.  [akpm@linux-foundation.org: coding-style fixes] [akpm@linux-foundation.org: build fix] Signed-off-by: Ian Kent <raven@themaw.net> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | dev-ioctl.c | s | 18K | 658 | Linus Torvalds | torvalds@linux-foundation.org | 1335731408 |  | autofs: make the autofsv5 packet file descriptor use a packetized pipe  The autofs packet size has had a very unfortunate size problem on x86: because the alignment of 'u64' differs in 32-bit and 64-bit modes, and because the packet data was not 8-byte aligned, the size of the autofsv5 packet structure differed between 32-bit and 64-bit modes despite looking otherwise identical (300 vs 304 bytes respectively).  We first fixed that up by making the 64-bit compat mode know about this problem in commit a32744d4abae ("autofs: work around unhappy compat problem on x86-64"), and that made a 32-bit 'systemd' work happily on a 64-bit kernel because everything then worked the same way as on a 32-bit kernel.  But it turned out that 'automount' had actually known and worked around this problem in user space, so fixing the kernel to do the proper 32-bit compatibility handling actually *broke* 32-bit automount on a 64-bit kernel, because it knew that the packet sizes were wrong and expected those incorrect sizes.  As a result, we ended up reverting that compatibility mode fix, and thus breaking systemd again, in commit fcbf94b9dedd.  With both automount and systemd doing a single read() system call, and verifying that they get *exactly* the size they expect but using different sizes, it seemed that fixing one of them inevitably seemed to break the other.  At one point, a patch I seriously considered applying from Michael Tokarev did a "strcmp()" to see if it was automount that was doing the operation.  Ugly, ugly.  However, a prettier solution exists now thanks to the packetized pipe mode.  By marking the communication pipe as being packetized (by simply setting the O_DIRECT flag), we can always just write the bigger packet size, and if user-space does a smaller read, it will just get that partial end result and the extra alignment padding will simply be thrown away.  This makes both automount and systemd happy, since they now get the size they asked for, and the kernel side of autofs simply no longer needs to care - it could pad out the packet arbitrarily.  Of course, if there is some *other* user of autofs (please, please, please tell me it ain't so - and we haven't heard of any) that tries to read the packets with multiple writes, that other user will now be broken - the whole point of the packetized mode is that one system call gets exactly one packet, and you cannot read a packet in pieces.  Tested-by: Michael Tokarev <mjt@tls.msk.ru> Cc: Alan Cox <alan@lxorguk.ukuu.org.uk> Cc: David Miller <davem@davemloft.net> Cc: Ian Kent <raven@themaw.net> Cc: Thomas Meyer <thomas@m3y3r.de> Cc: stable@kernel.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | waitq.c | s | 13K | 481 | Linus Torvalds | torvalds@linux-foundation.org | 1335626996 |  | Revert "autofs: work around unhappy compat problem on x86-64"  This reverts commit a32744d4abae24572eff7269bc17895c41bd0085.  While that commit was technically the right thing to do, and made the x86-64 compat mode work identically to native 32-bit mode (and thus fixing the problem with a 32-bit systemd install on a 64-bit kernel), it turns out that the automount binaries had workarounds for this compat problem.  Now, the workarounds are disgusting: doing an "uname()" to find out the architecture of the kernel, and then comparing it for the 64-bit cases and fixing up the size of the read() in automount for those.  And they were confused: it's not actually a generic 64-bit issue at all, it's very much tied to just x86-64, which has different alignment for an 'u64' in 64-bit mode than in 32-bit mode.  But the end result is that fixing the compat layer actually breaks the case of a 32-bit automount on a x86-64 kernel.  There are various approaches to fix this (including just doing a "strcmp()" on current->comm and comparing it to "automount"), but I think that I will do the one that teaches pipes about a special "packet mode", which will allow user space to not have to care too deeply about the padding at the end of the autofs packet.  That change will make the compat workaround unnecessary, so let's revert it first, and get automount working again in compat mode.  The packetized pipes will then fix autofs for systemd.  Reported-and-requested-by: Michael Tokarev <mjt@tls.msk.ru> Cc: Ian Kent <raven@themaw.net> Cc: stable@kernel.org # for 3.3 Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | root.c | s | 23K | 752 | Al Viro | viro@zeniv.linux.org.uk | 1325649293 |  | switch vfs_mkdir() and ->mkdir() to umode_t  vfs_mkdir() gets int, but immediately drops everything that might not fit into umode_t and that's the only caller of ->mkdir()...  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | symlink.c | s | 776B | 21 | Al Viro | viro@zeniv.linux.org.uk | 1295331687 |  | autofs4: keep symlink body in inode->i_private  gets rid of all ->free()/->u.symlink machinery in autofs; we simply keep symlink bodies in inode->i_private and free them in ->evict_inode().  Acked-by: Ian Kent <raven@themaw.net> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | autofs_i.h | s | 9.2K | 282 | Linus Torvalds | torvalds@linux-foundation.org | 1335731408 |  | autofs: make the autofsv5 packet file descriptor use a packetized pipe  The autofs packet size has had a very unfortunate size problem on x86: because the alignment of 'u64' differs in 32-bit and 64-bit modes, and because the packet data was not 8-byte aligned, the size of the autofsv5 packet structure differed between 32-bit and 64-bit modes despite looking otherwise identical (300 vs 304 bytes respectively).  We first fixed that up by making the 64-bit compat mode know about this problem in commit a32744d4abae ("autofs: work around unhappy compat problem on x86-64"), and that made a 32-bit 'systemd' work happily on a 64-bit kernel because everything then worked the same way as on a 32-bit kernel.  But it turned out that 'automount' had actually known and worked around this problem in user space, so fixing the kernel to do the proper 32-bit compatibility handling actually *broke* 32-bit automount on a 64-bit kernel, because it knew that the packet sizes were wrong and expected those incorrect sizes.  As a result, we ended up reverting that compatibility mode fix, and thus breaking systemd again, in commit fcbf94b9dedd.  With both automount and systemd doing a single read() system call, and verifying that they get *exactly* the size they expect but using different sizes, it seemed that fixing one of them inevitably seemed to break the other.  At one point, a patch I seriously considered applying from Michael Tokarev did a "strcmp()" to see if it was automount that was doing the operation.  Ugly, ugly.  However, a prettier solution exists now thanks to the packetized pipe mode.  By marking the communication pipe as being packetized (by simply setting the O_DIRECT flag), we can always just write the bigger packet size, and if user-space does a smaller read, it will just get that partial end result and the extra alignment padding will simply be thrown away.  This makes both automount and systemd happy, since they now get the size they asked for, and the kernel side of autofs simply no longer needs to care - it could pad out the packet arbitrarily.  Of course, if there is some *other* user of autofs (please, please, please tell me it ain't so - and we haven't heard of any) that tries to read the packets with multiple writes, that other user will now be broken - the whole point of the packetized mode is that one system call gets exactly one packet, and you cannot read a packet in pieces.  Tested-by: Michael Tokarev <mjt@tls.msk.ru> Cc: Alan Cox <alan@lxorguk.ukuu.org.uk> Cc: David Miller <davem@davemloft.net> Cc: Ian Kent <raven@themaw.net> Cc: Thomas Meyer <thomas@m3y3r.de> Cc: stable@kernel.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Kconfig | g | 936B |  | Alexey Dobriyan | adobriyan@gmail.com | 1232619354 |  | fs/Kconfig: move autofs, autofs4 out  Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
