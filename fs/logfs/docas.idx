f | readwrite.c | s | 55K | 1950 | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | dir.c | s | 20K | 713 | Linus Torvalds | torvalds@linux-foundation.org | 1332362201 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs pile 1 from Al Viro:  "This is _not_ all; in particular, Miklos' and Jan's stuff is not there   yet."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (64 commits)   ext4: initialization of ext4_li_mtx needs to be done earlier   debugfs-related mode_t whack-a-mole   hfsplus: add an ioctl to bless files   hfsplus: change finder_info to u32   hfsplus: initialise userflags   qnx4: new helper - try_extent()   qnx4: get rid of qnx4_bread/qnx4_getblk   take removal of PF_FORKNOEXEC to flush_old_exec()   trim includes in inode.c   um: uml_dup_mmap() relies on ->mmap_sem being held, but activate_mm() doesn't hold it   um: embed ->stub_pages[] into mmu_context   gadgetfs: list_for_each_safe() misuse   ocfs2: fix leaks on failure exits in module_init   ecryptfs: make register_filesystem() the last potential failure exit   ntfs: forgets to unregister sysctls on register_filesystem() failure   logfs: missing cleanup on register_filesystem() failure   jfs: mising cleanup on register_filesystem() failure   make configfs_pin_fs() return root dentry on success   configfs: configfs_create_dir() has parent dentry in dentry->d_parent   configfs: sanitize configfs_create()   ...
f | journal.c | s | 23K | 778 | Joern Engel | joern@logfs.org | 1327731116 |  | logfs: remove useless BUG_ON  It prevents write sizes >4k.  Signed-off-by: Joern Engel <joern@logfs.org>
f | Makefile | g | 274B |  | Joern Engel | joern@logfs.org | 1258744419 |  | [LogFS] add new flash file system  This is a new flash file system. See Documentation/filesystems/logfs.txt  Signed-off-by: Joern Engel <joern@logfs.org>
f | super.c | s | 16K | 559 | Al Viro | viro@zeniv.linux.org.uk | 1332293388 |  | logfs: missing cleanup on register_filesystem() failure  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | inode.c | s | 10K | 350 | Linus Torvalds | torvalds@linux-foundation.org | 1328030639 |  | 
f | logfs.h | s | 23K | 669 | Linus Torvalds | torvalds@linux-foundation.org | 1328030639 |  | 
f | logfs_abi.h | s | 16K | 552 | Anand Gadiyar | gadiyar@ti.com | 1273485390 |  | fix "seperate" typos in comments  s/seperate/separate  Signed-off-by: Anand Gadiyar <gadiyar@ti.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | segment.c | s | 24K | 831 | Cong Wang | amwang@redhat.com | 1332251304 |  | logfs: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | gc.c | s | 20K | 640 | Joern Engel | joern@logfs.org | 1327730061 |  | logfs: Prevent memory corruption  This is a bad one.  I wonder whether we were so far protected by no_free_segments(sb) usually being smaller than LOGFS_NO_AREAS.  Found by Dan Carpenter <dan.carpenter@oracle.com> using smatch.  Signed-off-by: Joern Engel <joern@logfs.org> Signed-off-by: Prasad Joshi <prasadjoshi.linux@gmail.com>
f | compr.c | s | 1.8K | 78 | Jim Keniston | jkenisto@linux.vnet.ibm.com | 1300841057 |  | zlib: slim down zlib_deflate() workspace when possible  Instead of always creating a huge (268K) deflate_workspace with the maximum compression parameters (windowBits=15, memLevel=8), allow the caller to obtain a smaller workspace by specifying smaller parameter values.  For example, when capturing oops and panic reports to a medium with limited capacity, such as NVRAM, compression may be the only way to capture the whole report.  In this case, a small workspace (24K works fine) is a win, whether you allocate the workspace when you need it (i.e., during an oops or panic) or at boot time.  I've verified that this patch works with all accepted values of windowBits (positive and negative), memLevel, and compression level.  Signed-off-by: Jim Keniston <jkenisto@us.ibm.com> Cc: Herbert Xu <herbert@gondor.apana.org.au> Cc: David Miller <davem@davemloft.net> Cc: Chris Mason <chris.mason@oracle.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Kconfig | g | 532B |  | Joern Engel | joern@logfs.org | 1258744419 |  | [LogFS] add new flash file system  This is a new flash file system. See Documentation/filesystems/logfs.txt  Signed-off-by: Joern Engel <joern@logfs.org>
f | dev_mtd.c | s | 6.6K | 238 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1328123424 |  | mtd: fix merge conflict resolution breakage  This patch fixes merge conflict resolution breakage introduced by merge d3712b9dfcf4 ("Merge tag 'for-linus' of git://github.com/prasad-joshi/logfs_upstream").  The commit changed 'mtd_can_have_bb()' function and made it always return zero, which is incorrect.  Instead, we need it to return whether the underlying flash device can have bad eraseblocks or not.  UBI needs this information because it affects how it handles the underlying flash. E.g., if the underlying flash is NOR, it cannot have bad blocks and any write or erase error is fatal, and all we can do is to switch to R/O mode.  We do not need to reserve a pool of good eraseblocks for bad eraseblocks handling, and so on.  This patch also removes 'mtd_can_have_bb()' invocations from Logfs to ensure correct Logfs behavior.  I've tested that with this patch UBI works on top of NOR and NAND flashes emulated by mtdram and nandsim correspondingly.  This patch is based on patch from Linus Torvalds.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Acked-by: JÃ¶rn Engel <joern@logfs.org> Acked-by: Prasad Joshi <prasadjoshi.linux@gmail.com> Acked-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | file.c | s | 7.2K | 241 | Prasad Joshi | prasadjoshi.linux@gmail.com | 1327730766 |  | logfs: take write mutex lock during fsync and sync  LogFS uses super->s_write_mutex while writing data to disk. Taking the same mutex lock in sync and fsync code path solves the following BUG:  ------------[ cut here ]------------ kernel BUG at /home/prasad/logfs/dev_bdev.c:134!  Pid: 2387, comm: flush-253:16 Not tainted 3.0.0+ #4 Bochs Bochs RIP: 0010:[<ffffffffa007deed>]  [<ffffffffa007deed>]                 bdev_writeseg+0x25d/0x270 [logfs] Call Trace: [<ffffffffa007c381>] logfs_open_area+0x91/0x150 [logfs] [<ffffffff8128dcb2>] ? find_level.clone.9+0x62/0x100 [<ffffffffa007c49c>] __logfs_segment_write.clone.20+0x5c/0x190 [logfs] [<ffffffff810ef005>] ? mempool_kmalloc+0x15/0x20 [<ffffffff810ef383>] ? mempool_alloc+0x53/0x130 [<ffffffffa007c7a4>] logfs_segment_write+0x1d4/0x230 [logfs] [<ffffffffa0078f8e>] logfs_write_i0+0x12e/0x190 [logfs] [<ffffffffa0079300>] __logfs_write_rec+0x140/0x220 [logfs] [<ffffffffa0079444>] logfs_write_rec+0x64/0xd0 [logfs] [<ffffffffa00795b6>] __logfs_write_buf+0x106/0x110 [logfs] [<ffffffffa007a13e>] logfs_write_buf+0x4e/0x80 [logfs] [<ffffffffa0073e33>] __logfs_writepage+0x23/0x80 [logfs] [<ffffffffa007410c>] logfs_writepage+0xdc/0x110 [logfs] [<ffffffff810f5ba7>] __writepage+0x17/0x40 [<ffffffff810f6208>] write_cache_pages+0x208/0x4f0 [<ffffffff810f5b90>] ? set_page_dirty+0x70/0x70 [<ffffffff810f653a>] generic_writepages+0x4a/0x70 [<ffffffff810f75d1>] do_writepages+0x21/0x40 [<ffffffff8116b9d1>] writeback_single_inode+0x101/0x250 [<ffffffff8116bdbd>] writeback_sb_inodes+0xed/0x1c0 [<ffffffff8116c5fb>] writeback_inodes_wb+0x7b/0x1e0 [<ffffffff8116cc23>] wb_writeback+0x4c3/0x530 [<ffffffff814d984d>] ? sub_preempt_count+0x9d/0xd0 [<ffffffff8116cd6b>] wb_do_writeback+0xdb/0x290 [<ffffffff814d984d>] ? sub_preempt_count+0x9d/0xd0 [<ffffffff814d6208>] ? _raw_spin_unlock_irqrestore+0x18/0x40 [<ffffffff8105aa5a>] ? del_timer+0x8a/0x120 [<ffffffff8116cfac>] bdi_writeback_thread+0x8c/0x2e0 [<ffffffff8116cf20>] ? wb_do_writeback+0x290/0x290 [<ffffffff8106d2e6>] kthread+0x96/0xa0 [<ffffffff814de514>] kernel_thread_helper+0x4/0x10 [<ffffffff8106d250>] ? kthread_worker_fn+0x190/0x190 [<ffffffff814de510>] ? gs_change+0xb/0xb RIP  [<ffffffffa007deed>] bdev_writeseg+0x25d/0x270 [logfs] ---[ end trace 0211ad60a57657c4 ]---  Reviewed-by: Joern Engel <joern@logfs.org> Signed-off-by: Prasad Joshi <prasadjoshi.linux@gmail.com>
f | dev_bdev.c | s | 8.4K | 294 | Linus Torvalds | torvalds@linux-foundation.org | 1305921029 |  | sanitize <linux/prefetch.h> usage  Commit e66eed651fd1 ("list: remove prefetching from regular list iterators") removed the include of prefetch.h from list.h, which uncovered several cases that had apparently relied on that rather obscure header file dependency.  So this fixes things up a bit, using     grep -L linux/prefetch.h $(git grep -l '[^a-z_]prefetchw*(' -- '*.[ch]')    grep -L 'prefetchw*(' $(git grep -l 'linux/prefetch.h' -- '*.[ch]')  to guide us in finding files that either need <linux/prefetch.h> inclusion, or have it despite not needing it.  There are more of them around (mostly network drivers), but this gets many core ones.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
