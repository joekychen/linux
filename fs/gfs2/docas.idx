f | dir.c | s | 47K | 1741 | Linus Torvalds | torvalds@linux-foundation.org | 1336704875 |  | vfs: make it possible to access the dentry hash/len as one 64-bit entry  This allows comparing hash and len in one operation on 64-bit architectures.  Right now only __d_lookup_rcu() takes advantage of this, since that is the case we care most about.  The use of anonymous struct/unions hides the alternate 64-bit approach from most users, the exception being a few cases where we initialize a 'struct qstr' with a static initializer.  This makes the problematic cases use a new QSTR_INIT() helper function for that (but initializing just the name pointer with a "{ .name = xyzzy }" initializer remains valid, as does just copying another qstr structure).  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | lops.h | s | 3.0K | 96 | Bob Peterson | rpeterso@redhat.com | 1335946476 |  | GFS2: eliminate log elements and simplify  This patch eliminates the gfs2_log_element data structure and rolls its two components into the gfs2_bufdata. This makes the code easier to understand and makes it easier to migrate to a rbtree to keep the list sorted.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | rgrp.h | s | 2.6K | 58 | Steven Whitehouse | swhiteho@redhat.com | 1330449021 |  | GFS2: FITRIM ioctl support  The FITRIM ioctl provides an alternative way to send discard requests to the underlying device. Using the discard mount option results in every freed block generating a discard request to the block device. This can be slow, since many block devices can only process discard requests of larger sizes, and also such operations can be time consuming.  Rather than using the discard mount option, FITRIM allows a sweep of the filesystem on an occasional basis, and also to optionally avoid sending down discard requests for smaller regions.  In GFS2 FITRIM will work at resource group granularity. There is a flag for each resource group which keeps track of which resource groups have been trimmed. This flag is reset whenever a deallocation occurs in the resource group, and set whenever a successful FITRIM of that resource group has taken place. This helps to reduce repeated discard requests for the same block ranges, again improving performance.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | Makefile | g | 308B |  | Steven Whitehouse | swhiteho@redhat.com | 1305029569 |  | GFS2: Rename ops_inode.c to inode.c  This is the final part of the ops_inode.c/inode.c reordering. We are left with a single file called inode.c which now contains all the inode operations, as expected.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | incore.h | s | 19K | 625 | Linus Torvalds | torvalds@linux-foundation.org | 1337740298 |  | 
f | aops.c | s | 29K | 1032 | Bob Peterson | rpeterso@redhat.com | 1335946476 |  | GFS2: eliminate log elements and simplify  This patch eliminates the gfs2_log_element data structure and rolls its two components into the gfs2_bufdata. This makes the code easier to understand and makes it easier to migrate to a rbtree to keep the list sorted.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | trans.h | s | 1.5K | 40 | Bob Peterson | rpeterso@redhat.com | 1321957521 |  | GFS2: decouple quota allocations from block allocations  This patch separates the code pertaining to allocations into two parts: quota-related information and block reservations. This patch also moves all the block reservation structure allocations to function gfs2_inplace_reserve to simplify the code, and moves the frees to function gfs2_inplace_release.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | xattr.h | s | 2.1K | 51 | Christoph Hellwig | hch@lst.de | 1260983809 |  | sanitize xattr handler prototypes  Add a flags argument to struct xattr_handler and pass it to all xattr handler methods.  This allows using the same methods for multiple handlers, e.g. for the ACL methods which perform exactly the same action for the access and default ACLs, just using a different underlying attribute.  With a little more groundwork it'll also allow sharing the methods for the regular user/trusted/secure handlers in extN, ocfs2 and jffs2 like it's already done for xfs in this patch.  Also change the inode argument to the handlers to a dentry to allow using the handlers mechnism for filesystems that require it later, e.g. cifs.  [with GFS2 bits updated by Steven Whitehouse <swhiteho@redhat.com>]  Signed-off-by: Christoph Hellwig <hch@lst.de> Reviewed-by: James Morris <jmorris@namei.org> Acked-by: Joel Becker <joel.becker@oracle.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | util.c | s | 8.1K | 247 | Steven Whitehouse | swhiteho@redhat.com | 1335282274 |  | GFS2: Clean up log write code path  Prior to this patch, we have two ways of sending i/o to the log. One of those is used when we need to allocate both the data to be written itself and also a buffer head to submit it. This is done via sb_getblk and friends. This is used mostly for writing log headers.  The other method is used when writing blocks which have some in-place counterpart. This is the case for all the metadata blocks which are journalled, and when journaled data is in use, for unescaped journalled data blocks.  This patch replaces both of those two methods, and about half a dozen separate i/o submission points with a single i/o submission function. We also go direct to bio rather than using buffer heads, since this allows us to build i/o requests of the maximum size for the block device in question. It also reduces the memory required for flushing the log, which can be very useful in low memory situations.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | ops_fstype.c | s | 34K | 1204 | Linus Torvalds | torvalds@linux-foundation.org | 1337740298 |  | 
f | xattr.c | s | 33K | 1265 | Bob Peterson | rpeterso@redhat.com | 1333617610 |  | GFS2: Make sure rindex is uptodate before starting transactions  This patch removes the call from gfs2_blk2rgrd to function gfs2_rindex_update and replaces it with individual calls. The former way turned out to be too problematic.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | recovery.c | s | 14K | 515 | David Teigland | teigland@redhat.com | 1326273888 |  | GFS2: fail mount if journal recovery fails  If the first mounter fails to recover one of the journals during mount, the mount should fail.  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | glock.c | s | 50K | 1823 | Steven Whitehouse | swhiteho@redhat.com | 1330448982 |  | GFS2: glock statistics gathering  The stats are divided into two sets: those relating to the super block and those relating to an individual glock. The super block stats are done on a per cpu basis in order to try and reduce the overhead of gathering them. They are also further divided by glock type.  In the case of both the super block and glock statistics, the same information is gathered in each case. The super block statistics are used to provide default values for most of the glock statistics, so that newly created glocks should have, as far as possible, a sensible starting point.  The statistics are divided into three pairs of mean and variance, plus two counters. The mean/variance pairs are smoothed exponential estimates and the algorithm used is one which will be very familiar to those used to calculation of round trip times in network code.  The three pairs of mean/variance measure the following things:   1. DLM lock time (non-blocking requests)  2. DLM lock time (blocking requests)  3. Inter-request time (again to the DLM)  A non-blocking request is one which will complete right away, whatever the state of the DLM lock in question. That currently means any requests when (a) the current state of the lock is exclusive (b) the requested state is either null or unlocked or (c) the "try lock" flag is set. A blocking request covers all the other lock requests.  There are two counters. The first is there primarily to show how many lock requests have been made, and thus how much data has gone into the mean/variance calculations. The other counter is counting queueing of holders at the top layer of the glock code. Hopefully that number will be a lot larger than the number of dlm lock requests issued.  So why gather these statistics? There are several reasons we'd like to get a better idea of these timings:  1. To be able to better set the glock "min hold time" 2. To spot performance issues more easily 3. To improve the algorithm for selecting resource groups for allocation (to base it on lock wait time, rather than blindly using a "try lock") Due to the smoothing action of the updates, a step change in some input quantity being sampled will only fully be taken into account after 8 samples (or 4 for the variance) and this needs to be carefully considered when interpreting the results.  Knowing both the time it takes a lock request to complete and the average time between lock requests for a glock means we can compute the total percentage of the time for which the node is able to use a glock vs. time that the rest of the cluster has its share. That will be very useful when setting the lock min hold time.  The other point to remember is that all times are in nanoseconds. Great care has been taken to ensure that we measure exactly the quantities that we want, as accurately as possible. There are always inaccuracies in any measuring system, but I hope this is as accurate as we can reasonably make it.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | sys.c | s | 16K | 556 | David Teigland | teigland@redhat.com | 1335986352 |  | gfs2: fix recovery during unmount  Journal recovery from lock_dlm should not be ignored if there is an unmount in progress.  Ignoring it will causes the recovery to get stuck.  The recovery process will correctly handle an in-progess unmount.  Signed-off-by: David Teigland <teigland@redhat.com>
f | trace_gfs2.h | s | 13K | 415 | Bob Peterson | rpeterso@redhat.com | 1336728694 |  | GFS2: Add rgrp information to block_alloc trace point  This is a second attempt at a patch that adds rgrp information to the block allocation trace point for GFS2. As suggested, the patch was modified to list the rgrp information _after_ the fields that exist today.  Again, the reason for this patch is to allow us to trace and debug problems with the block reservations patch, which is still in the works. We can debug problems with reservations if we can see what block allocations result from the block reservations. It may also be handy in figuring out if there are problems in rgrp free space accounting. In other words, we can use it to track the rgrp and its free space along side the allocations that are taking place.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | sys.h | s | 659B | 18 | David Teigland | teigland@redhat.com | 1326273785 |  | GFS2: dlm based recovery coordination  This new method of managing recovery is an alternative to the previous approach of using the userland gfs_controld.  - use dlm slot numbers to assign journal id's - use dlm recovery callbacks to initiate journal recovery - use a dlm lock to determine the first node to mount fs - use a dlm lock to track journals that need recovery  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | quota.c | s | 37K | 1342 | Bob Peterson | rpeterso@redhat.com | 1337167358 |  | GFS2: Fix quota adjustment return code  This patch changes function gfs2_adjust_quota so that it properly returns a good (zero) return code on the normal path through the code. Without this, mounting GFS2 with -o quota=account periodically gave this error message: GFS2: fsid=cluster:fs: gfs2_quotad: sync error -5  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | meta_io.c | s | 9.9K | 381 | Bob Peterson | rpeterso@redhat.com | 1336727963 |  | GFS2: Eliminate unused "new" parameter to gfs2_meta_indirect_buffer  It turns out that the "new" parameter to function gfs2_meta_indirect_buffer was always being passed in as zero. Therefore, this patch eliminates it and simplifies the function.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | super.c | s | 37K | 1392 | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | dir.h | s | 2.3K | 57 | Bob Peterson | rpeterso@redhat.com | 1320745932 |  | GFS2: Add readahead to sequential directory traversal  This patch adds read-ahead capability to GFS2's directory hash table management.  It greatly improves performance for some directory operations.  For example: In one of my file systems that has 1000 directories, each of which has 1000 files, time to execute a recursive ls (time ls -fR /mnt/gfs2 > /dev/null) was reduced from 2m2.814s on a stock kernel to 0m45.938s.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | inode.c | s | 42K | 1586 | Bob Peterson | rpeterso@redhat.com | 1333617610 |  | GFS2: Make sure rindex is uptodate before starting transactions  This patch removes the call from gfs2_blk2rgrd to function gfs2_rindex_update and replaces it with individual calls. The former way turned out to be too problematic.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | export.c | s | 4.7K | 164 | Al Viro | viro@zeniv.linux.org.uk | 1338348513 |  | ->encode_fh() API change  pass inode + parent's inode or NULL instead of dentry + bool saying whether we want the parent or not.  NOTE: that needs ceph fix folded in.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | quota.h | s | 1.8K | 47 | Ying Han | yinghan@google.com | 1306337966 |  | vmscan: change shrinker API by passing shrink_control struct  Change each shrinker's API by consolidating the existing parameters into shrink_control struct.  This will simplify any further features added w/o touching each file of shrinker.  [akpm@linux-foundation.org: fix build] [akpm@linux-foundation.org: fix warning] [kosaki.motohiro@jp.fujitsu.com: fix up new shrinker API] [akpm@linux-foundation.org: fix xfs warning] [akpm@linux-foundation.org: update gfs2] Signed-off-by: Ying Han <yinghan@google.com> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Cc: Minchan Kim <minchan.kim@gmail.com> Acked-by: Pavel Emelyanov <xemul@openvz.org> Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Mel Gorman <mel@csn.ul.ie> Acked-by: Rik van Riel <riel@redhat.com> Cc: Johannes Weiner <hannes@cmpxchg.org> Cc: Hugh Dickins <hughd@google.com> Cc: Dave Hansen <dave@linux.vnet.ibm.com> Cc: Steven Whitehouse <swhiteho@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | bmap.h | s | 1.8K | 49 | Steven Whitehouse | swhiteho@redhat.com | 1284977896 |  | GFS2: New truncate sequence  This updates GFS2's truncate code to use the new truncate sequence correctly. This is a stepping stone to being able to remove ip->i_disksize in favour of using i_size everywhere now that the two sizes are always identical.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com> Cc: Nick Piggin <npiggin@suse.de> Cc: Christoph Hellwig <hch@lst.de>
f | log.c | s | 21K | 711 | Bob Peterson | rpeterso@redhat.com | 1335946476 |  | GFS2: eliminate log elements and simplify  This patch eliminates the gfs2_log_element data structure and rolls its two components into the gfs2_bufdata. This makes the code easier to understand and makes it easier to migrate to a rbtree to keep the list sorted.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | log.h | s | 1.7K | 53 | Steven Whitehouse | swhiteho@redhat.com | 1335282274 |  | GFS2: Clean up log write code path  Prior to this patch, we have two ways of sending i/o to the log. One of those is used when we need to allocate both the data to be written itself and also a buffer head to submit it. This is done via sb_getblk and friends. This is used mostly for writing log headers.  The other method is used when writing blocks which have some in-place counterpart. This is the case for all the metadata blocks which are journalled, and when journaled data is in use, for unescaped journalled data blocks.  This patch replaces both of those two methods, and about half a dozen separate i/o submission points with a single i/o submission function. We also go direct to bio rather than using buffer heads, since this allows us to build i/o requests of the maximum size for the block device in question. It also reduces the memory required for flushing the log, which can be very useful in low memory situations.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | glock.h | s | 7.1K | 215 | David Teigland | teigland@redhat.com | 1326273785 |  | GFS2: dlm based recovery coordination  This new method of managing recovery is an alternative to the previous approach of using the userland gfs_controld.  - use dlm slot numbers to assign journal id's - use dlm recovery callbacks to initiate journal recovery - use a dlm lock to determine the first node to mount fs - use a dlm lock to track journals that need recovery  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | acl.h | s | 843B | 19 | Christoph Hellwig | hch@lst.de | 1311618623 |  | fs: take the ACL checks to common code  Replace the ->check_acl method with a ->get_acl method that simply reads an ACL from disk after having a cache miss.  This means we can replace the ACL checking boilerplate code with a single implementation in namei.c.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | trans.c | s | 4.7K | 162 | Bob Peterson | rpeterso@redhat.com | 1335946476 |  | GFS2: eliminate log elements and simplify  This patch eliminates the gfs2_log_element data structure and rolls its two components into the gfs2_bufdata. This makes the code easier to understand and makes it easier to migrate to a rbtree to keep the list sorted.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | bmap.c | s | 32K | 1135 | Bob Peterson | rpeterso@redhat.com | 1336727963 |  | GFS2: Eliminate unused "new" parameter to gfs2_meta_indirect_buffer  It turns out that the "new" parameter to function gfs2_meta_indirect_buffer was always being passed in as zero. Therefore, this patch eliminates it and simplifies the function.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | rgrp.c | s | 44K | 1537 | Bob Peterson | rpeterso@redhat.com | 1336728694 |  | GFS2: Add rgrp information to block_alloc trace point  This is a second attempt at a patch that adds rgrp information to the block allocation trace point for GFS2. As suggested, the patch was modified to list the rgrp information _after_ the fields that exist today.  Again, the reason for this patch is to allow us to trace and debug problems with the block reservations patch, which is still in the works. We can debug problems with reservations if we can see what block allocations result from the block reservations. It may also be handy in figuring out if there are problems in rgrp free space accounting. In other words, we can use it to track the rgrp and its free space along side the allocations that are taking place.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | dentry.c | s | 2.9K | 120 | Al Viro | viro@zeniv.linux.org.uk | 1299746688 |  | gfs2: fix d_revalidate oopsen on NFS exports  can't blindly check nd->flags in ->d_revalidate()  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | acl.c | s | 6.3K | 259 | Steven Whitehouse | swhiteho@redhat.com | 1336138386 |  | GFS2: Fix sgid propagation when using ACLs  This cleans up the mode setting code when creating inodes. The SGID bit was being reset by setattr_copy() when the user creating a subdirectory was not in the owning group. When ACLs are in use this SGID bit should have been propagated if the ACL allows creation of a subdirectory. GFS2's behaviour now matches that of the other ACL supporting filesystems in this regard.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | meta_io.h | s | 2.5K | 64 | Bob Peterson | rpeterso@redhat.com | 1336727963 |  | GFS2: Eliminate unused "new" parameter to gfs2_meta_indirect_buffer  It turns out that the "new" parameter to function gfs2_meta_indirect_buffer was always being passed in as zero. Therefore, this patch eliminates it and simplifies the function.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | Kconfig | g | 1.3K |  | Benjamin Poirier | bpoirier@suse.de | 1332749882 |  | GFS2: use depends instead of select in kconfig  Avoids having to duplicate the dependencies of what is 'select'ed (and on down...)  Those dependencies are currently incomplete, leading to broken builds with GFS2_FS_LOCKING_DLM=y and IP_SCTP=n.  Signed-off-by: Benjamin Poirier <bpoirier@suse.de> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | recovery.h | s | 1.2K | 27 | Tejun Heo | tj@kernel.org | 1279883665 |  | gfs2: use workqueue instead of slow-work  Workqueue can now handle high concurrency.  Convert gfs to use workqueue instead of slow-work.  * Steven pointed out that recovery path might be run from allocation   path and thus requires forward progress guarantee without memory   allocation.  Create and use gfs_recovery_wq with rescuer.  Please   note that forward progress wasn't guaranteed with slow-work.  * Updated to use non-reentrant workqueue.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: Steven Whitehouse <swhiteho@redhat.com>
f | util.h | s | 5.1K | 129 | Steven Whitehouse | swhiteho@redhat.com | 1335282274 |  | GFS2: Clean up log write code path  Prior to this patch, we have two ways of sending i/o to the log. One of those is used when we need to allocate both the data to be written itself and also a buffer head to submit it. This is done via sb_getblk and friends. This is used mostly for writing log headers.  The other method is used when writing blocks which have some in-place counterpart. This is the case for all the metadata blocks which are journalled, and when journaled data is in use, for unescaped journalled data blocks.  This patch replaces both of those two methods, and about half a dozen separate i/o submission points with a single i/o submission function. We also go direct to bio rather than using buffer heads, since this allows us to build i/o requests of the maximum size for the block device in question. It also reduces the memory required for flushing the log, which can be very useful in low memory situations.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | file.c | s | 25K | 923 | Bob Peterson | rpeterso@redhat.com | 1335282267 |  | GFS2: Rename function gfs2_close to gfs2_release  This patch renames function gfs2_close to gfs2_release.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | glops.c | s | 14K | 506 | Bob Peterson | rpeterso@redhat.com | 1336490335 |  | GFS2: Remove redundant metadata block type check  This patch removes a redundant metadata block check. See description below.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | lock_dlm.c | s | 38K | 1146 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | main.c | s | 5.5K | 196 | Steven Whitehouse | swhiteho@redhat.com | 1335282274 |  | GFS2: Clean up log write code path  Prior to this patch, we have two ways of sending i/o to the log. One of those is used when we need to allocate both the data to be written itself and also a buffer head to submit it. This is done via sb_getblk and friends. This is used mostly for writing log headers.  The other method is used when writing blocks which have some in-place counterpart. This is the case for all the metadata blocks which are journalled, and when journaled data is in use, for unescaped journalled data blocks.  This patch replaces both of those two methods, and about half a dozen separate i/o submission points with a single i/o submission function. We also go direct to bio rather than using buffer heads, since this allows us to build i/o requests of the maximum size for the block device in question. It also reduces the memory required for flushing the log, which can be very useful in low memory situations.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | lops.c | s | 23K | 789 | Bob Peterson | rpeterso@redhat.com | 1335946476 |  | GFS2: eliminate log elements and simplify  This patch eliminates the gfs2_log_element data structure and rolls its two components into the gfs2_bufdata. This makes the code easier to understand and makes it easier to migrate to a rbtree to keep the list sorted.  Signed-off-by: Bob Peterson <rpeterso@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | inode.h | s | 4.2K | 116 | Andrew Price | anprice@redhat.com | 1335282277 |  | GFS2: Remove unused argument from gfs2_internal_read  gfs2_internal_read accepts an unused ra_state argument, left over from when we did readahead on the rindex. Since there are currently no plans to add back this readahead, this patch removes the ra_state parameter and updates the functions which call gfs2_internal_read accordingly.  Signed-off-by: Andrew Price <anprice@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
f | super.h | s | 2.0K | 47 | Stephen Hemminger | shemminger@vyatta.com | 1274481080 |  | gfs: constify xattr_handler  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | glops.h | s | 1.1K | 23 | Steven Whitehouse | swhiteho@redhat.com | 1319197181 |  | GFS2: Fix AIL flush issue during fsync  Unfortunately, it is not enough to just ignore locked buffers during the AIL flush from fsync. We need to be able to ignore all buffers which are locked, dirty or pinned at this stage as they might have been added subsequent to the log flush earlier in the fsync function.  In addition, this means that we no longer need to rely on i_mutex to keep out writes during fsync, so we can, as a side-effect, remove that protection too.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com> Tested-By: Abhijith Das <adas@redhat.com>
f | gfs2.h | s | 524B | 20 | Steven Whitehouse | swhiteho@redhat.com | 1214555984 |  | [GFS2] Remove remote lock dropping code  There are several reasons why this is undesirable:   1. It never happens during normal operation anyway  2. If it does happen it causes performance to be very, very poor  3. It isn't likely to solve the original problem (memory shortage     on remote DLM node) it was supposed to solve  4. It uses a bunch of arbitrary constants which are unlikely to be     correct for any particular situation and for which the tuning seems     to be a black art.  5. In an N node cluster, only 1/N of the dropped locked will actually     contribute to solving the problem on average.  So all in all we are better off without it. This also makes merging the lock_dlm module into GFS2 a bit easier.  Signed-off-by: Steven Whitehouse <swhiteho@redhat.com>
