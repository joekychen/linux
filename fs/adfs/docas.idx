f | super.c | s | 12K | 460 | Al Viro | viro@zeniv.linux.org.uk | 1332293375 |  | switch open-coded instances of d_make_root() to new helper  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | dir_fplus.c | s | 6.2K | 217 | Stuart Swales | stuart.swales.croftnuisk@gmail.com | 1300841057 |  | adfs: add hexadecimal filetype suffix option  ADFS (FileCore) storage complies with the RISC OS filetype specification (12 bits of file type information is stored in the file load address, rather than using a file extension).  The existing driver largely ignores this information and does not present it to the end user.  It is desirable that stored filetypes be made visible to the end user to facilitate a precise copy of data and metadata from a hard disc (or image thereof) into a RISC OS emulator (such as RPCEmu) or to a network share which can be accessed by real Acorn systems.  This patch implements a per-mount filetype suffix option (use -o ftsuffix=1) to present any filetype as a ,xyz hexadecimal suffix on each file.  This type suffix is compatible with that used by RISC OS systems that access network servers using NFS client software and by RPCemu's host filing system.  Signed-off-by: Stuart Swales <stuart.swales.croftnuisk@gmail.com> Cc: Russell King <rmk@arm.linux.org.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | dir.c | s | 5.6K | 244 | Arnd Bergmann | arnd@arndb.de | 1299020558 |  | adfs: remove the big kernel lock  According to Russell King, adfs was written to not require the big kernel lock, and all inode updates are done under adfs_dir_lock.  All other metadata in adfs is read-only and does not require locking. The use of the BKL is the result of various pushdowns from the VFS operations.  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Acked-by: Russell King <rmk@arm.linux.org.uk> Cc: Stuart Swales <stuart.swales.croftnuisk@gmail.com>
f | Makefile | g | 157B |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | inode.c | s | 9.3K | 310 | Miklos Szeredi | mszeredi@suse.cz | 1320234823 |  | filesystems: add set_nlink()  Replace remaining direct i_nlink updates with a new set_nlink() updater function.  Signed-off-by: Miklos Szeredi <mszeredi@suse.cz> Tested-by: Toshiyuki Okajima <toshi.okajima@jp.fujitsu.com> Signed-off-by: Christoph Hellwig <hch@lst.de>
f | Kconfig | g | 1.1K |  | Arnd Bergmann | arnd@arndb.de | 1299020558 |  | adfs: remove the big kernel lock  According to Russell King, adfs was written to not require the big kernel lock, and all inode updates are done under adfs_dir_lock.  All other metadata in adfs is read-only and does not require locking. The use of the BKL is the result of various pushdowns from the VFS operations.  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Acked-by: Russell King <rmk@arm.linux.org.uk> Cc: Stuart Swales <stuart.swales.croftnuisk@gmail.com>
f | dir_f.h | s | 1.2K | 60 | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | dir_fplus.h | s | 1014B | 40 | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | adfs.h | s | 5.6K | 169 | Andrew Morton | akpm@linux-foundation.org | 1300934769 |  | fs/adfs/adfs.h: fix unsigned comparison  fs/adfs/adfs.h: In function 'append_filetype_suffix': fs/adfs/adfs.h:115: warning: comparison is always false due to limited range of data type  Reported-by: Geert Uytterhoeven <geert@linux-m68k.org> Cc: Stuart Swales <stuart.swales.croftnuisk@gmail.com> Cc: Russell King <rmk+kernel@arm.linux.org.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | file.c | s | 856B | 35 | Christoph Hellwig | hch@lst.de | 1275012366 |  | rename the generic fsync implementations  We don't name our generic fsync implementations very well currently. The no-op implementation for in-memory filesystems currently is called simple_sync_file which doesn't make too much sense to start with, the the generic one for simple filesystems is called simple_fsync which can lead to some confusion.  This patch renames the generic file fsync method to generic_file_fsync to match the other generic_file_* routines it is supposed to be used with, and the no-op implementation to noop_fsync to make it obvious what to expect.  In addition add some documentation for both methods.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | map.c | s | 6.9K | 250 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | dir_f.c | s | 10K | 398 | Stuart Swales | stuart.swales.croftnuisk@gmail.com | 1300841057 |  | adfs: add hexadecimal filetype suffix option  ADFS (FileCore) storage complies with the RISC OS filetype specification (12 bits of file type information is stored in the file load address, rather than using a file extension).  The existing driver largely ignores this information and does not present it to the end user.  It is desirable that stored filetypes be made visible to the end user to facilitate a precise copy of data and metadata from a hard disc (or image thereof) into a RISC OS emulator (such as RPCEmu) or to a network share which can be accessed by real Acorn systems.  This patch implements a per-mount filetype suffix option (use -o ftsuffix=1) to present any filetype as a ,xyz hexadecimal suffix on each file.  This type suffix is compatible with that used by RISC OS systems that access network servers using NFS client software and by RPCemu's host filing system.  Signed-off-by: Stuart Swales <stuart.swales.croftnuisk@gmail.com> Cc: Russell King <rmk@arm.linux.org.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
