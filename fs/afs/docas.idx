f | mntpt.c | s | 6.7K | 238 | Cong Wang | amwang@redhat.com | 1332251302 |  | afs: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | dir.c | s | 27K | 999 | Al Viro | viro@zeniv.linux.org.uk | 1325649293 |  | switch ->create() to umode_t  vfs_create() ignores everything outside of 16bit subset of its mode argument; switching it to umode_t is obviously equivalent and it's the only caller of the method  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | Makefile | g | 416B |  | David Howells | dhowells@redhat.com | 1238773361 |  | FS-Cache: Make kAFS use FS-Cache  The attached patch makes the kAFS filesystem in fs/afs/ use FS-Cache, and through it any attached caches.  The kAFS filesystem will use caching automatically if it's available.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Steve Dickson <steved@redhat.com> Acked-by: Trond Myklebust <Trond.Myklebust@netapp.com> Acked-by: Al Viro <viro@zeniv.linux.org.uk> Tested-by: Daire Byrne <Daire.Byrne@framestore.com>
f | afs_fs.h | s | 2.3K | 51 | David Howells | dhowells@redhat.com | 1184601943 |  | AFS: implement file locking  Implement file locking for AFS.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | internal.h | s | 31K | 791 | Anton Blanchard | anton@samba.org | 1331942501 |  | afs: Read of file returns EBADMSG  A read of a large file on an afs mount failed:  # cat junk.file > /dev/null cat: junk.file: Bad message  Looking at the trace, call->offset wrapped since it is only an unsigned short. In afs_extract_data:          _enter("{%u},{%zu},%d,,%zu", call->offset, len, last, count); ...          if (call->offset < count) {                 if (last) {                         _leave(" = -EBADMSG [%d < %zu]", call->offset, count);                         return -EBADMSG;                 }  Which matches the trace:  [cat   ] ==> afs_extract_data({65132},{524},1,,65536) [cat   ] <== afs_extract_data() = -EBADMSG [0 < 65536]  call->offset went from 65132 to 0. Fix this by making call->offset an unsigned int.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: David Howells <dhowells@redhat.com> Cc: <stable@kernel.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | proc.c | s | 17K | 618 | wanglei | wang840925@gmail.com | 1281546689 |  | AFS: Implement an autocell mount capability [ver #2]  Implement the ability for the root directory of a mounted AFS filesystem to accept lookups of arbitrary directory names, to interpet the names as the names of cells, to look the cell names up in the DNS for AFSDB records and to mount the root.cell volume of the nominated cell on the pseudo-directory created by lookup.  This facility is requested by passing:  	-o autocell  to the mountpoint for which this is desired, usually the /afs mount.  To use this facility, a DNS upcall program is required for AFSDB records.  This can be obtained from:  	http://people.redhat.com/~dhowells/afs/dns.afsdb.c  It should be compiled with -lresolv and -lkeyutils and installed as, say:  	/usr/sbin/dns.afsdb  Then the following line needs to be added to /sbin/request-key.conf:  	create	dns_resolver afsdb:*	*	/usr/sbin/dns.afsdb %k  This can be tested by mounting AFS, say:  	insmod dns_resolver.ko 	insmod af-rxrpc.ko 	insmod kafs.ko rootcell=grand.central.org 	mount -t afs "#grand.central.org:root.cell." /afs -o autocell  and doing:  	ls /afs/grand.central.org/  which should show:  	archive/  cvs/  doc/  local/  project/  service/  software/  user/  www/  if it works.  Signed-off-by: Wang Lei <wang840925@gmail.com> Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Steve French <sfrench@us.ibm.com>
f | callback.c | s | 11K | 401 | David Woodhouse | dwmw2@infradead.org | 1212776950 |  | Fix various old email addresses for dwmw2  Although if people have questions about ARCnet, perhaps it's _better_ for them to be mailing dwmw2@cam.ac.uk about it...  Signed-off-by: David Woodhouse <dwmw2@infradead.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | afs_vl.h | s | 3.6K | 74 | David Howells | dhowells@redhat.com | 1311209283 |  | AFS: Fix silly characters in a comment  Fix silly characters in a comment in AFS code (some weird characters replaced the word 'flag' some point way back).  Reported-by: viro@ZenIV.linux.org.uk Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | server.c | s | 7.9K | 273 | Tejun Heo | tj@kernel.org | 1295025911 |  | afs: add afs_wq and use it instead of the system workqueue  flush_scheduled_work() is going away.  afs needs to make sure all the works it has queued have finished before being unloaded and there can be arbitrary number of pending works.  Add afs_wq and use it as the flush domain instead of the system workqueue.  Also, convert cancel_delayed_work() + flush_scheduled_work() to cancel_delayed_work_sync() in afs_mntpt_kill_timer().  Signed-off-by: Tejun Heo <tj@kernel.org> Signed-off-by: David Howells <dhowells@redhat.com> Cc: linux-afs@lists.infradead.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | misc.c | s | 2.3K | 71 | David Howells | dhowells@redhat.com | 1245212414 |  | AFS: Correctly translate auth error aborts and don't failover in such cases  Authentication error abort codes should be translated to appropriate Linux error codes, rather than all being translated to EREMOTEIO - which indicates that the server had internal problems.  Additionally, a server shouldn't be marked unavailable and the next server tried if an authentication error occurs.  This will quickly make all the servers unavailable to the client.  Instead the error should be returned straight to the user.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | vlclient.c | s | 5.4K | 187 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | vnode.c | s | 24K | 837 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | cmservice.c | s | 13K | 494 | Tejun Heo | tj@kernel.org | 1295025911 |  | afs: add afs_wq and use it instead of the system workqueue  flush_scheduled_work() is going away.  afs needs to make sure all the works it has queued have finished before being unloaded and there can be arbitrary number of pending works.  Add afs_wq and use it as the flush domain instead of the system workqueue.  Also, convert cancel_delayed_work() + flush_scheduled_work() to cancel_delayed_work_sync() in afs_mntpt_kill_timer().  Signed-off-by: Tejun Heo <tj@kernel.org> Signed-off-by: David Howells <dhowells@redhat.com> Cc: linux-afs@lists.infradead.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | cell.c | s | 10K | 372 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | vlocation.c | s | 17K | 624 | Tejun Heo | tj@kernel.org | 1295025911 |  | afs: add afs_wq and use it instead of the system workqueue  flush_scheduled_work() is going away.  afs needs to make sure all the works it has queued have finished before being unloaded and there can be arbitrary number of pending works.  Add afs_wq and use it as the flush domain instead of the system workqueue.  Also, convert cancel_delayed_work() + flush_scheduled_work() to cancel_delayed_work_sync() in afs_mntpt_kill_timer().  Signed-off-by: Tejun Heo <tj@kernel.org> Signed-off-by: David Howells <dhowells@redhat.com> Cc: linux-afs@lists.infradead.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | afs.h | s | 6.0K | 154 | David Howells | dhowells@redhat.com | 1184601943 |  | AFS: implement file locking  Implement file locking for AFS.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | super.c | s | 12K | 462 | Al Viro | viro@zeniv.linux.org.uk | 1332293375 |  | switch open-coded instances of d_make_root() to new helper  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | inode.c | s | 12K | 423 | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | fsclient.c | s | 44K | 1610 | Cong Wang | amwang@redhat.com | 1332251302 |  | afs: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | rxrpc.c | s | 20K | 730 | Anton Blanchard | anton@samba.org | 1331942501 |  | afs: Remote abort can cause BUG in rxrpc code  When writing files to afs I sometimes hit a BUG:  kernel BUG at fs/afs/rxrpc.c:179!  With a backtrace of:  	afs_free_call 	afs_make_call 	afs_fs_store_data 	afs_vnode_store_data 	afs_write_back_from_locked_page 	afs_writepages_region 	afs_writepages  The cause is:  	ASSERT(skb_queue_empty(&call->rx_queue));  Looking at a tcpdump of the session the abort happens because we are exceeding our disk quota:  	rx abort fs reply store-data error diskquota exceeded (32)  So the abort error is valid. We hit the BUG because we haven't freed all the resources for the call.  By freeing any skbs in call->rx_queue before calling afs_free_call we avoid hitting leaking memory and avoid hitting the BUG.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: David Howells <dhowells@redhat.com> Cc: <stable@kernel.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | cache.c | s | 10K | 328 | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | flock.c | s | 15K | 514 | Arnd Bergmann | arnd@arndb.de | 1286269324 |  | fs/locks.c: prepare for BKL removal  This prepares the removal of the big kernel lock from the file locking code. We still use the BKL as long as fs/lockd uses it and ceph might sleep, but we can flip the definition to a private spinlock as soon as that's done. All users outside of fs/lockd get converted to use lock_flocks() instead of lock_kernel() where appropriate.  Based on an earlier patch to use a spinlock from Matthew Wilcox, who has attempted this a few times before, the earliest patch from over 10 years ago turned it into a semaphore, which ended up being slower than the BKL and was subsequently reverted.  Someone should do some serious performance testing when this becomes a spinlock, since this has caused problems before. Using a spinlock should be at least as good as the BKL in theory, but who knows...  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Acked-by: Matthew Wilcox <willy@linux.intel.com> Cc: Christoph Hellwig <hch@lst.de> Cc: Trond Myklebust <trond.myklebust@fys.uio.no> Cc: "J. Bruce Fields" <bfields@fieldses.org> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Miklos Szeredi <mszeredi@suse.cz> Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Ingo Molnar <mingo@redhat.com> Cc: John Kacur <jkacur@redhat.com> Cc: Sage Weil <sage@newdream.net> Cc: linux-kernel@vger.kernel.org Cc: linux-fsdevel@vger.kernel.org
f | Kconfig | g | 898B |  | Wang Lei | wang840925@gmail.com | 1281028671 |  | DNS: Make AFS go to the DNS for AFSDB records for unknown cells  Add DNS query support for AFS so that it can get the IP addresses of Volume Location servers from the DNS using an AFSDB record.  This requires userspace support.  /etc/request-key.conf must be configured to invoke a helper for dns_resolver type keys with a subtype of "afsdb:" in the description.  Signed-off-by: Wang Lei <wang840925@gmail.com> Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Steve French <sfrench@us.ibm.com>
f | afs_cm.h | s | 1.2K | 28 | David Howells | dhowells@redhat.com | 1209481586 |  | afs: support the CB.ProbeUuid RPC op  Add support for the CB.ProbeUuid cache manager RPC op.  This allows a modern OpenAFS server to quickly ask if the client has been rebooted.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | security.c | s | 8.9K | 313 | Al Viro | viro@zeniv.linux.org.uk | 1311140604 |  | ->permission() sanitizing: don't pass flags to ->permission()  not used by the instances anymore.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | write.c | s | 18K | 658 | Josef Bacik | josef@redhat.com | 1311209279 |  | fs: push i_mutex and filemap_write_and_wait down into ->fsync() handlers  Btrfs needs to be able to control how filemap_write_and_wait_range() is called in fsync to make it less of a painful operation, so push down taking i_mutex and the calling of filemap_write_and_wait() down into the ->fsync() handlers.  Some file systems can drop taking the i_mutex altogether it seems, like ext3 and ocfs2.  For correctness sake I just pushed everything down in all cases to make sure that we keep the current behavior the same for everybody, and then each individual fs maintainer can make up their mind about what to do from there. Thanks,  Acked-by: Jan Kara <jack@suse.cz> Signed-off-by: Josef Bacik <josef@redhat.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | file.c | s | 8.6K | 323 | Dan Carpenter | dan.carpenter@oracle.com | 1332267278 |  | AFS: checking wrong bit in afs_readpages()  We should be testing "if (vnode->flags & (1 << 4))" instead of "if (vnode->flags & 4) {".  The current test checks if the data was modified instead of deleted.  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | netdevices.c | s | 1.5K | 61 | Stoyan Gaydarov | stoyboyker@gmail.com | 1239298879 |  | afs: BUG to BUG_ON changes  Signed-off-by: Stoyan Gaydarov <stoyboyker@gmail.com> Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | main.c | s | 4.4K | 155 | Tejun Heo | tj@kernel.org | 1295025911 |  | afs: add afs_wq and use it instead of the system workqueue  flush_scheduled_work() is going away.  afs needs to make sure all the works it has queued have finished before being unloaded and there can be arbitrary number of pending works.  Add afs_wq and use it as the flush domain instead of the system workqueue.  Also, convert cancel_delayed_work() + flush_scheduled_work() to cancel_delayed_work_sync() in afs_mntpt_kill_timer().  Signed-off-by: Tejun Heo <tj@kernel.org> Signed-off-by: David Howells <dhowells@redhat.com> Cc: linux-afs@lists.infradead.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | volume.c | s | 9.9K | 339 | Jens Axboe | jens.axboe@oracle.com | 1271930298 |  | afs: add bdi backing to mount session.  This ensures that dirty data gets flushed properly.  Signed-off-by: Jens Axboe <jens.axboe@oracle.com>
