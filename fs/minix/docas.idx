f | minix.h | s | 5.2K | 140 | Al Viro | viro@zeniv.linux.org.uk | 1332293372 |  | vfs: check i_nlink limits in vfs_{mkdir,rename_dir,link}  New field of struct super_block - ->s_max_links.  Maximal allowed value of ->i_nlink or 0; in the latter case all checks still need to be done in ->link/->mkdir/->rename instances.  Note that this limit applies both to directoris and to non-directories.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | dir.c | s | 11K | 425 | Cong Wang | amwang@redhat.com | 1332251304 |  | minix: remove the second argument of k[un]map_atomic()  Signed-off-by: Cong Wang <amwang@redhat.com>
f | itree_common.c | s | 7.7K | 318 | Andries Brouwer | aeb@cwi.nl | 1171302511 |  | [PATCH] Minix V3 support  This morning I needed to read a Minix V3 filesystem, but unfortunately my 2.6.19 did not support that, and neither did the downloaded 2.6.20rc4.  Fortunately, google told me that Daniel Aragones had already done the work, patch found at http://www.terra.es/personal2/danarag/  Unfortunaly, looking at the patch was painful to my eyes, so I polished it a bit before applying.  The resulting kernel boots, and reads the filesystem it needed to read.  Signed-off-by: Daniel Aragones <danarag@gmail.com> Signed-off-by: Andries Brouwer <aeb@cwi.nl> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Makefile | g | 166B |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | inode.c | s | 17K | 603 | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | bitmap.c | s | 6.6K | 242 | Al Viro | viro@zeniv.linux.org.uk | 1325649299 |  | minix: propagate umode_t  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | itree_v1.c | s | 1.4K | 56 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | itree_v2.c | s | 1.9K | 63 | Erik van der Kouwe | vdkouwe@cs.vu.nl | 1275012382 |  | fs/minix: bugfix, number of indirect block ptrs per block depends on block size  The MINIX filesystem driver used a constant number of indirect block pointers in an indirect block. This worked only for filesystems with 1kb block, while the MINIX default block size is now 4kb. As a consequence, large files were read incorrectly on such filesystems and writing a large file would cause the filesystem to become corrupted. This patch computes the number of indirect block pointers based on the block size, making the driver work for each block size.  I would like to thank Feiran Zheng ('Fam') for pointing out the cause of the corruption.  Signed-off-by: Erik van der Kouwe <vdkouwe@cs.vu.nl> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | namei.c | s | 5.1K | 214 | Al Viro | viro@zeniv.linux.org.uk | 1332293372 |  | vfs: check i_nlink limits in vfs_{mkdir,rename_dir,link}  New field of struct super_block - ->s_max_links.  Maximal allowed value of ->i_nlink or 0; in the latter case all checks still need to be done in ->link/->mkdir/->rename instances.  Note that this limit applies both to directoris and to non-directories.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | file.c | s | 1.1K | 44 | Christoph Hellwig | hch@lst.de | 1281386857 |  | remove inode_setattr  Replace inode_setattr with opencoded variants of it in all callers.  This moves the remaining call to vmtruncate into the filesystem methods where it can be replaced with the proper truncate sequence.  In a few cases it was obvious that we would never end up calling vmtruncate so it was left out in the opencoded variant:   spufs: explicitly checks for ATTR_SIZE earlier  btrfs,hugetlbfs,logfs,dlmfs: explicitly clears ATTR_SIZE earlier  ufs: contains an opencoded simple_seattr + truncate that sets the filesize just above  In addition to that ncpfs called inode_setattr with handcrafted iattrs, which allowed to trim down the opencoded variant.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | Kconfig | g | 1.0K |  | Akinobu Mita | akinobu.mita@gmail.com | 1300934782 |  | bitops: remove minix bitops from asm/bitops.h  minix bit operations are only used by minix filesystem and useless by other modules.  Because byte order of inode and block bitmaps is different on each architecture like below:  m68k: 	big-endian 16bit indexed bitmaps  h8300, microblaze, s390, sparc, m68knommu: 	big-endian 32 or 64bit indexed bitmaps  m32r, mips, sh, xtensa: 	big-endian 32 or 64bit indexed bitmaps for big-endian mode 	little-endian bitmaps for little-endian mode  Others: 	little-endian bitmaps  In order to move minix bit operations from asm/bitops.h to architecture independent code in minix filesystem, this provides two config options.  CONFIG_MINIX_FS_BIG_ENDIAN_16BIT_INDEXED is only selected by m68k. CONFIG_MINIX_FS_NATIVE_ENDIAN is selected by the architectures which use native byte order bitmaps (h8300, microblaze, s390, sparc, m68knommu, m32r, mips, sh, xtensa).  The architectures which always use little-endian bitmaps do not select these options.  Finally, we can remove minix bit operations from asm/bitops.h for all architectures.  Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Acked-by: Greg Ungerer <gerg@uclinux.org> Cc: Geert Uytterhoeven <geert@linux-m68k.org> Cc: Roman Zippel <zippel@linux-m68k.org> Cc: Andreas Schwab <schwab@linux-m68k.org> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: Heiko Carstens <heiko.carstens@de.ibm.com> Cc: Yoshinori Sato <ysato@users.sourceforge.jp> Cc: Michal Simek <monstr@monstr.eu> Cc: "David S. Miller" <davem@davemloft.net> Cc: Hirokazu Takata <takata@linux-m32r.org> Acked-by: Ralf Baechle <ralf@linux-mips.org> Acked-by: Paul Mundt <lethal@linux-sh.org> Cc: Chris Zankel <chris@zankel.net> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
