f | fatent.c | s | 16K | 603 | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1338511768 |  | fat: switch to fsinfo_inode  Currently FAT file-system maps the VFS "superblock" abstraction to the FSINFO block.  The FSINFO block contains non-essential data about the amount of free clusters and the next free cluster.  FAT file-system can always find out this information by scanning the FAT table, but having it in the FSINFO block may speed things up sometimes.  So FAT file-system relies on the VFS superblock write-out services to make sure the FSINFO block is written out to the media from time to time.  The whole "superblock write-out" VFS infrastructure is served by the 'sync_supers()' kernel thread, which wakes up every 5 (by default) seconds and writes out all dirty superblock using the '->write_super()' call-back.  But the problem with this thread is that it wastes power by waking up the system every 5 seconds no matter what.  So we want to kill it completely and thus, we need to make file-systems to stop using the '->write_super' VFS service, and then remove it together with the kernel thread.  This patch switches the FAT FSINFO block management from '->write_super()'/'->s_dirt' to 'fsinfo_inode'/'->write_inode'.  Now, instead of setting the 's_dirt' flag, we just mark the special 'fsinfo_inode' inode as dirty and let VFS invoke the '->write_inode' call-back when needed, where we write-out the FSINFO block.  This patch also makes sure we do not mark the 'fsinfo_inode' inode as dirty if we are not FAT32 (FAT16 and FAT12 do not have the FSINFO block) or if we are in R/O mode.  As a bonus, we can also remove the '->sync_fs()' and '->write_super()' FAT call-back function because they become unneeded.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Cc: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp> Cc: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | misc.c | s | 7.5K | 245 | Alexey Fisher | bug-track@fisher-privat.net | 1302610362 |  | fat: Replace all printk with fat_msg()  Replace all printk with fat_msg()  Signed-off-by: Alexey Fisher <bug-track@fisher-privat.net> Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
f | dir.c | s | 33K | 1224 | Namjae Jeon | linkinjeon@gmail.com | 1338511768 |  | fat: use fat_msg_ratelimit() in fat__get_entry()  If an application tries to lookup (opendir/readdir/stat) 5000 files on a fatfs USB device and the device is unplugged, many message occur, shown below.  This makes the application slow.  So use the new fat_msg_ratelimit() decrease the messaging rate.    #> ./file_lookup_testcase ./files_directory/   usb 2-1.4: USB disconnect, device number 4   FAT-fs (sda1): FAT read failed (blocknr 2631)   FAT-fs (sda1): Directory bread(block 396816) failed   FAT-fs (sda1): Directory bread(block 396817) failed   FAT-fs (sda1): Directory bread(block 396818) failed   FAT-fs (sda1): Directory bread(block 396819) failed   FAT-fs (sda1): Directory bread(block 396820) failed   FAT-fs (sda1): Directory bread(block 396821) failed   FAT-fs (sda1): Directory bread(block 396822) failed   FAT-fs (sda1): Directory bread(block 396823) failed   FAT-fs (sda1): Directory bread(block 406824) failed   FAT-fs (sda1): Directory bread(block 406825) failed   FAT-fs (sda1): Directory bread(block 406826) failed   FAT-fs (sda1): Directory bread(block 406827) failed   FAT-fs (sda1): Directory bread(block 406828) failed   FAT-fs (sda1): Directory bread(block 406829) failed   FAT-fs (sda1): Directory bread(block 406830) failed   FAT-fs (sda1): Directory bread(block 406831) failed   FAT-fs (sda1): Directory bread(block 417696) failed   FAT-fs (sda1): Directory bread(block 417697) failed   FAT-fs (sda1): Directory bread(block 417698) failed   FAT-fs (sda1): Directory bread(block 417699) failed   FAT-fs (sda1): Directory bread(block 417700) failed   FAT-fs (sda1): Directory bread(block 417701) failed   FAT-fs (sda1): Directory bread(block 417702) failed   FAT-fs (sda1): Directory bread(block 417703) failed   FAT-fs (sda1): FAT read failed (blocknr 2631)   FAT-fs (sda1): Directory bread(block 396816) failed   FAT-fs (sda1): Directory bread(block 396817) failed   FAT-fs (sda1): Directory bread(block 396818) failed   FAT-fs (sda1): Directory bread(block 396819) failed   FAT-fs (sda1): Directory bread(block 396820) failed   FAT-fs (sda1): Directory bread(block 396821) failed  Signed-off-by: Namjae Jeon <linkinjeon@gmail.com> Signed-off-by: Amit Sahrawat <amit.sahrawat83@gmail.com> Acked-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Makefile | g | 253B |  | OGAWA Hirofumi | hirofumi@mail.parknet.co.jp | 1226014880 |  | fat: move fs/vfat/* and fs/msdos/* to fs/fat  This just moves those files, but change link order from MSDOS, VFAT to VFAT, MSDOS.  Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | fat.h | s | 11K | 317 | Namjae Jeon | linkinjeon@gmail.com | 1338511768 |  | fat: add fat_msg_ratelimit()  Add a fat_msg_ratelimit() to limit the message generation rate.  Signed-off-by: Namjae Jeon <linkinjeon@gmail.com> Signed-off-by: Amit Sahrawat <amit.sahrawat83@gmail.com> Acked-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | inode.c | s | 41K | 1421 | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
f | namei_msdos.c | s | 16K | 622 | Al Viro | viro@zeniv.linux.org.uk | 1325649293 |  | switch ->create() to umode_t  vfs_create() ignores everything outside of 16bit subset of its mode argument; switching it to umode_t is obviously equivalent and it's the only caller of the method  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | cache.c | s | 8.5K | 306 | OGAWA Hirofumi | hirofumi@mail.parknet.co.jp | 1302610336 |  | fat: Fix possible null deref in fat_cache_add()  Reported-by: <dame_eugene@mail.ru> Signed-off-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp>
f | namei_vfat.c | s | 25K | 972 | Namjae Jeon | linkinjeon@gmail.com | 1332547120 |  | fat: fix bug in enforcing Long File Name length  Since '*outlen' is initialized to zero, it is currently possible to create a filename of length (FAT_LFN_LEN + 1) when utf8 is not enabled. To enforce the FAT_LFN_LEN limit, we must perform one less iteration.  Signed-off-by: Namjae Jeon <linkinjeon@gmail.com> Signed-off-by: Ravishankar N <cyberax82@gmail.com> Acked-by: OGAWA Hirofumi <hirofumi@mail.parknet.co.jp> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | file.c | s | 10K | 384 | Al Viro | viro@zeniv.linux.org.uk | 1325649309 |  | fat: propagate umode_t  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | Kconfig | g | 4.1K |  | Alan Cox | alan@lxorguk.ukuu.org.uk | 1239985931 |  | vfat: Note the NLS requirement  Close bug #4754. Stop people getting into a situation where they can't get their FAT filesystems to mount as they expect.  Signed-off-by: Alan Cox <alan@lxorguk.ukuu.org.uk> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
