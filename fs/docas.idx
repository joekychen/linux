d | ufs |  | 17 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
d | jffs2 |  | 45 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338594942 |  | 
d | ramfs |  | 5 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293377 |  | tidy up after d_make_root() conversion  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | mount.h | s | 2.0K | 67 | Miklos Szeredi | mszeredi@suse.cz | 1325910012 |  | vfs: keep list of mounts for each superblock  Keep track of vfsmounts belonging to a superblock.  List is protected by vfsmount_lock.  Signed-off-by: Miklos Szeredi <mszeredi@suse.cz> Tested-by: Toshiyuki Okajima <toshi.okajima@jp.fujitsu.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | ecryptfs |  | 16 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338348520 |  | get rid of pointless allocations and copying in ecryptfs_follow_link()  switch to generic_readlink(), while we are at it  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | minix |  | 11 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
d | devpts |  | 2 items |  | Eric W. Biederman | ebiederm@xmission.com | 1337119166 |  | userns: Convert devpts to use kuid/kgid where appropriate  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | eventfd.c | s | 10K | 382 | Sha Zhengju | handai.szj@taobao.com | 1338511772 |  | eventfd: change int to __u64 in eventfd_signal()  eventfd_ctx->count is an __u64 counter which is allowed to reach ULLONG_MAX.  eventfd_write() adds a __u64 value to "count", but the kernel side eventfd_signal() only adds an int value to it.  Make them consistent.  [akpm@linux-foundation.org: update interface documentation] Signed-off-by: Sha Zhengju <handai.szj@taobao.com> Cc: Davide Libenzi <davidel@xmailserver.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | debugfs |  | 3 items |  | Srivatsa Vaddagiri | vatsa@linux.vnet.ibm.com | 1334636316 |  | debugfs: Add support to print u32 array in debugfs  Move the code from Xen to debugfs to make the code common for other users as well.  Accked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Signed-off-by: Srivatsa Vaddagiri <vatsa@linux.vnet.ibm.com> Signed-off-by: Suzuki Poulose <suzuki@in.ibm.com> [v1: Fixed rebase issues] [v2: Fixed PPC compile issues] Signed-off-by: Raghavendra K T <raghavendra.kt@linux.vnet.ibm.com> Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
d | nfsd |  | 39 items |  | J. Bruce Fields | bfields@redhat.com | 1339696448 |  | nfsd4: BUG_ON(!is_spin_locked()) no good on UP kernels  Most frequent symptom was a BUG triggering in expire_client, with the server locking up shortly thereafter.  Introduced by 508dc6e110c6dbdc0bbe84298ccfe22de7538486 "nfsd41: free_session/free_client must be called under the client_lock".  Cc: stable@kernel.org Cc: Benny Halevy <bhalevy@tonian.com> Signed-off-by: J. Bruce Fields <bfields@redhat.com>
f | pipe.c | s | 28K | 1142 | Josef Bacik | josef@redhat.com | 1338566845 |  | fs: introduce inode operation ->update_time  Btrfs has to make sure we have space to allocate new blocks in order to modify the inode, so updating time can fail.  We've gotten around this by having our own file_update_time but this is kind of a pain, and Christoph has indicated he would like to make xfs do something different with atime updates.  So introduce ->update_time, where we will deal with i_version an a/m/c time updates and indicate which changes need to be made.  The normal version just does what it has always done, updates the time and marks the inode dirty, and then filesystems can choose to do something different.  I've gone through all of the users of file_update_time and made them check for errors with the exception of the fault code since it's complicated and I wasn't quite sure what to do there, also Jan is going to be pushing the file time updates into page_mkwrite for those who have it so that should satisfy btrfs and make it not a big deal to check the file_update_time() return code in the generic fault path. Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
f | fhandle.c | s | 6.5K | 243 | Al Viro | viro@zeniv.linux.org.uk | 1325909813 |  | vfs: prefer ->dentry->d_sb to ->mnt->mnt_sb  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | bio.c | s | 40K | 1476 | Linus Torvalds | torvalds@linux-foundation.org | 1338393162 |  | Merge branch 'for-3.5/core' of git://git.kernel.dk/linux-block  Merge block/IO core bits from Jens Axboe:  "This is a bit bigger on the core side than usual, but that is purely   because we decided to hold off on parts of Tejun's submission on 3.4   to give it a bit more time to simmer.  As a consequence, it's seen a   long cycle in for-next.    It contains:     - Bug fix from Dan, wrong locking type.    - Relax splice gifting restriction from Eric.    - A ton of updates from Tejun, primarily for blkcg.  This improves      the code a lot, making the API nicer and cleaner, and also includes      fixes for how we handle and tie policies and re-activate on      switches.  The changes also include generic bug fixes.    - A simple fix from Vivek, along with a fix for doing proper delayed      allocation of the blkcg stats."  Fix up annoying conflict just due to different merge resolution in Documentation/feature-removal-schedule.txt  * 'for-3.5/core' of git://git.kernel.dk/linux-block: (92 commits)   blkcg: tg_stats_alloc_lock is an irq lock   vmsplice: relax alignement requirements for SPLICE_F_GIFT   blkcg: use radix tree to index blkgs from blkcg   blkcg: fix blkcg->css ref leak in __blkg_lookup_create()   block: fix elvpriv allocation failure handling   block: collapse blk_alloc_request() into get_request()   blkcg: collapse blkcg_policy_ops into blkcg_policy   blkcg: embed struct blkg_policy_data in policy specific data   blkcg: mass rename of blkcg API   blkcg: style cleanups for blk-cgroup.h   blkcg: remove blkio_group->path[]   blkcg: blkg_rwstat_read() was missing inline   blkcg: shoot down blkgs if all policies are deactivated   blkcg: drop stuff unused after per-queue policy activation update   blkcg: implement per-queue policy activation   blkcg: add request_queue->root_blkg   blkcg: make request_queue bypassing on allocation   blkcg: make sure blkg_lookup() returns %NULL if @q is bypassing   blkcg: make blkg_conf_prep() take @pol and return with queue lock held   blkcg: remove static policy ID enums   ...
f | Makefile | g | 4.0K |  | Kai Bankett | chaosman@ontika.net | 1332293378 |  | fs: initial qnx6fs addition  Adds support for qnx6fs readonly support to the linux kernel.  * Mount option   The option mmi_fs can be used to mount Harman Becker/Audi MMI 3G   HDD qnx6fs filesystems.  * Documentation   A high level filesystem stucture description can be found in the   Documentation/filesystems directory. (qnx6.txt)  * Additional features   - Active (stable) superblock selection   - Superblock checksum check (enforced)   - Supports mount of qnx6 filesystems with to host different endianess   - Automatic endianess detection   - Longfilename support (with non-enfocing crc check)   - All blocksizes (512, 1024, 2048 and 4096 supported)  Signed-off-by: Kai Bankett <chaosman@ontika.net> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | isofs |  | 13 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338348513 |  | ->encode_fh() API change  pass inode + parent's inode or NULL instead of dentry + bool saying whether we want the parent or not.  NOTE: that needs ceph fix folded in.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | pnode.c | s | 8.8K | 314 | Andi Kleen | ak@linux.intel.com | 1338348521 |  | brlocks/lglocks: API cleanups  lglocks and brlocks are currently generated with some complicated macros in lglock.h.  But there's no reason to not just use common utility functions and put all the data into a common data structure.  In preparation, this patch changes the API to look more like normal function calls with pointers, not magic macros.  The patch is rather large because I move over all users in one go to keep it bisectable.  This impacts the VFS somewhat in terms of lines changed. But no actual behaviour change.  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Andi Kleen <ak@linux.intel.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | quota |  | 12 items |  | Jan Kara | jack@suse.cz | 1337117679 |  | quota: Get rid of nested I_MUTEX_QUOTA locking subclass  So far i_mutex was ranking above dqonoff_mutex and i_mutex on quota files was special and ranking below dqonoff_mutex (and several other locks). However there's no real need for i_mutex on quota files to be special. IO on quota files is serialized by dqio_mutex anyway so we don't need to take i_mutex when writing to quota files. Other places where we take i_mutex on quota file can accomodate standard i_mutex lock ranking, we only need to change the lock ranking to be dqonoff_mutex > i_mutex which is a matter of changing documentation because there's no place which would enforce ordering in the other direction.  Signed-off-by: Jan Kara <jack@suse.cz>
f | internal.h | s | 2.9K | 100 | Miklos Szeredi | mszeredi@suse.cz | 1338567120 |  | vfs: split __dentry_open()  Split __dentry_open() into two functions:    do_dentry_open() - does most of the actual work, doesn't put file on failure   open_check_o_direct() - after a successful open, checks direct_IO method  This will allow i_op->atomic_open to do just the file initialization and leave the direct_IO checking to the VFS.  Signed-off-by: Miklos Szeredi <mszeredi@suse.cz> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | ntfs |  | 46 items |  | Josef Bacik | josef@redhat.com | 1338566845 |  | fs: introduce inode operation ->update_time  Btrfs has to make sure we have space to allocate new blocks in order to modify the inode, so updating time can fail.  We've gotten around this by having our own file_update_time but this is kind of a pain, and Christoph has indicated he would like to make xfs do something different with atime updates.  So introduce ->update_time, where we will deal with i_version an a/m/c time updates and indicate which changes need to be made.  The normal version just does what it has always done, updates the time and marks the inode dirty, and then filesystems can choose to do something different.  I've gone through all of the users of file_update_time and made them check for errors with the exception of the fault code since it's complicated and I wasn't quite sure what to do there, also Jan is going to be pushing the file time updates into page_mkwrite for those who have it so that should satisfy btrfs and make it not a big deal to check the file_update_time() return code in the generic fault path. Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
d | dlm |  | 38 items |  | Dan Carpenter | dan.carpenter@oracle.com | 1337096368 |  | dlm: NULL dereference on failure in kmem_cache_create()  We aren't allowed to pass NULL pointers to kmem_cache_destroy() so if both allocations fail, it leads to a NULL dereference.  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: David Teigland <teigland@redhat.com>
f | open.c | s | 27K | 1019 | Miklos Szeredi | mszeredi@suse.cz | 1338567121 |  | vfs: nameidata_to_filp(): don't throw away file on error  If open fails, don't put the file.  This allows it to be reused if open needs to be retried.  Signed-off-by: Miklos Szeredi <mszeredi@suse.cz> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | hugetlbfs |  | 2 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
d | hppfs |  | 2 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | seq_file.c | s | 19K | 811 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
f | file_table.c | s | 12K | 464 | Andi Kleen | ak@linux.intel.com | 1338348521 |  | brlocks/lglocks: API cleanups  lglocks and brlocks are currently generated with some complicated macros in lglock.h.  But there's no reason to not just use common utility functions and put all the data into a common data structure.  In preparation, this patch changes the API to look more like normal function calls with pointers, not magic macros.  The patch is rather large because I move over all users in one go to keep it bisectable.  This impacts the VFS somewhat in terms of lines changed. But no actual behaviour change.  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Andi Kleen <ak@linux.intel.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | fat |  | 11 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
f | binfmt_aout.c | s | 11K | 395 | Linus Torvalds | torvalds@linux-foundation.org | 1334968153 |  | VM: add "vm_mmap()" helper function  This continues the theme started with vm_brk() and vm_munmap(): vm_mmap() does the same thing as do_mmap(), but additionally does the required VM locking.  This uninlines (and rewrites it to be clearer) do_mmap(), which sadly duplicates it in mm/mmap.c and mm/nommu.c.  But that way we don't have to export our internal do_mmap_pgoff() function.  Some day we hopefully don't have to export do_mmap() either, if all modular users can become the simpler vm_mmap() instead.  We're actually very close to that already, with the notable exception of the (broken) use in i810, and a couple of stragglers in binfmt_elf.  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | dcookies.c | s | 6.8K | 275 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330475518 |  | fs: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | sysfs |  | 10 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
d | jfs |  | 46 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
d | notify |  | 12 items |  | Dan Carpenter | dan.carpenter@oracle.com | 1338426293 |  | fsnotify: remove unused parameter from send_to_group()  We don't use "mnt" anymore in send_to_group() after 1968f5eed5 ("fanotify: use both marks when possible") was applied.  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | qnx6 |  | 8 items |  | Kai Bankett | chaosman@ontika.net | 1332293378 |  | fs: initial qnx6fs addition  Adds support for qnx6fs readonly support to the linux kernel.  * Mount option   The option mmi_fs can be used to mount Harman Becker/Audi MMI 3G   HDD qnx6fs filesystems.  * Documentation   A high level filesystem stucture description can be found in the   Documentation/filesystems directory. (qnx6.txt)  * Additional features   - Active (stable) superblock selection   - Superblock checksum check (enforced)   - Supports mount of qnx6 filesystems with to host different endianess   - Automatic endianess detection   - Longfilename support (with non-enfocing crc check)   - All blocksizes (512, 1024, 2048 and 4096 supported)  Signed-off-by: Kai Bankett <chaosman@ontika.net> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | ext4 |  | 36 items |  | Tao Ma | boyu.mt@taobao.com | 1339110259 |  | ext4: don't set i_flags in EXT4_IOC_SETFLAGS  Commit 7990696 uses the ext4_{set,clear}_inode_flags() functions to change the i_flags automatically but fails to remove the error setting of i_flags.  So we still have the problem of trashing state flags. Fix this by removing the assignment.  Signed-off-by: Tao Ma <boyu.mt@taobao.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu> Cc: stable@kernel.org
d | nfs |  | 54 items |  | Bryan Schumaker | bjschuma@netapp.com | 1340217491 |  | NFS: Force the legacy idmapper to be single threaded  It was initially coded under the assumption that there would only be one request at a time, so use a lock to enforce this requirement..  Signed-off-by: Bryan Schumaker <bjschuma@netapp.com> CC: stable@vger.kernel.org [3.4+] Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | compat_ioctl.c | s | 45K | 1477 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
f | read_write.h | s | 542B | 11 | Badari Pulavarty | pbadari@us.ibm.com | 1159688368 |  | [PATCH] Remove readv/writev methods and use aio_read/aio_write instead  This patch removes readv() and writev() methods and replaces them with aio_read()/aio_write() methods.  Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com> Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
d | hfs |  | 21 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
d | autofs4 |  | 10 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
f | binfmt_misc.c | s | 15K | 633 | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
d | romfs |  | 6 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1333153916 |  | 
d | proc |  | 32 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338832845 |  | vfs: Fix /proc/<tid>/fdinfo/<fd> file handling  Cyrill Gorcunov reports that I broke the fdinfo files with commit 30a08bf2d31d ("proc: move fd symlink i_mode calculations into tid_fd_revalidate()"), and he's quite right.  The tid_fd_revalidate() function is not just used for the <tid>/fd symlinks, it's also used for the <tid>/fdinfo/<fd> files, and the permission model for those are different.  So do the dynamic symlink permission handling just for symlinks, making the fdinfo files once more appear as the proper regular files they are.  Of course, Al Viro argued (probably correctly) that we shouldn't do the symlink permission games at all, and make the symlinks always just be the normal 'lrwxrwxrwx'.  That would have avoided this issue too, but since somebody noticed that the permissions had changed (which was the reason for that original commit 30a08bf2d31d in the first place), people do apparently use this feature.  [ Basically, you can use the symlink permission data as a cheap "fdinfo"   replacement, since you see whether the file is open for reading and/or   writing by just looking at st_mode of the symlink.  So the feature   does make sense, even if the pain it has caused means we probably   shouldn't have done it to begin with. ]  Reported-and-tested-by: Cyrill Gorcunov <gorcunov@openvz.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | ioprio.c | s | 5.0K | 218 | Linus Torvalds | torvalds@linux-foundation.org | 1338393162 |  | Merge branch 'for-3.5/core' of git://git.kernel.dk/linux-block  Merge block/IO core bits from Jens Axboe:  "This is a bit bigger on the core side than usual, but that is purely   because we decided to hold off on parts of Tejun's submission on 3.4   to give it a bit more time to simmer.  As a consequence, it's seen a   long cycle in for-next.    It contains:     - Bug fix from Dan, wrong locking type.    - Relax splice gifting restriction from Eric.    - A ton of updates from Tejun, primarily for blkcg.  This improves      the code a lot, making the API nicer and cleaner, and also includes      fixes for how we handle and tie policies and re-activate on      switches.  The changes also include generic bug fixes.    - A simple fix from Vivek, along with a fix for doing proper delayed      allocation of the blkcg stats."  Fix up annoying conflict just due to different merge resolution in Documentation/feature-removal-schedule.txt  * 'for-3.5/core' of git://git.kernel.dk/linux-block: (92 commits)   blkcg: tg_stats_alloc_lock is an irq lock   vmsplice: relax alignement requirements for SPLICE_F_GIFT   blkcg: use radix tree to index blkgs from blkcg   blkcg: fix blkcg->css ref leak in __blkg_lookup_create()   block: fix elvpriv allocation failure handling   block: collapse blk_alloc_request() into get_request()   blkcg: collapse blkcg_policy_ops into blkcg_policy   blkcg: embed struct blkg_policy_data in policy specific data   blkcg: mass rename of blkcg API   blkcg: style cleanups for blk-cgroup.h   blkcg: remove blkio_group->path[]   blkcg: blkg_rwstat_read() was missing inline   blkcg: shoot down blkgs if all policies are deactivated   blkcg: drop stuff unused after per-queue policy activation update   blkcg: implement per-queue policy activation   blkcg: add request_queue->root_blkg   blkcg: make request_queue bypassing on allocation   blkcg: make sure blkg_lookup() returns %NULL if @q is bypassing   blkcg: make blkg_conf_prep() take @pol and return with queue lock held   blkcg: remove static policy ID enums   ...
f | pnode.h | s | 1.4K | 42 | Al Viro | viro@zeniv.linux.org.uk | 1325649431 |  | vfs: switch pnode.h macros to struct mount *  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | mbcache.c | s | 16K | 546 | Ying Han | yinghan@google.com | 1306337966 |  | vmscan: change shrinker API by passing shrink_control struct  Change each shrinker's API by consolidating the existing parameters into shrink_control struct.  This will simplify any further features added w/o touching each file of shrinker.  [akpm@linux-foundation.org: fix build] [akpm@linux-foundation.org: fix warning] [kosaki.motohiro@jp.fujitsu.com: fix up new shrinker API] [akpm@linux-foundation.org: fix xfs warning] [akpm@linux-foundation.org: update gfs2] Signed-off-by: Ying Han <yinghan@google.com> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Cc: Minchan Kim <minchan.kim@gmail.com> Acked-by: Pavel Emelyanov <xemul@openvz.org> Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Mel Gorman <mel@csn.ul.ie> Acked-by: Rik van Riel <riel@redhat.com> Cc: Johannes Weiner <hannes@cmpxchg.org> Cc: Hugh Dickins <hughd@google.com> Cc: Dave Hansen <dave@linux.vnet.ibm.com> Cc: Steven Whitehouse <swhiteho@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | splice.c | s | 46K | 1746 | Eric Dumazet | edumazet@google.com | 1339615002 |  | splice: fix racy pipe->buffers uses  Dave Jones reported a kernel BUG at mm/slub.c:3474! triggered by splice_shrink_spd() called from vmsplice_to_pipe()  commit 35f3d14dbbc5 (pipe: add support for shrinking and growing pipes) added capability to adjust pipe->buffers.  Problem is some paths don't hold pipe mutex and assume pipe->buffers doesn't change for their duration.  Fix this by adding nr_pages_max field in struct splice_pipe_desc, and use it in place of pipe->buffers where appropriate.  splice_shrink_spd() loses its struct pipe_inode_info argument.  Reported-by: Dave Jones <davej@redhat.com> Signed-off-by: Eric Dumazet <edumazet@google.com> Cc: Jens Axboe <axboe@kernel.dk> Cc: Alexander Viro <viro@zeniv.linux.org.uk> Cc: Tom Herbert <therbert@google.com> Cc: stable <stable@vger.kernel.org> # 2.6.35 Tested-by: Dave Jones <davej@redhat.com> Signed-off-by: Jens Axboe <axboe@kernel.dk>
f | locks.c | s | 59K | 2113 | Al Viro | viro@zeniv.linux.org.uk | 1338348511 |  | switch flock to fget_light/fput_light  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | binfmt_elf.c | s | 54K | 1833 | Al Viro | viro@zeniv.linux.org.uk | 1338426295 |  | binfmt_elf: switch elf_map() to vm_mmap/vm_munmap  No reason to hold ->mmap_sem over the sequence  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | binfmt_som.c | s | 7.1K | 243 | Linus Torvalds | torvalds@linux-foundation.org | 1334968153 |  | VM: add "vm_mmap()" helper function  This continues the theme started with vm_brk() and vm_munmap(): vm_mmap() does the same thing as do_mmap(), but additionally does the required VM locking.  This uninlines (and rewrites it to be clearer) do_mmap(), which sadly duplicates it in mm/mmap.c and mm/nommu.c.  But that way we don't have to export our internal do_mmap_pgoff() function.  Some day we hopefully don't have to export do_mmap() either, if all modular users can become the simpler vm_mmap() instead.  We're actually very close to that already, with the notable exception of the (broken) use in i810, and a couple of stragglers in binfmt_elf.  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | 9p |  | 21 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338348514 |  | kill v9fs_dentry_from_dir_inode()  In *all* callers we have a dentry of child of that directory. Just use ->d_parent of that one, for fsck sake...  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | hpfs |  | 17 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
d | bfs |  | 6 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
d | nfs_common |  | 2 items |  | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | eventpoll.c | s | 53K | 1665 | Al Viro | viro@zeniv.linux.org.uk | 1338569926 |  | HAVE_RESTORE_SIGMASK is defined on all architectures now  Everyone either defines it in arch thread_info.h or has TIF_RESTORE_SIGMASK and picks default set_restore_sigmask() in linux/thread_info.h.  Kill the ifdefs, slap #error in linux/thread_info.h to catch breakage when new ones get merged.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | sysv |  | 12 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | sync.c | s | 9.9K | 343 | Al Viro | viro@zeniv.linux.org.uk | 1338348509 |  | switch do_fsync() to fget_light()  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | xattr.c | s | 17K | 687 | Al Viro | viro@zeniv.linux.org.uk | 1338348510 |  | switch xattr syscalls to fget_light/fput_light  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | jbd2 |  | 8 items |  | Wanlong Gao | gaowanlong@cn.fujitsu.com | 1338523832 |  | jbd2: use kmem_cache_zalloc wrapper instead of flag  Use kmem_cache_zalloc wrapper instead of flag __GFP_ZERO.  Signed-off-by: Wanlong Gao <gaowanlong@cn.fujitsu.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | compat.c | s | 44K | 1571 | Linus Torvalds | torvalds@linux-foundation.org | 1338576824 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/signal  Pull third pile of signal handling patches from Al Viro:  "This time it's mostly helpers and conversions to them; there's a lot   of stuff remaining in the tree, but that'll either go in -rc2   (isolated bug fixes, ideally via arch maintainers' trees) or will sit   there until the next cycle."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/signal:   x86: get rid of calling do_notify_resume() when returning to kernel mode   blackfin: check __get_user() return value   whack-a-mole with TIF_FREEZE   FRV: Optimise the system call exit path in entry.S [ver #2]   FRV: Shrink TIF_WORK_MASK [ver #2]   FRV: Prevent syscall exit tracing and notify_resume at end of kernel exceptions   new helper: signal_delivered()   powerpc: get rid of restore_sigmask()   most of set_current_blocked() callers want SIGKILL/SIGSTOP removed from set   set_restore_sigmask() is never called without SIGPENDING (and never should be)   TIF_RESTORE_SIGMASK can be set only when TIF_SIGPENDING is set   don't call try_to_freeze() from do_signal()   pull clearing RESTORE_SIGMASK into block_sigmask()   sh64: failure to build sigframe != signal without handler   openrisc: tracehook_signal_handler() is supposed to be called on success   new helper: sigmask_to_save()   new helper: restore_saved_sigmask()   new helpers: {clear,test,test_and_clear}_restore_sigmask()   HAVE_RESTORE_SIGMASK is defined on all architectures now
f | proc_namespace.c | s | 7.5K | 291 | Andi Kleen | ak@linux.intel.com | 1338348521 |  | brlocks/lglocks: API cleanups  lglocks and brlocks are currently generated with some complicated macros in lglock.h.  But there's no reason to not just use common utility functions and put all the data into a common data structure.  In preparation, this patch changes the API to look more like normal function calls with pointers, not magic macros.  The patch is rather large because I move over all users in one go to keep it bisectable.  This impacts the VFS somewhat in terms of lines changed. But no actual behaviour change.  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Andi Kleen <ak@linux.intel.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | anon_inodes.c | s | 6.4K | 213 | Al Viro | viro@zeniv.linux.org.uk | 1332293385 |  | anon_inodes: move allocation of anon_inode into ->mount()  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | fs-writeback.c | s | 39K | 1308 | Jan Kara | jack@suse.cz | 1339198335 |  | writeback: Fix lock imbalance in writeback_sb_inodes()  Fix bug introduced by 169ebd90.  We have to have wb_list_lock locked when restarting writeback loop after having waited for inode writeback.  Bug description by Ted Tso:    I can reproduce this fairly easily by using ext4 w/o a journal, running   under KVM with 1024megs memory, with fsstress (xfstests #13):    [   45.153294] =====================================   [   45.154784] [ BUG: bad unlock balance detected! ]   [   45.155591] 3.5.0-rc1-00002-gb22b1f1 #124 Not tainted   [   45.155591] -------------------------------------   [   45.155591] flush-254:16/2499 is trying to release lock (&(&wb->list_lock)->rlock) at:   [   45.155591] [<c022c3da>] writeback_sb_inodes+0x160/0x327   [   45.155591] but there are no more locks to release!  Reported-by: Theodore Ts'o <tytso@mit.edu> Tested-by: Theodore Ts'o <tytso@mit.edu> Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | dcache.c | s | 80K | 2837 | Linus Torvalds | torvalds@linux-foundation.org | 1339176843 |  | Revert "vfs: stop d_splice_alias creating directory aliases"  This reverts commit 7732a557b1342c6e6966efb5f07effcf99f56167 (and commit 3f50fff4dace23d3cfeb195d5cd4ee813cee68b7, which was a follow-up cleanup).  We're chasing an elusive bug that Dave Jones can apparently reproduce using his system call fuzzer tool, and that looks like some kind of locking ordering problem on the directory i_mutex chain.  Our i_mutex locking is rather complex, and depends on the topological ordering of the directories, which is why we have been very wary of splicing directory entries around.  Of course, we really don't want to ever see aliased unconnected directories anyway, so none of this should ever happen, but this revert aims to basically get us back to a known older state.  Bruce points to some of the previous discussion at         http://marc.info/?i=<20110310105821.GE22723@ZenIV.linux.org.uk>  and in particular a long post from Neil:         http://marc.info/?i=<20110311150749.2fa2be66@notabene.brown>  It should be noted that it's possible that Dave's problems come from other changes altohgether, including possibly just the fact that Dave constantly is teachning his fuzzer new tricks.  So what appears to be a new bug could in fact be an old one that just gets newly triggered, but reverting these patches as "still under heavy discussion" is the right thing regardless.  Requested-by: Al Viro <viro@zeniv.linux.org.uk> Acked-by: J. Bruce Fields <bfields@fieldses.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | cramfs |  | 5 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1332362201 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs pile 1 from Al Viro:  "This is _not_ all; in particular, Miklos' and Jan's stuff is not there   yet."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (64 commits)   ext4: initialization of ext4_li_mtx needs to be done earlier   debugfs-related mode_t whack-a-mole   hfsplus: add an ioctl to bless files   hfsplus: change finder_info to u32   hfsplus: initialise userflags   qnx4: new helper - try_extent()   qnx4: get rid of qnx4_bread/qnx4_getblk   take removal of PF_FORKNOEXEC to flush_old_exec()   trim includes in inode.c   um: uml_dup_mmap() relies on ->mmap_sem being held, but activate_mm() doesn't hold it   um: embed ->stub_pages[] into mmu_context   gadgetfs: list_for_each_safe() misuse   ocfs2: fix leaks on failure exits in module_init   ecryptfs: make register_filesystem() the last potential failure exit   ntfs: forgets to unregister sysctls on register_filesystem() failure   logfs: missing cleanup on register_filesystem() failure   jfs: mising cleanup on register_filesystem() failure   make configfs_pin_fs() return root dentry on success   configfs: configfs_create_dir() has parent dentry in dentry->d_parent   configfs: sanitize configfs_create()   ...
f | stack.c | s | 2.5K | 71 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330475518 |  | fs: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | hfsplus |  | 20 items |  | Matthew Garrett | mjg@redhat.com | 1339969199 |  | hfsplus: fix bless ioctl when used with hardlinks  HFS+ doesn't really implement hard links - instead, hardlinks are indicated by a magic file type which refers to an indirect node in a hidden directory. The spec indicates that stat() should return the inode number of the indirect node, but it turns out that this doesn't satisfy the firmware when it's looking for a bootloader - it wants the catalog ID of the hardlink file instead. Fix up this case.  Signed-off-by: Matthew Garrett <mjg@redhat.com> Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | ncpfs |  | 18 items |  | Josef Bacik | josef@redhat.com | 1338566845 |  | fs: introduce inode operation ->update_time  Btrfs has to make sure we have space to allocate new blocks in order to modify the inode, so updating time can fail.  We've gotten around this by having our own file_update_time but this is kind of a pain, and Christoph has indicated he would like to make xfs do something different with atime updates.  So introduce ->update_time, where we will deal with i_version an a/m/c time updates and indicate which changes need to be made.  The normal version just does what it has always done, updates the time and marks the inode dirty, and then filesystems can choose to do something different.  I've gone through all of the users of file_update_time and made them check for errors with the exception of the fault code since it's complicated and I wasn't quite sure what to do there, also Jan is going to be pushing the file time updates into page_mkwrite for those who have it so that should satisfy btrfs and make it not a big deal to check the file_update_time() return code in the generic fault path. Thanks,  Signed-off-by: Josef Bacik <josef@redhat.com>
d | befs |  | 19 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293375 |  | switch open-coded instances of d_make_root() to new helper  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | super.c | s | 29K | 1111 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
d | ubifs |  | 34 items |  | Brian Norris | computersforpeace@gmail.com | 1340796135 |  | UBIFS: correct usage of IS_ENABLED()  Commit "818039c UBIFS: fix debugfs-less systems support" fixed one regression but introduced a different regression - the debugfs is now always compiled out. Root cause: IS_ENABLED() arguments should be used with the CONFIG_* prefix.  Signed-off-by: Brian Norris <computersforpeace@gmail.com> Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
f | inode.c | s | 48K | 1679 | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
f | buffer.c | s | 85K | 2940 | Shai Fultheim | shai@scalemp.com | 1338426292 |  | fs: Move bh_cachep to the __read_mostly section  bh_cachep is only written to once on initialization, so move it to the __read_mostly section.  Signed-off-by: Shai Fultheim <shai@scalemp.com> Signed-off-by: Vlad Zolotarov <vlad@scalemp.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | readdir.c | s | 7.0K | 270 | Al Viro | viro@zeniv.linux.org.uk | 1338348509 |  | switch readdir/getdents to fget_light/fput_light  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | affs |  | 12 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338348514 |  | affs: bury unused macros  ... unused since 2.4.4.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | libfs.c | s | 25K | 887 | Linus Torvalds | torvalds@linux-foundation.org | 1336704875 |  | vfs: make it possible to access the dentry hash/len as one 64-bit entry  This allows comparing hash and len in one operation on 64-bit architectures.  Right now only __d_lookup_rcu() takes advantage of this, since that is the case we care most about.  The use of anonymous struct/unions hides the alternate 64-bit approach from most users, the exception being a few cases where we initialize a 'struct qstr' with a static initializer.  This makes the problematic cases use a new QSTR_INIT() helper function for that (but initializing just the name pointer with a "{ .name = xyzzy }" initializer remains valid, as does just copying another qstr structure).  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | hostfs |  | 4 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | compat_binfmt_elf.c | s | 3.5K | 113 | Daisuke HATAYAMA | d.hatayama@jp.fujitsu.com | 1267903605 |  | elf coredump: replace ELF_CORE_EXTRA_* macros by functions  elf_core_dump() and elf_fdpic_core_dump() use #ifdef and the corresponding macro for hiding _multiline_ logics in functions.  This patch removes #ifdef and replaces ELF_CORE_EXTRA_* by corresponding functions.  For architectures not implemeonting ELF_CORE_EXTRA_*, we use weak functions in order to reduce a range of modification.  This cleanup is for my next patches, but I think this cleanup itself is worth doing regardless of my firnal purpose.  Signed-off-by: Daisuke HATAYAMA <d.hatayama@jp.fujitsu.com> Cc: "Luck, Tony" <tony.luck@intel.com> Cc: Jeff Dike <jdike@addtoit.com> Cc: David Howells <dhowells@redhat.com> Cc: Greg Ungerer <gerg@snapgear.com> Cc: Roland McGrath <roland@redhat.com> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Alexander Viro <viro@zeniv.linux.org.uk> Cc: Andi Kleen <andi@firstfloor.org> Cc: Alan Cox <alan@lxorguk.ukuu.org.uk> Cc: <linux-arch@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | pstore |  | 7 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1340230503 |  | 
d | exofs |  | 16 items |  | Randy Dunlap | rdunlap@xenotime.net | 1339472002 |  | exofs: fix sparse non-ANSI function warning  Fix sparse non-ANSI function warning:    fs/exofs/sys.c:112:28: warning: non-ANSI function declaration of function 'exofs_sysfs_dbg_print'  Signed-off-by: Randy Dunlap <rdunlap@xenotime.net> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | xfs |  | 141 items |  | Mark Tinguely | tinguely@sgi.com | 1340306471 |  | xfs: rename log structure to xlog  Rename the XFS log structure to xlog to help crash distinquish it from the other logs in Linux.  Signed-off-by: Mark Tinguely <tinguely@sgi.com> Reviewed-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Ben Myers <bpm@sgi.com>
d | squashfs |  | 25 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1332983154 |  | 
f | aio.c | s | 47K | 1611 | Linus Torvalds | torvalds@linux-foundation.org | 1338572075 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs changes from Al Viro.  "A lot of misc stuff.  The obvious groups:    * Miklos' atomic_open series; kills the damn abuse of      ->d_revalidate() by NFS, which was the major stumbling block for      all work in that area.    * ripping security_file_mmap() and dealing with deadlocks in the      area; sanitizing the neighborhood of vm_mmap()/vm_munmap() in      general.    * ->encode_fh() switched to saner API; insane fake dentry in      mm/cleancache.c gone.    * assorted annotations in fs (endianness, __user)    * parts of Artem's ->s_dirty work (jff2 and reiserfs parts)    * ->update_time() work from Josef.    * other bits and pieces all over the place.    Normally it would've been in two or three pull requests, but   signal.git stuff had eaten a lot of time during this cycle ;-/"  Fix up trivial conflicts in Documentation/filesystems/vfs.txt (the 'truncate_range' inode method was removed by the VM changes, the VFS update adds an 'update_time()' method), and in fs/btrfs/ulist.[ch] (due to sparse fix added twice, with other changes nearby).  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (95 commits)   nfs: don't open in ->d_revalidate   vfs: retry last component if opening stale dentry   vfs: nameidata_to_filp(): don't throw away file on error   vfs: nameidata_to_filp(): inline __dentry_open()   vfs: do_dentry_open(): don't put filp   vfs: split __dentry_open()   vfs: do_last() common post lookup   vfs: do_last(): add audit_inode before open   vfs: do_last(): only return EISDIR for O_CREAT   vfs: do_last(): check LOOKUP_DIRECTORY   vfs: do_last(): make ENOENT exit RCU safe   vfs: make follow_link check RCU safe   vfs: do_last(): use inode variable   vfs: do_last(): inline walk_component()   vfs: do_last(): make exit RCU safe   vfs: split do_lookup()   Btrfs: move over to use ->update_time   fs: introduce inode operation ->update_time   reiserfs: get rid of resierfs_sync_super   reiserfs: mark the superblock as dirty a bit later   ...
f | binfmt_flat.c | s | 26K | 822 | Al Viro | viro@zeniv.linux.org.uk | 1338426296 |  | binfmt_flat: use vm_munmap, we are missing ->mmap_sem there  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | statfs.c | s | 5.2K | 209 | Al Viro | viro@zeniv.linux.org.uk | 1338348511 |  | switch statfs to fget_light/fput_light  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | timerfd.c | s | 8.6K | 315 | Max Asbock | masbock@linux.vnet.ibm.com | 1308044774 |  | timerfd: Fix wakeup of processes when timer is cancelled on clock change  Currently processes waiting with poll on cancelable timerfd timers are not woken up when the timers are canceled. When the system time is set the clock_was_set() function calls timerfd_clock_was_set() to cancel and wake up processes waiting on potential cancelable timerfd timers. However the wake up currently has no effect because in the case of timerfd_read it is dependent on ctx->ticks not being 0. timerfd_poll also requires ctx->ticks being non zero. As a consequence processes waiting on cancelable timers only get woken up when the timers expire. This patch fixes this by incrementing ctx->ticks before calling wake_up.  Signed-off-by: Max Asbock <masbock@linux.vnet.ibm.com> Cc: kay.sievers@vrfy.org Cc: virtuoso@slind.org Cc: johnstul <johnstul@linux.vnet.ibm.com> Link: http://lkml.kernel.org/r/1307985512.4710.41.camel@w-amax.beaverton.ibm.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
d | btrfs |  | 69 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1340311267 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs  Pull btrfs fixes from Chris Mason:  "This is a small pull with btrfs fixes.  The biggest of the bunch is   another fix for the new backref walking code.    We're still hammering out one btrfs dio vs buffered reads problem, but   that one will have to wait for the next rc."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mason/linux-btrfs:   Btrfs: delay iput with async extents   Btrfs: add a missing spin_lock   Btrfs: don't assume to be on the correct extent in add_all_parents   Btrfs: introduce btrfs_next_old_item
f | select.c | s | 24K | 843 | Al Viro | viro@zeniv.linux.org.uk | 1338569926 |  | HAVE_RESTORE_SIGMASK is defined on all architectures now  Everyone either defines it in arch thread_info.h or has TIF_RESTORE_SIGMASK and picks default set_restore_sigmask() in linux/thread_info.h.  Kill the ifdefs, slap #error in linux/thread_info.h to catch breakage when new ones get merged.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | signalfd.c | s | 8.1K | 262 | Al Viro | viro@zeniv.linux.org.uk | 1338348510 |  | switch signalfd4() to fget_light/fput_light  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | direct-io.c | s | 37K | 1159 | Trond Myklebust | Trond.Myklebust@netapp.com | 1338489696 |  | NFS: Ensure that setattr and getattr wait for O_DIRECT write completion  Use the same mechanism as the block devices are using, but move the helper functions from fs/direct-io.c into fs/inode.c to remove the dependency on CONFIG_BLOCK.  Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com> Cc: Christoph Hellwig <hch@infradead.org> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Fred Isaman <iisaman@netapp.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | nilfs2 |  | 40 items |  | Ryusuke Konishi | konishi.ryusuke@lab.ntt.co.jp | 1340228375 |  | nilfs2: ensure proper cache clearing for gc-inodes  A gc-inode is a pseudo inode used to buffer the blocks to be moved by garbage collection.  Block caches of gc-inodes must be cleared every time a garbage collection function (nilfs_clean_segments) completes.  Otherwise, stale blocks buffered in the caches may be wrongly reused in successive calls of the GC function.  For user files, this is not a problem because their gc-inodes are distinguished by a checkpoint number as well as an inode number.  They never buffer different blocks if either an inode number, a checkpoint number, or a block offset differs.  However, gc-inodes of sufile, cpfile and DAT file can store different data for the same block offset.  Thus, the nilfs_clean_segments function can move incorrect block for these meta-data files if an old block is cached. I found this is really causing meta-data corruption in nilfs.  This fixes the issue by ensuring cache clear of gc-inodes and resolves reported GC problems including checkpoint file corruption, b-tree corruption, and the following warning during GC.    nilfs_palloc_freev: entry number 307234 already freed.   ...  Signed-off-by: Ryusuke Konishi <konishi.ryusuke@lab.ntt.co.jp> Tested-by: Ryusuke Konishi <konishi.ryusuke@lab.ntt.co.jp> Cc: <stable@vger.kernel.org>	[2.6.37+] Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | bad_inode.c | s | 7.7K | 306 | Hugh Dickins | hughd@google.com | 1338333743 |  | mm/fs: remove truncate_range  Remove vmtruncate_range(), and remove the truncate_range method from struct inode_operations: only tmpfs ever supported it, and tmpfs has now converted over to using the fallocate method of file_operations.  Update Documentation accordingly, adding (setlease and) fallocate lines. And while we're in mm.h, remove duplicate declarations of shmem_lock() and shmem_file_setup(): everyone is now using the ones in shmem_fs.h.  Based-on-patch-by: Cong Wang <amwang@redhat.com> Signed-off-by: Hugh Dickins <hughd@google.com> Cc: Christoph Hellwig <hch@infradead.org> Cc: Cong Wang <amwang@redhat.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | efs |  | 9 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293375 |  | switch open-coded instances of d_make_root() to new helper  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | fifo.c | s | 3.2K | 133 | David Jenni | dave.j@gmx.ch | 1300680969 |  | Filesystem: fifo: Fixed coding style issue.  Fixed coding style issue.  Signed-off-by: David Jenni <dave.j@gmx.ch> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | cifs |  | 52 items |  | Pavel Shilovsky | pshilovsky@samba.org | 1338572119 |  | CIFS: Move get_next_mid to ops struct  Reviewed-by: Jeff Layton <jlayton@redhat.com> Signed-off-by: Pavel Shilovsky <pshilovsky@samba.org> Signed-off-by: Steve French <sfrench@us.ibm.com>
d | coda |  | 17 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | posix_acl.c | s | 9.2K | 371 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330475518 |  | fs: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | generic_acl.c | s | 3.8K | 166 | Al Viro | viro@zeniv.linux.org.uk | 1312179006 |  | switch posix_acl_equiv_mode() to umode_t *  ... so that &inode->i_mode could be passed to it  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | ext3 |  | 25 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
d | configfs |  | 9 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293388 |  | make configfs_pin_fs() return root dentry on success  ... and make configfs_mnt static  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | mpage.c | s | 19K | 652 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330475518 |  | fs: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | filesystems.c | s | 6.3K | 246 | Al Viro | viro@zeniv.linux.org.uk | 1325649159 |  | vfs: convert fs_supers to hlist  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | namespace.c | s | 63K | 2312 | Al Viro | viro@zeniv.linux.org.uk | 1338426295 |  | vfs: umount_tree() might be called on subtree that had never made it  __mnt_make_shortterm() in there undoes the effect of __mnt_make_longterm() we'd done back when we set ->mnt_ns non-NULL; it should not be done to vfsmounts that had never gone through commit_tree() and friends.  Kudos to lczerner for catching that one...  Cc: stable@vger.kernel.org Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | jbd |  | 8 items |  | Jan Kara | jack@suse.cz | 1337117677 |  | jbd: Write journal superblock with WRITE_FUA after checkpointing  If journal superblock is written only in disk's caches and other transaction starts reusing space of the transaction cleaned from the log, it can happen blocks of a new transaction reach the disk before journal superblock. When power failure happens in such case, subsequent journal replay would still try to replay the old transaction but some of it's blocks may be already overwritten by the new transaction. For this reason we must use WRITE_FUA when updating log tail and we must first write new log tail to disk and update in-memory information only after that.  Signed-off-by: Jan Kara <jack@suse.cz>
f | ioctl.c | s | 15K | 532 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330475518 |  | fs: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | drop_caches.c | s | 1.5K | 59 | Ying Han | yinghan@google.com | 1306337966 |  | vmscan: change shrinker API by passing shrink_control struct  Change each shrinker's API by consolidating the existing parameters into shrink_control struct.  This will simplify any further features added w/o touching each file of shrinker.  [akpm@linux-foundation.org: fix build] [akpm@linux-foundation.org: fix warning] [kosaki.motohiro@jp.fujitsu.com: fix up new shrinker API] [akpm@linux-foundation.org: fix xfs warning] [akpm@linux-foundation.org: update gfs2] Signed-off-by: Ying Han <yinghan@google.com> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Cc: Minchan Kim <minchan.kim@gmail.com> Acked-by: Pavel Emelyanov <xemul@openvz.org> Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Mel Gorman <mel@csn.ul.ie> Acked-by: Rik van Riel <riel@redhat.com> Cc: Johannes Weiner <hannes@cmpxchg.org> Cc: Hugh Dickins <hughd@google.com> Cc: Dave Hansen <dave@linux.vnet.ibm.com> Cc: Steven Whitehouse <swhiteho@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Kconfig | g | 6.2K |  | Linus Torvalds | torvalds@linux-foundation.org | 1332362201 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs  Pull vfs pile 1 from Al Viro:  "This is _not_ all; in particular, Miklos' and Jan's stuff is not there   yet."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (64 commits)   ext4: initialization of ext4_li_mtx needs to be done earlier   debugfs-related mode_t whack-a-mole   hfsplus: add an ioctl to bless files   hfsplus: change finder_info to u32   hfsplus: initialise userflags   qnx4: new helper - try_extent()   qnx4: get rid of qnx4_bread/qnx4_getblk   take removal of PF_FORKNOEXEC to flush_old_exec()   trim includes in inode.c   um: uml_dup_mmap() relies on ->mmap_sem being held, but activate_mm() doesn't hold it   um: embed ->stub_pages[] into mmu_context   gadgetfs: list_for_each_safe() misuse   ocfs2: fix leaks on failure exits in module_init   ecryptfs: make register_filesystem() the last potential failure exit   ntfs: forgets to unregister sysctls on register_filesystem() failure   logfs: missing cleanup on register_filesystem() failure   jfs: mising cleanup on register_filesystem() failure   make configfs_pin_fs() return root dentry on success   configfs: configfs_create_dir() has parent dentry in dentry->d_parent   configfs: sanitize configfs_create()   ...
f | read_write.c | s | 22K | 879 | Christopher Yeoh | cyeoh@au1.ibm.com | 1338511772 |  | aio/vfs: cleanup of rw_copy_check_uvector() and compat_rw_copy_check_uvector()  A cleanup of rw_copy_check_uvector and compat_rw_copy_check_uvector after changes made to support CMA in an earlier patch.  Rather than having an additional check_access parameter to these functions, the first paramater type is overloaded to allow the caller to specify CHECK_IOVEC_ONLY which means check that the contents of the iovec are valid, but do not check the memory that they point to.  This is used by process_vm_readv/writev where we need to validate that a iovec passed to the syscall is valid but do not want to check the memory that it points to at this point because it refers to an address space in another process.  Signed-off-by: Chris Yeoh <yeohc@au1.ibm.com> Reviewed-by: Oleg Nesterov <oleg@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Kconfig.binfmt | g | 6.4K |  | Mark Salter | msalter@redhat.com | 1337087854 |  | C6X: add support to build with BINFMT_ELF_FDPIC  C6x userspace supports a shared library mechanism called DSBT for systems with no MMU. DSBT is similar to FDPIC in allowing shared text segments and private copies of data segments without an MMU. Both methods access data using a base register and offset. With FDPIC, the caller of an external function sets up the base register for the callee. With DSBT, the called function sets up its own base register. Other details differ but both userspaces need the same thing from the kernel loader: a map of where each ELF segment was loaded. The FDPIC loader already provides this, so DSBT just uses it.  This patch enables BINFMT_ELF_FDPIC by default for C6X and provides the necessary architecture hooks for the generic loader.  Signed-off-by: Mark Salter <msalter@redhat.com>
d | exportfs |  | 2 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338348513 |  | ->encode_fh() API change  pass inode + parent's inode or NULL instead of dentry + bool saying whether we want the parent or not.  NOTE: that needs ceph fix folded in.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | fuse |  | 9 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338916271 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mszeredi/fuse  Pull fuse updates from Miklos Szeredi.  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mszeredi/fuse:   fuse: fix blksize calculation   fuse: fix stat call on 32 bit platforms   fuse: optimize fallocate on permanent failure   fuse: add FALLOCATE operation   fuse: Convert to kstrtoul_from_user
f | namei.c | s | 86K | 3143 | Miklos Szeredi | mszeredi@suse.cz | 1338567121 |  | vfs: retry last component if opening stale dentry  NFS optimizes away d_revalidates for last component of open.  This means that open itself can find the dentry stale.  This patch allows the filesystem to return EOPENSTALE and the VFS will retry the lookup on just the last component if possible.  If the lookup was done using RCU mode, including the last component, then this is not possible since the parent dentry is lost.  In this case fall back to non-RCU lookup.  Currently this is not used since NFS will always leave RCU mode.  Signed-off-by: Miklos Szeredi <mszeredi@suse.cz> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | fcntl.c | s | 18K | 742 | Al Viro | viro@zeniv.linux.org.uk | 1338348510 |  | switch fcntl to fget_raw_light/fput_light  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | omfs |  | 8 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
d | nls |  | 54 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338605482 |  | nls: fix (and rename) mac NLS table files and config options  The config options in the Kconfig file (with _CODEPAGE_ in the name) didn't match the config option name in the Makefile (no _CODEPAGE_).  And both of them were of the hard-to-read MACXYZZY variety, which made them hard to parse for normal humans: MACROMAN easily reads as "macro man", not as "Mac Roman".  So rename the options to be consistent, and be NLS_MAC_xyzzy.  Rename the files to be mac-xyzzy.c too, and drop the "nls" part entirely (it's already in the directory name).  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | reiserfs |  | 32 items |  | Artem Bityutskiy | artem.bityutskiy@linux.intel.com | 1338561456 |  | reiserfs: get rid of resierfs_sync_super  This patch stops reiserfs using the VFS 'write_super()' method along with the s_dirt flag, because they are on their way out.  The whole "superblock write-out" VFS infrastructure is served by the 'sync_supers()' kernel thread, which wakes up every 5 (by default) seconds and writes out all dirty superblock using the '->write_super()' call-back.  But the problem with this thread is that it wastes power by waking up the system every 5 seconds, even if there are no diry superblocks, or there are no client file-systems which would need this (e.g., btrfs does not use '->write_super()'). So we want to kill it completely and thus, we need to make file-systems to stop using the '->write_super()' VFS service, and then remove it together with the kernel thread.  Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | ext2 |  | 21 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
f | fs_struct.c | s | 3.9K | 174 | Linus Torvalds | torvalds@linux-foundation.org | 1332609871 |  | 
f | attr.c | s | 6.9K | 226 | Dmitry Kasatkin | dmitry.kasatkin@intel.com | 1338426293 |  | vfs: increment iversion when a file is truncated  When a file is truncated with truncate()/ftruncate() and then closed, iversion is not updated.  This patch uses ATTR_SIZE flag as an indication to increment iversion.  Mimi said:  On fput(), i_version is used to detect and flag files that have changed and need to be re-measured in the IMA measurement policy.  When a file is truncated with truncate()/ftruncate() and then closed, i_version is not updated.  As a result, although the file has changed, it will not be re-measured and added to the IMA measurement list on subsequent access.  Signed-off-by: Dmitry Kasatkin <dmitry.kasatkin@intel.com> Acked-by: Mimi Zohar <zohar@us.ibm.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: <stable@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | block_dev.c | s | 41K | 1493 | Linus Torvalds | torvalds@linux-foundation.org | 1338224085 |  | 
d | freevxfs |  | 16 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | xattr_acl.c | s | 2.3K | 83 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330475518 |  | fs: reduce the use of module.h wherever possible  For files only using THIS_MODULE and/or EXPORT_SYMBOL, map them onto including export.h -- or if the file isn't even using those, then just delete the include.  Fix up any implicit include dependencies that were being masked by module.h along the way.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | stat.c | s | 11K | 396 | Linus Torvalds | torvalds@linux-foundation.org | 1337820159 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace  Pull user namespace enhancements from Eric Biederman:  "This is a course correction for the user namespace, so that we can   reach an inexpensive, maintainable, and reasonably complete   implementation.    Highlights:    - Config guards make it impossible to enable the user namespace and      code that has not been converted to be user namespace safe.     - Use of the new kuid_t type ensures the if you somehow get past the      config guards the kernel will encounter type errors if you enable      user namespaces and attempt to compile in code whose permission      checks have not been updated to be user namespace safe.     - All uids from child user namespaces are mapped into the initial      user namespace before they are processed.  Removing the need to add      an additional check to see if the user namespace of the compared      uids remains the same.     - With the user namespaces compiled out the performance is as good or      better than it is today.     - For most operations absolutely nothing changes performance or      operationally with the user namespace enabled.     - The worst case performance I could come up with was timing 1      billion cache cold stat operations with the user namespace code      enabled.  This went from 156s to 164s on my laptop (or 156ns to      164ns per stat operation).     - (uid_t)-1 and (gid_t)-1 are reserved as an internal error value.      Most uid/gid setting system calls treat these value specially      anyway so attempting to use -1 as a uid would likely cause      entertaining failures in userspace.     - If setuid is called with a uid that can not be mapped setuid fails.      I have looked at sendmail, login, ssh and every other program I      could think of that would call setuid and they all check for and      handle the case where setuid fails.     - If stat or a similar system call is called from a context in which      we can not map a uid we lie and return overflowuid.  The LFS      experience suggests not lying and returning an error code might be      better, but the historical precedent with uids is different and I      can not think of anything that would break by lying about a uid we      can't map.     - Capabilities are localized to the current user namespace making it      safe to give the initial user in a user namespace all capabilities.    My git tree covers all of the modifications needed to convert the core   kernel and enough changes to make a system bootable to runlevel 1."  Fix up trivial conflicts due to nearby independent changes in fs/stat.c  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace: (46 commits)   userns:  Silence silly gcc warning.   cred: use correct cred accessor with regards to rcu read lock   userns: Convert the move_pages, and migrate_pages permission checks to use uid_eq   userns: Convert cgroup permission checks to use uid_eq   userns: Convert tmpfs to use kuid and kgid where appropriate   userns: Convert sysfs to use kgid/kuid where appropriate   userns: Convert sysctl permission checks to use kuid and kgids.   userns: Convert proc to use kuid/kgid where appropriate   userns: Convert ext4 to user kuid/kgid where appropriate   userns: Convert ext3 to use kuid/kgid where appropriate   userns: Convert ext2 to use kuid/kgid where appropriate.   userns: Convert devpts to use kuid/kgid where appropriate   userns: Convert binary formats to use kuid/kgid where appropriate   userns: Add negative depends on entries to avoid building code that is userns unsafe   userns: signal remove unnecessary map_cred_ns   userns: Teach inode_capable to understand inodes whose uids map to other namespaces.   userns: Fail exec for suid and sgid binaries with ids outside our user namespace.   userns: Convert stat to return values mapped from kuids and kgids   userns: Convert user specfied uids and gids in chown into kuids and kgid   userns: Use uid_eq gid_eq helpers when comparing kuids and kgids in the vfs   ...
d | ocfs2 |  | 81 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338348520 |  | ocfs: simplify symlink handling  seeing that "fast" symlinks still get allocation + copy, we might as well simply switch them to pagecache-based variant of ->follow_link(); just need an appropriate ->readpage() for them...  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | qnx4 |  | 8 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293392 |  | qnx4: new helper - try_extent()  checking if an extent is the one we are looking for is done twice in qnx4_block_map(); gather that code into a helper function.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | no-block.c | s | 688B | 20 | Arnd Bergmann | arnd@arndb.de | 1287150807 |  | llseek: automatically add .llseek fop  All file_operations should get a .llseek operation so we can make nonseekable_open the default for future file operations without a .llseek pointer.  The three cases that we can automatically detect are no_llseek, seq_lseek and default_llseek. For cases where we can we can automatically prove that the file offset is always ignored, we use noop_llseek, which maintains the current behavior of not returning an error from a seek.  New drivers should normally not use noop_llseek but instead use no_llseek and call nonseekable_open at open time.  Existing drivers can be converted to do the same when the maintainer knows for certain that no user code relies on calling seek on the device file.  The generated code is often incorrectly indented and right now contains comments that clarify for each added line why a specific variant was chosen. In the version that gets submitted upstream, the comments will be gone and I will manually fix the indentation, because there does not seem to be a way to do that using coccinelle.  Some amount of new code is currently sitting in linux-next that should get the same modifications, which I will do at the end of the merge window.  Many thanks to Julia Lawall for helping me learn to write a semantic patch that does all this.  ===== begin semantic patch ===== // This adds an llseek= method to all file operations, // as a preparation for making no_llseek the default. // // The rules are // - use no_llseek explicitly if we do nonseekable_open // - use seq_lseek for sequential files // - use default_llseek if we know we access f_pos // - use noop_llseek if we know we don't access f_pos, //   but we still want to allow users to call lseek // @ open1 exists @ identifier nested_open; @@ nested_open(...) { <+... nonseekable_open(...) ...+> }  @ open exists@ identifier open_f; identifier i, f; identifier open1.nested_open; @@ int open_f(struct inode *i, struct file *f) { <+... ( nonseekable_open(...) || nested_open(...) ) ...+> }  @ read disable optional_qualifier exists @ identifier read_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; expression E; identifier func; @@ ssize_t read_f(struct file *f, char *p, size_t s, loff_t *off) { <+... (    *off = E ||    *off += E ||    func(..., off, ...) ||    E = *off ) ...+> }  @ read_no_fpos disable optional_qualifier exists @ identifier read_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; @@ ssize_t read_f(struct file *f, char *p, size_t s, loff_t *off) { ... when != off }  @ write @ identifier write_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; expression E; identifier func; @@ ssize_t write_f(struct file *f, const char *p, size_t s, loff_t *off) { <+... (   *off = E ||   *off += E ||   func(..., off, ...) ||   E = *off ) ...+> }  @ write_no_fpos @ identifier write_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; @@ ssize_t write_f(struct file *f, const char *p, size_t s, loff_t *off) { ... when != off }  @ fops0 @ identifier fops; @@ struct file_operations fops = {  ... };  @ has_llseek depends on fops0 @ identifier fops0.fops; identifier llseek_f; @@ struct file_operations fops = { ...  .llseek = llseek_f, ... };  @ has_read depends on fops0 @ identifier fops0.fops; identifier read_f; @@ struct file_operations fops = { ...  .read = read_f, ... };  @ has_write depends on fops0 @ identifier fops0.fops; identifier write_f; @@ struct file_operations fops = { ...  .write = write_f, ... };  @ has_open depends on fops0 @ identifier fops0.fops; identifier open_f; @@ struct file_operations fops = { ...  .open = open_f, ... };  // use no_llseek if we call nonseekable_open //////////////////////////////////////////// @ nonseekable1 depends on !has_llseek && has_open @ identifier fops0.fops; identifier nso ~= "nonseekable_open"; @@ struct file_operations fops = { ...  .open = nso, ... +.llseek = no_llseek, /* nonseekable */ };  @ nonseekable2 depends on !has_llseek @ identifier fops0.fops; identifier open.open_f; @@ struct file_operations fops = { ...  .open = open_f, ... +.llseek = no_llseek, /* open uses nonseekable */ };  // use seq_lseek for sequential files ///////////////////////////////////// @ seq depends on !has_llseek @ identifier fops0.fops; identifier sr ~= "seq_read"; @@ struct file_operations fops = { ...  .read = sr, ... +.llseek = seq_lseek, /* we have seq_read */ };  // use default_llseek if there is a readdir /////////////////////////////////////////// @ fops1 depends on !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier readdir_e; @@ // any other fop is used that changes pos struct file_operations fops = { ... .readdir = readdir_e, ... +.llseek = default_llseek, /* readdir is present */ };  // use default_llseek if at least one of read/write touches f_pos ///////////////////////////////////////////////////////////////// @ fops2 depends on !fops1 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read.read_f; @@ // read fops use offset struct file_operations fops = { ... .read = read_f, ... +.llseek = default_llseek, /* read accesses f_pos */ };  @ fops3 depends on !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier write.write_f; @@ // write fops use offset struct file_operations fops = { ... .write = write_f, ... +	.llseek = default_llseek, /* write accesses f_pos */ };  // Use noop_llseek if neither read nor write accesses f_pos ///////////////////////////////////////////////////////////  @ fops4 depends on !fops1 && !fops2 && !fops3 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read_no_fpos.read_f; identifier write_no_fpos.write_f; @@ // write fops use offset struct file_operations fops = { ...  .write = write_f,  .read = read_f, ... +.llseek = noop_llseek, /* read and write both use no f_pos */ };  @ depends on has_write && !has_read && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier write_no_fpos.write_f; @@ struct file_operations fops = { ... .write = write_f, ... +.llseek = noop_llseek, /* write uses no f_pos */ };  @ depends on has_read && !has_write && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read_no_fpos.read_f; @@ struct file_operations fops = { ... .read = read_f, ... +.llseek = noop_llseek, /* read uses no f_pos */ };  @ depends on !has_read && !has_write && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; @@ struct file_operations fops = { ... +.llseek = noop_llseek, /* no read or write fn */ }; ===== End semantic patch =====  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Cc: Julia Lawall <julia@diku.dk> Cc: Christoph Hellwig <hch@infradead.org>
d | ceph |  | 21 items |  | Yan, Zheng | zheng.z.yan@intel.com | 1340196228 |  | ceph: check PG_Private flag before accessing page->private  I got lots of NULL pointer dereference Oops when compiling kernel on ceph. The bug is because the kernel page migration routine replaces some pages in the page cache with new pages, these new pages' private can be non-zero.  Signed-off-by: Zheng Yan <zheng.z.yan@intel.com> Signed-off-by: Sage Weil <sage@inktank.com> (cherry picked from commit 28c0254ede13ab575d2df5c6585ed3d4817c3e6b)
d | gfs2 |  | 46 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338348513 |  | ->encode_fh() API change  pass inode + parent's inode or NULL instead of dentry + bool saying whether we want the parent or not.  NOTE: that needs ceph fix folded in.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | binfmt_elf_fdpic.c | s | 48K | 1575 | Linus Torvalds | torvalds@linux-foundation.org | 1337820159 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace  Pull user namespace enhancements from Eric Biederman:  "This is a course correction for the user namespace, so that we can   reach an inexpensive, maintainable, and reasonably complete   implementation.    Highlights:    - Config guards make it impossible to enable the user namespace and      code that has not been converted to be user namespace safe.     - Use of the new kuid_t type ensures the if you somehow get past the      config guards the kernel will encounter type errors if you enable      user namespaces and attempt to compile in code whose permission      checks have not been updated to be user namespace safe.     - All uids from child user namespaces are mapped into the initial      user namespace before they are processed.  Removing the need to add      an additional check to see if the user namespace of the compared      uids remains the same.     - With the user namespaces compiled out the performance is as good or      better than it is today.     - For most operations absolutely nothing changes performance or      operationally with the user namespace enabled.     - The worst case performance I could come up with was timing 1      billion cache cold stat operations with the user namespace code      enabled.  This went from 156s to 164s on my laptop (or 156ns to      164ns per stat operation).     - (uid_t)-1 and (gid_t)-1 are reserved as an internal error value.      Most uid/gid setting system calls treat these value specially      anyway so attempting to use -1 as a uid would likely cause      entertaining failures in userspace.     - If setuid is called with a uid that can not be mapped setuid fails.      I have looked at sendmail, login, ssh and every other program I      could think of that would call setuid and they all check for and      handle the case where setuid fails.     - If stat or a similar system call is called from a context in which      we can not map a uid we lie and return overflowuid.  The LFS      experience suggests not lying and returning an error code might be      better, but the historical precedent with uids is different and I      can not think of anything that would break by lying about a uid we      can't map.     - Capabilities are localized to the current user namespace making it      safe to give the initial user in a user namespace all capabilities.    My git tree covers all of the modifications needed to convert the core   kernel and enough changes to make a system bootable to runlevel 1."  Fix up trivial conflicts due to nearby independent changes in fs/stat.c  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace: (46 commits)   userns:  Silence silly gcc warning.   cred: use correct cred accessor with regards to rcu read lock   userns: Convert the move_pages, and migrate_pages permission checks to use uid_eq   userns: Convert cgroup permission checks to use uid_eq   userns: Convert tmpfs to use kuid and kgid where appropriate   userns: Convert sysfs to use kgid/kuid where appropriate   userns: Convert sysctl permission checks to use kuid and kgids.   userns: Convert proc to use kuid/kgid where appropriate   userns: Convert ext4 to user kuid/kgid where appropriate   userns: Convert ext3 to use kuid/kgid where appropriate   userns: Convert ext2 to use kuid/kgid where appropriate.   userns: Convert devpts to use kuid/kgid where appropriate   userns: Convert binary formats to use kuid/kgid where appropriate   userns: Add negative depends on entries to avoid building code that is userns unsafe   userns: signal remove unnecessary map_cred_ns   userns: Teach inode_capable to understand inodes whose uids map to other namespaces.   userns: Fail exec for suid and sgid binaries with ids outside our user namespace.   userns: Convert stat to return values mapped from kuids and kgids   userns: Convert user specfied uids and gids in chown into kuids and kgid   userns: Use uid_eq gid_eq helpers when comparing kuids and kgids in the vfs   ...
f | utimes.c | s | 5.7K | 190 | Al Viro | viro@zeniv.linux.org.uk | 1338348512 |  | switch utimes() to fget_light/fput_light  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | lockd |  | 17 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1338564778 |  | Merge branch 'for-3.5' of git://linux-nfs.org/~bfields/linux  Pull the rest of the nfsd commits from Bruce Fields:  "... and then I cherry-picked the remainder of the patches from the   head of my previous branch"  This is the rest of the original nfsd branch, rebased without the delegation stuff that I thought really needed to be redone.  I don't like rebasing things like this in general, but in this situation this was the lesser of two evils.  * 'for-3.5' of git://linux-nfs.org/~bfields/linux: (50 commits)   nfsd4: fix, consolidate client_has_state   nfsd4: don't remove rebooted client record until confirmation   nfsd4: remove some dprintk's and a comment   nfsd4: return "real" sequence id in confirmed case   nfsd4: fix exchange_id to return confirm flag   nfsd4: clarify that renewing expired client is a bug   nfsd4: simpler ordering of setclientid_confirm checks   nfsd4: setclientid: remove pointless assignment   nfsd4: fix error return in non-matching-creds case   nfsd4: fix setclientid_confirm same_cred check   nfsd4: merge 3 setclientid cases to 2   nfsd4: pull out common code from setclientid cases   nfsd4: merge last two setclientid cases   nfsd4: setclientid/confirm comment cleanup   nfsd4: setclientid remove unnecessary terms from a logical expression   nfsd4: move rq_flavor into svc_cred   nfsd4: stricter cred comparison for setclientid/exchange_id   nfsd4: move principal name into svc_cred   nfsd4: allow removing clients not holding state   nfsd4: rearrange exchange_id logic to simplify   ...
d | logfs |  | 15 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
f | file.c | s | 11K | 419 | Linus Torvalds | torvalds@linux-foundation.org | 1333069943 |  | Merge branch 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x32 support for x86-64 from Ingo Molnar:  "This tree introduces the X32 binary format and execution mode for x86:   32-bit data space binaries using 64-bit instructions and 64-bit kernel   syscalls.    This allows applications whose working set fits into a 32 bits address   space to make use of 64-bit instructions while using a 32-bit address   space with shorter pointers, more compressed data structures, etc."  Fix up trivial context conflicts in arch/x86/{Kconfig,vdso/vma.c}  * 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (71 commits)   x32: Fix alignment fail in struct compat_siginfo   x32: Fix stupid ia32/x32 inversion in the siginfo format   x32: Add ptrace for x32   x32: Switch to a 64-bit clock_t   x32: Provide separate is_ia32_task() and is_x32_task() predicates   x86, mtrr: Use explicit sizing and padding for the 64-bit ioctls   x86/x32: Fix the binutils auto-detect   x32: Warn and disable rather than error if binutils too old   x32: Only clear TIF_X32 flag once   x32: Make sure TS_COMPAT is cleared for x32 tasks   fs: Remove missed ->fds_bits from cessation use of fd_set structs internally   fs: Fix close_on_exec pointer in alloc_fdtable   x32: Drop non-__vdso weak symbols from the x32 VDSO   x32: Fix coding style violations in the x32 VDSO code   x32: Add x32 VDSO support   x32: Allow x32 to be configured   x32: If configured, add x32 system calls to system call tables   x32: Handle process creation   x32: Signal-related system calls   x86: Add #ifdef CONFIG_COMPAT to <asm/sys_ia32.h>   ...
f | binfmt_em86.c | s | 2.8K | 96 | Al Viro | viro@zeniv.linux.org.uk | 1332293386 |  | __register_binfmt() made void  Just don't pass NULL to it - nobody does, anyway.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | exec.c | s | 53K | 1983 | Konstantin Khlebnikov | khlebnikov@openvz.org | 1340228376 |  | mm: correctly synchronize rss-counters at exit/exec  do_exit() and exec_mmap() call sync_mm_rss() before mm_release() does put_user(clear_child_tid) which can update task->rss_stat and thus make mm->rss_stat inconsistent.  This triggers the "BUG:" printk in check_mm().  Let's fix this bug in the safest way, and optimize/cleanup this later.  Reported-by: Markus Trippelsdorf <markus@trippelsdorf.de> Signed-off-by: Konstantin Khlebnikov <khlebnikov@openvz.org> Cc: Oleg Nesterov <oleg@redhat.com> Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Hugh Dickins <hughd@google.com> Cc: <stable@vger.kernel.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | openpromfs |  | 2 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293375 |  | switch open-coded instances of d_make_root() to new helper  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | fscache |  | 15 items |  | Jan Beulich | JBeulich@novell.com | 1311271156 |  | FS-Cache: Fix __fscache_uncache_all_inode_pages()'s outer loop  The compiler, at least for ix86 and m68k, validly warns that the comparison:  	next <= (loff_t)-1  is always true (and it's always true also for x86-64 and probably all other arches - as long as pgoff_t isn't wider than loff_t).  The intention appears to be to avoid wrapping of "next", so rather than eliminating the pointless comparison, fix the loop to indeed get exited when "next" would otherwise wrap.  On m68k the following warning is observed:    fs/fscache/page.c: In function '__fscache_uncache_all_inode_pages':   fs/fscache/page.c:979: warning: comparison is always false due to limited range of data type  Reported-by: Geert Uytterhoeven <geert@linux-m68k.org> Reported-by: Jan Beulich <jbeulich@novell.com> Signed-off-by: Jan Beulich <jbeulich@novell.com> Signed-off-by: David Howells <dhowells@redhat.com> Cc: Suresh Jayaraman <sjayaraman@suse.de> Cc: Geert Uytterhoeven <geert@linux-m68k.org> Cc: stable@kernel.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | binfmt_script.c | s | 2.8K | 108 | Al Viro | viro@zeniv.linux.org.uk | 1332293386 |  | __register_binfmt() made void  Just don't pass NULL to it - nobody does, anyway.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | udf |  | 23 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1340909025 |  | Merge branch 'for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jack/linux-fs  Pull UDF fixes from Jan Kara:  "Make UDF more robust in presence of corrupted filesystem"  * 'for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jack/linux-fs:   udf: Fortify loading of sparing table   udf: Avoid run away loop when partition table length is corrupted   udf: Use 'ret' instead of abusing 'i' in udf_load_logicalvol()
f | bio-integrity.c | s | 21K | 680 | Cong Wang | amwang@redhat.com | 1332251301 |  | fs: remove the second argument of k[un]map_atomic()  Acked-by: Benjamin LaHaise <bcrl@kvack.org> Signed-off-by: Cong Wang <amwang@redhat.com>
d | adfs |  | 12 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293375 |  | switch open-coded instances of d_make_root() to new helper  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | char_dev.c | s | 13K | 505 | Greg Kroah-Hartman | gregkh@suse.de | 1323803897 |  | char_dev.c: fix up some whitespace errors  Remove some minor whitespace errors (2 trailing spaces, and one space needed for a comma) to make the file checkpatch.pl clean with the exception of the exports, which is fine for now.  Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
d | afs |  | 30 items |  | Jan Kara | jack@suse.cz | 1336283021 |  | vfs: Rename end_writeback() to clear_inode()  After we moved inode_sync_wait() from end_writeback() it doesn't make sense to call the function end_writeback() anymore. Rename it to clear_inode() which well says what the function really does - set I_CLEAR flag.  Signed-off-by: Jan Kara <jack@suse.cz> Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
d | cachefiles |  | 13 items |  | Al Viro | viro@zeniv.linux.org.uk | 1332293381 |  | switch touch_atime to struct path  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
