f | dir.c | s | 17K | 612 | Darrick J. Wong | djwong@us.ibm.com | 1335739270 |  | ext4: calculate and verify checksums of directory leaf blocks  Calculate and verify the checksums for directory leaf blocks (i.e. blocks that only contain actual directory entries).  The checksum lives in what looks to be an unused directory entry with a 0 name_len at the end of the block.  This scheme is not used for internal htree nodes because the mechanism in place there only costs one dx_entry, whereas the "empty" directory entry would cost two dx_entries.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | mmp.c | s | 9.8K | 328 | Darrick J. Wong | djwong@us.ibm.com | 1335739630 |  | ext4: add checksums to the MMP block  Compute and verify a checksum for the MMP block.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | indirect.c | s | 44K | 1379 | Paul Gortmaker | paul.gortmaker@windriver.com | 1326113530 |  | ext2/3/4: delete unneeded includes of module.h  Delete any instances of include module.h that were not strictly required.  In the case of ext2, the declaration of MODULE_LICENSE etc. were in inode.c but the module_init/exit were in super.c, so relocate the MODULE_LICENCE/AUTHOR block to super.c which makes it consistent with ext3 and ext4 at the same time.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Jan Kara <jack@suse.cz>
f | ext4_jbd2.c | s | 4.2K | 142 | Darrick J. Wong | djwong@us.ibm.com | 1335738550 |  | ext4: calculate and verify superblock checksum  Calculate and verify the superblock checksum.  Since the UUID and block group number are embedded in each copy of the superblock, we need only checksum the entire block.  Refactor some of the code to eliminate open-coding of the checksum update call.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | balloc.c | s | 22K | 705 | Theodore Ts'o | tytso@mit.edu | 1339109766 |  | ext4: fix the free blocks calculation for ext3 file systems w/ uninit_bg  Ext3 filesystems that are converted to use as many ext4 file system features as possible will enable uninit_bg to speed up e2fsck times. These file systems will have a native ext3 layout of inode tables and block allocation bitmaps (as opposed to ext4's flex_bg layout). Unfortunately, in these cases, when first allocating a block in an uninitialized block group, ext4 would incorrectly calculate the number of free blocks in that block group, and then errorneously report that the file system was corrupt:  EXT4-fs error (device vdd): ext4_mb_generate_buddy:741: group 30, 32254 clusters in bitmap, 32258 in gd  This problem can be reproduced via:      mke2fs -q -t ext4 -O ^flex_bg /dev/vdd 5g     mount -t ext4 /dev/vdd /mnt     fallocate -l 4600m /mnt/test  The problem was caused by a bone headed mistake in the check to see if a particular metadata block was part of the block group.  Many thanks to Kees Cook for finding and bisecting the buggy commit which introduced this bug (commit fd034a84e1, present since v3.2).  Reported-by: Sander Eikelenboom <linux@eikelenboom.it> Reported-by: Kees Cook <keescook@chromium.org> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu> Tested-by: Kees Cook <keescook@chromium.org> Cc: stable@kernel.org
f | resize.c | s | 50K | 1517 | Theodore Ts'o | tytso@mit.edu | 1338241672 |  | ext4: remove redundundant "(char *) bh->b_data" casts  The b_data field of the buffer_head is already a char *, so there's no point casting it to a char *.  Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | ext4_jbd2.h | s | 13K | 340 | Darrick J. Wong | djwong@us.ibm.com | 1335738550 |  | ext4: calculate and verify superblock checksum  Calculate and verify the superblock checksum.  Since the UUID and block group number are embedded in each copy of the superblock, we need only checksum the entire block.  Refactor some of the code to eliminate open-coding of the checksum update call.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | Makefile | g | 483B |  | Amir Goldstein | amir73il@users.sf.net | 1309218050 |  | ext4: move ext4_ind_* functions from inode.c to indirect.c  This patch moves functions from inode.c to indirect.c. The moved functions are ext4_ind_* functions and their helpers. Functions called from inode.c are declared extern.  Signed-off-by: Amir Goldstein <amir73il@users.sf.net> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | migrate.c | s | 14K | 543 | Eric W. Biederman | ebiederm@xmission.com | 1337119167 |  | userns: Convert ext4 to user kuid/kgid where appropriate  Acked-by: Serge Hallyn <serge.hallyn@canonical.com> Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
f | xattr.c | s | 43K | 1520 | Darrick J. Wong | djwong@us.ibm.com | 1335739390 |  | ext4: Calculate and verify checksums of extended attribute blocks  Calculate and verify the checksums of extended attribute blocks.  This only applies to separate EA blocks that are pointed to by inode->i_file_acl (i.e.  external EA blocks); the checksum lives in the EA header.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | xattr_security.c | s | 2.1K | 72 | Theodore Ts'o | tytso@mit.edu | 1326214447 |  | Merge branch 'for_linus' into for_linus_merged  Conflicts: 	fs/ext4/ioctl.c
f | xattr.h | s | 4.5K | 126 | Darrick J. Wong | djwong@us.ibm.com | 1335738190 |  | ext4: change on-disk layout to support extended metadata checksumming  Define flags and change structure definitions to allow checksumming of ext4 metadata.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | inode.c | s | 138K | 4291 | Linus Torvalds | torvalds@linux-foundation.org | 1338570735 |  | 
f | bitmap.c | s | 3.1K | 93 | Darrick J. Wong | djwong@us.ibm.com | 1335738910 |  | ext4: calculate and verify block bitmap checksum  Compute and verify the checksum of the block bitmap; this checksum is stored in the block group descriptor.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | super.c | s | 144K | 4565 | Linus Torvalds | torvalds@linux-foundation.org | 1338570735 |  | 
f | truncate.h | s | 1.2K | 36 | Theodore Ts'o | tytso@mit.edu | 1309216564 |  | ext4: move common truncate functions to header file  Move two functions that will be needed by the indirect functions to be moved to indirect.c as well as inode.c to truncate.h as inline functions, so that we can avoid having duplicate copies of the function (which can be a maintenance problem) without having to expose them as globally functions.  Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | ext4.h | s | 86K | 2218 | Linus Torvalds | torvalds@linux-foundation.org | 1338570735 |  | 
f | ext4_extents.h | s | 10K | 280 | Darrick J. Wong | djwong@us.ibm.com | 1335739030 |  | ext4: verify and calculate checksums for extent tree  blocks  Calculate and verify the checksum for each extent tree block.  The checksum is located in the space immediately after the last possible ext4_extent in the block.  The space is is typically the last 4-8 bytes in the block.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | move_extent.c | s | 40K | 1252 | Aditya Kali | adityakali@google.com | 1315610331 |  | ext4: add some tracepoints in ext4/extents.c  This patch adds some tracepoints in ext4/extents.c and updates a tracepoint in ext4/inode.c.  Tested: Built and ran the kernel and verified that these tracepoints work. Also ran xfstests.  Signed-off-by: Aditya Kali <adityakali@google.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | symlink.c | s | 1.4K | 52 | Dmitry Monakhov | dmonakhov@openvz.org | 1273989600 |  | ext4: symlink must be handled via filesystem specific operation  generic setattr implementation is no longer responsible for quota transfer so synlinks must be handled via ext4_setattr.  Signed-off-by: Dmitry Monakhov <dmonakhov@openvz.org> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | ialloc.c | s | 33K | 1072 | Linus Torvalds | torvalds@linux-foundation.org | 1338570735 |  | 
f | mballoc.h | s | 5.5K | 189 | Theodore Ts'o | tytso@mit.edu | 1329778446 |  | ext4: remove EXT4_MB_{BITMAP,BUDDY} macros  The EXT4_MB_BITMAP and EXT4_MB_BUDDY macros obfuscate more than they provide any abstraction.   So remove them.  Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | acl.h | s | 1.5K | 63 | Christoph Hellwig | hch@lst.de | 1311618623 |  | fs: take the ACL checks to common code  Replace the ->check_acl method with a ->get_acl method that simply reads an ACL from disk after having a cache miss.  This means we can replace the ACL checking boilerplate code with a single implementation in namei.c.  Signed-off-by: Christoph Hellwig <hch@lst.de> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | xattr_trusted.c | s | 1.5K | 51 | Paul Gortmaker | paul.gortmaker@windriver.com | 1326113530 |  | ext2/3/4: delete unneeded includes of module.h  Delete any instances of include module.h that were not strictly required.  In the case of ext2, the declaration of MODULE_LICENSE etc. were in inode.c but the module_init/exit were in super.c, so relocate the MODULE_LICENCE/AUTHOR block to super.c which makes it consistent with ext3 and ext4 at the same time.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Jan Kara <jack@suse.cz>
f | ioctl.c | s | 11K | 448 | Tao Ma | boyu.mt@taobao.com | 1339110259 |  | ext4: don't set i_flags in EXT4_IOC_SETFLAGS  Commit 7990696 uses the ext4_{set,clear}_inode_flags() functions to change the i_flags automatically but fails to remove the error setting of i_flags.  So we still have the problem of trashing state flags. Fix this by removing the assignment.  Signed-off-by: Tao Ma <boyu.mt@taobao.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu> Cc: stable@kernel.org
f | acl.c | s | 9.8K | 392 | Al Viro | viro@zeniv.linux.org.uk | 1312179006 |  | switch posix_acl_equiv_mode() to umode_t *  ... so that &inode->i_mode could be passed to it  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | Kconfig | g | 2.9K |  | Darrick J. Wong | djwong@us.ibm.com | 1335738430 |  | ext4: load the crc32c driver if necessary  Obtain a reference to the cryptoapi and crc32c if we mount a filesystem with metadata checksumming enabled.  Signed-off-by: Darrick J. Wong <djwong@us.ibm.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | hash.c | s | 4.4K | 186 | Fan Yong | yong.fan@whamcloud.com | 1332125080 |  | ext4: return 32/64-bit dir name hash according to usage type  Traditionally ext2/3/4 has returned a 32-bit hash value from llseek() to appease NFSv2, which can only handle a 32-bit cookie for seekdir() and telldir().  However, this causes problems if there are 32-bit hash collisions, since the NFSv2 server can get stuck resending the same entries from the directory repeatedly.  Allow ext4 to return a full 64-bit hash (both major and minor) for telldir to decrease the chance of hash collisions.  This still needs integration on the NFS side.  Patch-updated-by: Bernd Schubert <bernd.schubert@itwm.fraunhofer.de> (blame me if something is not correct)  Signed-off-by: Fan Yong <yong.fan@whamcloud.com> Signed-off-by: Andreas Dilger <adilger@whamcloud.com> Signed-off-by: Bernd Schubert <bernd.schubert@itwm.fraunhofer.de> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | page-io.c | s | 11K | 385 | Linus Torvalds | torvalds@linux-foundation.org | 1333065656 |  | Revert "ext4: don't release page refs in ext4_end_bio()"  This reverts commit b43d17f319f2c502b17139d1cf70731b2b62c644.  Dave Jones reports that it causes lockups on his laptop, and his debug output showed a lot of processes hung waiting for page_writeback (or more commonly - processes hung waiting for a lock that was held during that writeback wait).  The page_writeback hint made Ted suggest that Dave look at this commit, and Dave verified that reverting it makes his problems go away.  Ted says:  "That commit fixes a race which is seen when you write into fallocated   (and hence uninitialized) disk blocks under *very* heavy memory   pressure.  Furthermore, although theoretically it could trigger under   normal direct I/O writes, it only seems to trigger if you are issuing   a huge number of AIO writes, such that a just-written page can get   evicted from memory, and then read back into memory, before the   workqueue has a chance to update the extent tree.    This race has been around for a little over a year, and no one noticed   until two months ago; it only happens under fairly exotic conditions,   and in fact even after trying very hard to create a simple repro under   lab conditions, we could only reproduce the problem and confirm the   fix on production servers running MySQL on very fast PCIe-attached   flash devices.    Given that Dave was able to hit this problem pretty quickly, if we   confirm that this commit is at fault, the only reasonable thing to do   is to revert it IMO."  Reported-and-tested-by: Dave Jones <davej@redhat.com> Acked-by: Theodore Ts'o <tytso@mit.edu> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | namei.c | s | 81K | 2704 | Linus Torvalds | torvalds@linux-foundation.org | 1338570735 |  | 
f | fsync.c | s | 7.9K | 247 | Jeff Moyer | jmoyer@redhat.com | 1330961392 |  | ext4: fix race between sync and completed io work  The following command line will leave the aio-stress process unkillable on an ext4 file system (in my case, mounted on /mnt/test):  aio-stress -t 20 -s 10 -O -S -o 2 -I 1000 /mnt/test/aiostress.3561.4 /mnt/test/aiostress.3561.4.20 /mnt/test/aiostress.3561.4.19 /mnt/test/aiostress.3561.4.18 /mnt/test/aiostress.3561.4.17 /mnt/test/aiostress.3561.4.16 /mnt/test/aiostress.3561.4.15 /mnt/test/aiostress.3561.4.14 /mnt/test/aiostress.3561.4.13 /mnt/test/aiostress.3561.4.12 /mnt/test/aiostress.3561.4.11 /mnt/test/aiostress.3561.4.10 /mnt/test/aiostress.3561.4.9 /mnt/test/aiostress.3561.4.8 /mnt/test/aiostress.3561.4.7 /mnt/test/aiostress.3561.4.6 /mnt/test/aiostress.3561.4.5 /mnt/test/aiostress.3561.4.4 /mnt/test/aiostress.3561.4.3 /mnt/test/aiostress.3561.4.2  This is using the aio-stress program from the xfstests test suite. That particular command line tells aio-stress to do random writes to 20 files from 20 threads (one thread per file).  The files are NOT preallocated, so you will get writes to random offsets within the file, thus creating holes and extending i_size.  It also opens the file with O_DIRECT and O_SYNC.  On to the problem.  When an I/O requires unwritten extent conversion, it is queued onto the completed_io_list for the ext4 inode.  Two code paths will pull work items from this list.  The first is the ext4_end_io_work routine, and the second is ext4_flush_completed_IO, which is called via the fsync path (and O_SYNC handling, as well). There are two issues I've found in these code paths.  First, if the fsync path beats the work routine to a particular I/O, the work routine will free the io_end structure!  It does not take into account the fact that the io_end may still be in use by the fsync path.  I've fixed this issue by adding yet another IO_END flag, indicating that the io_end is being processed by the fsync path.  The second problem is that the work routine will make an assignment to io->flag outside of the lock.  I have witnessed this result in a hang at umount.  Moving the flag setting inside the lock resolved that problem.  The problem was introduced by commit b82e384c7b ("ext4: optimize locking for end_io extent conversion"), which first appeared in 3.2. As such, the fix should be backported to that release (probably along with the unwritten extent conversion race fix).  Signed-off-by: Jeff Moyer <jmoyer@redhat.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu> CC: stable@kernel.org
f | xattr_user.c | s | 1.6K | 54 | Paul Gortmaker | paul.gortmaker@windriver.com | 1326113530 |  | ext2/3/4: delete unneeded includes of module.h  Delete any instances of include module.h that were not strictly required.  In the case of ext2, the declaration of MODULE_LICENSE etc. were in inode.c but the module_init/exit were in super.c, so relocate the MODULE_LICENCE/AUTHOR block to super.c which makes it consistent with ext3 and ext4 at the same time.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Jan Kara <jack@suse.cz>
f | mballoc.c | s | 138K | 4441 | Salman Qazi | sqazi@google.com | 1338522734 |  | ext4: remove mb_groups before tearing down the buddy_cache  We can't have references held on pages in the s_buddy_cache while we are trying to truncate its pages and put the inode.  All the pages must be gone before we reach clear_inode.  This can only be gauranteed if we can prevent new users from grabbing references to s_buddy_cache's pages.  The original bug can be reproduced and the bug fix can be verified by:  while true; do mount -t ext4 /dev/ram0 /export/hda3/ram0; \ 	umount /export/hda3/ram0; done &  while true; do cat /proc/fs/ext4/ram0/mb_groups; done  Signed-off-by: Salman Qazi <sqazi@google.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu> Cc: stable@kernel.org
f | extents.c | s | 133K | 4383 | Hugh Dickins | hughd@google.com | 1338524128 |  | ext4: hole-punch use truncate_pagecache_range  When truncating a file, we unmap pages from userspace first, as that's usually more efficient than relying, page by page, on the fallback in truncate_inode_page() - particularly if the file is mapped many times.  Do the same when punching a hole: 3.4 added truncate_pagecache_range() to do the unmap and trunc, so use it in ext4_ext_punch_hole(), instead of calling truncate_inode_pages_range() directly.  Signed-off-by: Hugh Dickins <hughd@google.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | file.c | s | 7.3K | 231 | Zheng Liu | gnehzuil.liu@gmail.com | 1338242811 |  | ext4: use consistent ssize_t type in ext4_file_write()  The generic_file_aio_write() function returns ssize_t, and ext4_file_write() returns a ssize_t, so use a ssize_t to collect the return value from generic_file_aio_write().  It shouldn't matter since the VFS read/write paths shouldn't allow a read greater than MAX_INT, but there was previously a bug in the AIO code paths, and it's best if we use a consistent type so that the return value from generic_file_aio_write() can't get truncated.  Reported-by: Jouni Siren <jouni.siren@iki.fi> Reviewed-by: Jan Kara <jack@suse.cz> Signed-off-by: Zheng Liu <wenqing.lz@taobao.com> Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
f | block_validity.c | s | 6.7K | 243 | Paul Gortmaker | paul.gortmaker@windriver.com | 1326113530 |  | ext2/3/4: delete unneeded includes of module.h  Delete any instances of include module.h that were not strictly required.  In the case of ext2, the declaration of MODULE_LICENSE etc. were in inode.c but the module_init/exit were in super.c, so relocate the MODULE_LICENCE/AUTHOR block to super.c which makes it consistent with ext3 and ext4 at the same time.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: Jan Kara <jack@suse.cz>
