f | operation.c | g | 11K |  | Amerigo Wang | amwang@redhat.com | 1306337984 |  | fscache: remove dead code under CONFIG_WORKQUEUE_DEBUGFS  There is no CONFIG_WORKQUEUE_DEBUGFS any more, so this code is dead.  Signed-off-by: WANG Cong <amwang@redhat.com> Cc: David Howells <dhowells@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | internal.h | g | 12K |  | David Howells | dhowells@redhat.com | 1281631895 |  | Add a dummy printk function for the maintenance of unused printks  Add a dummy printk function for the maintenance of unused printks through gcc format checking, and also so that side-effect checking is maintained too.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Makefile | g | 379B |  | David Howells | dhowells@redhat.com | 1258654264 |  | FS-Cache: Allow the current state of all objects to be dumped  Allow the current state of all fscache objects to be dumped by doing:  	cat /proc/fs/fscache/objects  By default, all objects and all fields will be shown.  This can be restricted by adding a suitable key to one of the caller's keyrings (such as the session keyring):  	keyctl add user fscache:objlist "<restrictions>" @s  The <restrictions> are:  	K	Show hexdump of object key (don't show if not given) 	A	Show hexdump of object aux data (don't show if not given)  And paired restrictions:  	C	Show objects that have a cookie 	c	Show objects that don't have a cookie 	B	Show objects that are busy 	b	Show objects that aren't busy 	W	Show objects that have pending writes 	w	Show objects that don't have pending writes 	R	Show objects that have outstanding reads 	r	Show objects that don't have outstanding reads 	S	Show objects that have slow work queued 	s	Show objects that don't have slow work queued  If neither side of a restriction pair is given, then both are implied.  For example:  	keyctl add user fscache:objlist KB @s  shows objects that are busy, and lists their object keys, but does not dump their auxiliary data.  It also implies "CcWwRrSs", but as 'B' is given, 'b' is not implied.  Signed-off-by: David Howells <dhowells@redhat.com>
f | proc.c | g | 1.9K |  | David Howells | dhowells@redhat.com | 1258654264 |  | FS-Cache: Allow the current state of all objects to be dumped  Allow the current state of all fscache objects to be dumped by doing:  	cat /proc/fs/fscache/objects  By default, all objects and all fields will be shown.  This can be restricted by adding a suitable key to one of the caller's keyrings (such as the session keyring):  	keyctl add user fscache:objlist "<restrictions>" @s  The <restrictions> are:  	K	Show hexdump of object key (don't show if not given) 	A	Show hexdump of object aux data (don't show if not given)  And paired restrictions:  	C	Show objects that have a cookie 	c	Show objects that don't have a cookie 	B	Show objects that are busy 	b	Show objects that aren't busy 	W	Show objects that have pending writes 	w	Show objects that don't have pending writes 	R	Show objects that have outstanding reads 	r	Show objects that don't have outstanding reads 	S	Show objects that have slow work queued 	s	Show objects that don't have slow work queued  If neither side of a restriction pair is given, then both are implied.  For example:  	keyctl add user fscache:objlist KB @s  shows objects that are busy, and lists their object keys, but does not dump their auxiliary data.  It also implies "CcWwRrSs", but as 'B' is given, 'b' is not implied.  Signed-off-by: David Howells <dhowells@redhat.com>
f | object-list.c | g | 11K |  | Tejun Heo | tj@kernel.org | 1279832314 |  | fscache: convert object to use workqueue instead of slow-work  Make fscache object state transition callbacks use workqueue instead of slow-work.  New dedicated unbound CPU workqueue fscache_object_wq is created.  get/put callbacks are renamed and modified to take @object and called directly from the enqueue wrapper and the work function.  While at it, make all open coded instances of get/put to use fscache_get/put_object().  * Unbound workqueue is used.  * work_busy() output is printed instead of slow-work flags in object   debugging outputs.  They mean basically the same thing bit-for-bit.  * sysctl fscache.object_max_active added to control concurrency.  The   default value is nr_cpus clamped between 4 and   WQ_UNBOUND_MAX_ACTIVE.  * slow_work_sleep_till_thread_needed() is replaced with fscache   private implementation fscache_object_sleep_till_congested() which   waits on fscache_object_wq congestion.  * debugfs support is dropped for now.  Tracing API based debug   facility is planned to be added.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: David Howells <dhowells@redhat.com>
f | cookie.c | g | 13K |  | David Howells | dhowells@redhat.com | 1258654298 |  | FS-Cache: Add a retirement stat counter  Add a stat counter to count retirement events rather than ordinary release events (the retire argument to fscache_relinquish_cookie()).  Signed-off-by: David Howells <dhowells@redhat.com>
f | stats.c | g | 9.6K |  | David Howells | dhowells@redhat.com | 1270654685 |  | fs-cache: order the debugfs stats correctly  Order the debugfs statistics correctly.  The values displayed through a seq_printf() statement should be in the same order as the names in the format string.  In the 'Lookups' line, objects created ('crt=') and lookups timed out ('tmo=') have their values transposed.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | histogram.c | g | 2.8K |  | David Howells | dhowells@redhat.com | 1238773357 |  | FS-Cache: Add use of /proc and presentation of statistics  Make FS-Cache create its /proc interface and present various statistical information through it.  Also provide the functions for updating this information.  These features are enabled by:  	CONFIG_FSCACHE_PROC 	CONFIG_FSCACHE_STATS 	CONFIG_FSCACHE_HISTOGRAM  The /proc directory for FS-Cache is also exported so that caching modules can add their own statistics there too.  The FS-Cache module is loadable at this point, and the statistics files can be examined by userspace:  	cat /proc/fs/fscache/stats 	cat /proc/fs/fscache/histogram  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Steve Dickson <steved@redhat.com> Acked-by: Trond Myklebust <Trond.Myklebust@netapp.com> Acked-by: Al Viro <viro@zeniv.linux.org.uk> Tested-by: Daire Byrne <Daire.Byrne@framestore.com>
f | object.c | g | 25K |  | Tejun Heo | tj@kernel.org | 1279832314 |  | fscache: convert object to use workqueue instead of slow-work  Make fscache object state transition callbacks use workqueue instead of slow-work.  New dedicated unbound CPU workqueue fscache_object_wq is created.  get/put callbacks are renamed and modified to take @object and called directly from the enqueue wrapper and the work function.  While at it, make all open coded instances of get/put to use fscache_get/put_object().  * Unbound workqueue is used.  * work_busy() output is printed instead of slow-work flags in object   debugging outputs.  They mean basically the same thing bit-for-bit.  * sysctl fscache.object_max_active added to control concurrency.  The   default value is nr_cpus clamped between 4 and   WQ_UNBOUND_MAX_ACTIVE.  * slow_work_sleep_till_thread_needed() is replaced with fscache   private implementation fscache_object_sleep_till_congested() which   waits on fscache_object_wq congestion.  * debugfs support is dropped for now.  Tracing API based debug   facility is planned to be added.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: David Howells <dhowells@redhat.com>
f | cache.c | g | 10K |  | David Howells | dhowells@redhat.com | 1258654268 |  | FS-Cache: Add counters for entry/exit to/from cache operation functions  Count entries to and exits from cache operation table functions.  Maintain these as a single counter that's added to or removed from as appropriate.  Signed-off-by: David Howells <dhowells@redhat.com>
f | Kconfig | g | 2.3K |  | Tejun Heo | tj@kernel.org | 1279832338 |  | fscache: drop references to slow-work  fscache no longer uses slow-work.  Drop references to it.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: David Howells <dhowells@redhat.com>
f | netfs.c | g | 2.6K |  | David Howells | dhowells@redhat.com | 1238773358 |  | FS-Cache: Add netfs registration  Add functions to register and unregister a network filesystem or other client of the FS-Cache service.  This allocates and releases the cookie representing the top-level index for a netfs, and makes it available to the netfs.  If the FS-Cache facility is disabled, then the calls are optimised away at compile time.  Note that whilst this patch may appear to work with FS-Cache enabled and a netfs attempting to use it, it will leak the cookie it allocates for the netfs as fscache_relinquish_cookie() is implemented in a later patch.  This will cause the slab code to emit a warning when the module is removed.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Steve Dickson <steved@redhat.com> Acked-by: Trond Myklebust <Trond.Myklebust@netapp.com> Acked-by: Al Viro <viro@zeniv.linux.org.uk> Tested-by: Daire Byrne <Daire.Byrne@framestore.com>
f | page.c | g | 25K |  | Jan Beulich | JBeulich@novell.com | 1311271156 |  | FS-Cache: Fix __fscache_uncache_all_inode_pages()'s outer loop  The compiler, at least for ix86 and m68k, validly warns that the comparison:  	next <= (loff_t)-1  is always true (and it's always true also for x86-64 and probably all other arches - as long as pgoff_t isn't wider than loff_t).  The intention appears to be to avoid wrapping of "next", so rather than eliminating the pointless comparison, fix the loop to indeed get exited when "next" would otherwise wrap.  On m68k the following warning is observed:    fs/fscache/page.c: In function '__fscache_uncache_all_inode_pages':   fs/fscache/page.c:979: warning: comparison is always false due to limited range of data type  Reported-by: Geert Uytterhoeven <geert@linux-m68k.org> Reported-by: Jan Beulich <jbeulich@novell.com> Signed-off-by: Jan Beulich <jbeulich@novell.com> Signed-off-by: David Howells <dhowells@redhat.com> Cc: Suresh Jayaraman <sjayaraman@suse.de> Cc: Geert Uytterhoeven <geert@linux-m68k.org> Cc: stable@kernel.org Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | main.c | g | 5.2K |  | Tejun Heo | tj@kernel.org | 1279962609 |  | fscache: fix build on !CONFIG_SYSCTL  Commit 8b8edefa (fscache: convert object to use workqueue instead of slow-work) made fscache_exit() call unregister_sysctl_table() unconditionally breaking build when sysctl is disabled.  Fix it by putting it inside CONFIG_SYSCTL.  Signed-off-by: Tejun Heo <tj@kernel.org> Reported-by: Randy Dunlap <randy.dunlap@oracle.com> Cc: David Howells <dhowells@redhat.com>
f | fsdef.c | g | 4.2K |  | David Howells | dhowells@redhat.com | 1238773357 |  | FS-Cache: Root index definition  Add a description of the root index of the cache for later patches to make use of.  The root index is owned by FS-Cache itself.  When a netfs requests caching facilities, FS-Cache will, if one doesn't already exist, create an entry in the root index with the key being the name of the netfs ("AFS" for example), and the auxiliary data holding the index structure version supplied by the netfs:  				     FSDEF 				       || 				 +-----------+ 				 ||           || 				NFS         AFS 			       [v=1]       [v=1]  If an entry with the appropriate name does already exist, the version is compared.  If the version is different, the entire subtree from that entry will be discarded and a new entry created.  The new entry will be an index, and a cookie referring to it will be passed to the netfs.  This is then the root handle by which the netfs accesses the cache.  It can create whatever objects it likes in that index, including further indices.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Steve Dickson <steved@redhat.com> Acked-by: Trond Myklebust <Trond.Myklebust@netapp.com> Acked-by: Al Viro <viro@zeniv.linux.org.uk> Tested-by: Daire Byrne <Daire.Byrne@framestore.com>
