f | ram.c | s | 9.7K | 325 | Anton Vorontsov | anton.vorontsov@linaro.org | 1339631560 |  | pstore/ram: Should zap persistent zone on unlink  Otherwise, unlinked file will reappear on the next boot.  Reported-by: Kees Cook <keescook@chromium.org> Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org> Acked-by: Kees Cook <keescook@chromium.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | platform.c | s | 5.9K | 213 | Kay Sievers | kay@vrfy.org | 1339797239 |  | kmsg - kmsg_dump() use iterator to receive log buffer content  Provide an iterator to receive the log buffer content, and convert all kmsg_dump() users to it.  The structured data in the kmsg buffer now contains binary data, which should no longer be copied verbatim to the kmsg_dump() users.  The iterator should provide reliable access to the buffer data, and also supports proper log line-aware chunking of data while iterating.  Signed-off-by: Kay Sievers <kay@vrfy.org> Tested-by: Tony Luck <tony.luck@intel.com> Reported-by: Anton Vorontsov <anton.vorontsov@linaro.org> Tested-by: Anton Vorontsov <anton.vorontsov@linaro.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | internal.h | s | 272B | 6 | Luck, Tony | tony.luck@intel.com | 1313520781 |  | pstore: defer inserting OOPS entries into pstore  Life is simple for all the kernel terminating types of kmsg_dump call backs - pstore just saves the tail end of the console log. But for "oops" the situation is more complex - the kernel may carry on running (possibly for ever).  So we'd like to make the logged copy of the oops appear in the pstore filesystem - so that the user has a handle to clear the entry from the persistent backing store (if we don't, the store may fill with "oops" entries (that are also safely stashed in /var/log/messages) leaving no space for real errors.  Current code calls pstore_mkfile() immediately. But this may not be safe. The oops could have happened with arbitrary locks held, or in interrupt or NMI context. So allocating memory and calling into generic filesystem code seems unwise.  This patch defers making the entry appear. At the time of the oops, we merely set a flag "pstore_new_entry" noting that a new entry has been added. A periodic timer checks once a minute to see if the flag is set - if so, it schedules a work queue to rescan the backing store and make all new entries appear in the pstore filesystem.  Signed-off-by: Tony Luck <tony.luck@intel.com>
f | Makefile | g | 174B |  | Anton Vorontsov | anton.vorontsov@linaro.org | 1337269800 |  | staging: android: persistent_ram: Move to fs/pstore/ram_core.c  This is a first step for adding ECC support for pstore RAM backend: we will use the persistent_ram routines, kindly provided by Google.  Basically, persistent_ram is a set of helper routines to deal with the [optionally] ECC-protected persistent ram regions.  A bit of Makefile, Kconfig and header files adjustments were needed because of the move.  Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org> Acked-by: Kees Cook <keescook@chromium.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | ram_core.c | s | 12K | 445 | Anton Vorontsov | anton.vorontsov@linaro.org | 1339631560 |  | pstore/ram_core: Factor persistent_ram_zap() out of post_init()  A handy function that we will use outside of ram_core soon. But so far just factor it out and start using it in post_init().  Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org> Acked-by: Kees Cook <keescook@chromium.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | inode.c | s | 7.0K | 264 | Anton Vorontsov | anton.vorontsov@linaro.org | 1339631560 |  | pstore/inode: Make pstore_fill_super() static  There's no reason to extern it. The patch fixes the annoying sparse warning:  CHECK   fs/pstore/inode.c fs/pstore/inode.c:264:5: warning: symbol 'pstore_fill_super' was not declared. Should it be static?  Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org> Acked-by: Kees Cook <keescook@chromium.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | Kconfig | g | 1017B |  | Anton Vorontsov | anton.vorontsov@linaro.org | 1337269800 |  | staging: android: persistent_ram: Move to fs/pstore/ram_core.c  This is a first step for adding ECC support for pstore RAM backend: we will use the persistent_ram routines, kindly provided by Google.  Basically, persistent_ram is a set of helper routines to deal with the [optionally] ECC-protected persistent ram regions.  A bit of Makefile, Kconfig and header files adjustments were needed because of the move.  Signed-off-by: Anton Vorontsov <anton.vorontsov@linaro.org> Acked-by: Kees Cook <keescook@chromium.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
