f | clntlock.c | s | 7.0K | 247 | Stanislav Kinsbursky | skinsbursky@parallels.com | 1334181306 |  | Lockd: pass network namespace to creation and destruction routines  v2: dereference of most probably already released nlm_host removed in nlmclnt_done() and reclaimer().  These routines are called from locks reclaimer() kernel thread. This thread works in "init_net" network context and currently relays on persence on lockd thread and it's per-net resources. Thus lockd_up() and lockd_down() can't relay on current network context. So let's pass corrent one into them.  Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com> Signed-off-by: J. Bruce Fields <bfields@redhat.com>
f | clnt4xdr.c | s | 13K | 532 | Al Viro | viro@zeniv.linux.org.uk | 1334339452 |  | lockd: fix the endianness bug  comparing be32 values for < is not doing the right thing...  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | host.c | s | 16K | 563 | Stanislav Kinsbursky | skinsbursky@parallels.com | 1329283188 |  | Lockd: shutdown NLM hosts in network namespace context  Lockd now managed in network namespace context. And this patch introduces network namespace related NLM hosts shutdown in case of releasing per-net Lockd resources.  Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | Makefile | g | 313B |  | Chuck Lever | chuck.lever@oracle.com | 1292521043 |  | lockd: Introduce new-style XDR functions for NLMv4  We'd like to prevent local buffer overflows caused by malicious or broken servers.  New xdr_stream style decoders can do that.  For efficiency, we also want to be able to pass xdr_streams from call_encode() to all XDR encoding functions, rather than building an xdr_stream in every XDR encoding function in the kernel.  Same idea as the NLM v3 XDR overhaul.  Signed-off-by: Chuck Lever <chuck.lever@oracle.com> Tested-by: J. Bruce Fields <bfields@redhat.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | svc.c | s | 15K | 592 | Stanislav Kinsbursky | skinsbursky@parallels.com | 1338510584 |  | LockD: add debug message to start and stop functions  Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com> Signed-off-by: J. Bruce Fields <bfields@redhat.com>
f | svcsubs.c | s | 9.9K | 386 | Al Viro | viro@zeniv.linux.org.uk | 1325909813 |  | vfs: prefer ->dentry->d_sb to ->mnt->mnt_sb  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | clntproc.c | s | 21K | 762 | Vasily Averin | vvs@sw.ru | 1310492426 |  | lockd: properly convert be32 values in debug messages  lockd: server returns status 50331648 it's quite hard to understand that number in this message is 3 in big endian  Signed-off-by: Vasily Averin <vvs@sw.ru> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | svcproc.c | s | 14K | 457 | Chuck Lever | chuck.lever@oracle.com | 1292521046 |  | lockd: Clean up nlmsvc_lookup_host()  Clean up.  Change nlmsvc_lookup_host() to be purpose-built for server-side nlm_host management.  This replaces the generic nlm_lookup_host() helper function, just like on the client side.  The lookup logic is specialized for server host lookups.  The server side cache also gets its own specialized equivalent of the nlm_release_host() function.  Signed-off-by: Chuck Lever <chuck.lever@oracle.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | clntxdr.c | s | 13K | 549 | Al Viro | viro@zeniv.linux.org.uk | 1334339452 |  | lockd: fix the endianness bug  comparing be32 values for < is not doing the right thing...  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | xdr.c | s | 7.2K | 292 | Chuck Lever | chuck.lever@oracle.com | 1292521044 |  | lockd: Move nlmdbg_cookie2a() to svclock.c  Clean up.  nlmdbg_cookie2a() is used only in svclock.c.  Signed-off-by: Chuck Lever <chuck.lever@oracle.com> Tested-by: J. Bruce Fields <bfields@redhat.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | svclock.c | s | 25K | 852 | Trond Myklebust | Trond.Myklebust@netapp.com | 1332336704 |  | SUNRPC/LOCKD: Fix build warnings when CONFIG_SUNRPC_DEBUG is undefined  Stephen Rothwell reports: net/sunrpc/rpcb_clnt.c: In function 'rpcb_enc_mapping': net/sunrpc/rpcb_clnt.c:820:19: warning: unused variable 'task' [-Wunused-variable] net/sunrpc/rpcb_clnt.c: In function 'rpcb_dec_getport': net/sunrpc/rpcb_clnt.c:837:19: warning: unused variable 'task' [-Wunused-variable] net/sunrpc/rpcb_clnt.c: In function 'rpcb_dec_set': net/sunrpc/rpcb_clnt.c:860:19: warning: unused variable 'task' [-Wunused-variable] net/sunrpc/rpcb_clnt.c: In function 'rpcb_enc_getaddr': net/sunrpc/rpcb_clnt.c:892:19: warning: unused variable 'task' [-Wunused-variable] net/sunrpc/rpcb_clnt.c: In function 'rpcb_dec_getaddr': net/sunrpc/rpcb_clnt.c:914:19: warning: unused variable 'task' [-Wunused-variable] fs/lockd/svclock.c:49:20: warning: 'nlmdbg_cookie2a' declared 'static' but never defined [-Wunused-function]  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | svc4proc.c | s | 13K | 420 | Chuck Lever | chuck.lever@oracle.com | 1292521046 |  | lockd: Clean up nlmsvc_lookup_host()  Clean up.  Change nlmsvc_lookup_host() to be purpose-built for server-side nlm_host management.  This replaces the generic nlm_lookup_host() helper function, just like on the client side.  The lookup logic is specialized for server host lookups.  The server side cache also gets its own specialized equivalent of the nlm_release_host() function.  Signed-off-by: Chuck Lever <chuck.lever@oracle.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | mon.c | s | 13K | 480 | Stanislav Kinsbursky | skinsbursky@parallels.com | 1329283188 |  | LockD: make NSM network namespace aware  NLM host is network namespace aware now. So NSM have to take it into account.  Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | xdr4.c | s | 7.3K | 286 | Chuck Lever | chuck.lever@oracle.com | 1292521043 |  | lockd: Introduce new-style XDR functions for NLMv4  We'd like to prevent local buffer overflows caused by malicious or broken servers.  New xdr_stream style decoders can do that.  For efficiency, we also want to be able to pass xdr_streams from call_encode() to all XDR encoding functions, rather than building an xdr_stream in every XDR encoding function in the kernel.  Same idea as the NLM v3 XDR overhaul.  Signed-off-by: Chuck Lever <chuck.lever@oracle.com> Tested-by: J. Bruce Fields <bfields@redhat.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | svcshare.c | s | 2.4K | 92 | Harvey Harrison | harvey.harrison@gmail.com | 1208981619 |  | lockd: fix sparse warning in svcshare.c  fs/lockd/svcshare.c:74:50: warning: Using plain integer as NULL pointer  Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com> Cc: Neil Brown <neilb@suse.de> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
f | netns.h | s | 169B | 8 | Stanislav Kinsbursky | skinsbursky@parallels.com | 1329283187 |  | Lockd: pernet usage counter introduced  Lockd is going to be shared between network namespaces - i.e. going to be able to handle lock requests from different network namespaces. This means, that network namespace related resources have to be allocated not once (like now), but for every network namespace context, from which service is requested to operate. This patch implements Lockd per-net users accounting. New per-net counter is used to determine, when per-net resources have to be freed.  Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | grace.c | s | 1.6K | 54 | J. Bruce Fields | bfields@citi.umich.edu | 1223065142 |  | nfsd: common grace period control  Rewrite grace period code to unify management of grace period across lockd and nfsd.  The current code has lockd and nfsd cooperate to compute a grace period which is satisfactory to them both, and then individually enforce it.  This creates a slight race condition, since the enforcement is not coordinated.  It's also more complicated than necessary.  Here instead we have lockd and nfsd each inform common code when they enter the grace period, and when they're ready to leave the grace period, and allow normal locking only after both of them are ready to leave.  We also expect the locks_start_grace()/locks_end_grace() interface here to be simpler to build on for future cluster/high-availability work, which may require (for example) putting individual filesystems into grace, or enforcing grace periods across multiple cluster nodes.  Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
