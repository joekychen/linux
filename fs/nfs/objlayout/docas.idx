f | objio_osd.c | s | 17K | 529 | Trond Myklebust | Trond.Myklebust@netapp.com | 1336157991 |  | NFS: Fix sparse warnings  Fix the following sparse warnings:  fs/nfs/direct.c:221:6: warning: symbol 'nfs_direct_readpage_release' was not declared. Should it be static? fs/nfs/read.c:38:43: warning: non-ANSI function declaration of function 'nfs_readhdr_alloc' fs/nfs/objlayout/objio_osd.c:214:5: warning: symbol '__alloc_objio_seg' was not declared. Should it be static?  Reported-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com> Cc: Fred Isaman <iisaman@netapp.com> Cc: Boaz Harrosh <bharrosh@panasas.com>
f | objlayout.c | s | 20K | 665 | Fred Isaman | iisaman@netapp.com | 1335550237 |  | NFS: create common nfs_pgio_header for both read and write  In order to avoid duplicating all the data in nfs_read_data whenever we split it up into multiple RPC calls (either due to a short read result or due to rsize < PAGE_SIZE), we split out the bits that are the same per RPC call into a separate "header" structure.  The goal this patch moves towards is to have a single header refcounted by several rpc_data structures.  Thus, want to always refer from rpc_data to the header, and not the other way.  This patch comes close to that ideal, but the directio code currently needs some special casing, isolated in the nfs_direct_[read_write]hdr_release() functions.  This will be dealt with in a future patch.  Signed-off-by: Fred Isaman <iisaman@netapp.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | Kbuild | g | 178B |  | Boaz Harrosh | bharrosh@panasas.com | 1306691586 |  | pnfs-obj: decode layout, alloc/free lseg  objlayout_alloc_lseg prepares an xdr_stream and calls the raid engins objio_alloc_lseg() to allocate a private pnfs_layout_segment.  objio_osd.c::objio_alloc_lseg() uses passed xdr_stream to decode and store the layout_segment information in an objio_segment struct, using the pnfs_osd_xdr.h API for the actual parsing the layout xdr.  objlayout_free_lseg calls objio_free_lseg() to free the allocated space.  Signed-off-by: Boaz Harrosh <bharrosh@panasas.com> [gfp_flags] [removed "extern" from function definitions] Signed-off-by: Benny Halevy <bhalevy@panasas.com>
f | pnfs_osd_xdr_cli.c | s | 11K | 358 | Boaz Harrosh | bharrosh@panasas.com | 1312473288 |  | pnfs-obj: Fix the comp_index != 0 case  There were bugs in the case of partial layout where olo_comp_index is not zero. This used to work and was tested but one of the later cleanup SQUASHMEs broke it and was not tested since.  Also add a dprint that specify those received layout parameters. Everything else was already printed.  [Needed in v3.0] CC: Stable Tree <stable@kernel.org> Signed-off-by: Boaz Harrosh <bharrosh@panasas.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
f | objlayout.h | s | 6.0K | 163 | Sachin Bhamare | sbhamare@panasas.com | 1332336707 |  | pnfs-obj: autologin: Add support for protocol autologin  The pnfs-objects protocol mandates that we autologin into devices not present in the system, according to information specified in the get_device_info returned from the server.  The Protocol specifies two login hints. 1. An IP address:port combination 2. A string URI which is constructed as a URL with a protocol prefix    followed by :// and a string as address. For each  protocol prefix    the string-address format might be different.  We only support the second option. The first option is just redundant to the second one. NOTE: The Kernel part of autologin does not parse the URI string. It just channels it to a user-mode script. So any new login protocols should only update the user-mode script which is a part of the nfs-utils package, but the Kernel need not change.  We implement the autologin by using the call_usermodehelper() API. (Thanks to Steve Dickson <steved@redhat.com> for pointing it out) So there is no running daemon needed, and/or special setup.  We Add the osd_login_prog Kernel module parameters which defaults to: 	/sbin/osd_login  Kernel try's to upcall the program specified in osd_login_prog. If the file is not found or the execution fails Kernel will disable any farther upcalls, by zeroing out  osd_login_prog, Until Admin re-enables it by setting the osd_login_prog parameter to a proper program.  Also add text about the osd_login program command line API to: 	Documentation/filesystems/nfs/pnfs.txt and documentation of the new  osd_login_prog  module parameter to: 	Documentation/kernel-parameters.txt  TODO: Add timeout option in the case osd_login program gets               stuck  Signed-off-by: Sachin Bhamare <sbhamare@panasas.com> Signed-off-by: Boaz Harrosh <bharrosh@panasas.com> Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
