f | member.c | s | 16K | 574 | David Teigland | teigland@redhat.com | 1325688991 |  | dlm: add recovery callbacks  These new callbacks notify the dlm user about lock recovery. GFS2, and possibly others, need to be aware of when the dlm will be doing lock recovery for a failed lockspace member.  In the past, this coordination has been done between dlm and file system daemons in userspace, which then direct their kernel counterparts.  These callbacks allow the same coordination directly, and more simply.  Signed-off-by: David Teigland <teigland@redhat.com>
f | dir.c | s | 10K | 374 | David Teigland | teigland@redhat.com | 1331239590 |  | dlm: fix slow rsb search in dir recovery  The function used to find an rsb during directory recovery was searching the single linear list of rsb's.  This wasted a lot of time compared to using the standard hash table to find the rsb.  Signed-off-by: David Teigland <teigland@redhat.com>
f | Makefile | g | 343B |  | David Teigland | teigland@redhat.com | 1208794948 |  | dlm: move plock code from gfs2  Move the code that handles cluster posix locks from gfs2 into the dlm so that it can be used by both gfs2 and ocfs2.  Signed-off-by: David Teigland <teigland@redhat.com>
f | rcom.h | s | 1.1K | 21 | David Teigland | teigland@redhat.com | 1325688957 |  | dlm: add node slots and generation  Slot numbers are assigned to nodes when they join the lockspace. The slot number chosen is the minimum unused value starting at 1. Once a node is assigned a slot, that slot number will not change while the node remains a lockspace member.  If the node leaves and rejoins it can be assigned a new slot number.  A new generation number is also added to a lockspace.  It is set and incremented during each recovery along with the slot collection/assignment.  The slot numbers will be passed to gfs2 which will use them as journal id's.  Signed-off-by: David Teigland <teigland@redhat.com>
f | recoverd.c | s | 7.5K | 259 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | dlm_internal.h | s | 17K | 571 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | lock.c | s | 130K | 4447 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | lockspace.h | s | 1.0K | 22 | David Teigland | teigland@redhat.com | 1219942183 |  | dlm: detect available userspace daemon  If dlm_controld (the userspace daemon that controls the setup and recovery of the dlm) fails, the kernel should shut down the lockspaces in the kernel rather than leaving them running.  This is detected by having dlm_controld hold a misc device open while running, and if the kernel detects a close while the daemon is still needed, it stops the lockspaces in the kernel.  Knowing that the userspace daemon isn't running also allows the lockspace create/remove routines to avoid waiting on the daemon for join/leave operations.  Signed-off-by: David Teigland <teigland@redhat.com>
f | lock.h | s | 2.7K | 64 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | user.c | s | 24K | 842 | David Teigland | teigland@redhat.com | 1325688991 |  | dlm: add recovery callbacks  These new callbacks notify the dlm user about lock recovery. GFS2, and possibly others, need to be aware of when the dlm will be doing lock recovery for a failed lockspace member.  In the past, this coordination has been done between dlm and file system daemons in userspace, which then direct their kernel counterparts.  These callbacks allow the same coordination directly, and more simply.  Signed-off-by: David Teigland <teigland@redhat.com>
f | member.h | s | 1.4K | 29 | David Teigland | teigland@redhat.com | 1325688991 |  | dlm: add recovery callbacks  These new callbacks notify the dlm user about lock recovery. GFS2, and possibly others, need to be aware of when the dlm will be doing lock recovery for a failed lockspace member.  In the past, this coordination has been done between dlm and file system daemons in userspace, which then direct their kernel counterparts.  These callbacks allow the same coordination directly, and more simply.  Signed-off-by: David Teigland <teigland@redhat.com>
f | debug_fs.c | s | 16K | 616 | Stephen Boyd | sboyd@codeaurora.org | 1333664750 |  | simple_open: automatically convert to simple_open()  Many users of debugfs copy the implementation of default_open() when they want to support a custom read/write function op.  This leads to a proliferation of the default_open() implementation across the entire tree.  Now that the common implementation has been consolidated into libfs we can replace all the users of this function with simple_open().  This replacement was done with the following semantic patch:  <smpl> @ open @ identifier open_f != simple_open; identifier i, f; @@ -int open_f(struct inode *i, struct file *f) -{ ( -if (i->i_private) -f->private_data = i->i_private; || -f->private_data = i->i_private; ) -return 0; -}  @ has_open depends on open @ identifier fops; identifier open.open_f; @@ struct file_operations fops = { ... -.open = open_f, +.open = simple_open, ... }; </smpl>  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Stephen Boyd <sboyd@codeaurora.org> Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Julia Lawall <Julia.Lawall@lip6.fr> Acked-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | lockspace.c | s | 19K | 743 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | memory.c | s | 2.1K | 79 | Dan Carpenter | dan.carpenter@oracle.com | 1337096368 |  | dlm: NULL dereference on failure in kmem_cache_create()  We aren't allowed to pass NULL pointers to kmem_cache_destroy() so if both allocations fail, it leads to a NULL dereference.  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: David Teigland <teigland@redhat.com>
f | util.c | s | 4.5K | 139 | Al Viro | viro@zeniv.linux.org.uk | 1202109823 |  | dlm: do not byteswap rcom_config  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: David Teigland <teigland@redhat.com>
f | recoverd.h | s | 970B | 20 | David Teigland | teigland@redhat.com | 1137576629 |  | [DLM] The core of the DLM for GFS2/CLVM  This is the core of the distributed lock manager which is required to use GFS2 as a cluster filesystem. It is also used by CLVM and can be used as a standalone lock manager independantly of either of these two projects.  It implements VAX-style locking modes.  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steve Whitehouse <swhiteho@redhat.com>
f | config.c | s | 27K | 919 | David Teigland | teigland@redhat.com | 1325688991 |  | dlm: add recovery callbacks  These new callbacks notify the dlm user about lock recovery. GFS2, and possibly others, need to be aware of when the dlm will be doing lock recovery for a failed lockspace member.  In the past, this coordination has been done between dlm and file system daemons in userspace, which then direct their kernel counterparts.  These callbacks allow the same coordination directly, and more simply.  Signed-off-by: David Teigland <teigland@redhat.com>
f | user.h | s | 586B | 16 | David Teigland | teigland@redhat.com | 1299775200 |  | dlm: record full callback state  Change how callbacks are recorded for locks.  Previously, information about multiple callbacks was combined into a couple of variables that indicated what the end result should be.  In some situations, we could not tell from this combined state what the exact sequence of callbacks were, and would end up either delivering the callbacks in the wrong order, or suppress redundant callbacks incorrectly.  This new approach records all the data for each callback, leaving no uncertainty about what needs to be delivered.  Signed-off-by: David Teigland <teigland@redhat.com>
f | lvb_table.h | s | 687B | 15 | David Teigland | teigland@redhat.com | 1137576629 |  | [DLM] The core of the DLM for GFS2/CLVM  This is the core of the distributed lock manager which is required to use GFS2 as a cluster filesystem. It is also used by CLVM and can be used as a standalone lock manager independantly of either of these two projects.  It implements VAX-style locking modes.  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steve Whitehouse <swhiteho@redhat.com>
f | dir.h | s | 1.2K | 25 | David Teigland | teigland@redhat.com | 1137576629 |  | [DLM] The core of the DLM for GFS2/CLVM  This is the core of the distributed lock manager which is required to use GFS2 as a cluster filesystem. It is also used by CLVM and can be used as a standalone lock manager independantly of either of these two projects.  It implements VAX-style locking modes.  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steve Whitehouse <swhiteho@redhat.com>
f | lowcomms.c | s | 38K | 1341 | David Teigland | teigland@redhat.com | 1335472538 |  | dlm: prevent connections during shutdown  During lowcomms shutdown, a new connection could possibly be created, and attempt to use a workqueue that's been destroyed.  Similarly, during startup, a new connection could attempt to use a workqueue that's not been set up yet.  Add a global variable to indicate when new connections are allowed.  Based on patch by: Christine Caulfield <ccaulfie@redhat.com>  Reported-by: dann frazier <dann.frazier@canonical.com> Reviewed-by: dann frazier <dann.frazier@canonical.com> Signed-off-by: David Teigland <teigland@redhat.com>
f | recover.c | s | 20K | 710 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | memory.h | s | 1.0K | 23 | David Teigland | teigland@redhat.com | 1310504529 |  | dlm: improve rsb searches  By pre-allocating rsb structs before searching the hash table, they can be inserted immediately.  This avoids always having to repeat the search when adding the struct to hash list.  This also adds space to the rsb struct for a max resource name, so an rsb allocation can be used by any request. The constant size also allows us to finally use a slab for the rsb structs.  Signed-off-by: David Teigland <teigland@redhat.com>
f | recover.h | s | 1.5K | 30 | David Teigland | teigland@redhat.com | 1137576629 |  | [DLM] The core of the DLM for GFS2/CLVM  This is the core of the distributed lock manager which is required to use GFS2 as a cluster filesystem. It is also used by CLVM and can be used as a standalone lock manager independantly of either of these two projects.  It implements VAX-style locking modes.  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steve Whitehouse <swhiteho@redhat.com>
f | requestqueue.c | s | 4.8K | 141 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | netlink.c | s | 2.9K | 112 | Changli Gao | xiaosuo@gmail.com | 1281036121 |  | dlm: use genl_register_family_with_ops()  Signed-off-by: Changli Gao <xiaosuo@gmail.com> Signed-off-by: David Teigland <teigland@redhat.com>
f | midcomms.c | s | 3.7K | 114 | Steven Whitehouse | swhiteho@redhat.com | 1230048940 |  | dlm: fix up memory allocation flags  Use ls_allocation for memory allocations, which a cluster fs sets to GFP_NOFS.  Use GFP_NOFS for allocations when no lockspace struct is available.  Taking dlm locks needs to avoid calling back into the cluster fs because write-out can require taking dlm locks.  Cc: Christine Caulfield <ccaulfie@redhat.com> Signed-off-by: Steven Whitehouse <swhiteho@redhat.com> Signed-off-by: David Teigland <teigland@redhat.com>
f | midcomms.h | s | 864B | 17 | David Teigland | teigland@redhat.com | 1137576629 |  | [DLM] The core of the DLM for GFS2/CLVM  This is the core of the distributed lock manager which is required to use GFS2 as a cluster filesystem. It is also used by CLVM and can be used as a standalone lock manager independantly of either of these two projects.  It implements VAX-style locking modes.  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steve Whitehouse <swhiteho@redhat.com>
f | rcom.c | s | 14K | 474 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | ast.c | s | 8.0K | 264 | David Teigland | teigland@redhat.com | 1335986127 |  | dlm: fixes for nodir mode  The "nodir" mode (statically assign master nodes instead of using the resource directory) has always been highly experimental, and never seriously used.  This commit fixes a number of problems, making nodir much more usable.  - Major change to recovery: recover all locks and restart   all in-progress operations after recovery.  In some   cases it's not possible to know which in-progess locks   to recover, so recover all.  (Most require recovery   in nodir mode anyway since rehashing changes most   master nodes.)  - Change the way nodir mode is enabled, from a command   line mount arg passed through gfs2, into a sysfs   file managed by dlm_controld, consistent with the   other config settings.  - Allow recovering MSTCPY locks on an rsb that has not   yet been turned into a master copy.  - Ignore RCOM_LOCK and RCOM_LOCK_REPLY recovery messages   from a previous, aborted recovery cycle.  Base this   on the local recovery status not being in the state   where any nodes should be sending LOCK messages for the   current recovery cycle.  - Hold rsb lock around dlm_purge_mstcpy_locks() because it   may run concurrently with dlm_recover_master_copy().  - Maintain highbast on process-copy lkb's (in addition to   the master as is usual), because the lkb can switch   back and forth between being a master and being a   process copy as the master node changes in recovery.  - When recovering MSTCPY locks, flag rsb's that have   non-empty convert or waiting queues for granting   at the end of recovery.  (Rename flag from LOCKS_PURGED   to RECOVER_GRANT and similar for the recovery function,   because it's not only resources with purged locks   that need grant a grant attempt.)  - Replace a couple of unnecessary assertion panics with   error messages.  Signed-off-by: David Teigland <teigland@redhat.com>
f | Kconfig | g | 492B |  | Nicholas Bellinger | nab@linux-iscsi.org | 1295212957 |  | dlm: Make DLM depend on CONFIGFS_FS  This patch fixes the following kconfig error after changing CONFIGFS_FS -> select SYSFS:  fs/sysfs/Kconfig:1:error: recursive dependency detected! fs/sysfs/Kconfig:1:	symbol SYSFS is selected by CONFIGFS_FS fs/configfs/Kconfig:1:	symbol CONFIGFS_FS is selected by DLM fs/dlm/Kconfig:1:	symbol DLM depends on SYSFS  Signed-off-by: Nicholas A. Bellinger <nab@linux-iscsi.org> Cc: Joel Becker <jlbec@evilplan.org> Cc: Randy Dunlap <randy.dunlap@oracle.com> Cc: Stephen Rothwell <sfr@canb.auug.org.au> Cc: James Bottomley <James.Bottomley@suse.de>
f | lowcomms.h | s | 1014B | 21 | Christine Caulfield | ccaulfie@redhat.com | 1242398052 |  | dlm: connect to nodes earlier  Make network connections to other nodes earlier, in the context of dlm_recoverd.  This avoids connecting to nodes from dlm_send where we try to avoid allocations which could possibly deadlock if memory reclaim goes into the cluster fs which may try to do a dlm operation.  Signed-off-by: Christine Caulfield <ccaulfie@redhat.com> Signed-off-by: David Teigland <teigland@redhat.com>
f | config.h | s | 1.6K | 48 | David Teigland | teigland@redhat.com | 1325688991 |  | dlm: add recovery callbacks  These new callbacks notify the dlm user about lock recovery. GFS2, and possibly others, need to be aware of when the dlm will be doing lock recovery for a failed lockspace member.  In the past, this coordination has been done between dlm and file system daemons in userspace, which then direct their kernel counterparts.  These callbacks allow the same coordination directly, and more simply.  Signed-off-by: David Teigland <teigland@redhat.com>
f | ast.h | s | 1.3K | 26 | David Teigland | teigland@redhat.com | 1310751043 |  | dlm: use workqueue for callbacks  Instead of creating our own kthread (dlm_astd) to deliver callbacks for all lockspaces, use a per-lockspace workqueue to deliver the callbacks.  This eliminates complications and slowdowns from many lockspaces sharing the same thread.  Signed-off-by: David Teigland <teigland@redhat.com>
f | plock.c | s | 11K | 427 | J. Bruce Fields | bfields@redhat.com | 1311207799 |  | locks: rename lock-manager ops  Both the filesystem and the lock manager can associate operations with a lock.  Confusingly, one of them (fl_release_private) actually has the same name in both operation structures.  It would save some confusion to give the lock-manager ops different names.  Signed-off-by: J. Bruce Fields <bfields@redhat.com>
f | util.h | s | 805B | 18 | David Teigland | teigland@redhat.com | 1137576629 |  | [DLM] The core of the DLM for GFS2/CLVM  This is the core of the distributed lock manager which is required to use GFS2 as a cluster filesystem. It is also used by CLVM and can be used as a standalone lock manager independantly of either of these two projects.  It implements VAX-style locking modes.  Signed-off-by: David Teigland <teigland@redhat.com> Signed-off-by: Steve Whitehouse <swhiteho@redhat.com>
f | main.c | s | 2.0K | 78 | Michal Marek | mmarek@suse.cz | 1306395977 |  | dlm: Drop __TIME__ usage  The kernel already prints its build timestamp during boot, no need to repeat it in random drivers and produce different object files each time.  Cc: Christine Caulfield <ccaulfie@redhat.com> Cc: David Teigland <teigland@redhat.com> Cc: cluster-devel@redhat.com Signed-off-by: Michal Marek <mmarek@suse.cz>
f | requestqueue.h | s | 882B | 18 | Al Viro | viro@zeniv.linux.org.uk | 1202109692 |  | dlm: use proper C for dlm/requestqueue stuff (and fix alignment bug)  a) don't cast the pointer to dlm_header *, we use it as dlm_message *    anyway. b) we copy the message into a queue element, then pass the pointer to    copy to dlm_receive_message_saved(); declare it properly to make sure    that we have the right alignment.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: David Teigland <teigland@redhat.com>
