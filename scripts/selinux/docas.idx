d | mdp |  | 4 items |  | Stephen Smalley | sds@tycho.nsa.gov | 1254913002 |  | selinux: dynamic class/perm discovery  Modify SELinux to dynamically discover class and permission values upon policy load, based on the dynamic object class/perm discovery logic from libselinux.  A mapping is created between kernel-private class and permission indices used outside the security server and the policy values used within the security server.  The mappings are only applied upon kernel-internal computations; similar mappings for the private indices of userspace object managers is handled on a per-object manager basis by the userspace AVC.  The interfaces for compute_av and transition_sid are split for kernel vs. userspace; the userspace functions are distinguished by a _user suffix.  The kernel-private class indices are no longer tied to the policy values and thus do not need to skip indices for userspace classes; thus the kernel class index values are compressed.  The flask.h definitions were regenerated by deleting the userspace classes from refpolicy's definitions and then regenerating the headers.  Going forward, we can just maintain the flask.h, av_permissions.h, and classmap.h definitions separately from policy as they are no longer tied to the policy values.  The next patch introduces a utility to automate generation of flask.h and av_permissions.h from the classmap.h definitions.  The older kernel class and permission string tables are removed and replaced by a single security class mapping table that is walked at policy load to generate the mapping.  The old kernel class validation logic is completely replaced by the mapping logic.  The handle unknown logic is reworked.  reject_unknown=1 is handled when the mappings are computed at policy load time, similar to the old handling by the class validation logic.  allow_unknown=1 is handled when computing and mapping decisions - if the permission was not able to be mapped (i.e. undefined, mapped to zero), then it is automatically added to the allowed vector.  If the class was not able to be mapped (i.e. undefined, mapped to zero), then all permissions are allowed for it if allow_unknown=1.  avc_audit leverages the new security class mapping table to lookup the class and permission names from the kernel-private indices.  The mdp program is updated to use the new table when generating the class definitions and allow rules for a minimal boot policy for the kernel.  It should be noted that this policy will not include any userspace classes, nor will its policy index values for the kernel classes correspond with the ones in refpolicy (they will instead match the kernel-private indices).  Signed-off-by:  Stephen Smalley <sds@tycho.nsa.gov> Signed-off-by: James Morris <jmorris@namei.org>
d | genheaders |  | 3 items |  | Harry Ciao | qingtao.cao@windriver.com | 1299183583 |  | SELinux: Auto-generate security_is_socket_class  The security_is_socket_class() is auto-generated by genheaders based on classmap.h to reduce maintenance effort when a new class is defined in SELinux kernel. The name for any socket class should be suffixed by "socket" and doesn't contain more than one substr of "socket".  Signed-off-by: Harry Ciao <qingtao.cao@windriver.com> Signed-off-by: Eric Paris <eparis@redhat.com> Acked-by: Stephen Smalley <sds@tycho.nsa.gov>
f | Makefile | g | 53B |  | Stephen Smalley | sds@tycho.nsa.gov | 1254913004 |  | selinux: generate flask headers during kernel build  Add a simple utility (scripts/selinux/genheaders) and invoke it to generate the kernel-private class and permission indices in flask.h and av_permissions.h automatically during the kernel build from the security class mapping definitions in classmap.h.  Adding new kernel classes and permissions can then be done just by adding them to classmap.h.  Signed-off-by:  Stephen Smalley <sds@tycho.nsa.gov> Signed-off-by: James Morris <jmorris@namei.org>
f | install_policy.sh | s | 1.7K | 58 | Serge E. Hallyn | serue@us.ibm.com | 1219791248 |  | selinux: add support for installing a dummy policy (v2)  In August 2006 I posted a patch generating a minimal SELinux policy.  This week, David P. Quigley posted an updated version of that as a patch against the kernel.  It also had nice logic for auto-installing the policy.  Following is David's original patch intro (preserved especially bc it has stats on the generated policies):  se interested in the changes there were only two significant changes. The first is that the iteration through the list of classes used NULL as a sentinel value. The problem with this is that the class_to_string array actually has NULL entries in its table as place holders for the user space object classes.  The second change was that it would seem at some point the initial sids table was NULL terminated. This is no longer the case so that iteration has to be done on array length instead of looking for NULL.  Some statistics on the policy that it generates:  The policy consists of 523 lines which contain no blank lines. Of those 523 lines 453 of them are class, permission, and initial sid definitions. These lines are usually little to no concern to the policy developer since they will not be adding object classes or permissions. Of the remaining 70 lines there is one type, one role, and one user statement. The remaining lines are broken into three portions. The first group are TE allow rules which make up 29 of the remaining lines, the second is assignment of labels to the initial sids which consist of 27 lines, and file system labeling statements which are the remaining 11.  In addition to the policy.conf generated there is a single file_contexts file containing two lines which labels the entire system with base_t.  This policy generates a policy.23 binary that is 7920 bytes.  (then a few versions later...):  The new policy is 587 lines (stripped of blank lines) with 476 of those lines being the boilerplate that I mentioned last time. The remaining 111 lines have the 3 lines for type, user, and role, 70 lines for the allow rules (one for each object class including user space object classes), 27 lines to assign types to the initial sids, and 11 lines for file system labeling. The policy binary is 9194 bytes.  Changelog:  	Aug 26: Added Documentation/SELinux.txt 	Aug 26: Incorporated a set of comments by Stephen Smalley: 		1. auto-setup SELINUXTYPE=dummy 		2. don't auto-install if selinux is enabled with 			non-dummy policy 		3. don't re-compute policy version 		4. /sbin/setfiles not /usr/sbin/setfiles 	Aug 22: As per JMorris comments, made sure make distclean 		cleans up the mdp directory. 		Removed a check for file_contexts which is now 		created in the same file as the check, making it 		superfluous.  Signed-off-by: Serge Hallyn <serue@us.ibm.com> Signed-off-by: David Quigley <dpquigl@tycho.nsa.gov> Signed-off-by: James Morris <jmorris@namei.org>
f | README | g | 100B |  | Randy Dunlap | randy.dunlap@oracle.com | 1305845978 |  | Create Documentation/security/, move LSM-, credentials-, and keys-related files from Documentation/   to Documentation/security/, add Documentation/security/00-INDEX, and update all occurrences of Documentation/<moved_file>   to Documentation/security/<moved_file>.
