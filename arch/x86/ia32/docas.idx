f | ia32entry.S | g | 13K |  | H. Peter Anvin | hpa@zytor.com | 1334965910 |  | x86, extable: Remove open-coded exception table entries in arch/x86/ia32/ia32entry.S  Remove open-coded exception table entries in arch/x86/ia32/ia32entry.S, and replace them with _ASM_EXTABLE() macros; this will allow us to change the format and type of the exception table entries.  This one was missed from the previous patch to this file.  Signed-off-by: H. Peter Anvin <hpa@zytor.com> Cc: David Daney <david.daney@cavium.com> Link: http://lkml.kernel.org/r/CA%2B55aFyijf43qSu3N9nWHEBwaGbb7T2Oq9A=9EyR=Jtyqfq_cQ@mail.gmail.com
f | Makefile | g | 391B |  | H. Peter Anvin | hpa@linux.intel.com | 1321565737 |  | x86: Generate system call tables and unistd_*.h from tables  Generate system call tables and unistd_*.h automatically from the tables in arch/x86/syscalls.  All other information, like NR_syscalls, is auto-generated, some of which is in asm-offsets_*.c.  This allows us to keep all the system call information in one place, and allows for kernel space and user space to see different information; this is currently used for the ia32 system call numbers when building the 64-bit kernel, but will be used by the x32 ABI in the near future.  This also removes some gratuitious differences between i386, x86-64 and ia32; in particular, now all system call tables are generated with the same mechanism.  Cc: H. J. Lu <hjl.tools@gmail.com> Cc: Sam Ravnborg <sam@ravnborg.org> Cc: Michal Marek <mmarek@suse.cz> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | audit.c | s | 641B | 36 | Paolo Ciarrocchi | paolo.ciarrocchi@gmail.com | 1201696374 |  | x86: coding style fixes in arch/x86/ia32/audit.c  Fix one error reported by checkpatch, it now reports:  total: 0 errors, 0 warnings, 42 lines checked  Signed-off-by: Paolo Ciarrocchi <paolo.ciarrocchi@gmail.com> Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | nosyscall.c | s | 102B | 6 | H. Peter Anvin | hpa@linux.intel.com | 1321565735 |  | x86-64, ia32: Move compat_ni_syscall into C and its own file  Move compat_ni_syscall out of ia32entry.S and into its own .c file. Although this is a trivial function, it is not performance-critical, and this will simplify further cleanups.  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | sys_ia32.c | s | 13K | 428 | Linus Torvalds | torvalds@linux-foundation.org | 1337820159 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace  Pull user namespace enhancements from Eric Biederman:  "This is a course correction for the user namespace, so that we can   reach an inexpensive, maintainable, and reasonably complete   implementation.    Highlights:    - Config guards make it impossible to enable the user namespace and      code that has not been converted to be user namespace safe.     - Use of the new kuid_t type ensures the if you somehow get past the      config guards the kernel will encounter type errors if you enable      user namespaces and attempt to compile in code whose permission      checks have not been updated to be user namespace safe.     - All uids from child user namespaces are mapped into the initial      user namespace before they are processed.  Removing the need to add      an additional check to see if the user namespace of the compared      uids remains the same.     - With the user namespaces compiled out the performance is as good or      better than it is today.     - For most operations absolutely nothing changes performance or      operationally with the user namespace enabled.     - The worst case performance I could come up with was timing 1      billion cache cold stat operations with the user namespace code      enabled.  This went from 156s to 164s on my laptop (or 156ns to      164ns per stat operation).     - (uid_t)-1 and (gid_t)-1 are reserved as an internal error value.      Most uid/gid setting system calls treat these value specially      anyway so attempting to use -1 as a uid would likely cause      entertaining failures in userspace.     - If setuid is called with a uid that can not be mapped setuid fails.      I have looked at sendmail, login, ssh and every other program I      could think of that would call setuid and they all check for and      handle the case where setuid fails.     - If stat or a similar system call is called from a context in which      we can not map a uid we lie and return overflowuid.  The LFS      experience suggests not lying and returning an error code might be      better, but the historical precedent with uids is different and I      can not think of anything that would break by lying about a uid we      can't map.     - Capabilities are localized to the current user namespace making it      safe to give the initial user in a user namespace all capabilities.    My git tree covers all of the modifications needed to convert the core   kernel and enough changes to make a system bootable to runlevel 1."  Fix up trivial conflicts due to nearby independent changes in fs/stat.c  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/ebiederm/user-namespace: (46 commits)   userns:  Silence silly gcc warning.   cred: use correct cred accessor with regards to rcu read lock   userns: Convert the move_pages, and migrate_pages permission checks to use uid_eq   userns: Convert cgroup permission checks to use uid_eq   userns: Convert tmpfs to use kuid and kgid where appropriate   userns: Convert sysfs to use kgid/kuid where appropriate   userns: Convert sysctl permission checks to use kuid and kgids.   userns: Convert proc to use kuid/kgid where appropriate   userns: Convert ext4 to user kuid/kgid where appropriate   userns: Convert ext3 to use kuid/kgid where appropriate   userns: Convert ext2 to use kuid/kgid where appropriate.   userns: Convert devpts to use kuid/kgid where appropriate   userns: Convert binary formats to use kuid/kgid where appropriate   userns: Add negative depends on entries to avoid building code that is userns unsafe   userns: signal remove unnecessary map_cred_ns   userns: Teach inode_capable to understand inodes whose uids map to other namespaces.   userns: Fail exec for suid and sgid binaries with ids outside our user namespace.   userns: Convert stat to return values mapped from kuids and kgids   userns: Convert user specfied uids and gids in chown into kuids and kgid   userns: Use uid_eq gid_eq helpers when comparing kuids and kgids in the vfs   ...
f | ia32_aout.c | s | 13K | 442 | Al Viro | viro@ZenIV.linux.org.uk | 1336324518 |  | x86: fix broken TASK_SIZE for ia32_aout  Setting TIF_IA32 in load_aout_binary() used to be enough; these days TASK_SIZE is controlled by TIF_ADDR32 and that one doesn't get set there.  Switch to use of set_personality_ia32()...  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | syscall_ia32.c | s | 660B | 19 | H. Peter Anvin | hpa@linux.intel.com | 1321662307 |  | x86, syscall: Re-fix typo in comment  Fix the same typo as was fixed in:  b7641d2c x86-64, syscall: Adjust comment spacing and remove typo  ... for the new versions of this file (32-bit and IA32 compat).  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Link: http://lkml.kernel.org/r/1321569446-20433-4-git-send-email-hpa@linux.intel.com
f | ipc32.c | s | 1.5K | 49 | Jaswinder Singh Rajput | jaswinder@infradead.org | 1230553120 |  | x86: introducing asm/sys_ia32.h  Impact: cleanup, avoid 44 sparse warnings, new file asm/sys_ia32.h  Fixes following sparse warnings:    CHECK   arch/x86/ia32/sys_ia32.c arch/x86/ia32/sys_ia32.c:53:17: warning: symbol 'sys32_truncate64' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:60:17: warning: symbol 'sys32_ftruncate64' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:98:17: warning: symbol 'sys32_stat64' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:109:17: warning: symbol 'sys32_lstat64' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:119:17: warning: symbol 'sys32_fstat64' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:128:17: warning: symbol 'sys32_fstatat' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:164:17: warning: symbol 'sys32_mmap' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:195:17: warning: symbol 'sys32_mprotect' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:201:17: warning: symbol 'sys32_pipe' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:215:17: warning: symbol 'sys32_rt_sigaction' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:291:17: warning: symbol 'sys32_sigaction' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:330:17: warning: symbol 'sys32_rt_sigprocmask' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:370:17: warning: symbol 'sys32_alarm' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:383:17: warning: symbol 'sys32_old_select' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:393:17: warning: symbol 'sys32_waitpid' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:401:17: warning: symbol 'sys32_sysfs' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:406:17: warning: symbol 'sys32_sched_rr_get_interval' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:421:17: warning: symbol 'sys32_rt_sigpending' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:445:17: warning: symbol 'sys32_rt_sigqueueinfo' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:472:17: warning: symbol 'sys32_sysctl' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:517:17: warning: symbol 'sys32_pread' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:524:17: warning: symbol 'sys32_pwrite' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:532:17: warning: symbol 'sys32_personality' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:545:17: warning: symbol 'sys32_sendfile' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:565:17: warning: symbol 'sys32_mmap2' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:589:17: warning: symbol 'sys32_olduname' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:626:6: warning: symbol 'sys32_uname' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:641:6: warning: symbol 'sys32_ustat' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:663:17: warning: symbol 'sys32_execve' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:678:17: warning: symbol 'sys32_clone' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:693:6: warning: symbol 'sys32_lseek' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:698:6: warning: symbol 'sys32_kill' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:703:6: warning: symbol 'sys32_fadvise64_64' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:712:6: warning: symbol 'sys32_vm86_warning' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:726:6: warning: symbol 'sys32_lookup_dcookie' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:732:20: warning: symbol 'sys32_readahead' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:738:17: warning: symbol 'sys32_sync_file_range' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:746:17: warning: symbol 'sys32_fadvise64' was not declared. Should it be static? arch/x86/ia32/sys_ia32.c:753:17: warning: symbol 'sys32_fallocate' was not declared. Should it be static?   CHECK   arch/x86/ia32/ia32_signal.c arch/x86/ia32/ia32_signal.c:126:17: warning: symbol 'sys32_sigsuspend' was not declared. Should it be static? arch/x86/ia32/ia32_signal.c:141:17: warning: symbol 'sys32_sigaltstack' was not declared. Should it be static? arch/x86/ia32/ia32_signal.c:249:17: warning: symbol 'sys32_sigreturn' was not declared. Should it be static? arch/x86/ia32/ia32_signal.c:279:17: warning: symbol 'sys32_rt_sigreturn' was not declared. Should it be static?   CHECK   arch/x86/ia32/ipc32.c arch/x86/ia32/ipc32.c:12:17: warning: symbol 'sys32_ipc' was not declared. Should it be static?  Signed-off-by: Jaswinder Singh Rajput <jaswinderrajput@gmail.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | ia32_signal.c | s | 13K | 463 | Suresh Siddha | suresh.b.siddha@intel.com | 1339722964 |  | x86, compat: Use test_thread_flag(TIF_IA32) in compat signal delivery  Signal delivery compat path may not have the 'TS_COMPAT' flag (that flag indicates how we entered the kernel).  So use test_thread_flag(TIF_IA32) instead of is_ia32_task(): one of the functions of TIF_IA32 is just what kind of signal frame we want.  Signed-off-by: Suresh Siddha <suresh.b.siddha@intel.com> Link: http://lkml.kernel.org/r/1339722435.3475.57.camel@sbsiddha-desk.sc.intel.com Cc: stable@kernel.org	# v3.4 Signed-off-by: H. Peter Anvin <hpa@zytor.com>
