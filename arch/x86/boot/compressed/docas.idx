f | Makefile | g | 2.4K |  | H. Peter Anvin | hpa@linux.intel.com | 1337395780 |  | x86, realmode: 16-bit real-mode code support for relocs tool  A new option is added to the relocs tool called '--realmode'. This option causes the generation of 16-bit segment relocations and 32-bit linear relocations for the real-mode code. When the real-mode code is moved to the low-memory during kernel initialization, these relocation entries can be used to relocate the code properly.  In the assembly code 16-bit segment relocations must be relative to the 'real_mode_seg' absolute symbol. Linear relocations must be relative to a symbol prefixed with 'pa_'.  16-bit segment relocation is used to load cs:ip in 16-bit code. Linear relocations are used in the 32-bit code for relocatable data references. They are declared in the linker script of the real-mode code.  The relocs tool is moved to arch/x86/tools/relocs.c, and added new target archscripts that can be used to build scripts needed building an architecture.  be compiled before building the arch/x86 tree.  [ hpa: accelerating this because it detects invalid absolute   relocations, a serious bug in binutils 2.22.52.0.x which currently   produces bad kernels. ]  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Link: http://lkml.kernel.org/r/1336501366-28617-2-git-send-email-jarkko.sakkinen@intel.com Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Cc: <stable@vger.kernel.org>
f | misc.c | s | 8.8K | 327 | Jesper Juhl | jj@chaosbits.net | 1327573829 |  | x86/boot-image: Don't leak phdrs in arch/x86/boot/compressed/misc.c::Parse_elf()  We allocate memory with malloc(), but neglect to free it before the variable 'phdrs' goes out of scope --> leak.  Signed-off-by: Jesper Juhl <jj@chaosbits.net> Link: http://lkml.kernel.org/r/alpine.LNX.2.00.1201232332590.8772@swampdragon.chaosbits.net [ Mostly harmless. ] Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | string.c | s | 211B | 9 | Matt Fleming | matt.fleming@intel.com | 1323728770 |  | x86, efi: EFI boot stub support  There is currently a large divide between kernel development and the development of EFI boot loaders. The idea behind this patch is to give the kernel developers full control over the EFI boot process. As H. Peter Anvin put it,  "The 'kernel carries its own stub' approach been very successful in dealing with BIOS, and would make a lot of sense to me for EFI as well."  This patch introduces an EFI boot stub that allows an x86 bzImage to be loaded and executed by EFI firmware. The bzImage appears to the firmware as an EFI application. Luckily there are enough free bits within the bzImage header so that it can masquerade as an EFI application, thereby coercing the EFI firmware into loading it and jumping to its entry point. The beauty of this masquerading approach is that both BIOS and EFI boot loaders can still load and run the same bzImage, thereby allowing a single kernel image to work in any boot environment.  The EFI boot stub supports multiple initrds, but they must exist on the same partition as the bzImage. Command-line arguments for the kernel can be appended after the bzImage name when run from the EFI shell, e.g.  Shell> bzImage console=ttyS0 root=/dev/sdb initrd=initrd.img  v7:  - Fix checkpatch warnings.  v6:   - Try to allocate initrd memory just below hdr->inird_addr_max.  v5:   - load_options_size is UTF-16, which needs dividing by 2 to convert    to the corresponding ASCII size.  v4:   - Don't read more than image->load_options_size  v3:   - Fix following warnings when compiling CONFIG_EFI_STUB=n     arch/x86/boot/tools/build.c: In function ‘main’:    arch/x86/boot/tools/build.c:138:24: warning: unused variable ‘pe_header’    arch/x86/boot/tools/build.c:138:15: warning: unused variable ‘file_sz’   - As reported by Matthew Garrett, some Apple machines have GOPs that    don't have hardware attached. We need to weed these out by    searching for ones that handle the PCIIO protocol.   - Don't allocate memory if no initrds are on cmdline  - Don't trust image->load_options_size  Maarten Lankhorst noted:  - Don't strip first argument when booted from efibootmgr  - Don't allocate too much memory for cmdline  - Don't update cmdline_size, the kernel considers it read-only  - Don't accept '\n' for initrd names  v2:   - File alignment was too large, was 8192 should be 512. Reported by    Maarten Lankhorst on LKML.  - Added UGA support for graphics  - Use VIDEO_TYPE_EFI instead of hard-coded number.  - Move linelength assignment until after we've assigned depth  - Dynamically fill out AddressOfEntryPoint in tools/build.c  - Don't use magic number for GDT/TSS stuff. Requested by Andi Kleen  - The bzImage may need to be relocated as it may have been loaded at    a high address address by the firmware. This was required to get my    macbook booting because the firmware loaded it at 0x7cxxxxxx, which    triggers this error in decompress_kernel(),  	if (heap > ((-__PAGE_OFFSET-(128<<20)-1) & 0x7fffffff)) 		error("Destination address too large");  Cc: Mike Waychison <mikew@google.com> Cc: Matthew Garrett <mjg@redhat.com> Tested-by: Henrik Rydberg <rydberg@euromail.se> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1321383097.2657.9.camel@mfleming-mobl1.ger.corp.intel.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | vmlinux.lds.S | g | 1.1K |  | H. Peter Anvin | hpa@linux.intel.com | 1280788484 |  | x86, setup: Allow global variables and functions in the decompressor  In order for global variables and functions to work in the decompressor, we need to fix up the GOT in assembly code.  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> LKML-Reference: <4C57382E.8050501@zytor.com>
f | eboot.h | s | 1.5K | 56 | Matt Fleming | matt.fleming@intel.com | 1338567086 |  | x86, efi; Add EFI boot stub console support  We need a way of printing useful messages to the user, for example when we fail to open an initrd file, instead of just hanging the machine without giving the user any indication of what went wrong. So sprinkle some error messages throughout the EFI boot stub code to make it easier for users to diagnose/report problems.  Reported-by: Keshav P R <the.ridikulus.rat@gmail.com> Cc: Matthew Garrett <mjg@redhat.com> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1331907517-3985-3-git-send-email-matt@console-pimps.org Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | misc.h | s | 978B | 32 | H. Peter Anvin | hpa@zytor.com | 1280808440 |  | x86, setup: move isdigit.h to ctype.h, header files on top.  It is a subset of <ctype.h> functionality, so name it ctype.h.  Also, reorganize header files so #include statements are clustered near the top as they should be.  Signed-off-by: H. Peter Anvin <hpa@zytor.com> LKML-Reference: <4C5752F2.8030206@kernel.org>
f | efi_stub_32.S | g | 2.3K |  | Matt Fleming | matt.fleming@intel.com | 1323728770 |  | x86, efi: EFI boot stub support  There is currently a large divide between kernel development and the development of EFI boot loaders. The idea behind this patch is to give the kernel developers full control over the EFI boot process. As H. Peter Anvin put it,  "The 'kernel carries its own stub' approach been very successful in dealing with BIOS, and would make a lot of sense to me for EFI as well."  This patch introduces an EFI boot stub that allows an x86 bzImage to be loaded and executed by EFI firmware. The bzImage appears to the firmware as an EFI application. Luckily there are enough free bits within the bzImage header so that it can masquerade as an EFI application, thereby coercing the EFI firmware into loading it and jumping to its entry point. The beauty of this masquerading approach is that both BIOS and EFI boot loaders can still load and run the same bzImage, thereby allowing a single kernel image to work in any boot environment.  The EFI boot stub supports multiple initrds, but they must exist on the same partition as the bzImage. Command-line arguments for the kernel can be appended after the bzImage name when run from the EFI shell, e.g.  Shell> bzImage console=ttyS0 root=/dev/sdb initrd=initrd.img  v7:  - Fix checkpatch warnings.  v6:   - Try to allocate initrd memory just below hdr->inird_addr_max.  v5:   - load_options_size is UTF-16, which needs dividing by 2 to convert    to the corresponding ASCII size.  v4:   - Don't read more than image->load_options_size  v3:   - Fix following warnings when compiling CONFIG_EFI_STUB=n     arch/x86/boot/tools/build.c: In function ‘main’:    arch/x86/boot/tools/build.c:138:24: warning: unused variable ‘pe_header’    arch/x86/boot/tools/build.c:138:15: warning: unused variable ‘file_sz’   - As reported by Matthew Garrett, some Apple machines have GOPs that    don't have hardware attached. We need to weed these out by    searching for ones that handle the PCIIO protocol.   - Don't allocate memory if no initrds are on cmdline  - Don't trust image->load_options_size  Maarten Lankhorst noted:  - Don't strip first argument when booted from efibootmgr  - Don't allocate too much memory for cmdline  - Don't update cmdline_size, the kernel considers it read-only  - Don't accept '\n' for initrd names  v2:   - File alignment was too large, was 8192 should be 512. Reported by    Maarten Lankhorst on LKML.  - Added UGA support for graphics  - Use VIDEO_TYPE_EFI instead of hard-coded number.  - Move linelength assignment until after we've assigned depth  - Dynamically fill out AddressOfEntryPoint in tools/build.c  - Don't use magic number for GDT/TSS stuff. Requested by Andi Kleen  - The bzImage may need to be relocated as it may have been loaded at    a high address address by the firmware. This was required to get my    macbook booting because the firmware loaded it at 0x7cxxxxxx, which    triggers this error in decompress_kernel(),  	if (heap > ((-__PAGE_OFFSET-(128<<20)-1) & 0x7fffffff)) 		error("Destination address too large");  Cc: Mike Waychison <mikew@google.com> Cc: Matthew Garrett <mjg@redhat.com> Tested-by: Henrik Rydberg <rydberg@euromail.se> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1321383097.2657.9.camel@mfleming-mobl1.ger.corp.intel.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | cmdline.c | s | 544B | 20 | Yinghai Lu | yinghai@kernel.org | 1280806340 |  | x86, setup: enable early console output from the decompressor  This enables the decompressor output to be seen on the serial console. Most of the code is shared with the regular boot code.  We could add printf to the decompressor if needed, but currently there is no sufficiently compelling user.  -v2: define BOOT_BOOT_H to avoid include boot.h -v3: early_serial_base need to be static in misc.c ? -v4: create seperate string.c printf.c cmdline.c early_serial_console.c      after hpa's patch that allow global variables in compressed/misc stage -v5: remove printf.c related  Signed-off-by: Yinghai Lu <yinghai@kernel.org> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | eboot.c | s | 24K | 893 | Matt Fleming | matt.fleming@intel.com | 1338567086 |  | x86, efi; Add EFI boot stub console support  We need a way of printing useful messages to the user, for example when we fail to open an initrd file, instead of just hanging the machine without giving the user any indication of what went wrong. So sprinkle some error messages throughout the EFI boot stub code to make it easier for users to diagnose/report problems.  Reported-by: Keshav P R <the.ridikulus.rat@gmail.com> Cc: Matthew Garrett <mjg@redhat.com> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1331907517-3985-3-git-send-email-matt@console-pimps.org Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | head_32.S | g | 4.4K |  | Matt Fleming | matt.fleming@intel.com | 1334601704 |  | x86, efi: Add dedicated EFI stub entry point  The method used to work out whether we were booted by EFI firmware or via a boot loader is broken. Because efi_main() is always executed when booting from a boot loader we will dereference invalid pointers either on the stack (CONFIG_X86_32) or contained in %rdx (CONFIG_X86_64) when searching for an EFI System Table signature.  Instead of dereferencing these invalid system table pointers, add a new entry point that is only used when booting from EFI firmware, when we know the pointer arguments will be valid. With this change legacy boot loaders will no longer execute efi_main(), but will instead skip EFI stub initialisation completely.  [ hpa: Marking this for urgent/stable since it is a regression when   the option is enabled; without the option the patch has no effect ]  Signed-off-by: Matt Fleming <matt.hfleming@intel.com> Link: http://lkml.kernel.org/r/1334584744.26997.14.camel@mfleming-mobl1.ger.corp.intel.com Reported-by: Jordan Justen <jordan.l.justen@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Cc: <stable@vger.kernel.org> v3.3
f | head_64.S | g | 8.0K |  | Matt Fleming | matt.fleming@intel.com | 1334601704 |  | x86, efi: Add dedicated EFI stub entry point  The method used to work out whether we were booted by EFI firmware or via a boot loader is broken. Because efi_main() is always executed when booting from a boot loader we will dereference invalid pointers either on the stack (CONFIG_X86_32) or contained in %rdx (CONFIG_X86_64) when searching for an EFI System Table signature.  Instead of dereferencing these invalid system table pointers, add a new entry point that is only used when booting from EFI firmware, when we know the pointer arguments will be valid. With this change legacy boot loaders will no longer execute efi_main(), but will instead skip EFI stub initialisation completely.  [ hpa: Marking this for urgent/stable since it is a regression when   the option is enabled; without the option the patch has no effect ]  Signed-off-by: Matt Fleming <matt.hfleming@intel.com> Link: http://lkml.kernel.org/r/1334584744.26997.14.camel@mfleming-mobl1.ger.corp.intel.com Reported-by: Jordan Justen <jordan.l.justen@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Cc: <stable@vger.kernel.org> v3.3
f | mkpiggy.c | s | 2.6K | 80 | Matt Fleming | matt.fleming@intel.com | 1330453377 |  | x86, mkpiggy: Don't open code put_unaligned_le32()  Use the new headers in tools/include instead of rolling our own put_unaligned_le32() implementation.  Cc: H. Peter Anvin <hpa@zytor.com> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1330436245-24875-4-git-send-email-matt@console-pimps.org Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | efi_stub_64.S | g | 44B |  | Matt Fleming | matt.fleming@intel.com | 1323728770 |  | x86, efi: EFI boot stub support  There is currently a large divide between kernel development and the development of EFI boot loaders. The idea behind this patch is to give the kernel developers full control over the EFI boot process. As H. Peter Anvin put it,  "The 'kernel carries its own stub' approach been very successful in dealing with BIOS, and would make a lot of sense to me for EFI as well."  This patch introduces an EFI boot stub that allows an x86 bzImage to be loaded and executed by EFI firmware. The bzImage appears to the firmware as an EFI application. Luckily there are enough free bits within the bzImage header so that it can masquerade as an EFI application, thereby coercing the EFI firmware into loading it and jumping to its entry point. The beauty of this masquerading approach is that both BIOS and EFI boot loaders can still load and run the same bzImage, thereby allowing a single kernel image to work in any boot environment.  The EFI boot stub supports multiple initrds, but they must exist on the same partition as the bzImage. Command-line arguments for the kernel can be appended after the bzImage name when run from the EFI shell, e.g.  Shell> bzImage console=ttyS0 root=/dev/sdb initrd=initrd.img  v7:  - Fix checkpatch warnings.  v6:   - Try to allocate initrd memory just below hdr->inird_addr_max.  v5:   - load_options_size is UTF-16, which needs dividing by 2 to convert    to the corresponding ASCII size.  v4:   - Don't read more than image->load_options_size  v3:   - Fix following warnings when compiling CONFIG_EFI_STUB=n     arch/x86/boot/tools/build.c: In function ‘main’:    arch/x86/boot/tools/build.c:138:24: warning: unused variable ‘pe_header’    arch/x86/boot/tools/build.c:138:15: warning: unused variable ‘file_sz’   - As reported by Matthew Garrett, some Apple machines have GOPs that    don't have hardware attached. We need to weed these out by    searching for ones that handle the PCIIO protocol.   - Don't allocate memory if no initrds are on cmdline  - Don't trust image->load_options_size  Maarten Lankhorst noted:  - Don't strip first argument when booted from efibootmgr  - Don't allocate too much memory for cmdline  - Don't update cmdline_size, the kernel considers it read-only  - Don't accept '\n' for initrd names  v2:   - File alignment was too large, was 8192 should be 512. Reported by    Maarten Lankhorst on LKML.  - Added UGA support for graphics  - Use VIDEO_TYPE_EFI instead of hard-coded number.  - Move linelength assignment until after we've assigned depth  - Dynamically fill out AddressOfEntryPoint in tools/build.c  - Don't use magic number for GDT/TSS stuff. Requested by Andi Kleen  - The bzImage may need to be relocated as it may have been loaded at    a high address address by the firmware. This was required to get my    macbook booting because the firmware loaded it at 0x7cxxxxxx, which    triggers this error in decompress_kernel(),  	if (heap > ((-__PAGE_OFFSET-(128<<20)-1) & 0x7fffffff)) 		error("Destination address too large");  Cc: Mike Waychison <mikew@google.com> Cc: Matthew Garrett <mjg@redhat.com> Tested-by: Henrik Rydberg <rydberg@euromail.se> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1321383097.2657.9.camel@mfleming-mobl1.ger.corp.intel.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | early_serial_console.c | s | 80B | 3 | Yinghai Lu | yinghai@kernel.org | 1280806340 |  | x86, setup: enable early console output from the decompressor  This enables the decompressor output to be seen on the serial console. Most of the code is shared with the regular boot code.  We could add printf to the decompressor if needed, but currently there is no sufficiently compelling user.  -v2: define BOOT_BOOT_H to avoid include boot.h -v3: early_serial_base need to be static in misc.c ? -v4: create seperate string.c printf.c cmdline.c early_serial_console.c      after hpa's patch that allow global variables in compressed/misc stage -v5: remove printf.c related  Signed-off-by: Yinghai Lu <yinghai@kernel.org> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
