f | if.c | s | 9.9K | 405 | H. Peter Anvin | hpa@linux.intel.com | 1330634932 |  | x86, mtrr: Use explicit sizing and padding for the 64-bit ioctls  Specify the data structures for the 64-bit ioctls with explicit sizing and padding so that the x32 kernel will correctly use the 64-bit forms of these ioctls.  Note that these ioctls are bogus in both forms on both 32 and 64 bits; even on 64 bits the maximum MTRR size is only 44 bits long.  Note that nothing really is supposed to use these ioctls and that the preferred interface is text strings on /proc/mtrr, or better yet, nothing at all (use /sys/bus/pci/devices/*/resource*_wc for write combining; that uses PAT not MTRRs.)  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Cc: H. J. Lu <hjl.tools@gmail.com> Tested-by: Nitin A. Kamble <nitin.a.kamble@intel.com> Link: http://lkml.kernel.org/n/tip-vwvnlu3hjmtkwvij4qxtm90l@git.kernel.org Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | mtrr.h | s | 2.2K | 60 | Emese Revfy | re.emese@gmail.com | 1265052043 |  | x86, mtrr: Constify struct mtrr_ops  This is part of the ops structure constification effort started by Arjan van de Ven et al.  Benefits of this constification:   * prevents modification of data that is shared    (referenced) by many other structure instances    at runtime   * detects/prevents accidental (but not intentional)    modification attempts on archs that enforce    read-only kernel data at runtime   * potentially better optimized code as the compiler    can assume that the const data cannot be changed   * the compiler/linker move const data into .rodata    and therefore exclude them from false sharing  Signed-off-by: Emese Revfy <re.emese@gmail.com> LKML-Reference: <4B65D712.3080804@gmail.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | centaur.c | s | 3.0K | 110 | Emese Revfy | re.emese@gmail.com | 1265052043 |  | x86, mtrr: Constify struct mtrr_ops  This is part of the ops structure constification effort started by Arjan van de Ven et al.  Benefits of this constification:   * prevents modification of data that is shared    (referenced) by many other structure instances    at runtime   * detects/prevents accidental (but not intentional)    modification attempts on archs that enforce    read-only kernel data at runtime   * potentially better optimized code as the compiler    can assume that the const data cannot be changed   * the compiler/linker move const data into .rodata    and therefore exclude them from false sharing  Signed-off-by: Emese Revfy <re.emese@gmail.com> LKML-Reference: <4B65D712.3080804@gmail.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | Makefile | g | 91B |  | Borislav Petkov | petkovbb@googlemail.com | 1265274098 |  | x86, mtrr: Remove unused mtrr/state.c  The last reference to the helpers in <arch/x86/kernel/cpu/mtrr/state.c> went away with 9a6b344ea967efa0bb5ca4cb5405f840652b66c4 leaving unused code. Remove it.  Signed-off-by: Borislav Petkov <borislav.petkov@amd.com> LKML-Reference: <20100204085128.GA513@liondog.tnic> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | generic.c | s | 20K | 702 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | cleanup.c | s | 24K | 817 | zhenzhong.duan | zhenzhong.duan@oracle.com | 1338413820 |  | x86, mtrr: Fix a type overflow in range_to_mtrr func  When boot on sun G5+ with 4T mem, see an overflow in mtrr cleanup as below.  *BAD*gran_size: 2G      chunk_size: 2G  num_reg: 10     lose cover RAM: -18014398505283592M  This is because 1<<31 sign extended. Use an unsigned long constant to fix it.  Useful for mem larger than or equal to 4T.  -v2: Use 64bit constant instead of explicit type conversion as suggested by Yinghai. Description updated too.  Signed-off-by: Zhenzhong Duan <zhenzhong.duan@oracle.com> Link: http://lkml.kernel.org/r/4FC5A77F.6060505@oracle.com Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | cyrix.c | s | 5.7K | 242 | Emese Revfy | re.emese@gmail.com | 1265052043 |  | x86, mtrr: Constify struct mtrr_ops  This is part of the ops structure constification effort started by Arjan van de Ven et al.  Benefits of this constification:   * prevents modification of data that is shared    (referenced) by many other structure instances    at runtime   * detects/prevents accidental (but not intentional)    modification attempts on archs that enforce    read-only kernel data at runtime   * potentially better optimized code as the compiler    can assume that the const data cannot be changed   * the compiler/linker move const data into .rodata    and therefore exclude them from false sharing  Signed-off-by: Emese Revfy <re.emese@gmail.com> LKML-Reference: <4B65D712.3080804@gmail.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | amd.c | s | 3.1K | 115 | Emese Revfy | re.emese@gmail.com | 1265052043 |  | x86, mtrr: Constify struct mtrr_ops  This is part of the ops structure constification effort started by Arjan van de Ven et al.  Benefits of this constification:   * prevents modification of data that is shared    (referenced) by many other structure instances    at runtime   * detects/prevents accidental (but not intentional)    modification attempts on archs that enforce    read-only kernel data at runtime   * potentially better optimized code as the compiler    can assume that the const data cannot be changed   * the compiler/linker move const data into .rodata    and therefore exclude them from false sharing  Signed-off-by: Emese Revfy <re.emese@gmail.com> LKML-Reference: <4B65D712.3080804@gmail.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | main.c | s | 19K | 682 | Tejun Heo | tj@kernel.org | 1314295349 |  | mtrr: fix UP breakage caused during switch to stop_machine  While removing custom rendezvous code and switching to stop_machine, commit 192d8857427d ("x86, mtrr: use stop_machine APIs for doing MTRR rendezvous") completely dropped mtrr setting code on !CONFIG_SMP breaking MTRR settting on UP.  Fix it by removing the incorrect CONFIG_SMP.  Signed-off-by: Tejun Heo <tj@kernel.org> Reported-by: Anders Eriksson <aeriksson@fastmail.fm> Tested-and-acked-by: Suresh Siddha <suresh.b.siddha@intel.com> Acked-by: H. Peter Anvin <hpa@zytor.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
