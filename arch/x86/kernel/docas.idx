f | entry_32.S | g | 31K |  | Al Viro | viro@zeniv.linux.org.uk | 1338570111 |  | x86: get rid of calling do_notify_resume() when returning to kernel mode  If we end up calling do_notify_resume() with !user_mode(refs), it does nothing (do_signal() explicitly bails out and we can't get there with TIF_NOTIFY_RESUME in such situations).  Then we jump to resume_userspace_sig, which rechecks the same thing and bails out to resume_kernel, thus breaking the loop.  It's easier and cheaper to check *before* calling do_notify_resume() and bail out to resume_kernel immediately.  And kill the check in do_signal()...  Note that on amd64 we can't get there with !user_mode() at all - asm glue takes care of that.  Acked-and-reviewed-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | process_32.c | s | 8.5K | 281 | Linus Torvalds | torvalds@linux-foundation.org | 1337795947 |  | Merge branch 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull fpu state cleanups from Ingo Molnar:  "This tree streamlines further aspects of FPU handling by eliminating   the prepare_to_copy() complication and moving that logic to   arch_dup_task_struct().    It also fixes the FPU dumps in threaded core dumps, removes and old   (and now invalid) assumption plus micro-optimizes the exit path by   avoiding an FPU save for dead tasks."  Fixed up trivial add-add conflict in arch/sh/kernel/process.c that came in because we now do the FPU handling in arch_dup_task_struct() rather than the legacy (and now gone) prepare_to_copy().  * 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86, fpu: drop the fpu state during thread exit   x86, xsave: remove thread_has_fpu() bug check in __sanitize_i387_state()   coredump: ensure the fpu state is flushed for proper multi-threaded core dump   fork: move the real prepare_to_copy() users to arch_dup_task_struct()
f | paravirt_patch_32.c | s | 1.7K | 54 | Jeremy Fitzhardinge | jeremy@goop.org | 1233355904 |  | x86/pvops: add a paravirt_ident functions to allow special patching  Impact: Optimization  Several paravirt ops implementations simply return their arguments, the most obvious being the make_pte/pte_val class of operations on native.  On 32-bit, the identity function is literally a no-op, as the calling convention uses the same registers for the first argument and return. On 64-bit, it can be implemented with a single "mov".  This patch adds special identity functions for 32 and 64 bit argument, and machinery to recognize them and replace them with either nops or a mov as appropriate.  At the moment, the only users for the identity functions are the pagetable entry conversion functions.  The result is a measureable improvement on pagetable-heavy benchmarks (2-3%, reducing the pvops overhead from 5 to 2%).  Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | audit_64.c | s | 1.8K | 72 | Thomas Gleixner | tglx@linutronix.de | 1192094244 |  | x86_64: move kernel  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | mpparse.c | s | 21K | 784 | Linus Torvalds | torvalds@linux-foundation.org | 1338347693 |  | Merge branch 'x86-trampoline-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 trampoline rework from H. Peter Anvin:  "This code reworks all the "trampoline"/"realmode" code (various bits   that need to live in the first megabyte of memory, most but not all of   which runs in real mode at some point) in the kernel into a single   object.  The main reason for doing this is that it eliminates the last   place in the kernel where we needed pages to be mapped RWX.  This code   separates all that code into proper R/RW/RX pages."  Fix up conflicts in arch/x86/kernel/Makefile (mca removed next to reboot code), and arch/x86/kernel/reboot.c (reboot code moved around in one branch, modified in this one), and arch/x86/tools/relocs.c (mostly same code came in earlier due to working around the ld bugs just before the 3.4 release).  Also remove stale x86-relocs entry from scripts/.gitignore as per Peter Anvin.  * commit '61f5446169046c217a5479517edac3a890c3bee7': (36 commits)   x86, realmode: Move end signature into header.S   x86, relocs: When printing an error, say relative or absolute   x86, relocs: More relocations which may end up as absolute   x86, relocs: Workaround for binutils 2.22.52.0.1 section bug   xen-acpi-processor: Add missing #include <xen/xen.h>   acpi, bgrd: Add missing <linux/io.h> to drivers/acpi/bgrt.c   x86, realmode: Change EFER to a single u64 field   x86, realmode: Move kernel/realmode.c to realmode/init.c   x86, realmode: Move not-common bits out of trampoline_common.S   x86, realmode: Mask out EFER.LMA when saving trampoline EFER   x86, realmode: Fix no cache bits test in reboot_32.S   x86, realmode: Make sure all generated files are listed in targets   x86, realmode: build fix: remove duplicate build   x86, realmode: read cr4 and EFER from kernel for 64-bit trampoline   x86, realmode: fixes compilation issue in tboot.c   x86, realmode: move relocs from scripts/ to arch/x86/tools   x86, realmode: header for trampoline code   x86, realmode: flattened rm hierachy   x86, realmode: don't copy real_mode_header   x86, realmode: fix 64-bit wakeup sequence   ...
f | pci-calgary_64.c | s | 40K | 1314 | Linus Torvalds | torvalds@linux-foundation.org | 1337792990 |  | Merge branches 'x86-asm-for-linus', 'x86-cleanups-for-linus', 'x86-cpu-for-linus', 'x86-debug-for-linus' and 'x86-microcode-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull initial trivial x86 stuff from Ingo Molnar.  Various random cleanups and trivial fixes.  * 'x86-asm-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86-64: Eliminate dead ia32 syscall handlers  * 'x86-cleanups-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/pci-calgary_64.c: Remove obsoleted simple_strtoul() usage   x86: Don't continue booting if we can't load the specified initrd   x86: kernel/dumpstack.c simple_strtoul cleanup   x86: kernel/check.c simple_strtoul cleanup   debug: Add CONFIG_READABLE_ASM   x86: spinlock.h: Remove REG_PTR_MODE  * 'x86-cpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/cache_info: Fix setup of l2/l3 ids  * 'x86-debug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86: Avoid double stack traces with show_regs()  * 'x86-microcode-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86, microcode: microcode_core.c simple_strtoul cleanup
f | pci-iommu_table.c | s | 1.7K | 65 | Joe Perches | joe@perches.com | 1305015695 |  | arch/x86/kernel/pci-iommu_table.c: Convert sprintf_symbol to %pS  Coalesce format as well.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: Joerg Roedel <joerg.roedel@amd.com>
f | test_rodata.c | s | 2.1K | 71 | H. Peter Anvin | hpa@zytor.com | 1334955098 |  | x86, extable: Remove open-coded exception table entries in arch/x86/kernel/test_rodata.c  Remove open-coded exception table entries in arch/x86/kernel/test_rodata.c, and replace them with _ASM_EXTABLE() macros; this will allow us to change the format and type of the exception table entries.  Signed-off-by: H. Peter Anvin <hpa@zytor.com> Cc: David Daney <david.daney@cavium.com> Link: http://lkml.kernel.org/r/CA%2B55aFyijf43qSu3N9nWHEBwaGbb7T2Oq9A=9EyR=Jtyqfq_cQ@mail.gmail.com
f | Makefile | g | 3.6K |  | Linus Torvalds | torvalds@linux-foundation.org | 1338347693 |  | Merge branch 'x86-trampoline-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 trampoline rework from H. Peter Anvin:  "This code reworks all the "trampoline"/"realmode" code (various bits   that need to live in the first megabyte of memory, most but not all of   which runs in real mode at some point) in the kernel into a single   object.  The main reason for doing this is that it eliminates the last   place in the kernel where we needed pages to be mapped RWX.  This code   separates all that code into proper R/RW/RX pages."  Fix up conflicts in arch/x86/kernel/Makefile (mca removed next to reboot code), and arch/x86/kernel/reboot.c (reboot code moved around in one branch, modified in this one), and arch/x86/tools/relocs.c (mostly same code came in earlier due to working around the ld bugs just before the 3.4 release).  Also remove stale x86-relocs entry from scripts/.gitignore as per Peter Anvin.  * commit '61f5446169046c217a5479517edac3a890c3bee7': (36 commits)   x86, realmode: Move end signature into header.S   x86, relocs: When printing an error, say relative or absolute   x86, relocs: More relocations which may end up as absolute   x86, relocs: Workaround for binutils 2.22.52.0.1 section bug   xen-acpi-processor: Add missing #include <xen/xen.h>   acpi, bgrd: Add missing <linux/io.h> to drivers/acpi/bgrt.c   x86, realmode: Change EFER to a single u64 field   x86, realmode: Move kernel/realmode.c to realmode/init.c   x86, realmode: Move not-common bits out of trampoline_common.S   x86, realmode: Mask out EFER.LMA when saving trampoline EFER   x86, realmode: Fix no cache bits test in reboot_32.S   x86, realmode: Make sure all generated files are listed in targets   x86, realmode: build fix: remove duplicate build   x86, realmode: read cr4 and EFER from kernel for 64-bit trampoline   x86, realmode: fixes compilation issue in tboot.c   x86, realmode: move relocs from scripts/ to arch/x86/tools   x86, realmode: header for trampoline code   x86, realmode: flattened rm hierachy   x86, realmode: don't copy real_mode_header   x86, realmode: fix 64-bit wakeup sequence   ...
f | apb_timer.c | s | 11K | 368 | Linus Torvalds | torvalds@linux-foundation.org | 1311442487 |  | Merge branch 'timers-clocksource-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip  * 'timers-clocksource-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:   clocksource: apb: Share APB timer code with other platforms
f | head64.c | s | 3.3K | 103 | Jarkko Sakkinen | jarkko.sakkinen@intel.com | 1336502765 |  | x86, realmode: Move ACPI wakeup to unified realmode code  Migrated ACPI wakeup code to the real-mode blob. Code existing in .x86_trampoline  can be completely removed. Static descriptor table in wakeup_asm.S is courtesy of H. Peter Anvin.  Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@intel.com> Link: http://lkml.kernel.org/r/1336501366-28617-7-git-send-email-jarkko.sakkinen@intel.com Cc: Rafael J. Wysocki <rjw@sisk.pl> Cc: Len Brown <len.brown@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | vsyscall_emu_64.S | g | 597B |  | Andy Lutomirski | luto@mit.edu | 1313022406 |  | x86-64: Rework vsyscall emulation and add vsyscall= parameter  There are three choices:  vsyscall=native: Vsyscalls are native code that issues the corresponding syscalls.  vsyscall=emulate (default): Vsyscalls are emulated by instruction fault traps, tested in the bad_area path.  The actual contents of the vsyscall page is the same as the vsyscall=native case except that it's marked NX.  This way programs that make assumptions about what the code in the page does will not be confused when they read that code.  vsyscall=none: Trying to execute a vsyscall will segfault.  Signed-off-by: Andy Lutomirski <luto@mit.edu> Link: http://lkml.kernel.org/r/8449fb3abf89851fd6b2260972666a6f82542284.1312988155.git.luto@mit.edu Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | smpboot.c | s | 33K | 1180 | Linus Torvalds | torvalds@linux-foundation.org | 1339804759 |  | Merge branch 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 fixes from Ingo Molnar.  * 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/smp: Fix topology checks on AMD MCM CPUs   x86/mm: Fix some kernel-doc warnings   x86, um: Correct syscall table type attributes breaking gcc 4.8
f | e820.c | s | 27K | 967 | Bjorn Helgaas | bhelgaas@google.com | 1338333740 |  | x86: print e820 physical addresses consistently with other parts of kernel  Print physical address info in a style consistent with the %pR style used elsewhere in the kernel.  For example:      -BIOS-provided physical RAM map:     +e820: BIOS-provided physical RAM map:     - BIOS-e820: 0000000000000100 - 000000000009e000 (usable)     +BIOS-e820: [mem 0x0000000000000100-0x000000000009dfff] usable     -Allocating PCI resources starting at 90000000 (gap: 90000000:6ed1c000)     +e820: [mem 0x90000000-0xfed1bfff] available for PCI devices     -reserve RAM buffer: 000000000009e000 - 000000000009ffff     +e820: reserve RAM buffer [mem 0x0009e000-0x0009ffff]  Signed-off-by: Bjorn Helgaas <bhelgaas@google.com> Cc: Yinghai Lu <yinghai@kernel.org> Cc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | tsc_sync.c | s | 5.5K | 193 | Suresh Siddha | suresh.b.siddha@intel.com | 1329907780 |  | x86/tsc: Reduce the TSC sync check time for core-siblings  For each logical CPU that is coming online, we spend 20msec for checking the TSC synchronization. And as this is done sequentially for each logical CPU boot, this time gets added up depending on the number of logical CPU's supported by the platform.  Minimize this by using the socket topology information.  If the target CPU coming online doesn't have any of its core-siblings online, a timeout of 20msec will be used for the TSC-warp measurement loop. Otherwise a smaller timeout of 2msec will be used, as we have some information about this socket already (and this information grows as we have more and more logical-siblings in that socket).  Ideally we should be able to skip the TSC sync check on the other core-siblings, if the first logical CPU in a socket passed the sync test. But as the TSC is per-logical CPU and can potentially be modified wrongly by the bios before the OS boot, TSC sync test for smaller duration should be able to catch such errors. Also this will catch the condition where all the cores in the socket doesn't get reset at the same time.  For example, with this modification, time spent in TSC sync checks on a 4 socket 10-core with HT system gets reduced from 1580msec to 212msec.  Signed-off-by: Suresh Siddha <suresh.b.siddha@intel.com> Acked-by: Arjan van de Ven <arjan@linux.intel.com> Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Jack Steiner <steiner@sgi.com> Cc: venki@google.com Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/1328581940.29790.20.camel@sbsiddha-desk.sc.intel.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | doublefault_32.c | s | 1.7K | 55 | Akinobu Mita | akinobu.mita@gmail.com | 1248020871 |  | x86: Use get_desc_base()  Use get_desc_base() to get the base address in desc_struct  Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com> LKML-Reference: <20090718150853.GA11294@localhost.localdomain> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | time.c | s | 2.0K | 84 | Paul Gortmaker | paul.gortmaker@windriver.com | 1337295973 |  | MCA: delete all remaining traces of microchannel bus support.  Hardware with MCA bus is limited to 386 and 486 class machines that are now 20+ years old and typically with less than 32MB of memory.  A quick search on the internet, and you see that even the MCA hobbyist/enthusiast community has lost interest in the early 2000 era and never really even moved ahead from the 2.4 kernels to the 2.6 series.  This deletes anything remaining related to CONFIG_MCA from core kernel code and from the x86 architecture.  There is no point in carrying this any further into the future.  One complication to watch for is inadvertently scooping up stuff relating to machine check, since there is overlap in the TLA name space (e.g. arch/x86/boot/mca.c).  Cc: Thomas Gleixner <tglx@linutronix.de> Cc: James Bottomley <JBottomley@Parallels.com> Cc: x86@kernel.org Acked-by: Ingo Molnar <mingo@elte.hu> Acked-by: H. Peter Anvin <hpa@zytor.com> Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | vm86_32.c | s | 21K | 750 | Linus Torvalds | torvalds@linux-foundation.org | 1333070495 |  | Merge branch 'x86-cleanups-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 cleanups from Peter Anvin:  "The biggest textual change is the cleanup to use symbolic constants   for x86 trap values.    The only *functional* change and the reason for the x86/x32 dependency   is the move of is_ia32_task() into <asm/thread_info.h> so that it can   be used in other code that needs to understand if a system call comes   from the compat entry point (and therefore uses i386 system call   numbers) or not.  One intended user for that is the BPF system call   filter.  Moving it out of <asm/compat.h> means we can define it   unconditionally, returning always true on i386."  * 'x86-cleanups-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86: Move is_ia32_task to asm/thread_info.h from asm/compat.h   x86: Rename trap_no to trap_nr in thread_struct   x86: Use enum instead of literals for trap values
f | machine_kexec_64.c | s | 8.3K | 310 | Jan Beulich | JBeulich@novell.com | 1285195009 |  | x86, cleanups: Use clear_page/copy_page rather than memset/memcpy  When operating on whole pages, use clear_page() and copy_page() in favor of memset() and memcpy(); after all that's what they are intended for.  Signed-off-by: Jan Beulich <jbeulich@novell.com> LKML-Reference: <4C7FB8CA0200007800013F51@vpn.id2.novell.com> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | i386_ksyms_32.c | s | 864B | 30 | Eric Dumazet | eric.dumazet@gmail.com | 1254379344 |  | x86: Don't generate cmpxchg8b_emu if CONFIG_X86_CMPXCHG64=y  Conditionaly compile cmpxchg8b_emu.o and EXPORT_SYMBOL(cmpxchg8b_emu).  This reduces the kernel size a bit.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Cc: Arjan van de Ven <arjan@infradead.org> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: John Stultz <johnstul@us.ibm.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Linus Torvalds <torvalds@linux-foundation.org> LKML-Reference: <4AC43E7E.1000600@gmail.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | hpet.c | s | 28K | 1041 | Jan Beulich | JBeulich@suse.com | 1337952749 |  | x86: hpet: Fix copy-and-paste mistake in earlier change  This fixes an oversight in 396e2c6fed4ff13b53ce0e573105531cf53b0cad ("x86: Clear HPET configuration registers on startup"), noticed by Thomas Gleixner.  Signed-off-by: Jan Beulich <jbeulich@suse.com> Link: http://lkml.kernel.org/r/4FBF7DA902000078000861EE@nat28.tlf.novell.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | head32.c | s | 1.7K | 58 | Jarkko Sakkinen | jarkko.sakkinen@intel.com | 1336502765 |  | x86, realmode: Move ACPI wakeup to unified realmode code  Migrated ACPI wakeup code to the real-mode blob. Code existing in .x86_trampoline  can be completely removed. Static descriptor table in wakeup_asm.S is courtesy of H. Peter Anvin.  Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@intel.com> Link: http://lkml.kernel.org/r/1336501366-28617-7-git-send-email-jarkko.sakkinen@intel.com Cc: Rafael J. Wysocki <rjw@sisk.pl> Cc: Len Brown <len.brown@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | topology.c | s | 2.2K | 74 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103835 |  | x86: Fix files explicitly requiring export.h for EXPORT_SYMBOL/THIS_MODULE  These files were implicitly getting EXPORT_SYMBOL via device.h which was including module.h, but that will be fixed up shortly.  By fixing these now, we can avoid seeing things like:  arch/x86/kernel/rtc.c:29: warning: type defaults to ‘int’ in declaration of ‘EXPORT_SYMBOL’ arch/x86/kernel/pci-dma.c:20: warning: type defaults to ‘int’ in declaration of ‘EXPORT_SYMBOL’ arch/x86/kernel/e820.c:69: warning: type defaults to ‘int’ in declaration of ‘EXPORT_SYMBOL_GPL’  [ with input from Randy Dunlap <rdunlap@xenotime.net> and also   from Stephen Rothwell <sfr@canb.auug.org.au> ]  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | tce_64.c | s | 4.1K | 153 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | nmi.c | s | 13K | 423 | Steven Rostedt | srostedt@redhat.com | 1338520340 |  | x86: Reset the debug_stack update counter  When an NMI goes off and it sees that it preempted the debug stack, to keep the debug stack safe, it changes the IDT to point to one that does not modify the stack on breakpoint (to allow breakpoints in NMIs).  But the variable that gets set to know to undo it on exit never gets cleared on exit. Thus every NMI will reset it on exit the first time it is done even if it does not need to be reset.  [ Added H. Peter Anvin's suggestion to use this_cpu_read/write ]  Cc: <stable@vger.kernel.org> # v3.3 Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | paravirt.c | s | 11K | 403 | Alex Shi | alex.shi@intel.com | 1337030131 |  | x86: replace percpu_xxx funcs with this_cpu_xxx  Since percpu_xxx() serial functions are duplicated with this_cpu_xxx(). Removing percpu_xxx() definition and replacing them by this_cpu_xxx() in code. There is no function change in this patch, just preparation for later percpu_xxx serial function removing.  On x86 machine the this_cpu_xxx() serial functions are same as __this_cpu_xxx() without no unnecessary premmpt enable/disable.  Thanks for Stephen Rothwell, he found and fixed a i386 build error in the patch.  Also thanks for Andrew Morton, he kept updating the patchset in Linus' tree.  Signed-off-by: Alex Shi <alex.shi@intel.com> Acked-by: Christoph Lameter <cl@gentwo.org> Acked-by: Tejun Heo <tj@kernel.org> Acked-by: "H. Peter Anvin" <hpa@zytor.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Tejun Heo <tj@kernel.org>
f | dumpstack_64.c | s | 7.3K | 275 | Jan Beulich | JBeulich@suse.com | 1336556682 |  | x86: Avoid double stack traces with show_regs()  What was called show_registers() so far already showed a stack trace for kernel faults, and kernel_stack_pointer() isn't even valid to be used for faults from user mode, hence it was pointless for show_regs() to call show_trace() after show_registers().  Simply rename show_registers() to show_regs() and eliminate the old definition.  Signed-off-by: Jan Beulich <jbeulich@suse.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Link: http://lkml.kernel.org/r/4FAA3D3902000078000826E1@nat28.tlf.novell.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | verify_cpu.S | g | 3.6K |  | Lucas De Marchi | lucas.de.marchi@gmail.com | 1300441170 |  | x86: Fix common misspellings  They were generated by 'codespell' and then manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi> Cc: trivial@kernel.org LKML-Reference: <1300389856-1099-3-git-send-email-lucas.demarchi@profusion.mobi> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | dumpstack.c | s | 7.5K | 297 | Linus Torvalds | torvalds@linux-foundation.org | 1337792990 |  | Merge branches 'x86-asm-for-linus', 'x86-cleanups-for-linus', 'x86-cpu-for-linus', 'x86-debug-for-linus' and 'x86-microcode-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull initial trivial x86 stuff from Ingo Molnar.  Various random cleanups and trivial fixes.  * 'x86-asm-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86-64: Eliminate dead ia32 syscall handlers  * 'x86-cleanups-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/pci-calgary_64.c: Remove obsoleted simple_strtoul() usage   x86: Don't continue booting if we can't load the specified initrd   x86: kernel/dumpstack.c simple_strtoul cleanup   x86: kernel/check.c simple_strtoul cleanup   debug: Add CONFIG_READABLE_ASM   x86: spinlock.h: Remove REG_PTR_MODE  * 'x86-cpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/cache_info: Fix setup of l2/l3 ids  * 'x86-debug-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86: Avoid double stack traces with show_regs()  * 'x86-microcode-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86, microcode: microcode_core.c simple_strtoul cleanup
f | syscall_64.c | s | 856B | 25 | H. Peter Anvin | hpa@zytor.com | 1329771126 |  | x32: If configured, add x32 system calls to system call tables  If CONFIG_X86_X32_ABI is defined, add the x32 system calls to the system call tables.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | aperture_64.c | s | 13K | 440 | Xiaotian Feng | xtfeng@gmail.com | 1338976718 |  | x86/gart: Fix kmemleak warning  aperture_64.c now is using memblock, the previous kmemleak_ignore() for alloc_bootmem() should be removed then.  Otherwise, with kmemleak enabled, kernel will throw warnings like:  [    0.000000] kmemleak: Trying to color unknown object at 0xffff8800c4000000 as Black [    0.000000] Pid: 0, comm: swapper/0 Not tainted 3.5.0-rc1-next-20120605+ #130 [    0.000000] Call Trace: [    0.000000]  [<ffffffff811b27e6>] paint_ptr+0x66/0xc0 [    0.000000]  [<ffffffff816b90fb>] kmemleak_ignore+0x2b/0x60 [    0.000000]  [<ffffffff81ef7bc0>] kmemleak_init+0x217/0x2c1 [    0.000000]  [<ffffffff81ed2b97>] start_kernel+0x32d/0x3eb [    0.000000]  [<ffffffff81ed25e4>] ? repair_env_string+0x5a/0x5a [    0.000000]  [<ffffffff81ed2356>] x86_64_start_reservations+0x131/0x135 [    0.000000]  [<ffffffff81ed2120>] ? early_idt_handlers+0x120/0x120 [    0.000000]  [<ffffffff81ed245c>] x86_64_start_kernel+0x102/0x111 [    0.000000] kmemleak: Early log backtrace: [    0.000000]    [<ffffffff816b911b>] kmemleak_ignore+0x4b/0x60 [    0.000000]    [<ffffffff81ee6a38>] gart_iommu_hole_init+0x3e7/0x547 [    0.000000]    [<ffffffff81edb20b>] pci_iommu_alloc+0x44/0x6f [    0.000000]    [<ffffffff81ee81ad>] mem_init+0x19/0xec [    0.000000]    [<ffffffff81ed2a54>] start_kernel+0x1ea/0x3eb [    0.000000]    [<ffffffff81ed2356>] x86_64_start_reservations+0x131/0x135 [    0.000000]    [<ffffffff81ed245c>] x86_64_start_kernel+0x102/0x111 [    0.000000]    [<ffffffffffffffff>] 0xffffffffffffffff  Signed-off-by: Xiaotian Feng <dannyfeng@tencent.com> Cc: Xiaotian Feng <xtfeng@gmail.com> Cc: Tejun Heo <tj@kernel.org> Link: http://lkml.kernel.org/r/1338922831-2847-1-git-send-email-xtfeng@gmail.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | asm-offsets.c | s | 2.1K | 63 | Matt Fleming | matt.fleming@intel.com | 1323728770 |  | x86, efi: EFI boot stub support  There is currently a large divide between kernel development and the development of EFI boot loaders. The idea behind this patch is to give the kernel developers full control over the EFI boot process. As H. Peter Anvin put it,  "The 'kernel carries its own stub' approach been very successful in dealing with BIOS, and would make a lot of sense to me for EFI as well."  This patch introduces an EFI boot stub that allows an x86 bzImage to be loaded and executed by EFI firmware. The bzImage appears to the firmware as an EFI application. Luckily there are enough free bits within the bzImage header so that it can masquerade as an EFI application, thereby coercing the EFI firmware into loading it and jumping to its entry point. The beauty of this masquerading approach is that both BIOS and EFI boot loaders can still load and run the same bzImage, thereby allowing a single kernel image to work in any boot environment.  The EFI boot stub supports multiple initrds, but they must exist on the same partition as the bzImage. Command-line arguments for the kernel can be appended after the bzImage name when run from the EFI shell, e.g.  Shell> bzImage console=ttyS0 root=/dev/sdb initrd=initrd.img  v7:  - Fix checkpatch warnings.  v6:   - Try to allocate initrd memory just below hdr->inird_addr_max.  v5:   - load_options_size is UTF-16, which needs dividing by 2 to convert    to the corresponding ASCII size.  v4:   - Don't read more than image->load_options_size  v3:   - Fix following warnings when compiling CONFIG_EFI_STUB=n     arch/x86/boot/tools/build.c: In function ‘main’:    arch/x86/boot/tools/build.c:138:24: warning: unused variable ‘pe_header’    arch/x86/boot/tools/build.c:138:15: warning: unused variable ‘file_sz’   - As reported by Matthew Garrett, some Apple machines have GOPs that    don't have hardware attached. We need to weed these out by    searching for ones that handle the PCIIO protocol.   - Don't allocate memory if no initrds are on cmdline  - Don't trust image->load_options_size  Maarten Lankhorst noted:  - Don't strip first argument when booted from efibootmgr  - Don't allocate too much memory for cmdline  - Don't update cmdline_size, the kernel considers it read-only  - Don't accept '\n' for initrd names  v2:   - File alignment was too large, was 8192 should be 512. Reported by    Maarten Lankhorst on LKML.  - Added UGA support for graphics  - Use VIDEO_TYPE_EFI instead of hard-coded number.  - Move linelength assignment until after we've assigned depth  - Dynamically fill out AddressOfEntryPoint in tools/build.c  - Don't use magic number for GDT/TSS stuff. Requested by Andi Kleen  - The bzImage may need to be relocated as it may have been loaded at    a high address address by the firmware. This was required to get my    macbook booting because the firmware loaded it at 0x7cxxxxxx, which    triggers this error in decompress_kernel(),  	if (heap > ((-__PAGE_OFFSET-(128<<20)-1) & 0x7fffffff)) 		error("Destination address too large");  Cc: Mike Waychison <mikew@google.com> Cc: Matthew Garrett <mjg@redhat.com> Tested-by: Henrik Rydberg <rydberg@euromail.se> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1321383097.2657.9.camel@mfleming-mobl1.ger.corp.intel.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | quirks.c | s | 15K | 488 | Andreas Herrmann | andreas.herrmann3@amd.com | 1323105191 |  | x86, amd: Fix up numa_node information for AMD CPU family 15h model 0-0fh northbridge functions  I've received complaints that the numa_node attribute for family 15h model 00-0fh (e.g. Interlagos) northbridge functions shows -1 instead of the proper node ID.  Correct this with attached quirks (similar to quirks for other AMD CPU families used in multi-socket systems).  Signed-off-by: Andreas Herrmann <andreas.herrmann3@amd.com> Cc: Frank Arnold <frank.arnold@amd.com> Cc: Borislav Petkov <borislav.petkov@amd.com> Link: http://lkml.kernel.org/r/20111202072143.GA31916@alberich.amd.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | microcode_intel.c | s | 13K | 397 | Srivatsa S. Bhat | srivatsa.bhat@linux.vnet.ibm.com | 1336394234 |  | x86/microcode: Ensure that module is only loaded on supported Intel CPUs  Exit early when there's no support for a particular CPU family.  Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com> Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: Andreas Herrmann <andreas.herrmann3@amd.com> Cc: Kay Sievers <kay.sievers@vrfy.org> Cc: Dave Jones <davej@redhat.com> Cc: tigran@aivazian.fsnet.co.uk Cc: Borislav Petkov <borislav.petkov@amd.com> Link: http://lkml.kernel.org/r/4F8BDB58.6070007@linux.vnet.ibm.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | early-quirks.c | s | 7.2K | 251 | Andreas Herrmann | andreas.herrmann3@amd.com | 1300280612 |  | x86, quirk: Fix SB600 revision check  Commit 7f74f8f28a2bd9db9404f7d364e2097a0c42cc12 (x86 quirk: Fix polarity for IRQ0 pin2 override on SB800 systems) introduced a regression. It removed some SB600 specific code to determine the revision ID without adapting a corresponding revision ID check for SB600.  See this mail thread:    http://marc.info/?l=linux-kernel&m=129980296006380&w=2  This patch adapts the corresponding check to cover all SB600 revisions.  Tested-by: Wang Lei <f3d27b@gmail.com> Signed-off-by: Andreas Herrmann <andreas.herrmann3@amd.com> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: stable@kernel.org # 38.x, 37.x, 32.x LKML-Reference: <20110315143137.GD29499@alberich.amd.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | ioport.c | s | 2.9K | 96 | Akinobu Mita | akinobu.mita@gmail.com | 1297951162 |  | x86: Use bitmap library functions  Use bitmap_set()/bitmap_clear() to fill/zero a region of a bitmap instead of doing set_bit()/clear_bit() each bit.  This change has been tested with ioperm() and there's no change in behavior.  Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com> LKML-Reference: <1297867715-20394-1-git-send-email-akinobu.mita@gmail.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | kgdb.c | s | 20K | 737 | Wanpeng Li | liwp@linux.vnet.ibm.com | 1340009598 |  | x86: Fix kernel-doc warnings  Signed-off-by: Wanpeng Li <liwp@linux.vnet.ibm.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Jason Wessel <jason.wessel@windriver.com> Cc: Jan Kiszka <jan.kiszka@siemens.com> Cc: Gavin Shan <shangw@linux.vnet.ibm.com> Cc: Wanpeng Li <liwp.linux@gmail.com> Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | tsc.c | s | 26K | 871 | Linus Torvalds | torvalds@linux-foundation.org | 1333055808 |  | Merge branch 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull timer core updates from Thomas Gleixner.  * 'timers-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   ia64: vsyscall: Add missing paranthesis   alarmtimer: Don't call rtc_timer_init() when CONFIG_RTC_CLASS=n   x86: vdso: Put declaration before code   x86-64: Inline vdso clock_gettime helpers   x86-64: Simplify and optimize vdso clock_gettime monotonic variants   kernel-time: fix s/then/than/ spelling errors   time: remove no_sync_cmos_clock   time: Avoid scary backtraces when warning of > 11% adj   alarmtimer: Make sure we initialize the rtctimer   ntp: Fix leap-second hrtimer livelock   x86, tsc: Skip refined tsc calibration on systems with reliable TSC   rtc: Provide flag for rtc devices that don't support UIE   ia64: vsyscall: Use seqcount instead of seqlock   x86: vdso: Use seqcount instead of seqlock   x86: vdso: Remove bogus locking in update_vsyscall_tz()   time: Remove bogus comments   time: Fix change_clocksource locking   time: x86: Fix race switching from vsyscall to non-vsyscall clock
f | amd_gart_64.c | s | 22K | 754 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1332945391 |  | X86 & IA64: adapt for dma_map_ops changes  Adapt core x86 and IA64 architecture code for dma_map_ops changes: replace alloc/free_coherent with generic alloc/free methods.  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> Acked-by: Kyungmin Park <kyungmin.park@samsung.com> [removed swiotlb related changes and replaced it with wrappers,  merged with IA64 patch to avoid inter-patch dependences in intel-iommu code] Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Reviewed-by: Arnd Bergmann <arnd@arndb.de> Acked-by: Tony Luck <tony.luck@intel.com>
f | pci-swiotlb.c | s | 2.6K | 96 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1332945391 |  | X86 & IA64: adapt for dma_map_ops changes  Adapt core x86 and IA64 architecture code for dma_map_ops changes: replace alloc/free_coherent with generic alloc/free methods.  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> Acked-by: Kyungmin Park <kyungmin.park@samsung.com> [removed swiotlb related changes and replaced it with wrappers,  merged with IA64 patch to avoid inter-patch dependences in intel-iommu code] Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Reviewed-by: Arnd Bergmann <arnd@arndb.de> Acked-by: Tony Luck <tony.luck@intel.com>
f | traps.c | s | 19K | 649 | Steven Rostedt | srostedt@redhat.com | 1338520337 |  | ftrace: Synchronize variable setting with breakpoints  When the function tracer starts modifying the code via breakpoints it sets a variable (modifying_ftrace_code) to inform the breakpoint handler to call the ftrace int3 code.  But there's no synchronization between setting this code and the handler, thus it is possible for the handler to be called on another CPU before it sees the variable. This will cause a kernel crash as the int3 handler will not know what to do with it.  I originally added smp_mb()'s to force the visibility of the variable but H. Peter Anvin suggested that I just make it atomic.  [ Added comments as suggested by Peter Zijlstra ]  Suggested-by: H. Peter Anvin <hpa@zytor.com> Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | vmlinux.lds.S | g | 8.5K |  | Jarkko Sakkinen | jarkko.sakkinen@intel.com | 1336502765 |  | x86, realmode: Move ACPI wakeup to unified realmode code  Migrated ACPI wakeup code to the real-mode blob. Code existing in .x86_trampoline  can be completely removed. Static descriptor table in wakeup_asm.S is courtesy of H. Peter Anvin.  Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@intel.com> Link: http://lkml.kernel.org/r/1336501366-28617-7-git-send-email-jarkko.sakkinen@intel.com Cc: Rafael J. Wysocki <rjw@sisk.pl> Cc: Len Brown <len.brown@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | mmconf-fam10h_64.c | s | 5.4K | 197 | Jan Beulich | JBeulich@novell.com | 1290084095 |  | x86-64: Fix and clean up AMD Fam10 MMCONF enabling  Candidate memory ranges were not calculated properly (start addresses got needlessly rounded down, and end addresses didn't get rounded up at all), address comparison for secondary CPUs was done on only part of the address, and disabled status wasn't tracked properly.  Signed-off-by: Jan Beulich <jbeulich@novell.com> Acked-by: Yinghai Lu <yinghai@kernel.org> Acked-by: Andreas Herrmann <andreas.herrmann3@amd.com> LKML-Reference: <4CE24DF40200007800022737@vpn.id2.novell.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | paravirt_patch_64.c | s | 2.2K | 66 | Jeremy Fitzhardinge | jeremy@goop.org | 1233355904 |  | x86/pvops: add a paravirt_ident functions to allow special patching  Impact: Optimization  Several paravirt ops implementations simply return their arguments, the most obvious being the make_pte/pte_val class of operations on native.  On 32-bit, the identity function is literally a no-op, as the calling convention uses the same registers for the first argument and return. On 64-bit, it can be implemented with a single "mov".  This patch adds special identity functions for 32 and 64 bit argument, and machinery to recognize them and replace them with either nops or a mov as appropriate.  At the moment, the only users for the identity functions are the pagetable entry conversion functions.  The result is a measureable improvement on pagetable-heavy benchmarks (2-3%, reducing the pvops overhead from 5 to 2%).  Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | ptrace.c | s | 37K | 1334 | H.J. Lu | hjl.tools@gmail.com | 1338584061 |  | x86, x32, ptrace: Remove PTRACE_ARCH_PRCTL for x32  When I added x32 ptrace to 3.4 kernel, I also include PTRACE_ARCH_PRCTL support for x32 GDB  For ARCH_GET_FS/GS, it takes a pointer to int64.  But at user level, ARCH_GET_FS/GS takes a pointer to int32.  So I have to add x32 ptrace to glibc to handle it with a temporary int64 passed to kernel and copy it back to GDB as int32.  Roland suggested that PTRACE_ARCH_PRCTL is obsolete and x32 GDB should use fs_base and gs_base fields of user_regs_struct instead.  Accordingly, remove PTRACE_ARCH_PRCTL completely from the x32 code to avoid possible memory overrun when pointer to int32 is passed to kernel.  Link: http://lkml.kernel.org/r/CAMe9rOpDzHfS7NH7m1vmD9QRw8SSj4Sc%2BaNOgcWm_WJME2eRsQ@mail.gmail.com Signed-off-by: H. Peter Anvin <hpa@zytor.com> Cc: <stable@vger.kernel.org> v3.4
f | msr.c | s | 6.3K | 257 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | irq_64.c | s | 2.8K | 90 | Mitsuo Hayasaka | mitsuo.hayasaka.hu@hitachi.com | 1323246431 |  | x86: Add stack top margin for stack overflow checking  It seems that a margin for stack overflow checking is added to top of a kernel stack but is not added to IRQ and exception stacks in stack_overflow_check(). Therefore, the overflows of IRQ and exception stacks are always detected only after they actually occurred and data corruption might occur due to them.  This patch adds the margin to top of IRQ and exception stacks as well as a kernel stack to enhance reliability.  Signed-off-by: Mitsuo Hayasaka <mitsuo.hayasaka.hu@hitachi.com> Cc: yrl.pp-manager.tt@hitachi.com Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/20111207082910.9847.3359.stgit@ltc219.sdl.hitachi.co.jp [ removed the #undef - we typically don't do that for uncommon names ] Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | crash_dump_32.c | s | 2.5K | 82 | Cong Wang | amwang@redhat.com | 1332251295 |  | x86: remove the second argument of k[un]map_atomic()  Acked-by: Avi Kivity <avi@redhat.com> Acked-by: Herbert Xu <herbert@gondor.apana.org.au> Signed-off-by: Cong Wang <amwang@redhat.com>
f | pci-dma.c | s | 7.1K | 241 | Marek Szyprowski | m.szyprowski@samsung.com | 1339675290 |  | x86: dma-mapping: fix broken allocation when dma_mask has been provided  Commit 0a2b9a6ea93 ("X86: integrate CMA with DMA-mapping subsystem") broke memory allocation with dma_mask. This patch fixes possible kernel ops caused by lack of resetting page variable when jumping to 'again' label.  Reported-by: Konrad Rzeszutek Wilk <konrad@darnok.org> Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Acked-by: Michal Nazarewicz <mina86@mina86.com>
f | tls.c | s | 4.8K | 178 | Linus Torvalds | torvalds@linux-foundation.org | 1333056506 |  | Merge branch 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 updates from Ingo Molnar.  This touches some non-x86 files due to the sanitized INLINE_SPIN_UNLOCK config usage.  Fixed up trivial conflicts due to just header include changes (removing headers due to cpu_idle() merge clashing with the <asm/system.h> split).  * 'x86-urgent-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/apic/amd: Be more verbose about LVT offset assignments   x86, tls: Off by one limit check   x86/ioapic: Add io_apic_ops driver layer to allow interception   x86/olpc: Add debugfs interface for EC commands   x86: Merge the x86_32 and x86_64 cpu_idle() functions   x86/kconfig: Remove CONFIG_TR=y from the defconfigs   x86: Stop recursive fault in print_context_stack after stack overflow   x86/io_apic: Move and reenable irq only when CONFIG_GENERIC_PENDING_IRQ=y   x86/apic: Add separate apic_id_valid() functions for selected apic drivers   locking/kconfig: Simplify INLINE_SPIN_UNLOCK usage   x86/kconfig: Update defconfigs   x86: Fix excessive MSR print out when show_msr is not specified
f | pci-nommu.c | s | 2.8K | 90 | Marek Szyprowski | m.szyprowski@samsung.com | 1337605778 |  | X86: integrate CMA with DMA-mapping subsystem  This patch adds support for CMA to dma-mapping subsystem for x86 architecture that uses common pci-dma/pci-nommu implementation. This allows to test CMA on KVM/QEMU and a lot of common x86 boxes.  Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> CC: Michal Nazarewicz <mina86@mina86.com> Acked-by: Arnd Bergmann <arnd@arndb.de>
f | vsmp_64.c | s | 4.7K | 169 | Shai Fultheim | shai@scalemp.com | 1336999353 |  | x86/vsmp: Fix number of CPUs when vsmp is disabled  In case CONFIG_X86_VSMP is not set, limit the number of CPUs to the number of CPUs of the first board.  Also make CONFIG_X86_VSMP depend on CONFIG_SMP, as there's little point in having a vsmp machine with a single CPU.  Signed-off-by: Shai Fultheim <shai@scalemp.com> [ido@wizery.com: rebased, fixed minor coding-style issues] Signed-off-by: Ido Yariv <ido@wizery.com> Signed-off-by: Ingo Molnar <mingo@kernel.org>
d | cpu |  | 36 items |  | H. Peter Anvin | hpa@zytor.com | 1340722968 |  | x86, cpufeature: Remove stray %s, add -w to mkcapflags.pl  There was a stray %s left from testing, remove it.  Add -w to the #! line (which is parsed by Perl even if the Perl interpreter is invoked explicitly on the command line) to catch these kinds of errors in the future.  Reported-by: Jean Delvare <khali@linux-fr.org> Link: http://lkml.kernel.org/r/20120626143246.0c9bf301@endymion.delvare Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | i387.c | s | 19K | 695 | Alex Shi | alex.shi@intel.com | 1337030131 |  | x86: replace percpu_xxx funcs with this_cpu_xxx  Since percpu_xxx() serial functions are duplicated with this_cpu_xxx(). Removing percpu_xxx() definition and replacing them by this_cpu_xxx() in code. There is no function change in this patch, just preparation for later percpu_xxx serial function removing.  On x86 machine the this_cpu_xxx() serial functions are same as __this_cpu_xxx() without no unnecessary premmpt enable/disable.  Thanks for Stephen Rothwell, he found and fixed a i386 build error in the patch.  Also thanks for Andrew Morton, he kept updating the patchset in Linus' tree.  Signed-off-by: Alex Shi <alex.shi@intel.com> Acked-by: Christoph Lameter <cl@gentwo.org> Acked-by: Tejun Heo <tj@kernel.org> Acked-by: "H. Peter Anvin" <hpa@zytor.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Tejun Heo <tj@kernel.org>
f | xsave.c | s | 10K | 394 | Suresh Siddha | suresh.b.siddha@intel.com | 1337206637 |  | x86, xsave: remove thread_has_fpu() bug check in __sanitize_i387_state()  Code paths like fork(), exit() and signal handling flush the fpu state explicitly to the structures in memory.  BUG_ON() in __sanitize_i387_state() is checking that the fpu state is not live any more. But for preempt kernels, task can be scheduled out and in at any place and the preload_fpu logic during context switch can make the fpu registers live again.  For example, consider a 64-bit Task which uses fpu frequently and as such you will find its fpu_counter mostly non-zero. During its time slice, kernel used fpu by doing kernel_fpu_begin/kernel_fpu_end(). After this, in the same scheduling slice, task-A got a signal to handle. Then during the signal setup path we got preempted when we are just before the sanitize_i387_state() in arch/x86/kernel/xsave.c:save_i387_xstate(). And when we come back we will have the fpu registers live that can hit the bug_on.  Similarly during core dump, other threads can context-switch in and out (because of spurious wakeups while waiting for the coredump to finish in  kernel/exit.c:exit_mm()) and the main thread dumping core can run into this bug when it finds some other thread with its fpu registers live on some other cpu.  So remove the paranoid check for now, even though it caught a bug in the multi-threaded core dump case (fixed in the previous patch).  Signed-off-by: Suresh Siddha <suresh.b.siddha@intel.com> Link: http://lkml.kernel.org/r/1336692811-30576-3-git-send-email-suresh.b.siddha@intel.com Cc: Oleg Nesterov <oleg@redhat.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | bootflag.c | s | 1.6K | 80 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | vsyscall_64.c | s | 9.1K | 291 | Emil Goode | emilgoode@gmail.com | 1333705799 |  | x86: vsyscall: Use NULL instead 0 for a pointer argument  This patch silences the following sparse warning: arch/x86/kernel/vsyscall_64.c:250:34:        warning: Using plain integer as NULL pointer  Signed-off-by: Emil Goode <emilgoode@gmail.com> Acked-by: Andy Lutomirski <luto@amacapital.net> Cc: john.stultz@linaro.org Link: http://lkml.kernel.org/r/1333306084-3776-1-git-send-email-emilgoode@gmail.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | asm-offsets_32.c | s | 2.9K | 76 | H. Peter Anvin | hpa@linux.intel.com | 1321565737 |  | x86: Generate system call tables and unistd_*.h from tables  Generate system call tables and unistd_*.h automatically from the tables in arch/x86/syscalls.  All other information, like NR_syscalls, is auto-generated, some of which is in asm-offsets_*.c.  This allows us to keep all the system call information in one place, and allows for kernel space and user space to see different information; this is currently used for the ia32 system call numbers when building the 64-bit kernel, but will be used by the x32 ABI in the near future.  This also removes some gratuitious differences between i386, x86-64 and ia32; in particular, now all system call tables are generated with the same mechanism.  Cc: H. J. Lu <hjl.tools@gmail.com> Cc: Sam Ravnborg <sam@ravnborg.org> Cc: Michal Marek <mmarek@suse.cz> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | kprobes.c | s | 30K | 956 | Jan Beulich | JBeulich@suse.com | 1336556682 |  | x86: Avoid double stack traces with show_regs()  What was called show_registers() so far already showed a stack trace for kernel faults, and kernel_stack_pointer() isn't even valid to be used for faults from user mode, hence it was pointless for show_regs() to call show_trace() after show_registers().  Simply rename show_registers() to show_regs() and eliminate the old definition.  Signed-off-by: Jan Beulich <jbeulich@suse.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Link: http://lkml.kernel.org/r/4FAA3D3902000078000826E1@nat28.tlf.novell.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | relocate_kernel_64.S | g | 5.2K |  | Huang Ying | ying.huang@intel.com | 1311239968 |  | kexec, x86: Fix incorrect jump back address if not preserving context  In kexec jump support, jump back address passed to the kexeced kernel via function calling ABI, that is, the function call return address is the jump back entry.  Furthermore, jump back entry == 0 should be used to signal that the jump back or preserve context is not enabled in the original kernel.  But in the current implementation the stack position used for function call return address is not cleared context preservation is disabled. The patch fixes this bug.  Reported-and-tested-by: Yin Kangkai <kangkai.yin@intel.com> Signed-off-by: Huang Ying <ying.huang@intel.com> Cc: Eric W. Biederman <ebiederm@xmission.com> Cc: Vivek Goyal <vgoyal@redhat.com> Cc: <stable@kernel.org> Link: http://lkml.kernel.org/r/1310607277-25029-1-git-send-email-ying.huang@intel.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | nmi_selftest.c | s | 4.4K | 151 | Don Zickus | dzickus@redhat.com | 1339150767 |  | x86/nmi: Fix section mismatch warnings on 32-bit  It was reported that compiling for 32-bit caused a bunch of section mismatch warnings:   VDSOSYM arch/x86/vdso/vdso32-syms.lds   LD      arch/x86/vdso/built-in.o   LD      arch/x86/built-in.o   WARNING: arch/x86/built-in.o(.data+0x5af0): Section mismatch in  reference from the variable test_nmi_ipi_callback_na.10451 to  the function .init.text:test_nmi_ipi_callback() [...]   WARNING: arch/x86/built-in.o(.data+0x5b04): Section mismatch in  reference from the variable nmi_unk_cb_na.10399 to the function  .init.text:nmi_unk_cb() The variable nmi_unk_cb_na.10399  references the function __init nmi_unk_cb() [...]  Both of these are attributed to the internal representation of the nmiaction struct created during register_nmi_handler.  The reason for this is that those structs are not defined in the init section whereas the rest of the code in nmi_selftest.c is.  To resolve this, I created a new #define, register_nmi_handler_initonly, that tags the struct as __initdata to resolve the mismatch.  This #define should only be used in rare situations where the register/unregister is called during init of the kernel.  Big thanks to Jan Beulich for decoding this for me as I didn't have a clue what was going on.  Reported-by: Witold Baryluk <baryluk@smp.if.uj.edu.pl> Tested-by: Witold Baryluk <baryluk@smp.if.uj.edu.pl> Cc: Jan Beulich <JBeulich@suse.com> Signed-off-by: Don Zickus <dzickus@redhat.com> Link: http://lkml.kernel.org/r/1338991542-23000-1-git-send-email-dzickus@redhat.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | setup_percpu.c | s | 7.9K | 261 | Tejun Heo | tj@kernel.org | 1336495338 |  | percpu, x86: don't use PMD_SIZE as embedded atom_size on 32bit  With the embed percpu first chunk allocator, x86 uses either PAGE_SIZE or PMD_SIZE for atom_size.  PMD_SIZE is used when CPU supports PSE so that percpu areas are aligned to PMD mappings and possibly allow using PMD mappings in vmalloc areas in the future.  Using larger atom_size doesn't waste actual memory; however, it does require larger vmalloc space allocation later on for !first chunks.  With reasonably sized vmalloc area, PMD_SIZE shouldn't be a problem but x86_32 at this point is anything but reasonable in terms of address space and using larger atom_size reportedly leads to frequent percpu allocation failures on certain setups.  As there is no reason to not use PMD_SIZE on x86_64 as vmalloc space is aplenty and most x86_64 configurations support PSE, fix the issue by always using PMD_SIZE on x86_64 and PAGE_SIZE on x86_32.  v2: drop cpu_has_pse test and make x86_64 always use PMD_SIZE and     x86_32 PAGE_SIZE as suggested by hpa.  Signed-off-by: Tejun Heo <tj@kernel.org> Reported-by: Yanmin Zhang <yanmin.zhang@intel.com> Reported-by: ShuoX Liu <shuox.liu@intel.com> Acked-by: H. Peter Anvin <hpa@zytor.com> LKML-Reference: <4F97BA98.6010001@intel.com> Cc: stable@vger.kernel.org
f | crash_dump_64.c | s | 1.3K | 43 | Olaf Hering | olaf@aepfle.de | 1300934839 |  | crash_dump: export is_kdump_kernel to modules, consolidate elfcorehdr_addr, setup_elfcorehdr and saved_max_pfn  The Xen PV drivers in a crashed HVM guest can not connect to the dom0 backend drivers because both frontend and backend drivers are still in connected state.  To run the connection reset function only in case of a crashdump, the is_kdump_kernel() function needs to be available for the PV driver modules.  Consolidate elfcorehdr_addr, setup_elfcorehdr and saved_max_pfn into kernel/crash_dump.c Also export elfcorehdr_addr to make is_kdump_kernel() usable for modules.  Leave 'elfcorehdr' as early_param().  This changes powerpc from __setup() to early_param().  It adds an address range check from x86 also on ia64 and powerpc.  [akpm@linux-foundation.org: additional #includes] [akpm@linux-foundation.org: remove elfcorehdr_addr export] [akpm@linux-foundation.org: fix for Tejun's mm/nobootmem.c changes] Signed-off-by: Olaf Hering <olaf@aepfle.de> Cc: Russell King <rmk@arm.linux.org.uk> Cc: "Luck, Tony" <tony.luck@intel.com> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mundt <lethal@linux-sh.org> Cc: Ingo Molnar <mingo@elte.hu> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: Johannes Weiner <hannes@cmpxchg.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | i8237.c | s | 1.2K | 44 | Rafael J. Wysocki | rjw@sisk.pl | 1300914954 |  | x86: Use syscore_ops instead of sysdev classes and sysdevs  Some subsystems in the x86 tree need to carry out suspend/resume and shutdown operations with one CPU on-line and interrupts disabled and they define sysdev classes and sysdevs or sysdev drivers for this purpose.  This leads to unnecessarily complicated code and excessive memory usage, so switch them to using struct syscore_ops objects for this purpose instead.  Generally, there are three categories of subsystems that use sysdevs for implementing PM operations: (1) subsystems whose suspend/resume callbacks ignore their arguments entirely (the majority), (2) subsystems whose suspend/resume callbacks use their struct sys_device argument, but don't really need to do that, because they can be implemented differently in an arguably simpler way (io_apic.c), and (3) subsystems whose suspend/resume callbacks use their struct sys_device argument, but the value of that argument is always the same and could be ignored (microcode_core.c).  In all of these cases the subsystems in question may be readily converted to using struct syscore_ops objects for power management and shutdown.  Signed-off-by: Rafael J. Wysocki <rjw@sisk.pl> Reviewed-by: Thomas Gleixner <tglx@linutronix.de> Acked-by: Ingo Molnar <mingo@elte.hu>
f | probe_roms.c | s | 6.3K | 217 | Jan Beulich | JBeulich@suse.com | 1331200655 |  | x86: Include probe_roms.h in probe_roms.c  ... to ensure that declarations and definitions are in sync.  Signed-off-by: Jan Beulich <jbeulich@suse.com> Link: http://lkml.kernel.org/r/4F5888F902000078000770F1@nat28.tlf.novell.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | jump_label.c | s | 1.3K | 51 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1323200462 |  | jump_label, x86: Fix section mismatch  WARNING: arch/x86/kernel/built-in.o(.text+0x4c71): Section mismatch in reference from the function arch_jump_label_transform_static() to the function .init.text:text_poke_early() The function arch_jump_label_transform_static() references the function __init text_poke_early(). This is often because arch_jump_label_transform_static lacks a __init annotation or the annotation of text_poke_early is wrong.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Jason Baron <jbaron@redhat.com> Link: http://lkml.kernel.org/n/tip-9lefe89mrvurrwpqw5h8xm8z@git.kernel.org Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | irq.c | s | 8.7K | 286 | Liu, Chuansheng | chuansheng.liu@intel.com | 1333027727 |  | x86: Preserve lazy irq disable semantics in fixup_irqs()  The default irq_disable() sematics are to mark the interrupt disabled, but keep it unmasked. If the interrupt is delivered while marked disabled, the low level interrupt handler masks it and marks it pending. This is important for detecting wakeup interrupts during suspend and for edge type interrupts to avoid losing interrupts.  fixup_irqs() moves the interrupts away from an offlined cpu. For certain interrupt types it needs to mask the interrupt line before changing the affinity. After affinity has changed the interrupt line is unmasked again, but only if it is not marked disabled.  This breaks the lazy irq disable semantics and causes problems in suspend as the interrupt can be lost or wakeup functionality is broken.  Check irqd_irq_masked() instead of irqd_irq_disabled() because irqd_irq_masked() is only set, when the core code actually masked the interrupt line. If it's not set, we unmask the interrupt and let the lazy irq disable logic deal with an eventually incoming interrupt.  [ tglx: Massaged changelog and added a comment ]  Signed-off-by: liu chuansheng <chuansheng.liu@intel.com> Cc: Yanmin Zhang <yanmin_zhang@linux.intel.com> Link: http://lkml.kernel.org/r/27240C0AC20F114CBF8149A2696CBE4A05DFB3@SHSMSX101.ccr.corp.intel.com Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | hw_breakpoint.c | s | 12K | 451 | Tejun Heo | tj@kernel.org | 1293708028 |  | x86: Use this_cpu_ops to optimize code  Go through x86 code and replace __get_cpu_var and get_cpu_var instances that refer to a scalar and are not used for address determinations.  Cc: Yinghai Lu <yinghai@kernel.org> Cc: Ingo Molnar <mingo@elte.hu> Acked-by: Tejun Heo <tj@kernel.org> Acked-by: "H. Peter Anvin" <hpa@zytor.com> Signed-off-by: Christoph Lameter <cl@linux.com> Signed-off-by: Tejun Heo <tj@kernel.org>
f | entry_64.S | g | 44K |  | Steven Rostedt | srostedt@redhat.com | 1338520342 |  | ftrace/x86: Do not change stacks in DEBUG when calling lockdep  When both DYNAMIC_FTRACE and LOCKDEP are set, the TRACE_IRQS_ON/OFF will call into the lockdep code. The lockdep code can call lots of functions that may be traced by ftrace. When ftrace is updating its code and hits a breakpoint, the breakpoint handler will call into lockdep. If lockdep happens to call a function that also has a breakpoint attached, it will jump back into the breakpoint handler resetting the stack to the debug stack and corrupt the contents currently on that stack.  The 'do_sym' call that calls do_int3() is protected by modifying the IST table to point to a different location if another breakpoint is hit. But the TRACE_IRQS_OFF/ON are outside that protection, and if a breakpoint is hit from those, the stack will get corrupted, and the kernel will crash:  [ 1013.243754] BUG: unable to handle kernel NULL pointer dereference at 0000000000000002 [ 1013.272665] IP: [<ffff880145cc0000>] 0xffff880145cbffff [ 1013.285186] PGD 1401b2067 PUD 14324c067 PMD 0 [ 1013.298832] Oops: 0010 [#1] PREEMPT SMP [ 1013.310600] CPU 2 [ 1013.317904] Modules linked in: ip6t_REJECT nf_conntrack_ipv6 nf_defrag_ipv6 xt_state nf_conntrack ip6table_filter ip6_tables crc32c_intel ghash_clmulni_intel microcode usb_debug serio_raw pcspkr iTCO_wdt i2c_i801 iTCO_vendor_support e1000e nfsd nfs_acl auth_rpcgss lockd sunrpc i915 video i2c_algo_bit drm_kms_helper drm i2c_core [last unloaded: scsi_wait_scan] [ 1013.401848] [ 1013.407399] Pid: 112, comm: kworker/2:1 Not tainted 3.4.0+ #30 [ 1013.437943] RIP: 8eb8:[<ffff88014630a000>]  [<ffff88014630a000>] 0xffff880146309fff [ 1013.459871] RSP: ffffffff8165e919:ffff88014780f408  EFLAGS: 00010046 [ 1013.477909] RAX: 0000000000000001 RBX: ffffffff81104020 RCX: 0000000000000000 [ 1013.499458] RDX: ffff880148008ea8 RSI: ffffffff8131ef40 RDI: ffffffff82203b20 [ 1013.521612] RBP: ffffffff81005751 R08: 0000000000000000 R09: 0000000000000000 [ 1013.543121] R10: ffffffff82cdc318 R11: 0000000000000000 R12: ffff880145cc0000 [ 1013.564614] R13: ffff880148008eb8 R14: 0000000000000002 R15: ffff88014780cb40 [ 1013.586108] FS:  0000000000000000(0000) GS:ffff880148000000(0000) knlGS:0000000000000000 [ 1013.609458] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b [ 1013.627420] CR2: 0000000000000002 CR3: 0000000141f10000 CR4: 00000000001407e0 [ 1013.649051] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [ 1013.670724] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400 [ 1013.692376] Process kworker/2:1 (pid: 112, threadinfo ffff88013fe0e000, task ffff88014020a6a0) [ 1013.717028] Stack: [ 1013.724131]  ffff88014780f570 ffff880145cc0000 0000400000004000 0000000000000000 [ 1013.745918]  cccccccccccccccc ffff88014780cca8 ffffffff811072bb ffffffff81651627 [ 1013.767870]  ffffffff8118f8a7 ffffffff811072bb ffffffff81f2b6c5 ffffffff81f11bdb [ 1013.790021] Call Trace: [ 1013.800701] Code: 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a 5a <e7> d7 64 81 ff ff ff ff 01 00 00 00 00 00 00 00 65 d9 64 81 ff [ 1013.861443] RIP  [<ffff88014630a000>] 0xffff880146309fff [ 1013.884466]  RSP <ffff88014780f408> [ 1013.901507] CR2: 0000000000000002  The solution was to reuse the NMI functions that change the IDT table to make the debug stack keep its current stack (in kernel mode) when hitting a breakpoint:    call debug_stack_set_zero   TRACE_IRQS_ON   call debug_stack_reset  If the TRACE_IRQS_ON happens to hit a breakpoint then it will keep the current stack and not crash the box.  Reported-by: Dave Jones <davej@redhat.com> Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | x86_init.c | s | 3.3K | 112 | Konrad Rzeszutek Wilk | konrad.wilk@oracle.com | 1335898209 |  | x86/apic: Replace io_apic_ops with x86_io_apic_ops.  Which makes the code fit within the rest of the x86_ops functions.  Acked-by: Suresh Siddha <suresh.b.siddha@intel.com> [v1: Changed x86_apic -> x86_ioapic per Yinghai Lu <yinghai@kernel.org> suggestion] [v2: Rebased on tip/x86/urgent and redid to match Ingo's syntax style] Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
f | kprobes-opt.c | s | 13K | 448 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1331023789 |  | x86/kprobes: Split out optprobe related code to kprobes-opt.c  Split out optprobe related code to arch/x86/kernel/kprobes-opt.c for maintenanceability.  Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Suggested-by: Ingo Molnar <mingo@elte.hu> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: yrl.pp-manager.tt@hitachi.com Cc: systemtap@sourceware.org Cc: anderson@redhat.com Link: http://lkml.kernel.org/r/20120305133222.5982.54794.stgit@localhost.localdomain [ Tidied up the code a tiny bit ] Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | vsyscall_trace.h | s | 550B | 19 | Andy Lutomirski | luto@MIT.EDU | 1312499633 |  | x86-64: Add vsyscall:emulate_vsyscall trace event  Vsyscall emulation is slow, so make it easy to track down.  Signed-off-by: Andy Lutomirski <luto@mit.edu> Link: http://lkml.kernel.org/r/cdaad7da946a80b200df16647c1700db3e1171e9.1312378163.git.luto@mit.edu Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | asm-offsets_64.c | s | 1.8K | 78 | H. Peter Anvin | hpa@zytor.com | 1329771126 |  | x32: If configured, add x32 system calls to system call tables  If CONFIG_X86_X32_ABI is defined, add the x32 system calls to the system call tables.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | cpuid.c | s | 5.4K | 206 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | alternative.c | s | 18K | 659 | Rabin Vincent | rabin@rab.in | 1321272315 |  | x86: Call stop_machine_text_poke() on all CPUs  It appears that stop_machine_text_poke() wants to be called on all CPUs, like it's done from text_poke_smp().  Fix text_poke_smp_batch() to do this.  Signed-off-by: Rabin Vincent <rabin@rab.in> Acked-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com> Cc: Jason Baron <jbaron@redhat.com> Link: http://lkml.kernel.org/r/1319702072-32676-1-git-send-email-rabin@rab.in Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | stacktrace.c | s | 3.5K | 125 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1308106131 |  | x86: Swap save_stack_trace_regs parameters  Swap the 1st and 2nd parameters of save_stack_trace_regs() as same as the parameters of save_stack_trace_tsk().  Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: yrl.pp-manager.tt@hitachi.com Cc: Frederic Weisbecker <fweisbec@gmail.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Namhyung Kim <namhyung@gmail.com> Link: http://lkml.kernel.org/r/20110608070921.17777.31103.stgit@fedora15 Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | apm_32.c | s | 69K | 2227 | Thomas Gleixner | tglx@linutronix.de | 1336473306 |  | x86: Use kick_all_cpus_sync()  Use kick_all_cpus_sync() and remove cpu_idle_wait().  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/20120507175652.190382227@linutronix.de Cc: x86@kernel.org
f | module.c | s | 5.4K | 183 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | i8259.c | s | 10K | 341 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | machine_kexec_32.c | s | 6.9K | 238 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | tboot.c | s | 11K | 375 | Jarkko Sakkinen | jarkko.sakkinen@intel.com | 1336514667 |  | x86, realmode: fixes compilation issue in tboot.c  Fixed include path of wakeup.h in tboot.c.  Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@intel.com> Link: http://lkml.kernel.org/r/1336501366-28617-23-git-send-email-jarkko.sakkinen@intel.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
d | apic |  | 17 items |  | Tomoki Sekiyama | tomoki.sekiyama.qu@hitachi.com | 1338977005 |  | x86/ioapic: Fix NULL pointer dereference on CPU hotplug after disabling irqs  In current Linux, percpu variable `vector_irq' is not cleared on offlined cpus while disabling devices' irqs. If the cpu that has the disabled irqs in vector_irq is hotplugged, __setup_vector_irq() hits invalid irq vector and may crash.  This bug can be reproduced as following;    # echo 0 > /sys/devices/system/cpu/cpu7/online   # modprobe -r some_driver_using_interrupts      # vector_irq@cpu7 uncleared   # echo 1 > /sys/devices/system/cpu/cpu7/online  # kernel may crash  This patch fixes this bug by clearing vector_irq in __clear_irq_vector() even if the cpu is offlined.  Signed-off-by: Tomoki Sekiyama <tomoki.sekiyama.qu@hitachi.com> Acked-by: Thomas Gleixner <tglx@linutronix.de> Cc: yrl.pp-manager.tt@hitachi.com Cc: ltc-kernel@ml.yrl.intra.hitachi.co.jp Cc: Suresh Siddha <suresh.b.siddha@intel.com> Cc: Yinghai Lu <yinghai@kernel.org> Cc: Alexander Gordeev <agordeev@redhat.com> Link: http://lkml.kernel.org/r/4FC340BE.7080101@hitachi.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | pvclock.c | s | 4.6K | 134 | Jeremy Fitzhardinge | jeremy.fitzhardinge@citrix.com | 1290933200 |  | x86/pvclock: Zero last_value on resume  If the guest domain has been suspend/resumed or migrated, then the system clock backing the pvclock clocksource may revert to a smaller value (ie, can be non-monotonic across the migration/save-restore).  Make sure we zero last_value in that case so that the domain continues to see clock updates.  Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | sys_i386_32.c | s | 907B | 36 | Jan Beulich | JBeulich@novell.com | 1283494562 |  | i386: Make kernel_execve() suitable for stack unwinding  The explicit saving and restoring of %ebx was confusing stack unwind data consumers, and it is plain unnecessary to do this within the asm(), since that was only introduced for PIC user mode consumers of the original _syscall3() macro this was derived from.  Signed-off-by: Jan Beulich <jbeulich@novell.com> Cc: Arnd Bergmann <arnd@arndb.de> LKML-Reference: <4C7FBC660200007800013F95@vpn.id2.novell.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | process_64.c | s | 13K | 485 | Linus Torvalds | torvalds@linux-foundation.org | 1337795947 |  | Merge branch 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull fpu state cleanups from Ingo Molnar:  "This tree streamlines further aspects of FPU handling by eliminating   the prepare_to_copy() complication and moving that logic to   arch_dup_task_struct().    It also fixes the FPU dumps in threaded core dumps, removes and old   (and now invalid) assumption plus micro-optimizes the exit path by   avoiding an FPU save for dead tasks."  Fixed up trivial add-add conflict in arch/sh/kernel/process.c that came in because we now do the FPU handling in arch_dup_task_struct() rather than the legacy (and now gone) prepare_to_copy().  * 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86, fpu: drop the fpu state during thread exit   x86, xsave: remove thread_has_fpu() bug check in __sanitize_i387_state()   coredump: ensure the fpu state is flushed for proper multi-threaded core dump   fork: move the real prepare_to_copy() users to arch_dup_task_struct()
f | sys_x86_64.c | s | 6.7K | 241 | Linus Torvalds | torvalds@linux-foundation.org | 1333069943 |  | Merge branch 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x32 support for x86-64 from Ingo Molnar:  "This tree introduces the X32 binary format and execution mode for x86:   32-bit data space binaries using 64-bit instructions and 64-bit kernel   syscalls.    This allows applications whose working set fits into a 32 bits address   space to make use of 64-bit instructions while using a 32-bit address   space with shorter pointers, more compressed data structures, etc."  Fix up trivial context conflicts in arch/x86/{Kconfig,vdso/vma.c}  * 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (71 commits)   x32: Fix alignment fail in struct compat_siginfo   x32: Fix stupid ia32/x32 inversion in the siginfo format   x32: Add ptrace for x32   x32: Switch to a 64-bit clock_t   x32: Provide separate is_ia32_task() and is_x32_task() predicates   x86, mtrr: Use explicit sizing and padding for the 64-bit ioctls   x86/x32: Fix the binutils auto-detect   x32: Warn and disable rather than error if binutils too old   x32: Only clear TIF_X32 flag once   x32: Make sure TS_COMPAT is cleared for x32 tasks   fs: Remove missed ->fds_bits from cessation use of fd_set structs internally   fs: Fix close_on_exec pointer in alloc_fdtable   x32: Drop non-__vdso weak symbols from the x32 VDSO   x32: Fix coding style violations in the x32 VDSO code   x32: Add x32 VDSO support   x32: Allow x32 to be configured   x32: If configured, add x32 system calls to system call tables   x32: Handle process creation   x32: Signal-related system calls   x86: Add #ifdef CONFIG_COMPAT to <asm/sys_ia32.h>   ...
f | setup.c | s | 25K | 872 | Linus Torvalds | torvalds@linux-foundation.org | 1338347693 |  | Merge branch 'x86-trampoline-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 trampoline rework from H. Peter Anvin:  "This code reworks all the "trampoline"/"realmode" code (various bits   that need to live in the first megabyte of memory, most but not all of   which runs in real mode at some point) in the kernel into a single   object.  The main reason for doing this is that it eliminates the last   place in the kernel where we needed pages to be mapped RWX.  This code   separates all that code into proper R/RW/RX pages."  Fix up conflicts in arch/x86/kernel/Makefile (mca removed next to reboot code), and arch/x86/kernel/reboot.c (reboot code moved around in one branch, modified in this one), and arch/x86/tools/relocs.c (mostly same code came in earlier due to working around the ld bugs just before the 3.4 release).  Also remove stale x86-relocs entry from scripts/.gitignore as per Peter Anvin.  * commit '61f5446169046c217a5479517edac3a890c3bee7': (36 commits)   x86, realmode: Move end signature into header.S   x86, relocs: When printing an error, say relative or absolute   x86, relocs: More relocations which may end up as absolute   x86, relocs: Workaround for binutils 2.22.52.0.1 section bug   xen-acpi-processor: Add missing #include <xen/xen.h>   acpi, bgrd: Add missing <linux/io.h> to drivers/acpi/bgrt.c   x86, realmode: Change EFER to a single u64 field   x86, realmode: Move kernel/realmode.c to realmode/init.c   x86, realmode: Move not-common bits out of trampoline_common.S   x86, realmode: Mask out EFER.LMA when saving trampoline EFER   x86, realmode: Fix no cache bits test in reboot_32.S   x86, realmode: Make sure all generated files are listed in targets   x86, realmode: build fix: remove duplicate build   x86, realmode: read cr4 and EFER from kernel for 64-bit trampoline   x86, realmode: fixes compilation issue in tboot.c   x86, realmode: move relocs from scripts/ to arch/x86/tools   x86, realmode: header for trampoline code   x86, realmode: flattened rm hierachy   x86, realmode: don't copy real_mode_header   x86, realmode: fix 64-bit wakeup sequence   ...
f | i8253.c | s | 971B | 38 | Thomas Gleixner | tglx@linutronix.de | 1309509434 |  | x86: Use common i8253 clockevent  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Russell King <linux@arm.linux.org.uk> Cc: Ralf Baechle <ralf@linux-mips.org> Cc: John Stultz <john.stultz@linaro.org> Link: http://lkml.kernel.org/r/20110609130622.026152527@linutronix.de
f | uprobes.c | s | 21K | 595 | Srikar Dronamraju | srikar@linux.vnet.ibm.com | 1331707296 |  | uprobes/core: Handle breakpoint and singlestep exceptions  Uprobes uses exception notifiers to get to know if a thread hit a breakpoint or a singlestep exception.  When a thread hits a uprobe or is singlestepping post a uprobe hit, the uprobe exception notifier sets its TIF_UPROBE bit, which will then be checked on its return to userspace path (do_notify_resume() ->uprobe_notify_resume()), where the consumers handlers are run (in task context) based on the defined filters.  Uprobe hits are thread specific and hence we need to maintain information about if a task hit a uprobe, what uprobe was hit, the slot where the original instruction was copied for xol so that it can be singlestepped with appropriate fixups.  In some cases, special care is needed for instructions that are executed out of line (xol). These are architecture specific artefacts, such as handling RIP relative instructions on x86_64.  Since the instruction at which the uprobe was inserted is executed out of line, architecture specific fixups are added so that the thread continues normal execution in the presence of a uprobe.  Postpone the signals until we execute the probed insn. post_xol() path does a recalc_sigpending() before return to user-mode, this ensures the signal can't be lost.  Uprobes relies on DIE_DEBUG notification to notify if a singlestep is complete.  Adds x86 specific uprobe exception notifiers and appropriate hooks needed to determine a uprobe hit and subsequent post processing.  Add requisite x86 fixups for xol for uprobes. Specific cases needing fixups include relative jumps (x86_64), calls, etc.  Where possible, we check and skip singlestepping the breakpointed instructions. For now we skip single byte as well as few multibyte nop instructions. However this can be extended to other instructions too.  Credits to Oleg Nesterov for suggestions/patches related to signal, breakpoint, singlestep handling code.  Signed-off-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: Jim Keniston <jkenisto@linux.vnet.ibm.com> Cc: Linux-mm <linux-mm@kvack.org> Cc: Oleg Nesterov <oleg@redhat.com> Cc: Andi Kleen <andi@firstfloor.org> Cc: Christoph Hellwig <hch@infradead.org> Cc: Steven Rostedt <rostedt@goodmis.org> Cc: Arnaldo Carvalho de Melo <acme@infradead.org> Cc: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/20120313180011.29771.89027.sendpatchset@srdronam.in.ibm.com [ Performed various cleanliness edits ] Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | dumpstack_32.c | s | 3.1K | 118 | Jan Beulich | JBeulich@suse.com | 1336556682 |  | x86: Avoid double stack traces with show_regs()  What was called show_registers() so far already showed a stack trace for kernel faults, and kernel_stack_pointer() isn't even valid to be used for faults from user mode, hence it was pointless for show_regs() to call show_trace() after show_registers().  Simply rename show_registers() to show_regs() and eliminate the old definition.  Signed-off-by: Jan Beulich <jbeulich@suse.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: Frederic Weisbecker <fweisbec@gmail.com> Link: http://lkml.kernel.org/r/4FAA3D3902000078000826E1@nat28.tlf.novell.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | microcode_amd.c | s | 8.8K | 322 | Andreas Herrmann | andreas.herrmann3@amd.com | 1334310665 |  | x86, microcode: Ensure that module is only loaded on supported AMD CPUs  Exit early when there's no support for a particular CPU family. Also, fixup the "no support for this CPU vendor" to be issued only when the driver is attempted to be loaded on an unsupported vendor.  Cc: stable@vger.kernel.org Cc: Tigran Aivazian <tigran@aivazian.fsnet.co.uk> Signed-off-by: Andreas Herrmann <andreas.herrmann3@amd.com> Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Link: http://lkml.kernel.org/r/20120411163849.GE4794@alberich.amd.com [Boris: add a commit msg because Andreas is lazy] Signed-off-by: Borislav Petkov <borislav.petkov@amd.com>
f | relocate_kernel_32.S | g | 5.6K |  | Huang Ying | ying.huang@intel.com | 1311239968 |  | kexec, x86: Fix incorrect jump back address if not preserving context  In kexec jump support, jump back address passed to the kexeced kernel via function calling ABI, that is, the function call return address is the jump back entry.  Furthermore, jump back entry == 0 should be used to signal that the jump back or preserve context is not enabled in the original kernel.  But in the current implementation the stack position used for function call return address is not cleared context preservation is disabled. The patch fixes this bug.  Reported-and-tested-by: Yin Kangkai <kangkai.yin@intel.com> Signed-off-by: Huang Ying <ying.huang@intel.com> Cc: Eric W. Biederman <ebiederm@xmission.com> Cc: Vivek Goyal <vgoyal@redhat.com> Cc: <stable@kernel.org> Link: http://lkml.kernel.org/r/1310607277-25029-1-git-send-email-ying.huang@intel.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | irq_32.c | s | 5.1K | 161 | Thomas Gleixner | tglx@linutronix.de | 1336478924 |  | x86: Use common threadinfo allocator  The only difference is the free_thread_info function, which frees xstate.  Use the new arch_release_task_struct() function instead and switch over to the core allocator.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Link: http://lkml.kernel.org/r/20120505150141.559556763@linutronix.de Cc: x86@kernel.org
f | syscall_32.c | s | 645B | 19 | H. Peter Anvin | hpa@linux.intel.com | 1321662307 |  | x86, syscall: Re-fix typo in comment  Fix the same typo as was fixed in:  b7641d2c x86-64, syscall: Adjust comment spacing and remove typo  ... for the new versions of this file (32-bit and IA32 compat).  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Link: http://lkml.kernel.org/r/1321569446-20433-4-git-send-email-hpa@linux.intel.com
f | devicetree.c | s | 7.6K | 323 | Grant Likely | grant.likely@secretlab.ca | 1330033067 |  | irq_domain/x86: Convert x86 (embedded) to use common irq_domain  This patch removes the x86-specific definition of irq_domain and replaces it with the common implementation.  Signed-off-by: Grant Likely <grant.likely@secretlab.ca> Acked-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de> Cc: Rob Herring <rob.herring@calxeda.com> Cc: Thomas Gleixner <tglx@linutronix.de>
f | ldt.c | s | 5.7K | 236 | David Howells | dhowells@redhat.com | 1332954672 |  | Disintegrate asm/system.h for X86  Disintegrate asm/system.h for X86.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: H. Peter Anvin <hpa@zytor.com> cc: x86@kernel.org
f | reboot.c | s | 20K | 740 | Len Brown | len.brown@intel.com | 1341032030 |  | Merge branches 'acpi_pad-bugzilla-42981', 'apei-bugzilla-43282', 'video-bugzilla-43168', 'bugzilla-40002' and 'bugfix-misc' into release  bug fixes
f | smp.c | s | 8.3K | 266 | Don Zickus | dzickus@redhat.com | 1336988978 |  | x86/reboot: Update nonmi_ipi parameter  Update the nonmi_ipi parameter to reflect the simple change instead of the previous complicated one.  There should be less of a need to use it but there may still be corner cases on older hardware that stumble into NMI issues.  Signed-off-by: Don Zickus <dzickus@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Link: http://lkml.kernel.org/r/1336761675-24296-4-git-send-email-dzickus@redhat.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | step.c | s | 5.5K | 184 | Andy Lutomirski | luto@MIT.EDU | 1312499629 |  | x86-64: Add user_64bit_mode paravirt op  Three places in the kernel assume that the only long mode CPL 3 selector is __USER_CS.  This is not true on Xen -- Xen's sysretq changes cs to the magic value 0xe033.  Two of the places are corner cases, but as of "x86-64: Improve vsyscall emulation CS and RIP handling" (c9712944b2a12373cb6ff8059afcfb7e826a6c54), vsyscalls will segfault if called with Xen's extra CS selector.  This causes a panic when older init builds die.  It seems impossible to make Xen use __USER_CS reliably without taking a performance hit on every system call, so this fixes the tests instead with a new paravirt op.  It's a little ugly because ptrace.h can't include paravirt.h.  Signed-off-by: Andy Lutomirski <luto@mit.edu> Link: http://lkml.kernel.org/r/f4fcb3947340d9e96ce1054a432f183f9da9db83.1312378163.git.luto@mit.edu Reported-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | resource.c | s | 1.0K | 38 | Bjorn Helgaas | bjorn.helgaas@hp.com | 1292608890 |  | x86: avoid high BIOS area when allocating address space  This prevents allocation of the last 2MB before 4GB.  The experiment described here shows Windows 7 ignoring the last 1MB: https://bugzilla.kernel.org/show_bug.cgi?id=23542#c27  This patch ignores the top 2MB instead of just 1MB because H. Peter Anvin says "There will be ROM at the top of the 32-bit address space; it's a fact of the architecture, and on at least older systems it was common to have a shadow 1 MiB below."  Acked-by: H. Peter Anvin <hpa@zytor.com> Signed-off-by: Bjorn Helgaas <bjorn.helgaas@hp.com> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
d | acpi |  | 7 items |  | Feng Tang | feng.tang@intel.com | 1339450184 |  | ACPI: Add a quirk for "AMILO PRO V2030" to ignore the timer overriding  This is the 2nd part of fix for kernel bugzilla 40002:     "IRQ 0 assigned to VGA" https://bugzilla.kernel.org/show_bug.cgi?id=40002  The root cause is the buggy FW, whose ACPI tables assign the GSI 16 to 2 irqs 0 and 16(VGA), and the VGA is the right owner of GSI 16. So add a quirk to ignore the irq0 overriding GSI 16 for the FUJITSU SIEMENS AMILO PRO V2030 platform will solve this issue.  Reported-and-tested-by: Szymon Kowalczyk <fazerxlo@o2.pl> Signed-off-by: Feng Tang <feng.tang@intel.com> Signed-off-by: Len Brown <len.brown@intel.com>
f | microcode_core.c | s | 14K | 483 | Shuah Khan | shuahkhan@gmail.com | 1336415809 |  | x86, microcode: microcode_core.c simple_strtoul cleanup  Change reload_for_cpu() in kernel/microcode_core.c to call kstrtoul() instead of calling obsoleted simple_strtoul().  Signed-off-by: Shuah Khan <shuahkhan@gmail.com> Reviewed-by: Borislav Petkov <bp@alien8.de> Link: http://lkml.kernel.org/r/1336324264.2897.9.camel@lorien2 Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | amd_nb.c | s | 6.8K | 228 | Linus Torvalds | torvalds@linux-foundation.org | 1326336626 |  | Merge branch 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci  * 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci: (80 commits)   x86/PCI: Expand the x86_msi_ops to have a restore MSIs.   PCI: Increase resource array mask bit size in pcim_iomap_regions()   PCI: DEVICE_COUNT_RESOURCE should be equal to PCI_NUM_RESOURCES   PCI: pci_ids: add device ids for STA2X11 device (aka ConneXT)   PNP: work around Dell 1536/1546 BIOS MMCONFIG bug that breaks USB   x86/PCI: amd: factor out MMCONFIG discovery   PCI: Enable ATS at the device state restore   PCI: msi: fix imbalanced refcount of msi irq sysfs objects   PCI: kconfig: English typo in pci/pcie/Kconfig   PCI/PM/Runtime: make PCI traces quieter   PCI: remove pci_create_bus()   xtensa/PCI: convert to pci_scan_root_bus() for correct root bus resources   x86/PCI: convert to pci_create_root_bus() and pci_scan_root_bus()   x86/PCI: use pci_scan_bus() instead of pci_scan_bus_parented()   x86/PCI: read Broadcom CNB20LE host bridge info before PCI scan   sparc32, leon/PCI: convert to pci_scan_root_bus() for correct root bus resources   sparc/PCI: convert to pci_create_root_bus()   sh/PCI: convert to pci_scan_root_bus() for correct root bus resources   powerpc/PCI: convert to pci_create_root_bus()   powerpc/PCI: split PHB part out of pcibios_map_io_space()   ...  Fix up conflicts in drivers/pci/msi.c and include/linux/pci_regs.h due to the same patches being applied in other branches.
f | io_delay.c | s | 3.0K | 120 | Jaswinder Singh Rajput | jaswinderrajput@gmail.com | 1237634824 |  | x86: io_delay.c cleanup  Impact: cleanup   - fix header file issues  Signed-off-by: Jaswinder Singh Rajput <jaswinderrajput@gmail.com>
f | process.c | s | 17K | 653 | Linus Torvalds | torvalds@linux-foundation.org | 1337795947 |  | Merge branch 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull fpu state cleanups from Ingo Molnar:  "This tree streamlines further aspects of FPU handling by eliminating   the prepare_to_copy() complication and moving that logic to   arch_dup_task_struct().    It also fixes the FPU dumps in threaded core dumps, removes and old   (and now invalid) assumption plus micro-optimizes the exit path by   avoiding an FPU save for dead tasks."  Fixed up trivial add-add conflict in arch/sh/kernel/process.c that came in because we now do the FPU handling in arch_dup_task_struct() rather than the legacy (and now gone) prepare_to_copy().  * 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86, fpu: drop the fpu state during thread exit   x86, xsave: remove thread_has_fpu() bug check in __sanitize_i387_state()   coredump: ensure the fpu state is flushed for proper multi-threaded core dump   fork: move the real prepare_to_copy() users to arch_dup_task_struct()
f | head_32.S | g | 17K |  | Linus Torvalds | torvalds@linux-foundation.org | 1338347693 |  | Merge branch 'x86-trampoline-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 trampoline rework from H. Peter Anvin:  "This code reworks all the "trampoline"/"realmode" code (various bits   that need to live in the first megabyte of memory, most but not all of   which runs in real mode at some point) in the kernel into a single   object.  The main reason for doing this is that it eliminates the last   place in the kernel where we needed pages to be mapped RWX.  This code   separates all that code into proper R/RW/RX pages."  Fix up conflicts in arch/x86/kernel/Makefile (mca removed next to reboot code), and arch/x86/kernel/reboot.c (reboot code moved around in one branch, modified in this one), and arch/x86/tools/relocs.c (mostly same code came in earlier due to working around the ld bugs just before the 3.4 release).  Also remove stale x86-relocs entry from scripts/.gitignore as per Peter Anvin.  * commit '61f5446169046c217a5479517edac3a890c3bee7': (36 commits)   x86, realmode: Move end signature into header.S   x86, relocs: When printing an error, say relative or absolute   x86, relocs: More relocations which may end up as absolute   x86, relocs: Workaround for binutils 2.22.52.0.1 section bug   xen-acpi-processor: Add missing #include <xen/xen.h>   acpi, bgrd: Add missing <linux/io.h> to drivers/acpi/bgrt.c   x86, realmode: Change EFER to a single u64 field   x86, realmode: Move kernel/realmode.c to realmode/init.c   x86, realmode: Move not-common bits out of trampoline_common.S   x86, realmode: Mask out EFER.LMA when saving trampoline EFER   x86, realmode: Fix no cache bits test in reboot_32.S   x86, realmode: Make sure all generated files are listed in targets   x86, realmode: build fix: remove duplicate build   x86, realmode: read cr4 and EFER from kernel for 64-bit trampoline   x86, realmode: fixes compilation issue in tboot.c   x86, realmode: move relocs from scripts/ to arch/x86/tools   x86, realmode: header for trampoline code   x86, realmode: flattened rm hierachy   x86, realmode: don't copy real_mode_header   x86, realmode: fix 64-bit wakeup sequence   ...
f | early_printk.c | s | 6.4K | 226 | Linus Torvalds | torvalds@linux-foundation.org | 1326338020 |  | Merge branch 'x86-platform-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  * 'x86-platform-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86/intel config: Fix the APB_TIMER selection   x86/mrst: Add additional debug prints for pb_keys   x86/intel config: Revamp configuration to allow for Moorestown and Medfield   x86/intel/scu/ipc: Match the changes in the x86 configuration   x86/apb: Fix configuration constraints   x86: Fix INTEL_MID silly   x86/Kconfig: Cyclone-timer depends on x86-summit   x86: Reduce clock calibration time during slave cpu startup   x86/config: Revamp configuration for MID devices   x86/sfi: Kill the IRQ as id hack
f | reboot_fixups_32.c | s | 2.5K | 88 | Dirk Brandewie | dirk.brandewie@gmail.com | 1289519141 |  | x86: Ce4100: Add reboot_fixup() for CE4100  This patch adds the CE4100 reboot fixup to reboot_fixups_32.c  [ tglx: Moved PCI id to reboot_fixups_32.c ]  Signed-off-by: Dirk Brandewie <dirk.j.brandewie@intel.com> LKML-Reference: <5bdcfb4f0206fa721570504e95659a03b815bc5e.1289331834.git.dirk.brandewie@gmail.com> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | head.c | s | 1.8K | 46 | Tejun Heo | tj@kernel.org | 1310669273 |  | memblock, x86: Replace memblock_x86_reserve/free_range() with generic ones  Other than sanity check and debug message, the x86 specific version of memblock reserve/free functions are simple wrappers around the generic versions - memblock_reserve/free().  This patch adds debug messages with caller identification to the generic versions and replaces x86 specific ones and kills them. arch/x86/include/asm/memblock.h and arch/x86/mm/memblock.c are empty after this change and removed.  Signed-off-by: Tejun Heo <tj@kernel.org> Link: http://lkml.kernel.org/r/1310462166-31469-14-git-send-email-tj@kernel.org Cc: Yinghai Lu <yinghai@kernel.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Ingo Molnar <mingo@redhat.com> Cc: "H. Peter Anvin" <hpa@zytor.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | paravirt-spinlocks.c | s | 657B | 23 | Thomas Gleixner | tglx@linutronix.de | 1260831332 |  | locking: Convert __raw_spin* functions to arch_spin*  Name space cleanup. No functional change.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Acked-by: Peter Zijlstra <peterz@infradead.org> Acked-by: David S. Miller <davem@davemloft.net> Acked-by: Ingo Molnar <mingo@elte.hu> Cc: linux-arch@vger.kernel.org
f | kprobes-common.h | s | 2.6K | 97 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1331023789 |  | x86/kprobes: Split out optprobe related code to kprobes-opt.c  Split out optprobe related code to arch/x86/kernel/kprobes-opt.c for maintenanceability.  Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Suggested-by: Ingo Molnar <mingo@elte.hu> Cc: Ananth N Mavinakayanahalli <ananth@in.ibm.com> Cc: yrl.pp-manager.tt@hitachi.com Cc: systemtap@sourceware.org Cc: anderson@redhat.com Link: http://lkml.kernel.org/r/20120305133222.5982.54794.stgit@localhost.localdomain [ Tidied up the code a tiny bit ] Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | irq_work.c | s | 538B | 26 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1287424730 |  | irq_work: Add generic hardirq context callbacks  Provide a mechanism that allows running code in IRQ context. It is most useful for NMI code that needs to interact with the rest of the system -- like wakeup a task to drain buffers.  Perf currently has such a mechanism, so extract that and provide it as a generic feature, independent of perf so that others may also benefit.  The IRQ context callback is generated through self-IPIs where possible, or on architectures like powerpc the decrementer (the built-in timer facility) is set to generate an interrupt immediately.  Architectures that don't have anything like this get to do with a callback from the timer tick. These architectures can call irq_work_run() at the tail of any IRQ handlers that might enqueue such work (like the perf IRQ handler) to avoid undue latencies in processing the work.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Acked-by: Kyle McMartin <kyle@mcmartin.ca> Acked-by: Martin Schwidefsky <schwidefsky@de.ibm.com> [ various fixes ] Signed-off-by: Huang Ying <ying.huang@intel.com> LKML-Reference: <1287036094.7768.291.camel@yhuang-dev> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | kvmclock.c | s | 6.3K | 197 | Marcelo Tosatti | mtosatti@redhat.com | 1339467513 |  | x86: kvmclock: remove check_and_clear_guest_paused warning  CPU offline path calls the hrtimer interrupt handler with interrupts disabled, without touching preempt_count, triggering this warning.  Remove the warning since it is supposed to be used from hrtimer interrupt context only.  Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | rtc.c | s | 6.4K | 215 | Mathias Nyman | mathias.nyman@linux.intel.com | 1323101361 |  | x86/rtc, mrst: Don't register a platform RTC device for for Intel MID platforms  Intel MID x86 platforms have a memory mapped virtual RTC instead.  No MID platform have the default ports (and accessing them may do weird stuff).  Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com> Signed-off-by: Alan Cox <alan@linux.intel.com> Cc: feng.tang@intel.com Cc: Feng Tang <feng.tang@intel.com> Cc: "H. Peter Anvin" <hpa@zytor.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | kdebugfs.c | s | 3.9K | 171 | Stephen Boyd | sboyd@codeaurora.org | 1333664750 |  | simple_open: automatically convert to simple_open()  Many users of debugfs copy the implementation of default_open() when they want to support a custom read/write function op.  This leads to a proliferation of the default_open() implementation across the entire tree.  Now that the common implementation has been consolidated into libfs we can replace all the users of this function with simple_open().  This replacement was done with the following semantic patch:  <smpl> @ open @ identifier open_f != simple_open; identifier i, f; @@ -int open_f(struct inode *i, struct file *f) -{ ( -if (i->i_private) -f->private_data = i->i_private; || -f->private_data = i->i_private; ) -return 0; -}  @ has_open depends on open @ identifier fops; identifier open.open_f; @@ struct file_operations fops = { ... -.open = open_f, +.open = simple_open, ... }; </smpl>  [akpm@linux-foundation.org: checkpatch fixes] Signed-off-by: Stephen Boyd <sboyd@codeaurora.org> Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Julia Lawall <Julia.Lawall@lip6.fr> Acked-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | tls.h | s | 588B | 17 | Roland McGrath | roland@redhat.com | 1201696312 |  | x86: x86 user_regset TLS  This adds accessor functions in the user_regset style for the TLS data.  Signed-off-by: Roland McGrath <roland@redhat.com> Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | head_64.S | g | 11K |  | Linus Torvalds | torvalds@linux-foundation.org | 1338347693 |  | Merge branch 'x86-trampoline-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 trampoline rework from H. Peter Anvin:  "This code reworks all the "trampoline"/"realmode" code (various bits   that need to live in the first megabyte of memory, most but not all of   which runs in real mode at some point) in the kernel into a single   object.  The main reason for doing this is that it eliminates the last   place in the kernel where we needed pages to be mapped RWX.  This code   separates all that code into proper R/RW/RX pages."  Fix up conflicts in arch/x86/kernel/Makefile (mca removed next to reboot code), and arch/x86/kernel/reboot.c (reboot code moved around in one branch, modified in this one), and arch/x86/tools/relocs.c (mostly same code came in earlier due to working around the ld bugs just before the 3.4 release).  Also remove stale x86-relocs entry from scripts/.gitignore as per Peter Anvin.  * commit '61f5446169046c217a5479517edac3a890c3bee7': (36 commits)   x86, realmode: Move end signature into header.S   x86, relocs: When printing an error, say relative or absolute   x86, relocs: More relocations which may end up as absolute   x86, relocs: Workaround for binutils 2.22.52.0.1 section bug   xen-acpi-processor: Add missing #include <xen/xen.h>   acpi, bgrd: Add missing <linux/io.h> to drivers/acpi/bgrt.c   x86, realmode: Change EFER to a single u64 field   x86, realmode: Move kernel/realmode.c to realmode/init.c   x86, realmode: Move not-common bits out of trampoline_common.S   x86, realmode: Mask out EFER.LMA when saving trampoline EFER   x86, realmode: Fix no cache bits test in reboot_32.S   x86, realmode: Make sure all generated files are listed in targets   x86, realmode: build fix: remove duplicate build   x86, realmode: read cr4 and EFER from kernel for 64-bit trampoline   x86, realmode: fixes compilation issue in tboot.c   x86, realmode: move relocs from scripts/ to arch/x86/tools   x86, realmode: header for trampoline code   x86, realmode: flattened rm hierachy   x86, realmode: don't copy real_mode_header   x86, realmode: fix 64-bit wakeup sequence   ...
f | check.c | s | 3.8K | 128 | Shuah Khan | shuahkhan@gmail.com | 1337121401 |  | x86: kernel/check.c simple_strtoul cleanup  Change set_corruption_check() and set_corruption_check_period() in kernel/check.c to call kstrtoul() instead of calling obsoleted simple_strtoul().  Signed-off-by: Shuah Khan <shuahkhan@gmail.com> Link: http://lkml.kernel.org/r/1336326908.2897.12.camel@lorien2 Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | irqinit.c | s | 7.6K | 285 | Linus Torvalds | torvalds@linux-foundation.org | 1333070495 |  | Merge branch 'x86-cleanups-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 cleanups from Peter Anvin:  "The biggest textual change is the cleanup to use symbolic constants   for x86 trap values.    The only *functional* change and the reason for the x86/x32 dependency   is the move of is_ia32_task() into <asm/thread_info.h> so that it can   be used in other code that needs to understand if a system call comes   from the compat entry point (and therefore uses i386 system call   numbers) or not.  One intended user for that is the BPF system call   filter.  Moving it out of <asm/compat.h> means we can define it   unconditionally, returning always true on i386."  * 'x86-cleanups-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86: Move is_ia32_task to asm/thread_info.h from asm/compat.h   x86: Rename trap_no to trap_nr in thread_struct   x86: Use enum instead of literals for trap values
f | crash.c | s | 2.3K | 91 | Don Zickus | dzickus@redhat.com | 1318222617 |  | x86, nmi: Wire up NMI handlers to new routines  Just convert all the files that have an nmi handler to the new routines. Most of it is straight forward conversion.  A couple of places needed some tweaking like kgdb which separates the debug notifier from the nmi handler and mce removes a call to notify_die.  [Thanks to Ying for finding out the history behind that mce call  https://lkml.org/lkml/2010/5/27/114  And Boris responding that he would like to remove that call because of it  https://lkml.org/lkml/2011/9/21/163]  The things that get converted are the registeration/unregistration routines and the nmi handler itself has its args changed along with code removal to check which list it is on (most are on one NMI list except for kgdb which has both an NMI routine and an NMI Unknown routine).  Signed-off-by: Don Zickus <dzickus@redhat.com> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Acked-by: Corey Minyard <minyard@acm.org> Cc: Jason Wessel <jason.wessel@windriver.com> Cc: Andi Kleen <ak@linux.intel.com> Cc: Robert Richter <robert.richter@amd.com> Cc: Huang Ying <ying.huang@intel.com> Cc: Corey Minyard <minyard@acm.org> Cc: Jack Steiner <steiner@sgi.com> Link: http://lkml.kernel.org/r/1317409584-23662-4-git-send-email-dzickus@redhat.com Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | signal.c | s | 22K | 765 | Al Viro | viro@zeniv.linux.org.uk | 1338570111 |  | x86: get rid of calling do_notify_resume() when returning to kernel mode  If we end up calling do_notify_resume() with !user_mode(refs), it does nothing (do_signal() explicitly bails out and we can't get there with TIF_NOTIFY_RESUME in such situations).  Then we jump to resume_userspace_sig, which rechecks the same thing and bails out to resume_kernel, thus breaking the loop.  It's easier and cheaper to check *before* calling do_notify_resume() and bail out to resume_kernel immediately.  And kill the check in do_signal()...  Note that on amd64 we can't get there with !user_mode() at all - asm glue takes care of that.  Acked-and-reviewed-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | ftrace.c | s | 15K | 558 | Steven Rostedt | srostedt@redhat.com | 1338520339 |  | ftrace: Use breakpoint method to update ftrace caller  On boot up and module load, it is fine to modify the code directly, without the use of breakpoints. This is because boot up modification is done before SMP is initialized, thus the modification is serial, and module load is done before the module executes.  But after that we must use a SMP safe method to modify running code. Otherwise, if we are running the function tracer and update its function (by starting off the stack tracer, or perf tracing) the change of the function called by the ftrace trampoline is done directly. If this is being executed on another CPU, that CPU may take a GPF and crash the kernel.  The breakpoint method is used to change the nops at all the functions, but the change of the ftrace callback handler itself was still using a direct modification. If tracing was enabled and the function callback was changed then another CPU could fault if it was currently calling the original callback. This modification must use the breakpoint method too.  Note, the direct method is still used for boot up and module load.  Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
f | x8664_ksyms_64.c | s | 1.4K | 48 | Fenghua Yu | fenghua.yu@intel.com | 1296003519 |  | x86-64, mem: Convert memmove() to assembly file and fix return value bug  memmove_64.c only implements memmove() function which is completely written in inline assembly code. Therefore it doesn't make sense to keep the assembly code in .c file.  Currently memmove() doesn't store return value to rax. This may cause issue if caller uses the return value. The patch fixes this issue.  Signed-off-by: Fenghua Yu <fenghua.yu@intel.com> LKML-Reference: <1295314755-6625-1-git-send-email-fenghua.yu@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | test_nx.c | s | 4.6K | 149 | Gustavo F. Padovan | padovan@profusion.mobi | 1305997833 |  | x86: Eliminate various 'set but not used' warnings  Signed-off-by: Gustavo F. Padovan <padovan@profusion.mobi> Cc: Joerg Roedel <joerg.roedel@amd.com> (supporter:AMD IOMMU (AMD-VI)) Cc: iommu@lists.linux-foundation.org (open list:AMD IOMMU (AMD-VI)) Link: http://lkml.kernel.org/r/1305918786-7239-3-git-send-email-padovan@profusion.mobi Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | kvm.c | s | 9.6K | 380 | Gleb Natapov | gleb@redhat.com | 1336305602 |  | KVM: Do not take reference to mm during async #PF  It turned to be totally unneeded. The reason the code was introduced is so that KVM can prefault swapped in page, but prefault can fail even if mm is pinned since page table can change anyway. KVM handles this situation correctly though and does not inject spurious page faults.  Fixes:  "INFO: SOFTIRQ-safe -> SOFTIRQ-unsafe lock order detected" warning while  running LTP inside a KVM guest using the recent -next kernel.  Reported-by: Sasha Levin <levinsasha928@gmail.com> Signed-off-by: Gleb Natapov <gleb@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | pcspeaker.c | s | 282B | 10 | Akinobu Mita | akinobu.mita@gmail.com | 1222081116 |  | x86: use platform_device_register_simple()  Cleanup pcspeaker.c  Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
