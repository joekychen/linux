f | efi_64.c | s | 2.5K | 86 | Keith Packard | keithp@keithp.com | 1323710756 |  | Revert "x86, efi: Calling __pa() with an ioremap()ed address is invalid"  This hangs my MacBook Air at boot time; I get no console messages at all. I reverted this on top of -rc5 and my machine boots again.  This reverts commit e8c7106280a305e1ff2a3a8a4dfce141469fb039.  Signed-off-by: Matt Fleming <matt.fleming@intel.com> Signed-off-by: Keith Packard <keithp@keithp.com> Acked-by: H. Peter Anvin <hpa@zytor.com> Cc: Matthew Garrett <mjg@redhat.com> Cc: Zhang Rui <rui.zhang@intel.com> Cc: Huang Ying <huang.ying.caritas@gmail.com> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: Andrew Morton <akpm@linux-foundation.org> Link: http://lkml.kernel.org/r/1321621751-3650-1-git-send-email-matt@console Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | efi_32.c | s | 1.7K | 57 | Matt Fleming | matt.fleming@intel.com | 1323477551 |  | x86, efi: Make efi_call_phys_{prelog,epilog} CONFIG_RELOCATABLE-aware  efi_call_phys_prelog() sets up a 1:1 mapping of the physical address range in swapper_pg_dir. Instead of replacing then restoring entries in swapper_pg_dir we should be using initial_page_table which already contains the 1:1 mapping.  It's safe to blindly switch back to swapper_pg_dir in the epilog because the physical EFI routines are only called before efi_enter_virtual_mode(), e.g. before any user processes have been forked. Therefore, we don't need to track which pgd was in %cr3 when we entered the prelog.  The previous code actually contained a bug because it assumed that the kernel was loaded at a physical address within the first 8MB of ram, usually at 0x100000. However, this isn't the case with a CONFIG_RELOCATABLE=y kernel which could have been loaded anywhere in the physical address space.  Also delete the ancient (and bogus) comments about the page table being restored after the lock is released. There is no locking.  Cc: Matthew Garrett <mjg@redhat.com> Cc: Darrent Hart <dvhart@linux.intel.com> Signed-off-by: Matt Fleming <matt.fleming@intel.com> Link: http://lkml.kernel.org/r/1323346250.3894.74.camel@mfleming-mobl1.ger.corp.intel.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | efi_stub_32.S | g | 2.7K |  | Thomas Gleixner | tglx@linutronix.de | 1288182601 |  | x86: Move efi to platform  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Huang Ying <ying.huang@intel.com>
f | Makefile | g | 62B |  | Thomas Gleixner | tglx@linutronix.de | 1288182601 |  | x86: Move efi to platform  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Huang Ying <ying.huang@intel.com>
f | efi.c | s | 23K | 821 | Olof Johansson | olof@lixom.net | 1330052091 |  | x86, efi: Allow basic init with mixed 32/64-bit efi/kernel  Traditionally the kernel has refused to setup EFI at all if there's been a mismatch in 32/64-bit mode between EFI and the kernel.  On some platforms that boot natively through EFI (Chrome OS being one), we still need to get at least some of the static data such as memory configuration out of EFI. Runtime services aren't as critical, and it's a significant amount of work to implement switching between the operating modes to call between kernel and firmware for thise cases. So I'm ignoring it for now.  v5: * Fixed some printk strings based on feedback * Renamed 32/64-bit specific types to not have _ prefix * Fixed bug in printout of efi runtime disablement  v4: * Some of the earlier cleanup was accidentally reverted by this patch, fixed. * Reworded some messages to not have to line wrap printk strings  v3: * Reorganized to a series of patches to make it easier to review, and   do some of the cleanups I had left out before.  v2: * Added graceful error handling for 32-bit kernel that gets passed   EFI data above 4GB. * Removed some warnings that were missed in first version.  Signed-off-by: Olof Johansson <olof@lixom.net> Link: http://lkml.kernel.org/r/1329081869-20779-6-git-send-email-olof@lixom.net Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | efi_stub_64.S | g | 1.8K |  | Thomas Gleixner | tglx@linutronix.de | 1288182601 |  | x86: Move efi to platform  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Huang Ying <ying.huang@intel.com>
