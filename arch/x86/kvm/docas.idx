f | pmu.c | s | 13K | 454 | Gleb Natapov | gleb@redhat.com | 1334061250 |  | KVM: PMU emulation: GLOBAL_CTRL MSR should be enabled on reset  On reset all MPU counters should be enabled in GLOBAL_CTRL MSR.  Signed-off-by: Gleb Natapov <gleb@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | svm.c | s | 110K | 3549 | Josh Triplett | josh@joshtriplett.org | 1334619304 |  | KVM: SVM: Auto-load on CPUs with SVM  Enable x86 feature-based autoloading for the kvm-amd module on CPUs with X86_FEATURE_SVM.  Signed-off-by: Josh Triplett <josh@joshtriplett.org> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | Makefile | g | 611B |  | Gleb Natapov | gleb@redhat.com | 1324977869 |  | KVM: Expose a version 2 architectural PMU to a guests  Use perf_events to emulate an architectural PMU, version 2.  Based on PMU version 1 emulation by Avi Kivity.  [avi: adjust for cpuid.c] [jan: fix anonymous field initialization for older gcc]  Signed-off-by: Gleb Natapov <gleb@redhat.com> Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | trace.h | s | 21K | 717 | Stefan Hajnoczi | stefanha@linux.vnet.ibm.com | 1316967479 |  | KVM: Use __print_symbolic() for vmexit tracepoints  The vmexit tracepoints format the exit_reason to make it human-readable. Since the exit_reason depends on the instruction set (vmx or svm), formatting is handled with ftrace_print_symbols_seq() by referring to the appropriate exit reason table.  However, the ftrace_print_symbols_seq() function is not meant to be used directly in tracepoints since it does not export the formatting table which userspace tools like trace-cmd and perf use to format traces.  In practice perf dies when formatting vmexit-related events and trace-cmd falls back to printing the numeric value (with extra formatting code in the kvm plugin to paper over this limitation).  Other userspace consumers of vmexit-related tracepoints would be in similar trouble.  To avoid significant changes to the kvm_exit tracepoint, this patch moves the vmx and svm exit reason tables into arch/x86/kvm/trace.h and selects the right table with __print_symbolic() depending on the instruction set.  Note that __print_symbolic() is designed for exporting the formatting table to userspace and allows trace-cmd and perf to work.  Signed-off-by: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | emulate.c | s | 114K | 3880 | Joerg Roedel | joerg.roedel@amd.com | 1336984358 |  | KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()  The instruction emulation for bsrw is broken in KVM because the code always uses bsr with 32 or 64 bit operand size for emulation. Fix that by using emulate_2op_SrcV_nobyte() macro to use guest operand size for emulation.  Signed-off-by: Joerg Roedel <joerg.roedel@amd.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | lapic.h | s | 2.2K | 52 | Avi Kivity | avi@redhat.com | 1324977819 |  | KVM: Expose kvm_lapic_local_deliver()  Needed to deliver performance monitoring interrupts.  Signed-off-by: Avi Kivity <avi@redhat.com> Signed-off-by: Gleb Natapov <gleb@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | kvm_cache_regs.h | s | 2.6K | 83 | Avi Kivity | avi@redhat.com | 1316967481 |  | KVM: MMU: Do not unconditionally read PDPTE from guest memory  Architecturally, PDPTEs are cached in the PDPTRs when CR3 is reloaded. On SVM, it is not possible to implement this, but on VMX this is possible and was indeed implemented until nested SVM changed this to unconditionally read PDPTEs dynamically.  This has noticable impact when running PAE guests.  Fix by changing the MMU to read PDPTRs from the cache, falling back to reading from memory for the nested MMU.  Signed-off-by: Avi Kivity <avi@redhat.com> Tested-by: Joerg Roedel <joerg.roedel@amd.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | kvm_timer.h | s | 389B | 15 | Liu, Jinsong | jinsong.liu@intel.com | 1317821696 |  | KVM: emulate lapic tsc deadline timer for guest  This patch emulate lapic tsc deadline timer for guest: Enumerate tsc deadline timer capability by CPUID; Enable tsc deadline timer mode by lapic MMIO; Start tsc deadline timer by WRMSR;  [jan: use do_div()] [avi: fix for !irqchip_in_kernel()] [marcelo: another fix for !irqchip_in_kernel()]  Signed-off-by: Liu, Jinsong <jinsong.liu@intel.com> Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | paging_tmpl.h | s | 21K | 684 | Davidlohr Bueso | dave@gnu.org | 1334802901 |  | KVM: MMU: use page table level macro  Its much cleaner to use PT_PAGE_TABLE_LEVEL than its numeric value.  Signed-off-by: Davidlohr Bueso <dave@gnu.org> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | x86.h | s | 2.9K | 101 | Davidlohr Bueso | dave@gnu.org | 1333882993 |  | KVM: x86: add paging gcc optimization  Since most guests will have paging enabled for memory management, add likely() optimization around CR0.PG checks.  Signed-off-by: Davidlohr Bueso <dave@gnu.org> Signed-off-by: Avi Kivity <avi@redhat.com>
f | i8254.h | s | 1.4K | 53 | Jan Kiszka | jan.kiszka@siemens.com | 1335566429 |  | KVM: x86: Run PIT work in own kthread  We can't run PIT IRQ injection work in the interrupt context of the host timer. This would allow the user to influence the handler complexity by asking for a broadcast to a large number of VCPUs. Therefore, this work was pushed into workqueue context in 9d244caf2e. However, this prevents prioritizing the PIT injection over other task as workqueues share kernel threads.  This replaces the workqueue with a kthread worker and gives that thread a name in the format "kvm-pit/<owner-process-pid>". That allows to identify and adjust the kthread priority according to the VM process parameters.  Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | irq.c | s | 2.3K | 85 | Nicolas Kaiser | nikai@nikai.net | 1287910394 |  | KVM: fix typo in copyright notice  Fix typo in copyright notice.  Signed-off-by: Nicolas Kaiser <nikai@nikai.net> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | mmu.c | s | 97K | 3387 | Xiao Guangrong | xiaoguangrong@linux.vnet.ibm.com | 1338216075 |  | KVM: MMU: fix huge page adapted on non-PAE host  The huge page size is 4M on non-PAE host, but 2M page size is used in transparent_hugepage_adjust(), so the page we get after adjust the mapping level is not the head page, the BUG_ON() will be triggered  Signed-off-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | cpuid.c | s | 17K | 590 | Michael S. Tsirkin | mst@redhat.com | 1336308716 |  | KVM: fix cpuid eax for KVM leaf  cpuid eax should return the max leaf so that guests can find out the valid range. This matches Xen et al. Update documentation to match.  Tested with -cpu host.  Signed-off-by: Michael S. Tsirkin <mst@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | mmu.h | s | 2.7K | 84 | Xiao Guangrong | xiaoguangrong@cn.fujitsu.com | 1311497440 |  | KVM: MMU: mmio page fault support  The idea is from Avi:  || We could cache the result of a miss in an spte by using a reserved bit, and || checking the page fault error code (or seeing if we get an ept violation or || ept misconfiguration), so if we get repeated mmio on a page, we don't need to || search the slot list/tree. || (https://lkml.org/lkml/2011/2/22/221)  When the page fault is caused by mmio, we cache the info in the shadow page table, and also set the reserved bits in the shadow page table, so if the mmio is caused again, we can quickly identify it and emulate it directly  Searching mmio gfn in memslots is heavy since we need to walk all memeslots, it can be reduced by this feature, and also avoid walking guest page table for soft mmu.  [jan: fix operator precedence issue]  Signed-off-by: Xiao Guangrong <xiaoguangrong@cn.fujitsu.com> Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | tss.h | s | 622B | 56 | Izik Eidus | izike@qumranet.com | 1209286839 |  | KVM: x86: hardware task switching support  This emulates the x86 hardware task switch mechanism in software, as it is unsupported by either vmx or svm.  It allows operating systems which use it, like freedos, to run as kvm guests.  Signed-off-by: Izik Eidus <izike@qumranet.com> Signed-off-by: Avi Kivity <avi@qumranet.com>
f | timer.c | s | 1.4K | 42 | Jan Kiszka | jan.kiszka@siemens.com | 1324977425 |  | KVM: x86: Simplify kvm timer handler  The vcpu reference of a kvm_timer can't become NULL while the timer is valid, so drop this redundant test. This also makes it pointless to carry a separate __kvm_timer_fn, fold it into kvm_timer_fn.  Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | mmu_audit.c | s | 6.6K | 243 | Takuya Yoshikawa | yoshikawa.takuya@oss.ntt.co.jp | 1333890507 |  | KVM: MMU: Improve iteration through sptes from rmap  Iteration using rmap_next(), the actual body is pte_list_next(), is inefficient: every time we call it we start from checking whether rmap holds a single spte or points to a descriptor which links more sptes.  In the case of shadow paging, this quadratic total iteration cost is a problem.  Even for two dimensional paging, with EPT/NPT on, in which we almost always have a single mapping, the extra checks at the end of the iteration should be eliminated.  This patch fixes this by introducing rmap_iterator which keeps the iteration context for the next search.  Furthermore the implementation of rmap_next() is splitted into two functions, rmap_get_first() and rmap_get_next(), to avoid repeatedly checking whether the rmap being iterated on has only one spte.  Although there seemed to be only a slight change for EPT/NPT, the actual improvement was significant: we observed that GET_DIRTY_LOG for 1GB dirty memory became 15% faster than before.  This is probably because the new code is easy to make branch predictions.  Note: we just remove pte_list_next() because we can think of parent_ptes as a reverse mapping.  Signed-off-by: Takuya Yoshikawa <yoshikawa.takuya@oss.ntt.co.jp> Signed-off-by: Avi Kivity <avi@redhat.com>
f | x86.c | s | 164K | 5709 | Linus Torvalds | torvalds@linux-foundation.org | 1337901450 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM changes from Avi Kivity:  "Changes include additional instruction emulation, page-crossing MMIO,   faster dirty logging, preventing the watchdog from killing a stopped   guest, module autoload, a new MSI ABI, and some minor optimizations   and fixes.  Outside x86 we have a small s390 and a very large ppc   update.    Regarding the new (for kvm) rebaseless workflow, some of the patches   that were merged before we switch trees had to be rebased, while   others are true pulls.  In either case the signoffs should be correct   now."  Fix up trivial conflicts in Documentation/feature-removal-schedule.txt arch/powerpc/kvm/book3s_segment.S and arch/x86/include/asm/kvm_para.h.  I suspect the kvm_para.h resolution ends up doing the "do I have cpuid" check effectively twice (it was done differently in two different commits), but better safe than sorry ;)  * 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (125 commits)   KVM: make asm-generic/kvm_para.h have an ifdef __KERNEL__ block   KVM: s390: onereg for timer related registers   KVM: s390: epoch difference and TOD programmable field   KVM: s390: KVM_GET/SET_ONEREG for s390   KVM: s390: add capability indicating COW support   KVM: Fix mmu_reload() clash with nested vmx event injection   KVM: MMU: Don't use RCU for lockless shadow walking   KVM: VMX: Optimize %ds, %es reload   KVM: VMX: Fix %ds/%es clobber   KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()   KVM: VMX: unlike vmcs on fail path   KVM: PPC: Emulator: clean up SPR reads and writes   KVM: PPC: Emulator: clean up instruction parsing   kvm/powerpc: Add new ioctl to retreive server MMU infos   kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM   KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler   KVM: PPC: Book3S: Enable IRQs during exit handling   KVM: PPC: Fix PR KVM on POWER7 bare metal   KVM: PPC: Fix stbux emulation   KVM: PPC: bookehv: Use lwz/stw instead of PPC_LL/PPC_STL for 32-bit fields   ...
f | i8259.c | s | 14K | 591 | Gleb Natapov | gleb@redhat.com | 1330952250 |  | KVM: x86: reset edge sense circuit of i8259 on init  The spec says that during initialization "The edge sense circuit is reset which means that following initialization an interrupt request (IR) input must make a low-to-high transition to generate an interrupt", but currently if edge triggered interrupt is in IRR it is delivered after i8259 initialization.  Signed-off-by: Gleb Natapov <gleb@redhat.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | lapic.c | s | 33K | 1140 | Gleb Natapov | gleb@redhat.com | 1335274578 |  | KVM: Introduce bitmask for apic attention reasons  The patch introduces a bitmap that will hold reasons apic should be checked during vmexit. This is in a preparation for vp eoi patch that will add one more check on vmexit. With the bitmap we can do if(apic_attention) to check everything simultaneously which will add zero overhead on the fast path.  Signed-off-by: Gleb Natapov <gleb@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | i8254.c | s | 19K | 663 | Jan Kiszka | jan.kiszka@siemens.com | 1335566429 |  | KVM: x86: Run PIT work in own kthread  We can't run PIT IRQ injection work in the interrupt context of the host timer. This would allow the user to influence the handler complexity by asking for a broadcast to a large number of VCPUs. Therefore, this work was pushed into workqueue context in 9d244caf2e. However, this prevents prioritizing the PIT injection over other task as workqueues share kernel threads.  This replaces the workqueue with a kthread worker and gives that thread a name in the format "kvm-pit/<owner-process-pid>". That allows to identify and adjust the kthread priority according to the VM process parameters.  Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | Kconfig | g | 2.3K |  | Jan Kiszka | jan.kiszka@siemens.com | 1335272387 |  | KVM: Introduce direct MSI message injection for in-kernel irqchips  Currently, MSI messages can only be injected to in-kernel irqchips by defining a corresponding IRQ route for each message. This is not only unhandy if the MSI messages are generated "on the fly" by user space, IRQ routes are a limited resource that user space has to manage carefully.  By providing a direct injection path, we can both avoid using up limited resources and simplify the necessary steps for user land.  Signed-off-by: Jan Kiszka <jan.kiszka@siemens.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | mmutrace.h | s | 5.3K | 196 | Xiao Guangrong | xiaoguangrong@linux.vnet.ibm.com | 1324977725 |  | KVM: MMU: audit: replace mmu audit tracepoint with jump-label  The tracepoint is only used to audit mmu code, it should not be exposed to user, let us replace it with jump-label.  Signed-off-by: Xiao Guangrong <xiaoguangrong@linux.vnet.ibm.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | vmx.c | s | 206K | 6376 | Avi Kivity | avi@redhat.com | 1337194999 |  | KVM: VMX: Optimize %ds, %es reload  On x86_64, we can defer %ds and %es reload to the heavyweight context switch, since nothing in the lightweight paths uses the host %ds or %es (they are ignored by the processor).  Furthermore we can avoid the load if the segments are null, by letting the hardware load the null segments for us.  This is the expected case.  On i386, we could avoid the reload entirely, since the entry.S paths take care of reload, except for the SYSEXIT path which leaves %ds and %es set to __USER_DS. So we set them to the same values as well.  Saves about 70 cycles out of 1600 (around 4%; noisy measurements).  Signed-off-by: Avi Kivity <avi@redhat.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>
f | cpuid.h | s | 1.5K | 42 | Boris Ostrovsky | boris.ostrovsky@amd.com | 1330951941 |  | KVM: SVM: Add support for AMD's OSVW feature in guests  In some cases guests should not provide workarounds for errata even when the physical processor is affected. For example, because of erratum 400 on family 10h processors a Linux guest will read an MSR (resulting in VMEXIT) before going to idle in order to avoid getting stuck in a non-C0 state. This is not necessary: HLT and IO instructions are intercepted and therefore there is no reason for erratum 400 workaround in the guest.  This patch allows us to present a guest with certain errata as fixed, regardless of the state of actual hardware.  Signed-off-by: Boris Ostrovsky <boris.ostrovsky@amd.com> Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | irq.h | s | 2.9K | 91 | Sasha Levin | levinsasha928@gmail.com | 1316967479 |  | KVM: Intelligent device lookup on I/O bus  Currently the method of dealing with an IO operation on a bus (PIO/MMIO) is to call the read or write callback for each device registered on the bus until we find a device which handles it.  Since the number of devices on a bus can be significant due to ioeventfds and coalesced MMIO zones, this leads to a lot of overhead on each IO operation.  Instead of registering devices, we now register ranges which points to a device. Lookup is done using an efficient bsearch instead of a linear search.  Performance test was conducted by comparing exit count per second with 200 ioeventfds created on one byte and the guest is trying to access a different byte continuously (triggering usermode exits). Before the patch the guest has achieved 259k exits per second, after the patch the guest does 274k exits per second.  Cc: Avi Kivity <avi@redhat.com> Cc: Marcelo Tosatti <mtosatti@redhat.com> Signed-off-by: Sasha Levin <levinsasha928@gmail.com> Signed-off-by: Avi Kivity <avi@redhat.com>
