f | relocs.c | s | 19K | 755 | Linus Torvalds | torvalds@linux-foundation.org | 1338347693 |  | Merge branch 'x86-trampoline-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x86 trampoline rework from H. Peter Anvin:  "This code reworks all the "trampoline"/"realmode" code (various bits   that need to live in the first megabyte of memory, most but not all of   which runs in real mode at some point) in the kernel into a single   object.  The main reason for doing this is that it eliminates the last   place in the kernel where we needed pages to be mapped RWX.  This code   separates all that code into proper R/RW/RX pages."  Fix up conflicts in arch/x86/kernel/Makefile (mca removed next to reboot code), and arch/x86/kernel/reboot.c (reboot code moved around in one branch, modified in this one), and arch/x86/tools/relocs.c (mostly same code came in earlier due to working around the ld bugs just before the 3.4 release).  Also remove stale x86-relocs entry from scripts/.gitignore as per Peter Anvin.  * commit '61f5446169046c217a5479517edac3a890c3bee7': (36 commits)   x86, realmode: Move end signature into header.S   x86, relocs: When printing an error, say relative or absolute   x86, relocs: More relocations which may end up as absolute   x86, relocs: Workaround for binutils 2.22.52.0.1 section bug   xen-acpi-processor: Add missing #include <xen/xen.h>   acpi, bgrd: Add missing <linux/io.h> to drivers/acpi/bgrt.c   x86, realmode: Change EFER to a single u64 field   x86, realmode: Move kernel/realmode.c to realmode/init.c   x86, realmode: Move not-common bits out of trampoline_common.S   x86, realmode: Mask out EFER.LMA when saving trampoline EFER   x86, realmode: Fix no cache bits test in reboot_32.S   x86, realmode: Make sure all generated files are listed in targets   x86, realmode: build fix: remove duplicate build   x86, realmode: read cr4 and EFER from kernel for 64-bit trampoline   x86, realmode: fixes compilation issue in tboot.c   x86, realmode: move relocs from scripts/ to arch/x86/tools   x86, realmode: header for trampoline code   x86, realmode: flattened rm hierachy   x86, realmode: don't copy real_mode_header   x86, realmode: fix 64-bit wakeup sequence   ...
f | Makefile | g | 1.7K |  | H. Peter Anvin | hpa@linux.intel.com | 1337395780 |  | x86, realmode: 16-bit real-mode code support for relocs tool  A new option is added to the relocs tool called '--realmode'. This option causes the generation of 16-bit segment relocations and 32-bit linear relocations for the real-mode code. When the real-mode code is moved to the low-memory during kernel initialization, these relocation entries can be used to relocate the code properly.  In the assembly code 16-bit segment relocations must be relative to the 'real_mode_seg' absolute symbol. Linear relocations must be relative to a symbol prefixed with 'pa_'.  16-bit segment relocation is used to load cs:ip in 16-bit code. Linear relocations are used in the 32-bit code for relocatable data references. They are declared in the linker script of the real-mode code.  The relocs tool is moved to arch/x86/tools/relocs.c, and added new target archscripts that can be used to build scripts needed building an architecture.  be compiled before building the arch/x86 tree.  [ hpa: accelerating this because it detects invalid absolute   relocations, a serious bug in binutils 2.22.52.0.x which currently   produces bad kernels. ]  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Link: http://lkml.kernel.org/r/1336501366-28617-2-git-send-email-jarkko.sakkinen@intel.com Signed-off-by: Jarkko Sakkinen <jarkko.sakkinen@intel.com> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Cc: <stable@vger.kernel.org>
f | chkobjdump.awk | g | 721B |  | Masami Hiramatsu | mhiramat@redhat.com | 1261157216 |  | x86: Fix objdump version check in chkobjdump.awk for different formats.  Different version of objdump says its version in different way;  GNU objdump 2.16.1  or  GNU objdump version 2.19.51.0.14-1.fc11 20090722  This patch uses the first argument which starts with a number as version string.  Changes in v2:  - Remove unneeded increment.  Signed-off-by: Masami Hiramatsu <mhiramat@redhat.com> LKML-Reference: <20091218154012.16960.5113.stgit@dhcp-100-2-132.bos.redhat.com> Suggested-by: H. Peter Anvin <hpa@zytor.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Ingo Molnar <mingo@elte.hu> Cc: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | distill.awk | g | 1.2K |  | Masami Hiramatsu | mhiramat@redhat.com | 1258438610 |  | x86: Show symbol name if insn decoder test failed  Show symbol name if insn decoder test find a difference. This will help us to find out where the issue is.  Signed-off-by: Masami Hiramatsu <mhiramat@redhat.com> Cc: systemtap <systemtap@sources.redhat.com> Cc: DLE <dle-develop@lists.sourceforge.net> Cc: Stephen Rothwell <sfr@canb.auug.org.au> Cc: Randy Dunlap <rdunlap@xenotime.net> Cc: Jim Keniston <jkenisto@us.ibm.com> Cc: Stephen Rothwell <sfr@canb.auug.org.au> LKML-Reference: <20091116230624.5250.49813.stgit@harusame> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | gen-insn-attr-x86.awk | g | 9.2K |  | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1338965658 |  | x86/decoder: Fix bsr/bsf/jmpe decoding with operand-size prefix  Fix the x86 instruction decoder to decode bsr/bsf/jmpe with operand-size prefix (66h). This fixes the test case failure reported by Linus, attached below.  bsf/bsr/jmpe have a special encoding. Opcode map in Intel Software Developers Manual vol2 says they have TZCNT/LZCNT variants if it has F3h prefix. However, there is no information if it has other 66h or F2h prefixes. Current instruction decoder supposes that those are bad instructions, but it actually accepts at least operand-size prefixes.  H. Peter Anvin further explains:   " TZCNT/LZCNT are F3 + BSF/BSR exactly because the F2 and    F3 prefixes have historically been no-ops with most instructions.    This allows software to unconditionally use the prefixed versions    and get TZCNT/LZCNT on the processors that have them if they don't    care about the difference. "  This fixes errors reported by test_get_len:    Warning: arch/x86/tools/test_get_len found difference at <em_bsf>:ffffffff81036d87   Warning: ffffffff81036de5:	66 0f bc c2          	bsf    %dx,%ax   Warning: objdump says 4 bytes, but insn_get_length() says 3   Warning: arch/x86/tools/test_get_len found difference at <em_bsr>:ffffffff81036ea6   Warning: ffffffff81036f04:	66 0f bd c2          	bsr    %dx,%ax   Warning: objdump says 4 bytes, but insn_get_length() says 3   Warning: decoded and checked 13298882 instructions with 2 warnings  Reported-by: Linus Torvalds <torvalds@linux-foundation.org> Reported-by: Pekka Enberg <penberg@kernel.org> Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: <yrl.pp-manager.tt@hitachi.com> Link: http://lkml.kernel.org/r/20120604150911.22338.43296.stgit@localhost.localdomain Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | insn_sanity.c | s | 7.2K | 233 | Masami Hiramatsu | masami.hiramatsu.pt@hitachi.com | 1323093203 |  | x86/tools: Add decoded instruction dump mode  Add instruction dump mode to insn_sanity tool for checking decoder really decoded instructions.  This mode is enabled when passing double -v (-vv) to insn_sanity. It is useful for who wants to check whether the decoder can decode some instructions correctly. e.g.  $ echo 0f 73 10 11 || ./insn_sanity -y -vv -i -  Instruction = {         .prefixes = {                 .value = 0, bytes[] = {0, 0, 0, 0},                 .got = 1, .nbytes = 0},         .rex_prefix = {                 .value = 0, bytes[] = {0, 0, 0, 0},                 .got = 1, .nbytes = 0},         .vex_prefix = {                 .value = 0, bytes[] = {0, 0, 0, 0},                 .got = 1, .nbytes = 0},         .opcode = {                 .value = 29455, bytes[] = {f, 73, 0, 0},                 .got = 1, .nbytes = 2},         .modrm = {                 .value = 16, bytes[] = {10, 0, 0, 0},                 .got = 1, .nbytes = 1},         .sib = {                 .value = 0, bytes[] = {0, 0, 0, 0},                 .got = 1, .nbytes = 0},         .displacement = {                 .value = 0, bytes[] = {0, 0, 0, 0},                 .got = 1, .nbytes = 0},         .immediate1 = {                 .value = 17, bytes[] = {11, 0, 0, 0},                 .got = 1, .nbytes = 1},         .immediate2 = {                 .value = 0, bytes[] = {0, 0, 0, 0},                 .got = 0, .nbytes = 0},         .attr = 44800, .opnd_bytes = 4, .addr_bytes = 8,         .length = 4, .x86_64 = 1, .kaddr = 0x7fff0f7d9430}  Success: decoded and checked 1 given instructions with 0 errors (seed:0x0)  Signed-off-by: Masami Hiramatsu <masami.hiramatsu.pt@hitachi.com> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: yrl.pp-manager.tt@hitachi.com Link: http://lkml.kernel.org/r/20111205120603.15475.91192.stgit@cloud Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | test_get_len.c | s | 4.5K | 157 | Frans Pop | elendil@planet.nl | 1265561271 |  | x86: Remove trailing spaces in messages  Signed-off-by: Frans Pop <elendil@planet.nl> Cc: Avi Kivity <avi@redhat.com> Cc: x86@kernel.org LKML-Reference: <1265478443-31072-10-git-send-email-elendil@planet.nl> [ Left out the KVM bits. ] Signed-off-by: Ingo Molnar <mingo@elte.hu>
