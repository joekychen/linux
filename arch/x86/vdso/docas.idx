f | vclock_gettime.c | s | 5.4K | 186 | Andy Lutomirski | luto@mit.edu | 1332546575 |  | x86-64: Inline vdso clock_gettime helpers  This is about a 3% speedup on Sandy Bridge.  Signed-off-by: Andy Lutomirski <luto@amacapital.net> Signed-off-by: John Stultz <john.stultz@linaro.org>
f | vdso32-setup.c | s | 9.3K | 351 | Linus Torvalds | torvalds@linux-foundation.org | 1333069943 |  | Merge branch 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x32 support for x86-64 from Ingo Molnar:  "This tree introduces the X32 binary format and execution mode for x86:   32-bit data space binaries using 64-bit instructions and 64-bit kernel   syscalls.    This allows applications whose working set fits into a 32 bits address   space to make use of 64-bit instructions while using a 32-bit address   space with shorter pointers, more compressed data structures, etc."  Fix up trivial context conflicts in arch/x86/{Kconfig,vdso/vma.c}  * 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (71 commits)   x32: Fix alignment fail in struct compat_siginfo   x32: Fix stupid ia32/x32 inversion in the siginfo format   x32: Add ptrace for x32   x32: Switch to a 64-bit clock_t   x32: Provide separate is_ia32_task() and is_x32_task() predicates   x86, mtrr: Use explicit sizing and padding for the 64-bit ioctls   x86/x32: Fix the binutils auto-detect   x32: Warn and disable rather than error if binutils too old   x32: Only clear TIF_X32 flag once   x32: Make sure TS_COMPAT is cleared for x32 tasks   fs: Remove missed ->fds_bits from cessation use of fd_set structs internally   fs: Fix close_on_exec pointer in alloc_fdtable   x32: Drop non-__vdso weak symbols from the x32 VDSO   x32: Fix coding style violations in the x32 VDSO code   x32: Add x32 VDSO support   x32: Allow x32 to be configured   x32: If configured, add x32 system calls to system call tables   x32: Handle process creation   x32: Signal-related system calls   x86: Add #ifdef CONFIG_COMPAT to <asm/sys_ia32.h>   ...
f | Makefile | g | 5.7K |  | H. J. Lu | hjl.tools@gmail.com | 1329771126 |  | x32: Add x32 VDSO support  Add support for the x32 VDSO.  The x32 VDSO takes advantage of the similarity between the x86-64 and the x32 ABIs to contain the same content, only the container is different, as the x32 VDSO obviously is an x32 shared object.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | vdso-note.S | g | 291B |  | Thomas Gleixner | tglx@linutronix.de | 1192094230 |  | x86_64: move vdso  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | vma.c | s | 5.1K | 172 | Linus Torvalds | torvalds@linux-foundation.org | 1333069943 |  | Merge branch 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull x32 support for x86-64 from Ingo Molnar:  "This tree introduces the X32 binary format and execution mode for x86:   32-bit data space binaries using 64-bit instructions and 64-bit kernel   syscalls.    This allows applications whose working set fits into a 32 bits address   space to make use of 64-bit instructions while using a 32-bit address   space with shorter pointers, more compressed data structures, etc."  Fix up trivial context conflicts in arch/x86/{Kconfig,vdso/vma.c}  * 'x86-x32-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (71 commits)   x32: Fix alignment fail in struct compat_siginfo   x32: Fix stupid ia32/x32 inversion in the siginfo format   x32: Add ptrace for x32   x32: Switch to a 64-bit clock_t   x32: Provide separate is_ia32_task() and is_x32_task() predicates   x86, mtrr: Use explicit sizing and padding for the 64-bit ioctls   x86/x32: Fix the binutils auto-detect   x32: Warn and disable rather than error if binutils too old   x32: Only clear TIF_X32 flag once   x32: Make sure TS_COMPAT is cleared for x32 tasks   fs: Remove missed ->fds_bits from cessation use of fd_set structs internally   fs: Fix close_on_exec pointer in alloc_fdtable   x32: Drop non-__vdso weak symbols from the x32 VDSO   x32: Fix coding style violations in the x32 VDSO code   x32: Add x32 VDSO support   x32: Allow x32 to be configured   x32: If configured, add x32 system calls to system call tables   x32: Handle process creation   x32: Signal-related system calls   x86: Add #ifdef CONFIG_COMPAT to <asm/sys_ia32.h>   ...
f | vdso.S | g | 444B |  | Andy Lutomirski | luto@MIT.EDU | 1312499614 |  | x86-64: Pad vDSO to a page boundary  This avoids an information leak to userspace.  Signed-off-by: Andy Lutomirski <luto@mit.edu> Link: http://lkml.kernel.org/r/a63380a3c58a0506a2f5a18ba1b12dbde1f25e58.1312378163.git.luto@mit.edu Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | checkundef.sh | s | 169B | 10 | H. Peter Anvin | hpa@zytor.com | 1280299949 |  | x86, vdso: Don't quote $nm in the script for checking vdso references  Don't quote $nm in the script for checking the vdso for external references.  Doing so breaks multiword constructs, like using CROSS_COMPILE='ccache '.  Reported-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: H. Peter Anvin <hpa@zytor.com> LKML-Reference: <20100728134252.2e4c27cf.sfr@canb.auug.org.au>
f | vdsox32.S | g | 480B |  | H. J. Lu | hjl.tools@gmail.com | 1329771126 |  | x32: Add x32 VDSO support  Add support for the x32 VDSO.  The x32 VDSO takes advantage of the similarity between the x86-64 and the x32 ABIs to contain the same content, only the container is different, as the x32 VDSO obviously is an x32 shared object.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | vgetcpu.c | s | 804B | 31 | Andy Lutomirski | luto@MIT.EDU | 1306241488 |  | x86-64: Clean up vdso/kernel shared variables  Variables that are shared between the vdso and the kernel are currently a bit of a mess.  They are each defined with their own magic, they are accessed differently in the kernel, the vsyscall page, and the vdso, and one of them (vsyscall_clock) doesn't even really exist.  This changes them all to use a common mechanism.  All of them are delcared in vvar.h with a fixed address (validated by the linker script).  In the kernel (as before), they look like ordinary read-write variables.  In the vsyscall page and the vdso, they are accessed through a new macro VVAR, which gives read-only access.  The vdso is now loaded verbatim into memory without any fixups.  As a side bonus, access from the vdso is faster because a level of indirection is removed.  While we're at it, pack jiffies and vgetcpu_mode into the same cacheline.  Signed-off-by: Andy Lutomirski <luto@mit.edu> Cc: Andi Kleen <andi@firstfloor.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: "David S. Miller" <davem@davemloft.net> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Borislav Petkov <bp@amd64.org> Link: http://lkml.kernel.org/r/%3C7357882fbb51fa30491636a7b6528747301b7ee9.1306156808.git.luto%40mit.edu%3E Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | vdso32.S | g | 473B |  | Jeremy Fitzhardinge | jeremy@goop.org | 1216199307 |  | x86_64: further cleanup of 32-bit compat syscall mechanisms  AMD only supports "syscall" from 32-bit compat usermode. Intel and Centaur(?) only support "sysenter" from 32-bit compat usermode.  Set the X86 feature bits accordingly, and set up the vdso in accordance with those bits.  On the offchance we run on in a 64-bit environment which supports neither syscall nor sysenter from 32-bit mode, then fall back to the int $0x80 vdso.  Signed-off-by: Jeremy Fitzhardinge <jeremy.fitzhardinge@citrix.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
d | vdso32 |  | 7 items |  | H. Peter Anvin | hpa@linux.intel.com | 1314141610 |  | x86-32, vdso: On system call restart after SYSENTER, use int $0x80  When we enter a 32-bit system call via SYSENTER or SYSCALL, we shuffle the arguments to match the int $0x80 calling convention.  This was probably a design mistake, but it's what it is now.  This causes errors if the system call as to be restarted.  For SYSENTER, we have to invoke the instruction from the vdso as the return address is hardcoded.  Accordingly, we can simply replace the jump in the vdso with an int $0x80 instruction and use the slower entry point for a post-restart.  Suggested-by: Linus Torvalds <torvalds@linux-foundation.org> Signed-off-by: H. Peter Anvin <hpa@linux.intel.com> Link: http://lkml.kernel.org/r/CA%2B55aFztZ=r5wa0x26KJQxvZOaQq8s2v3u50wCyJcA-Sc4g8gQ@mail.gmail.com Cc: <stable@kernel.org>
f | vdso-layout.lds.S | g | 1.5K |  | Roland McGrath | roland@redhat.com | 1201696241 |  | x86 vDSO: new layout  This revamps the vDSO linker script to lay things out with the best packing of the data and good, separate alignment of the code.  The rigid layout using VDSO_TEXT_OFFSET no longer matters to the kernel. I've moved the layout parts of the linker script into a new include file, vdso-layout.lds.S; this is in preparation for sharing the script for the 32-bit vDSO builds too.  Signed-off-by: Roland McGrath <roland@redhat.com> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: Ingo Molnar <mingo@elte.hu> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | vdsox32.lds.S | g | 658B |  | H. Peter Anvin | hpa@zytor.com | 1329972007 |  | x32: Drop non-__vdso weak symbols from the x32 VDSO  Drop the legacy weak symbols that don't carry the __vdso prefix from the x32 VDSO.  This is a new ABI and we don't need to support that legacy; the actual libc will export the proper symbols.  Suggested-by: Andy Lutomirski <luto@mit.edu> Link: http://lkml.kernel.org/r/4F42E171.9080005@mit.edu Cc: H. J. Lu <hjl.tools@gmail.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | vdso.lds.S | g | 728B |  | Andy Lutomirski | luto@MIT.EDU | 1306241489 |  | x86-64: Add time to vDSO  The only fast implementation of time(2) we expose is through the vsyscall page and we want to get userspace to stop using the vsyscall page.  So make it available through the vDSO as well.  This is essentially a cut-n-paste job.  Signed-off-by: Andy Lutomirski <luto@mit.edu> Cc: Andi Kleen <andi@firstfloor.org> Cc: Linus Torvalds <torvalds@linux-foundation.org> Cc: "David S. Miller" <davem@davemloft.net> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Peter Zijlstra <a.p.zijlstra@chello.nl> Cc: Borislav Petkov <bp@amd64.org> Link: http://lkml.kernel.org/r/%3Cbf963bac5207de4b29613f27c42705e4371812a8.1306156808.git.luto%40mit.edu%3E Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
