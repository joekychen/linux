f | syscall_32.tbl | g | 13K |  | Cyrill Gorcunov | gorcunov@openvz.org | 1338511772 |  | syscalls, x86: add __NR_kcmp syscall  While doing the checkpoint-restore in the user space one need to determine whether various kernel objects (like mm_struct-s of file_struct-s) are shared between tasks and restore this state.  The 2nd step can be solved by using appropriate CLONE_ flags and the unshare syscall, while there's currently no ways for solving the 1st one.  One of the ways for checking whether two tasks share e.g.  mm_struct is to provide some mm_struct ID of a task to its proc file, but showing such info considered to be not that good for security reasons.  Thus after some debates we end up in conclusion that using that named 'comparison' syscall might be the best candidate.  So here is it -- __NR_kcmp.  It takes up to 5 arguments - the pids of the two tasks (which characteristics should be compared), the comparison type and (in case of comparison of files) two file descriptors.  Lookups for pids are done in the caller's PID namespace only.  At moment only x86 is supported and tested.  [akpm@linux-foundation.org: fix up selftests, warnings] [akpm@linux-foundation.org: include errno.h] [akpm@linux-foundation.org: tweak comment text] Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org> Acked-by: "Eric W. Biederman" <ebiederm@xmission.com> Cc: Pavel Emelyanov <xemul@parallels.com> Cc: Andrey Vagin <avagin@openvz.org> Cc: KOSAKI Motohiro <kosaki.motohiro@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: H. Peter Anvin <hpa@zytor.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Glauber Costa <glommer@parallels.com> Cc: Andi Kleen <andi@firstfloor.org> Cc: Tejun Heo <tj@kernel.org> Cc: Matt Helsley <matthltc@us.ibm.com> Cc: Pekka Enberg <penberg@kernel.org> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Vasiliy Kulikov <segoon@openwall.com> Cc: Alexey Dobriyan <adobriyan@gmail.com> Cc: Valdis.Kletnieks@vt.edu Cc: Michal Marek <mmarek@suse.cz> Cc: Frederic Weisbecker <fweisbec@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | syscall_64.tbl | g | 11K |  | Cyrill Gorcunov | gorcunov@openvz.org | 1338511772 |  | syscalls, x86: add __NR_kcmp syscall  While doing the checkpoint-restore in the user space one need to determine whether various kernel objects (like mm_struct-s of file_struct-s) are shared between tasks and restore this state.  The 2nd step can be solved by using appropriate CLONE_ flags and the unshare syscall, while there's currently no ways for solving the 1st one.  One of the ways for checking whether two tasks share e.g.  mm_struct is to provide some mm_struct ID of a task to its proc file, but showing such info considered to be not that good for security reasons.  Thus after some debates we end up in conclusion that using that named 'comparison' syscall might be the best candidate.  So here is it -- __NR_kcmp.  It takes up to 5 arguments - the pids of the two tasks (which characteristics should be compared), the comparison type and (in case of comparison of files) two file descriptors.  Lookups for pids are done in the caller's PID namespace only.  At moment only x86 is supported and tested.  [akpm@linux-foundation.org: fix up selftests, warnings] [akpm@linux-foundation.org: include errno.h] [akpm@linux-foundation.org: tweak comment text] Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org> Acked-by: "Eric W. Biederman" <ebiederm@xmission.com> Cc: Pavel Emelyanov <xemul@parallels.com> Cc: Andrey Vagin <avagin@openvz.org> Cc: KOSAKI Motohiro <kosaki.motohiro@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: H. Peter Anvin <hpa@zytor.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Glauber Costa <glommer@parallels.com> Cc: Andi Kleen <andi@firstfloor.org> Cc: Tejun Heo <tj@kernel.org> Cc: Matt Helsley <matthltc@us.ibm.com> Cc: Pekka Enberg <penberg@kernel.org> Cc: Eric Dumazet <eric.dumazet@gmail.com> Cc: Vasiliy Kulikov <segoon@openwall.com> Cc: Alexey Dobriyan <adobriyan@gmail.com> Cc: Valdis.Kletnieks@vt.edu Cc: Michal Marek <mmarek@suse.cz> Cc: Frederic Weisbecker <fweisbec@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | Makefile | g | 1.6K |  | H. Peter Anvin | hpa@zytor.com | 1329771124 |  | x32: Generate <asm/unistd_64_x32.h>  Generate macros for the *kernel* code to use to refer to x32 system calls.  These have an __NR_x32_ prefix and do not include __X32_SYSCALL_BIT.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | syscalltbl.sh | s | 327B | 13 | H. Peter Anvin | hpa@linux.intel.com | 1321565736 |  | x86: Machine-readable syscall tables and scripts to process them  Create a simple set of syscall tables and scripts to turn them into both header files (unistd_*.h) and macros for generating the system call tables.  Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
f | syscallhdr.sh | s | 644B | 23 | H. Peter Anvin | hpa@linux.intel.com | 1321664479 |  | x86, syscall: Allow syscall offset to be symbolic  Allow the specified syscall offset to be symbolic, e.g. a macro.  For offset system calls, this if nothing else makes the generated code easier to read.  Suggested-by: H. J. Lu <hjl.tools@gmail.com> Link: http://lkml.kernel.org/r/1321569446-20433-7-git-send-email-hpa@linux.intel.com Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
