f | init.c | s | 4.4K | 143 | Peter Zijlstra | a.p.zijlstra@chello.nl | 1306337956 |  | mm: now that all old mmu_gather code is gone, remove the storage  Fold all the mmu_gather rework patches into one for submission  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Reported-by: Hugh Dickins <hughd@google.com> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: David Miller <davem@davemloft.net> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: Russell King <rmk@arm.linux.org.uk> Cc: Paul Mundt <lethal@linux-sh.org> Cc: Jeff Dike <jdike@addtoit.com> Cc: Richard Weinberger <richard@nod.at> Cc: Tony Luck <tony.luck@intel.com> Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Cc: Mel Gorman <mel@csn.ul.ie> Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com> Cc: Nick Piggin <npiggin@kernel.dk> Cc: Namhyung Kim <namhyung@gmail.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | tlb.c | s | 8.3K | 302 | Russell King | rmk+kernel@arm.linux.org.uk | 1266684106 |  | MM: Pass a PTE pointer to update_mmu_cache() rather than the PTE itself  On VIVT ARM, when we have multiple shared mappings of the same file in the same MM, we need to ensure that we have coherency across all copies.  We do this via make_coherent() by making the pages uncacheable.  This used to work fine, until we allowed highmem with highpte - we now have a page table which is mapped as required, and is not available for modification via update_mmu_cache().  Ralf Beache suggested getting rid of the PTE value passed to update_mmu_cache():    On MIPS update_mmu_cache() calls __update_tlb() which walks pagetables   to construct a pointer to the pte again.  Passing a pte_t * is much   more elegant.  Maybe we might even replace the pte argument with the   pte_t?  Ben Herrenschmidt would also like the pte pointer for PowerPC:    Passing the ptep in there is exactly what I want.  I want that   -instead- of the PTE value, because I have issue on some ppc cases,   for I$/D$ coherency, where set_pte_at() may decide to mask out the   _PAGE_EXEC.  So, pass in the mapped page table pointer into update_mmu_cache(), and remove the PTE value, updating all implementations and call sites to suit.  Includes a fix from Stephen Rothwell:    sparc: fix fallout from update_mmu_cache API change    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>  Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
f | clear_page.S | g | 499B |  | Haavard Skinnemoen | hskinnemoen@atmel.com | 1159285734 |  | [PATCH] avr32 architecture  This adds support for the Atmel AVR32 architecture as well as the AT32AP7000 CPU and the AT32STK1000 development board.  AVR32 is a new high-performance 32-bit RISC microprocessor core, designed for cost-sensitive embedded applications, with particular emphasis on low power consumption and high code density.  The AVR32 architecture is not binary compatible with earlier 8-bit AVR architectures.  The AVR32 architecture, including the instruction set, is described by the AVR32 Architecture Manual, available from  http://www.atmel.com/dyn/resources/prod_documents/doc32000.pdf  The Atmel AT32AP7000 is the first CPU implementing the AVR32 architecture.  It features a 7-stage pipeline, 16KB instruction and data caches and a full Memory Management Unit.  It also comes with a large set of integrated peripherals, many of which are shared with the AT91 ARM-based controllers from Atmel.  Full data sheet is available from  http://www.atmel.com/dyn/resources/prod_documents/doc32003.pdf  while the CPU core implementation including caches and MMU is documented by the AVR32 AP Technical Reference, available from  http://www.atmel.com/dyn/resources/prod_documents/doc32001.pdf  Information about the AT32STK1000 development board can be found at  http://www.atmel.com/dyn/products/tools_card.asp?tool_id=3918  including a BSP CD image with an earlier version of this patch, development tools (binaries and source/patches) and a root filesystem image suitable for booting from SD card.  Alternatively, there's a preliminary "getting started" guide available at http://avr32linux.org/twiki/bin/view/Main/GettingStarted which provides links to the sources and patches you will need in order to set up a cross-compiling environment for avr32-linux.  This patch, as well as the other patches included with the BSP and the toolchain patches, is actively supported by Atmel Corporation.  [dmccr@us.ibm.com: Fix more pxx_page macro locations] [bunk@stusta.de: fix `make defconfig'] Signed-off-by: Haavard Skinnemoen <hskinnemoen@atmel.com> Signed-off-by: Adrian Bunk <bunk@stusta.de> Signed-off-by: Dave McCracken <dmccr@us.ibm.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | Makefile | g | 147B |  | Haavard Skinnemoen | hskinnemoen@atmel.com | 1159285734 |  | [PATCH] avr32 architecture  This adds support for the Atmel AVR32 architecture as well as the AT32AP7000 CPU and the AT32STK1000 development board.  AVR32 is a new high-performance 32-bit RISC microprocessor core, designed for cost-sensitive embedded applications, with particular emphasis on low power consumption and high code density.  The AVR32 architecture is not binary compatible with earlier 8-bit AVR architectures.  The AVR32 architecture, including the instruction set, is described by the AVR32 Architecture Manual, available from  http://www.atmel.com/dyn/resources/prod_documents/doc32000.pdf  The Atmel AT32AP7000 is the first CPU implementing the AVR32 architecture.  It features a 7-stage pipeline, 16KB instruction and data caches and a full Memory Management Unit.  It also comes with a large set of integrated peripherals, many of which are shared with the AT91 ARM-based controllers from Atmel.  Full data sheet is available from  http://www.atmel.com/dyn/resources/prod_documents/doc32003.pdf  while the CPU core implementation including caches and MMU is documented by the AVR32 AP Technical Reference, available from  http://www.atmel.com/dyn/resources/prod_documents/doc32001.pdf  Information about the AT32STK1000 development board can be found at  http://www.atmel.com/dyn/products/tools_card.asp?tool_id=3918  including a BSP CD image with an earlier version of this patch, development tools (binaries and source/patches) and a root filesystem image suitable for booting from SD card.  Alternatively, there's a preliminary "getting started" guide available at http://avr32linux.org/twiki/bin/view/Main/GettingStarted which provides links to the sources and patches you will need in order to set up a cross-compiling environment for avr32-linux.  This patch, as well as the other patches included with the BSP and the toolchain patches, is actively supported by Atmel Corporation.  [dmccr@us.ibm.com: Fix more pxx_page macro locations] [bunk@stusta.de: fix `make defconfig'] Signed-off-by: Haavard Skinnemoen <hskinnemoen@atmel.com> Signed-off-by: Adrian Bunk <bunk@stusta.de> Signed-off-by: Dave McCracken <dmccr@us.ibm.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | dma-coherent.c | s | 3.6K | 126 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103859 |  | avr32: add export.h to arch/avr32 for EXPORT_SYMBOL/THIS_MODULE  Add it in where the module.h implicit presence was doing the job before.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | cache.c | s | 3.7K | 133 | Ryota Ozaki | ozaki.ryota@gmail.com | 1297958079 |  | mm: Fix out-of-date comments which refers non-existent functions  do_file_page and do_no_page don't exist anymore, but some comments still refers them. The patch fixes them by replacing them with existing ones.  Signed-off-by: Ryota Ozaki <ozaki.ryota@gmail.com> Acked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com> Reviewed-by: Minchan Kim <minchan.kim@gmail.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | ioremap.c | s | 2.3K | 80 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | copy_page.S | g | 560B |  | Haavard Skinnemoen | hskinnemoen@atmel.com | 1159285734 |  | [PATCH] avr32 architecture  This adds support for the Atmel AVR32 architecture as well as the AT32AP7000 CPU and the AT32STK1000 development board.  AVR32 is a new high-performance 32-bit RISC microprocessor core, designed for cost-sensitive embedded applications, with particular emphasis on low power consumption and high code density.  The AVR32 architecture is not binary compatible with earlier 8-bit AVR architectures.  The AVR32 architecture, including the instruction set, is described by the AVR32 Architecture Manual, available from  http://www.atmel.com/dyn/resources/prod_documents/doc32000.pdf  The Atmel AT32AP7000 is the first CPU implementing the AVR32 architecture.  It features a 7-stage pipeline, 16KB instruction and data caches and a full Memory Management Unit.  It also comes with a large set of integrated peripherals, many of which are shared with the AT91 ARM-based controllers from Atmel.  Full data sheet is available from  http://www.atmel.com/dyn/resources/prod_documents/doc32003.pdf  while the CPU core implementation including caches and MMU is documented by the AVR32 AP Technical Reference, available from  http://www.atmel.com/dyn/resources/prod_documents/doc32001.pdf  Information about the AT32STK1000 development board can be found at  http://www.atmel.com/dyn/products/tools_card.asp?tool_id=3918  including a BSP CD image with an earlier version of this patch, development tools (binaries and source/patches) and a root filesystem image suitable for booting from SD card.  Alternatively, there's a preliminary "getting started" guide available at http://avr32linux.org/twiki/bin/view/Main/GettingStarted which provides links to the sources and patches you will need in order to set up a cross-compiling environment for avr32-linux.  This patch, as well as the other patches included with the BSP and the toolchain patches, is actively supported by Atmel Corporation.  [dmccr@us.ibm.com: Fix more pxx_page macro locations] [bunk@stusta.de: fix `make defconfig'] Signed-off-by: Haavard Skinnemoen <hskinnemoen@atmel.com> Signed-off-by: Adrian Bunk <bunk@stusta.de> Signed-off-by: Dave McCracken <dmccr@us.ibm.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | fault.c | s | 5.7K | 216 | Nick Piggin | npiggin@suse.de | 1281411898 |  | avr32: invoke oom-killer from page fault  As explained in commit 1c0fe6e3bd ("mm: invoke oom-killer from page fault") , we want to call the architecture independent oom killer when getting an unexplained OOM from handle_mm_fault, rather than simply killing current.  Signed-off-by: Nick Piggin <npiggin@suse.de> Acked-by: Haavard Skinnemoen <hskinnemoen@atmel.com> Acked-by: David Rientjes <rientjes@google.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
