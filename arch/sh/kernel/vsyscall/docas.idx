f | vsyscall.c | s | 2.4K | 92 | Jason Baron | jbaron@redhat.com | 1332547122 |  | coredump: remove VM_ALWAYSDUMP flag  The motivation for this patchset was that I was looking at a way for a qemu-kvm process, to exclude the guest memory from its core dump, which can be quite large.  There are already a number of filter flags in /proc/<pid>/coredump_filter, however, these allow one to specify 'types' of kernel memory, not specific address ranges (which is needed in this case).  Since there are no more vma flags available, the first patch eliminates the need for the 'VM_ALWAYSDUMP' flag.  The flag is used internally by the kernel to mark vdso and vsyscall pages.  However, it is simple enough to check if a vma covers a vdso or vsyscall page without the need for this flag.  The second patch then replaces the 'VM_ALWAYSDUMP' flag with a new 'VM_NODUMP' flag, which can be set by userspace using new madvise flags: 'MADV_DONTDUMP', and unset via 'MADV_DODUMP'.  The core dump filters continue to work the same as before unless 'MADV_DONTDUMP' is set on the region.  The qemu code which implements this features is at:    http://people.redhat.com/~jbaron/qemu-dump/qemu-dump.patch  In my testing the qemu core dump shrunk from 383MB -> 13MB with this patch.  I also believe that the 'MADV_DONTDUMP' flag might be useful for security sensitive apps, which might want to select which areas are dumped.  This patch:  The VM_ALWAYSDUMP flag is currently used by the coredump code to indicate that a vma is part of a vsyscall or vdso section.  However, we can determine if a vma is in one these sections by checking it against the gate_vma and checking for a non-NULL return value from arch_vma_name().  Thus, freeing a valuable vma bit.  Signed-off-by: Jason Baron <jbaron@redhat.com> Acked-by: Roland McGrath <roland@hack.frob.com> Cc: Chris Metcalf <cmetcalf@tilera.com> Cc: Avi Kivity <avi@redhat.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | vsyscall-trapa.S | g | 1.1K |  | Paul Mundt | lethal@linux-sh.org | 1333104146 |  | sh: vsyscall: Fix up .eh_frame generation.  Some improper formatting caused the .eh_frame generation to fail, resulting in gcc/g++ testsuite failures with regards to unwinding through the vDSO. Now that someone is actually working on this on the gcc side it's time to fix up the kernel side, too.  Signed-off-by: Paul Mundt <lethal@linux-sh.org>
f | Makefile | g | 1.2K |  | Sam Ravnborg | sam@ravnborg.org | 1253442462 |  | kbuild: rename ld-option to cc-ldoption  ld-option is misnamed as it test options to gcc, not to ld. Renamed it to reflect this.  Cc: Andi Kleen <andi@firstfloor.org> Cc: Roland McGrath <roland@redhat.com> Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
f | vsyscall-note.S | g | 739B |  | Paul Mundt | lethal@linux-sh.org | 1159349629 |  | sh: Initial vsyscall page support.  This implements initial support for the vsyscall page on SH. At the moment we leave it configurable due to having nommu to support from the same code base. We hook it up for the signal trampoline return at present, with more to be added later, once uClibc catches up.  Signed-off-by: Paul Mundt <lethal@linux-sh.org>
f | vsyscall.lds.S | g | 2.1K |  | Kaz Kojima | kkojima@rr.iij4u.or.jp | 1193974177 |  | sh: Terminate .eh_frame in VDSO with a 4-byte 0.  It's assumed that .eh_frame is terminated with 4-byte 0 in shared libraries and executable.  It seems to be the case for VDSOs too. Without this terminator, I saw failures when unwinding from VDSO, though I don't know how other architectures handle this issue. For the normal libs, crtendS.o gives this terminator.  We can use such terminating objects.  Or we can add a 4-byte 0 with modifying the linker script like as the patch below.  Signed-off-by: Kaz Kojima <kkojima@rr.iij4u.or.jp> Signed-off-by: Paul Mundt <lethal@linux-sh.org>
f | vsyscall-sigreturn.S | g | 1.7K |  | Paul Mundt | lethal@linux-sh.org | 1333104146 |  | sh: vsyscall: Fix up .eh_frame generation.  Some improper formatting caused the .eh_frame generation to fail, resulting in gcc/g++ testsuite failures with regards to unwinding through the vDSO. Now that someone is actually working on this on the gcc side it's time to fix up the kernel side, too.  Signed-off-by: Paul Mundt <lethal@linux-sh.org>
f | vsyscall-syscall.S | g | 190B |  | Paul Mundt | lethal@linux-sh.org | 1159349629 |  | sh: Initial vsyscall page support.  This implements initial support for the vsyscall page on SH. At the moment we leave it configurable due to having nommu to support from the same code base. We hook it up for the signal trampoline return at present, with more to be added later, once uClibc catches up.  Signed-off-by: Paul Mundt <lethal@linux-sh.org>
