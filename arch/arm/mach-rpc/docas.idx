f | Makefile | g | 146B |  | Linus Torvalds | torvalds@linux-foundation.org | 1332897422 |  | Merge branch 'platforms' of git://git.linaro.org/people/rmk/linux-arm  Pull ARM platform updates from Russell King:  "This covers platform stuff for platforms I have a direct interest in   (iow, I have the hardware).  Essentially:    - as we no longer support any other Acorn platforms other than RiscPC      anymore, we can collect all that code into mach-rpc.    - convert Acorn expansion card stuff to use IRQ allocation functions,      and get rid of NO_IRQ from there.    - cleanups to the ebsa110 platform to move some private stuff out of      its header files.    - large amount of SA11x0 updates:    - conversion of private DMA implementation to DMA engine support      (this actually gives us greater flexibility in drivers over the old      API.)    - re-worked ucb1x00 updates - convert to genirq, remove sa11x0      dependencies, fix various minor issues    - move platform specific sa11x0 framebuffer data into platform files      in arch/arm instead of keeping this in the driver itself    - update sa11x0 IrDA driver for DMA engine, and allow it to use DMA      for SIR transmissions as well as FIR    - rework sa1111 support for genirq, and irq allocation    - fix sa1111 IRQ support so it works again    - use sparse IRQ support    After this, I have one more pull request remaining from my current   set, which I think is going to be the most problematical as it   generates 8 conflicts."  Fixed up the trivial conflict in arch/arm/mach-rpc/Makefile as per Russell.  * 'platforms' of git://git.linaro.org/people/rmk/linux-arm: (125 commits)   ARM: 7343/1: sa11x0: convert to sparse IRQ   ARM: 7342/2: sa1100: prepare for sparse irq conversion   ARM: 7341/1: input: prepare jornada720 keyboard and ts for sa11x0 sparse irq   ARM: 7340/1: rtc: sa1100: include mach/irqs.h instead of asm/irq.h   ARM: sa11x0: remove unused DMA controller definitions   ARM: sa11x0: remove old SoC private DMA driver   USB: sa1111: add hcd .reset method   USB: sa1111: add OHCI shutdown methods   USB: sa1111: reorganize ohci-sa1111.c   USB: sa1111: get rid of nasty printk(KERN_DEBUG "%s: ...", __FILE__)   USB: sa1111: sparse and checkpatch cleanups   ARM: sa11x0: don't static map sa1111   ARM: sa1111: use dev_err() rather than printk()   ARM: sa1111: cleanup sub-device registration and unregistration   ARM: sa1111: only setup DMA for DMA capable devices   ARM: sa1111: register sa1111 devices with dmabounce in bus notifier   ARM: sa1111: move USB interface register definitions to ohci-sa1111.c   ARM: sa1111: move PCMCIA interface register definitions to sa1111_generic.c   ARM: sa1111: move PS/2 interface register definitions to sa1111p2.c   ARM: sa1111: delete unused physical GPIO register definitions   ...
f | time.c | s | 2.0K | 83 | Russell King | rmk+kernel@arm.linux.org.uk | 1332581856 |  | ARM: riscpc: remove IRQ_TIMER  Use IRQ_TIMER0 instead, which is the same thing.  Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
d | include |  | 1 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1333069330 |  | 
f | ecard.c | s | 25K | 947 | Linus Torvalds | torvalds@linux-foundation.org | 1332897422 |  | Merge branch 'platforms' of git://git.linaro.org/people/rmk/linux-arm  Pull ARM platform updates from Russell King:  "This covers platform stuff for platforms I have a direct interest in   (iow, I have the hardware).  Essentially:    - as we no longer support any other Acorn platforms other than RiscPC      anymore, we can collect all that code into mach-rpc.    - convert Acorn expansion card stuff to use IRQ allocation functions,      and get rid of NO_IRQ from there.    - cleanups to the ebsa110 platform to move some private stuff out of      its header files.    - large amount of SA11x0 updates:    - conversion of private DMA implementation to DMA engine support      (this actually gives us greater flexibility in drivers over the old      API.)    - re-worked ucb1x00 updates - convert to genirq, remove sa11x0      dependencies, fix various minor issues    - move platform specific sa11x0 framebuffer data into platform files      in arch/arm instead of keeping this in the driver itself    - update sa11x0 IrDA driver for DMA engine, and allow it to use DMA      for SIR transmissions as well as FIR    - rework sa1111 support for genirq, and irq allocation    - fix sa1111 IRQ support so it works again    - use sparse IRQ support    After this, I have one more pull request remaining from my current   set, which I think is going to be the most problematical as it   generates 8 conflicts."  Fixed up the trivial conflict in arch/arm/mach-rpc/Makefile as per Russell.  * 'platforms' of git://git.linaro.org/people/rmk/linux-arm: (125 commits)   ARM: 7343/1: sa11x0: convert to sparse IRQ   ARM: 7342/2: sa1100: prepare for sparse irq conversion   ARM: 7341/1: input: prepare jornada720 keyboard and ts for sa11x0 sparse irq   ARM: 7340/1: rtc: sa1100: include mach/irqs.h instead of asm/irq.h   ARM: sa11x0: remove unused DMA controller definitions   ARM: sa11x0: remove old SoC private DMA driver   USB: sa1111: add hcd .reset method   USB: sa1111: add OHCI shutdown methods   USB: sa1111: reorganize ohci-sa1111.c   USB: sa1111: get rid of nasty printk(KERN_DEBUG "%s: ...", __FILE__)   USB: sa1111: sparse and checkpatch cleanups   ARM: sa11x0: don't static map sa1111   ARM: sa1111: use dev_err() rather than printk()   ARM: sa1111: cleanup sub-device registration and unregistration   ARM: sa1111: only setup DMA for DMA capable devices   ARM: sa1111: register sa1111 devices with dmabounce in bus notifier   ARM: sa1111: move USB interface register definitions to ohci-sa1111.c   ARM: sa1111: move PCMCIA interface register definitions to sa1111_generic.c   ARM: sa1111: move PS/2 interface register definitions to sa1111p2.c   ARM: sa1111: delete unused physical GPIO register definitions   ...
f | irq.c | s | 3.4K | 132 | Rob Herring | rob.herring@calxeda.com | 1329865473 |  | ARM: rpc: make default fiq handler run-time installed  Only rpc uses disable_fiq macro. Change it to a run-time installed default FIQ handler. The handler is installed before FIQ is enabled so the behavior should be unchanged.  Signed-off-by: Rob Herring <rob.herring@calxeda.com> Acked-by: Nicolas Pitre <nico@linaro.org>
f | dma.c | s | 8.6K | 318 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | fiq.S | g | 343B |  | Rob Herring | rob.herring@calxeda.com | 1329865473 |  | ARM: rpc: make default fiq handler run-time installed  Only rpc uses disable_fiq macro. Change it to a run-time installed default FIQ handler. The handler is installed before FIQ is enabled so the behavior should be unchanged.  Signed-off-by: Rob Herring <rob.herring@calxeda.com> Acked-by: Nicolas Pitre <nico@linaro.org>
f | ecard.h | s | 1.4K | 58 | Russell King | rmk+kernel@arm.linux.org.uk | 1332581856 |  | ARM: riscpc: move ecard.c to arch/arm/mach-rpc  RiscPC is the only platform using the Acorn expansion card support, so move it into its mach-* directory.  Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
f | riscpc.c | s | 4.7K | 195 | Linus Torvalds | torvalds@linux-foundation.org | 1332975501 |  | 
f | Makefile.boot | g | 85B |  | Sascha Hauer | s.hauer@pengutronix.de | 1318839160 |  | ARM: 7022/1: allow to detect conflicting zreladdrs  Boards used to specify zreladdr in their Makefile.boot with zreladdr-y := x, so conflicting zreladdrs were silently overwritten. This patch changes this to zreladdr-y += x, so that we end up with multiple words in zreladdr in such a case. We can detect this later and complain if necessary.  Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de> Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
