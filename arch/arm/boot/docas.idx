d | dts |  | 117 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1340560679 |  | 
d | compressed |  | 26 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1337703804 |  | 
f | Makefile | g | 3.3K |  | Stephen Warren | swarren@wwwdotorg.org | 1332769760 |  | Kbuild: centralize MKIMAGE and cmd_uimage definitions  All ARCHs have the same definition of MKIMAGE. Move it to Makefile.lib to avoid duplication.  All ARCHs have similar definitions of cmd_uimage. Place a sufficiently parameterized version in Makefile.lib to avoid duplication.  Signed-off-by: Stephen Warren <swarren@wwwdotorg.org> Acked-by: Nicolas Pitre <nico@linaro.org> Tested-by: Mike Frysinger <vapier@gentoo.org> [Blackfin] Tested-by: Michal Simek <monstr@monstr.eu> [Microblaze] Tested-by: Guan Xuetao <gxt@mprc.pku.edu.cn> [unicore32] Signed-off-by: Michal Marek <mmarek@suse.cz>
f | install.sh | s | 1.2K | 47 | Sam Ravnborg | sam@ravnborg.org | 1253441894 |  | kbuild: use INSTALLKERNEL to select customized installkernel script  Replace the use of CROSS_COMPILE to select a customized installkernel script with the possibility to set INSTALLKERNEL to select a custom installkernel script when running make:      make INSTALLKERNEL=arm-installkernel install  With this patch we are now more consistent across different architectures - they did not all support use of CROSS_COMPILE.  The use of CROSS_COMPILE was a hack as this really belongs to gcc/binutils and the installkernel script does not change just because we change toolchain.  The use of CROSS_COMPILE caused troubles with an upcoming patch that saves CROSS_COMPILE when a kernel is built - it would no longer be installable. [Thanks to Peter Z. for this hint]  This patch undos what Ian did in commit:    0f8e2d62fa04441cd12c08ce521e84e5bd3f8a46   ("use ${CROSS_COMPILE}installkernel in arch/*/boot/install.sh")  The patch has been lightly tested on x86 only - but all changes looks obvious.  Acked-by: Peter Zijlstra <peterz@infradead.org> Acked-by: Mike Frysinger <vapier@gentoo.org> [blackfin] Acked-by: Russell King <linux@arm.linux.org.uk> [arm] Acked-by: Paul Mundt <lethal@linux-sh.org> [sh] Acked-by: "H. Peter Anvin" <hpa@zytor.com> [x86] Cc: Ian Campbell <icampbell@arcom.com> Cc: Tony Luck <tony.luck@intel.com> [ia64] Cc: Fenghua Yu <fenghua.yu@intel.com> [ia64] Cc: Hirokazu Takata <takata@linux-m32r.org> [m32r] Cc: Geert Uytterhoeven <geert@linux-m68k.org> [m68k] Cc: Kyle McMartin <kyle@mcmartin.ca> [parisc] Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> [powerpc] Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> [s390] Cc: Thomas Gleixner <tglx@linutronix.de> [x86] Cc: Ingo Molnar <mingo@redhat.com> [x86] Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
d | bootp |  | 5 items |  | Dave Martin | dave.martin@linaro.org | 1291124664 |  | ARM: 6499/1: Thumb-2: Correct data alignment for CONFIG_THUMB2_KERNEL in bootp/init.S  Directives such as .long and .word do not magically cause the assembler location counter to become aligned in gas.  As a result, using these directives in code sections can result in misaligned data words when building a Thumb-2 kernel (CONFIG_THUMB2_KERNEL).  This is a Bad Thing, since the ABI permits the compiler to assume that fundamental types of word size or above are word- aligned when accessing them from C.  If the data is not really word-aligned, this can cause impaired performance and stray alignment faults in some circumstances.  In general, the following rules should be applied when using data word declaration directives inside code sections:      * .quad and .double:          .align 3      * .long, .word, .single, .float:          .align (or .align 2)      * .short:         No explicit alignment required, since Thumb-2         instructions are always 2 or 4 bytes in size.         immediately after an instruction.  Reviewed-by: Will Deacon <will.deacon@arm.com> Signed-off-by: Dave Martin <dave.martin@linaro.org> Acked-by: Catalin Marinas <catalin.marinas@arm.com> Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
