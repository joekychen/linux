f | pci.c | s | 8.8K | 314 | Arnd Bergmann | arnd@arndb.de | 1339897295 |  | arm: versatile: fix and enable PCI I/O space  With commit 4d5fc58dbe34b (ARM: remove bunch of now unused mach/io.h files), the I/O space setup was completely broken on versatile. This patch fixes that and prepares for further I/O space clean-up.  I/O space handling on the versatile platform is currently broken in multiple ways. Most importantly, the ports do not get mapped into the virtual address space at all.  Also, there is some amount of confusion between PCI I/O space and other statically mapped MMIO registers in the platform code:  * The __io_address() macro that is used to access the   platform register maps to the same __io macro that gets   used for I/O space.  * The IO_SPACE_LIMIT is set to a value that is much larger   than the total available space.  * The I/O resource of the PCI bus is set to the physical   address of the mapping, which is way outside of the   actual I/O space limit as well as the address range that   gets decoded by traditional PCI cards.  * No attempt is made to stay outside of the ISA port range   that some device drivers try access.  * No resource gets requested as a child of ioport_resource,   but an IORESOURCE_IO type mapping gets requested   as a child of iomem_resource.  This patch attempts to correct all of the above. This makes it possible to use virtio-pci based virtual devices as well as actual PCI cards including those with legacy ISA port ranges like VGA.  Some of the issues seem to be duplicated on other platforms.  Signed-off-by: Arnd Bergmann <arnd@arndb.de> [rob: update to 3.5-rc2 and io.h cleanup related changes] Signed-off-by: Rob Herring <rob.herring@calxeda.com> Tested-by: Robert Schwebel <r.schwebel@pengutronix.de> Signed-off-by: Olof Johansson <olof@lixom.net>
d | include |  | 1 items |  | Arnd Bergmann | arnd@arndb.de | 1339897295 |  | arm: versatile: fix and enable PCI I/O space  With commit 4d5fc58dbe34b (ARM: remove bunch of now unused mach/io.h files), the I/O space setup was completely broken on versatile. This patch fixes that and prepares for further I/O space clean-up.  I/O space handling on the versatile platform is currently broken in multiple ways. Most importantly, the ports do not get mapped into the virtual address space at all.  Also, there is some amount of confusion between PCI I/O space and other statically mapped MMIO registers in the platform code:  * The __io_address() macro that is used to access the   platform register maps to the same __io macro that gets   used for I/O space.  * The IO_SPACE_LIMIT is set to a value that is much larger   than the total available space.  * The I/O resource of the PCI bus is set to the physical   address of the mapping, which is way outside of the   actual I/O space limit as well as the address range that   gets decoded by traditional PCI cards.  * No attempt is made to stay outside of the ISA port range   that some device drivers try access.  * No resource gets requested as a child of ioport_resource,   but an IORESOURCE_IO type mapping gets requested   as a child of iomem_resource.  This patch attempts to correct all of the above. This makes it possible to use virtio-pci based virtual devices as well as actual PCI cards including those with legacy ISA port ranges like VGA.  Some of the issues seem to be duplicated on other platforms.  Signed-off-by: Arnd Bergmann <arnd@arndb.de> [rob: update to 3.5-rc2 and io.h cleanup related changes] Signed-off-by: Rob Herring <rob.herring@calxeda.com> Tested-by: Robert Schwebel <r.schwebel@pengutronix.de> Signed-off-by: Olof Johansson <olof@lixom.net>
f | versatile_dt.c | s | 1.7K | 49 | Russell King | rmk+kernel@arm.linux.org.uk | 1325769927 |  | Merge branch 'restart' into for-linus  Conflicts: 	arch/arm/mach-exynos/cpu.c  The changes to arch/arm/mach-exynos/cpu.c were moved to mach-exynos/common.c.
f | Makefile | g | 240B |  | Grant Likely | grant.likely@secretlab.ca | 1311838324 |  | arm/versatile: Add device tree support  For testing the dt work, define a dt-enabled versatile platform.  This patch adds a new versatile platform for when using the device tree.  Add platform and amba devices are discovered and registered by parsing the device tree.  Clocks and initial io mappings are still configured statically.  This patch still depends on some static platform_data for a few devices which is passed via the auxdata structure to of_platform_populate(), but it is a viable starting point until the drivers can get all configuration data out of the device tree.  Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
f | versatile_pb.c | s | 2.9K | 96 | Russell King | rmk+kernel@arm.linux.org.uk | 1327489443 |  | ARM: amba: versatile: get rid of private platform amba_device initializer  Tested-by: Will Deacon <will.deacon@arm.com> Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
f | core.h | s | 1.6K | 39 | Russell King | rmk+kernel@arm.linux.org.uk | 1327489443 |  | ARM: amba: versatile: get rid of private platform amba_device initializer  Tested-by: Will Deacon <will.deacon@arm.com> Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
f | versatile_ab.c | s | 1.4K | 41 | Linus Torvalds | torvalds@linux-foundation.org | 1325966610 |  | Merge branch 'driver-core-next' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core  * 'driver-core-next' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/driver-core: (73 commits)   arm: fix up some samsung merge sysdev conversion problems   firmware: Fix an oops on reading fw_priv->fw in sysfs loading file   Drivers:hv: Fix a bug in vmbus_driver_unregister()   driver core: remove __must_check from device_create_file   debugfs: add missing #ifdef HAS_IOMEM   arm: time.h: remove device.h #include   driver-core: remove sysdev.h usage.   clockevents: remove sysdev.h   arm: convert sysdev_class to a regular subsystem   arm: leds: convert sysdev_class to a regular subsystem   kobject: remove kset_find_obj_hinted()   m86k: gpio - convert sysdev_class to a regular subsystem   mips: txx9_sram - convert sysdev_class to a regular subsystem   mips: 7segled - convert sysdev_class to a regular subsystem   sh: dma - convert sysdev_class to a regular subsystem   sh: intc - convert sysdev_class to a regular subsystem   power: suspend - convert sysdev_class to a regular subsystem   power: qe_ic - convert sysdev_class to a regular subsystem   power: cmm - convert sysdev_class to a regular subsystem   s390: time - convert sysdev_class to a regular subsystem   ...  Fix up conflicts with 'struct sysdev' removal from various platform drivers that got changed:  - arch/arm/mach-exynos/cpu.c  - arch/arm/mach-exynos/irq-eint.c  - arch/arm/mach-s3c64xx/common.c  - arch/arm/mach-s3c64xx/cpu.c  - arch/arm/mach-s5p64x0/cpu.c  - arch/arm/mach-s5pv210/common.c  - arch/arm/plat-samsung/include/plat/cpu.h  - arch/powerpc/kernel/sysfs.c and fix up cpu_is_hotpluggable() as per Greg in include/linux/cpu.h
f | Kconfig | g | 718B |  | Grant Likely | grant.likely@secretlab.ca | 1311838324 |  | arm/versatile: Add device tree support  For testing the dt work, define a dt-enabled versatile platform.  This patch adds a new versatile platform for when using the device tree.  Add platform and amba devices are discovered and registered by parsing the device tree.  Clocks and initial io mappings are still configured statically.  This patch still depends on some static platform_data for a few devices which is passed via the auxdata structure to of_platform_populate(), but it is a viable starting point until the drivers can get all configuration data out of the device tree.  Signed-off-by: Grant Likely <grant.likely@secretlab.ca>
f | core.c | s | 21K | 707 | Arnd Bergmann | arnd@arndb.de | 1339897295 |  | arm: versatile: fix and enable PCI I/O space  With commit 4d5fc58dbe34b (ARM: remove bunch of now unused mach/io.h files), the I/O space setup was completely broken on versatile. This patch fixes that and prepares for further I/O space clean-up.  I/O space handling on the versatile platform is currently broken in multiple ways. Most importantly, the ports do not get mapped into the virtual address space at all.  Also, there is some amount of confusion between PCI I/O space and other statically mapped MMIO registers in the platform code:  * The __io_address() macro that is used to access the   platform register maps to the same __io macro that gets   used for I/O space.  * The IO_SPACE_LIMIT is set to a value that is much larger   than the total available space.  * The I/O resource of the PCI bus is set to the physical   address of the mapping, which is way outside of the   actual I/O space limit as well as the address range that   gets decoded by traditional PCI cards.  * No attempt is made to stay outside of the ISA port range   that some device drivers try access.  * No resource gets requested as a child of ioport_resource,   but an IORESOURCE_IO type mapping gets requested   as a child of iomem_resource.  This patch attempts to correct all of the above. This makes it possible to use virtio-pci based virtual devices as well as actual PCI cards including those with legacy ISA port ranges like VGA.  Some of the issues seem to be duplicated on other platforms.  Signed-off-by: Arnd Bergmann <arnd@arndb.de> [rob: update to 3.5-rc2 and io.h cleanup related changes] Signed-off-by: Rob Herring <rob.herring@calxeda.com> Tested-by: Robert Schwebel <r.schwebel@pengutronix.de> Signed-off-by: Olof Johansson <olof@lixom.net>
f | Makefile.boot | g | 85B |  | Sascha Hauer | s.hauer@pengutronix.de | 1318839160 |  | ARM: 7022/1: allow to detect conflicting zreladdrs  Boards used to specify zreladdr in their Makefile.boot with zreladdr-y := x, so conflicting zreladdrs were silently overwritten. This patch changes this to zreladdr-y += x, so that we end up with multiple words in zreladdr in such a case. We can detect this later and complain if necessary.  Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de> Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>
