f | bpf_jit_64.S | g | 5.9K |  | Michael Ellerman | michael@ellerman.id.au | 1340944534 |  | powerpc: Fix BPF_JIT code to link with multiple TOCs  If the kernel is big enough (eg. allyesconfig), the linker may need to switch TOCs when calling from the BPF JIT code out to the external helpers (skb_copy_bits() & bpf_internal_load_pointer_neg_helper()).  In order to do that we need to leave space after the bl for the linker to insert a reload of our TOC pointer.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Acked-by: Matt Evans <matt@ozlabs.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | bpf_jit.h | s | 8.5K | 211 | Jan Seiffert | kaffeemonster@googlemail.com | 1335807650 |  | bpf jit: Let the powerpc jit handle negative offsets  Now the helper function from filter.c for negative offsets is exported, it can be used it in the jit to handle negative offsets.  First modify the asm load helper functions to handle: - know positive offsets - know negative offsets - any offset  then the compiler can be modified to explicitly use these helper when appropriate.  This fixes the case of a negative X register and allows to lift the restriction that bpf programs with negative offsets can't be jited.  Tested-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Jan Seiffert <kaffeemonster@googlemail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | bpf_jit_comp.c | s | 18K | 640 | Jan Seiffert | kaffeemonster@googlemail.com | 1335807650 |  | bpf jit: Let the powerpc jit handle negative offsets  Now the helper function from filter.c for negative offsets is exported, it can be used it in the jit to handle negative offsets.  First modify the asm load helper functions to handle: - know positive offsets - know negative offsets - any offset  then the compiler can be modified to explicitly use these helper when appropriate.  This fixes the case of a negative X register and allows to lift the restriction that bpf programs with negative offsets can't be jited.  Tested-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Jan Seiffert <kaffeemonster@googlemail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | Makefile | g | 89B |  | Matt Evans | matt@ozlabs.org | 1311277112 |  | net: filter: BPF 'JIT' compiler for PPC64  An implementation of a code generator for BPF programs to speed up packet filtering on PPC64, inspired by Eric Dumazet's x86-64 version.  Filter code is generated as an ABI-compliant function in module_alloc()'d mem with stackframe & prologue/epilogue generated if required (simple filters don't need anything more than an li/blr).  The filter's local variables, M[], live in registers.  Supports all BPF opcodes, although "complicated" loads from negative packet offsets (e.g. SKF_LL_OFF) are not yet supported.  There are a couple of further optimisations left for future work; many-pass assembly with branch-reach reduction and a register allocator to push M[] variables into volatile registers would improve the code quality further.  This currently supports big-endian 64-bit PowerPC only (but is fairly simple to port to PPC32 or LE!).  Enabled in the same way as x86-64:  	echo 1 > /proc/sys/net/core/bpf_jit_enable  Or, enabled with extra debug output:  	echo 2 > /proc/sys/net/core/bpf_jit_enable  Signed-off-by: Matt Evans <matt@ozlabs.org> Acked-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
