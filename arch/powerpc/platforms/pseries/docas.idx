f | Makefile | g | 991B |  | Gavin Shan | shangw@linux.vnet.ibm.com | 1331253569 |  | powerpc/eeh: Introduce EEH device  Original EEH implementation depends on struct pci_dn heavily. However, EEH shouldn't depend on that actually because EEH needn't share much information with other PCI components. That's to say, EEH should have worked independently.  The patch introduces struct eeh_dev so that EEH core components needn't be working based on struct pci_dn in future. Also, struct pci_dn, struct eeh_dev instances are created in dynamic fasion and the binding with EEH device, OF node, PCI device is implemented as well.  The EEH devices are created after PHBs are detected and initialized, but PCI emunation hasn't started yet. Apart from that, PHB might be created dynamically through DLPAR component and the EEH devices should be creatd as well. Another case might be OF node is created dynamically by DR (Dynamic Reconfiguration), which has been defined by PAPR. For those OF nodes created by DR, EEH devices should be also created accordingly. The binding between EEH device and OF node is done while the EEH device is initially created.  The binding between EEH device and PCI device should be done after PCI emunation is done. Besides, PCI hotplug also needs the binding so that the EEH devices could be traced from the newly coming PCI buses or PCI devices.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | eeh_driver.c | s | 15K | 455 | Gavin Shan | shangw@linux.vnet.ibm.com | 1331253586 |  | powerpc/eeh: Replace pci_dn with eeh_dev for EEH aux components  The original EEH implementation is heavily depending on struct pci_dn. We have to put EEH related information to pci_dn. Actually, we could split struct pci_dn so that the EEH sensitive information to form an individual struct, then EEH looks more independent.  The patch replaces pci_dn with eeh_dev for EEH aux components like event and driver. Also, the eeh_event struct has been adjusted for a little bit since eeh_dev has linked the associated FDT (Flat Device Tree) node and PCI device. It's not necessary for eeh_event struct to trace FDT node and PCI device. We can just simply to trace eeh_dev in eeh_event.  The patch also renames function pcid_name() to eeh_pcid_name(), which should be missed in the previous patch where the EEH aux components have been cleaned up.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | event_sources.c | s | 2.3K | 79 | Mark Nelson | markn@au1.ibm.com | 1278638912 |  | powerpc/pseries: Add WARN_ON() to request_event_sources_irqs() on irq allocation/request failure  At the moment if request_event_sources_irqs() can't allocate or request the interrupt, it just does a KERN_ERR printk. This may be fine for the existing RAS code where if we miss an EPOW event it just means that the event won't be logged and if we miss one of the RAS errors then we could miss an event that we perhaps should take action on.  But, for the upcoming IO events code that will use event-sources if we can't allocate or request the interrupt it means we'd potentially miss an interrupt from the device. So, let's add a WARN_ON() in this error case so that we're a bit more vocal when something's amiss.  While we're at it, also use pr_err() to neaten the code up a bit.  Signed-off-by: Mark Nelson <markn@au1.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | offline_states.h | s | 889B | 31 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1301632629 |  | powerpc/smp: soft-replugged CPUs must go back to start_secondary  Various thing are torn down when a CPU is hot-unplugged. That CPU is expected to go back to start_secondary when re-plugged to re initialize everything, such as clock sources, maps, ...  Some implementations just return from cpu_die() callback in the idle loop when the CPU is "re-plugged". This is not enough.  We fix it using a little asm trampoline which resets the stack and calls back into start_secondary as if we were all fresh from boot. The trampoline already existed on ppc64, but we add it for ppc32  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | cmm.c | s | 18K | 642 | Kay Sievers | kay.sievers@vrfy.org | 1324508991 |  | power: cmm - convert sysdev_class to a regular subsystem  After all sysdev classes are ported to regular driver core entities, the sysdev implementation will be entirely removed from the kernel.  Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mackerras <paulus@samba.org> Cc: Prarit Bhargava <prarit@redhat.com> Signed-off-by: Kay Sievers <kay.sievers@vrfy.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | mobility.c | s | 7.4K | 294 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103839 |  | powerpc: Fix up implicit stat.h users  They get it via module.h (via device.h) but we want to clean that up. When we do, we'll get things like:  ibmebus.c:314: error: 'S_IWUSR' undeclared here (not in a function) vio.c:972: error: 'S_IWUSR' undeclared here (not in a function)  so add in the stat header it is using explicitly in advance.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | pci.c | s | 3.1K | 97 | Stephen Rothwell | sfr@canb.auug.org.au | 1176400519 |  | [POWERPC] Rename get_property to of_get_property: arch/powerpc  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | hvcserver.c | s | 7.7K | 225 | Segher Boessenkool | segher@kernel.crashing.org | 1143891417 |  | [PATCH] powerpc/pseries: Change H_StudlyCaps to H_SHOUTING_CAPS  Also cleans up some nearby whitespace problems.  Signed-off-by: Segher Boessenkool <segher@kernel.crashing.org> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | iommu.c | s | 34K | 1081 | Michael Neuling | mikey@neuling.org | 1340944537 |  | powerpc/pseries: Fix software invalidate TCE  The following added support for powernv but broke pseries/BML:  1f1616e powerpc/powernv: Add TCE SW invalidation support  TCE_PCI_SW_INVAL was split into FREE and CREATE flags but the tests in the pseries code were not updated to reflect this.  Signed-off-by: Michael Neuling <mikey@neuling.org> cc: stable@kernel.org [v3.3+] Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | processor_idle.c | s | 7.5K | 281 | Anton Blanchard | anton@samba.org | 1340944537 |  | powerpc: check_and_cede_processor() never cedes  Commit f948501b36c6 ("Make hard_irq_disable() actually hard-disable interrupts") caused check_and_cede_processor to stop working. ->irq_happened will never be zero right after a hard_irq_disable so the compiler removes the call to cede_processor completely.  The bug was introduced back in the lazy interrupt handling rework of 3.4 but was hidden until recently because hard_irq_disable did nothing.  This issue will eventually appear in 3.4 stable since the hard_irq_disable fix is marked stable, so mark this one for stable too.  Signed-off-by: Anton Blanchard <anton@samba.org> Cc: stable@vger.kernel.org Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | hotplug-cpu.c | s | 10K | 348 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | pseries_energy.c | s | 7.5K | 271 | Kay Sievers | kay.sievers@vrfy.org | 1324506582 |  | cpu: convert 'cpu' and 'machinecheck' sysdev_class to a regular subsystem  This moves the 'cpu sysdev_class' over to a regular 'cpu' subsystem and converts the devices to regular devices. The sysdev drivers are implemented as subsystem interfaces now.  After all sysdev classes are ported to regular driver core entities, the sysdev implementation will be entirely removed from the kernel.  Userspace relies on events and generic sysfs subsystem infrastructure from sysdev devices, which are made available with this conversion.  Cc: Haavard Skinnemoen <hskinnemoen@gmail.com> Cc: Hans-Christian Egtvedt <egtvedt@samfundet.no> Cc: Tony Luck <tony.luck@intel.com> Cc: Fenghua Yu <fenghua.yu@intel.com> Cc: Arnd Bergmann <arnd@arndb.de> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mackerras <paulus@samba.org> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: Heiko Carstens <heiko.carstens@de.ibm.com> Cc: Paul Mundt <lethal@linux-sh.org> Cc: "David S. Miller" <davem@davemloft.net> Cc: Chris Metcalf <cmetcalf@tilera.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Ingo Molnar <mingo@redhat.com> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: Borislav Petkov <bp@amd64.org> Cc: Tigran Aivazian <tigran@aivazian.fsnet.co.uk> Cc: Len Brown <lenb@kernel.org> Cc: Zhang Rui <rui.zhang@intel.com> Cc: Dave Jones <davej@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Russell King <rmk+kernel@arm.linux.org.uk> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: "Rafael J. Wysocki" <rjw@sisk.pl> Cc: "Srivatsa S. Bhat" <srivatsa.bhat@linux.vnet.ibm.com> Signed-off-by: Kay Sievers <kay.sievers@vrfy.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | eeh_event.c | s | 4.6K | 134 | Andrew Morton | akpm@linux-foundation.org | 1333341079 |  | powerpc/eeh: Fix use of set_current_state() in eeh event handling set_current_state() wart  That set_current_state() won't work very well: the subsequent mutex_lock() might flip the task back into TASK_RUNNING.  Attempt to put it somewhere where it might have been meant to be, and attempt to describe why it might have been added.  Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | pci_dlpar.c | s | 5.7K | 181 | Linus Torvalds | torvalds@linux-foundation.org | 1332536532 |  | Merge branch 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci  Pull PCI changes (including maintainer change) from Jesse Barnes:  "This pull has some good cleanups from Bjorn and Yinghai, as well as   some more code from Yinghai to better handle resource re-allocation   when enabled.    There's also a new initcall_debug feature from Arjan which will print   out quirk timing information to help identify slow quirks for fixing   or refinement (Yinghai sent in a few patches to do just that once the   new debug code landed).    Beyond that, I'm handing off PCI maintainership to Bjorn Helgaas.   He's been a core PCI and Linux contributor for some time now, and has   kindly volunteered to take over.  I just don't feel I have the time   for PCI review and work that it deserves lately (I've taken on some   other projects), and haven't been as responsive lately as I'd like, so   I approached Bjorn asking if he'd like to manage things.  He's going   to give it a try, and I'm confident he'll do at least as well as I   have in keeping the tree managed, patches flowing, and keeping things   stable."  Fix up some fairly trivial conflicts due to other cleanups (mips device resource fixup cleanups clashing with list handling cleanup, ppc iseries removal clashing with pci_probe_only cleanup etc)  * 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci: (112 commits)   PCI: Bjorn gets PCI hotplug too   PCI: hand PCI maintenance over to Bjorn Helgaas   unicore32/PCI: move <asm-generic/pci-bridge.h> include to asm/pci.h   sparc/PCI: convert devtree and arch-probed bus addresses to resource   powerpc/PCI: allow reallocation on PA Semi   powerpc/PCI: convert devtree bus addresses to resource   powerpc/PCI: compute I/O space bus-to-resource offset consistently   arm/PCI: don't export pci_flags   PCI: fix bridge I/O window bus-to-resource conversion   x86/PCI: add spinlock held check to 'pcibios_fwaddrmap_lookup()'   PCI / PCIe: Introduce command line option to disable ARI   PCI: make acpihp use __pci_remove_bus_device instead   PCI: export __pci_remove_bus_device   PCI: Rename pci_remove_behind_bridge to pci_stop_and_remove_behind_bridge   PCI: Rename pci_remove_bus_device to pci_stop_and_remove_bus_device   PCI: print out PCI device info along with duration   PCI: Move "pci reassigndev resource alignment" out of quirks.c   PCI: Use class for quirk for usb host controller fixup   PCI: Use class for quirk for ti816x class fixup   PCI: Use class for quirk for intel e100 interrupt fixup   ...
f | nvram.c | s | 16K | 534 | Kay Sievers | kay@vrfy.org | 1339797239 |  | kmsg - kmsg_dump() use iterator to receive log buffer content  Provide an iterator to receive the log buffer content, and convert all kmsg_dump() users to it.  The structured data in the kmsg buffer now contains binary data, which should no longer be copied verbatim to the kmsg_dump() users.  The iterator should provide reliable access to the buffer data, and also supports proper log line-aware chunking of data while iterating.  Signed-off-by: Kay Sievers <kay@vrfy.org> Tested-by: Tony Luck <tony.luck@intel.com> Reported-by: Anton Vorontsov <anton.vorontsov@linaro.org> Tested-by: Anton Vorontsov <anton.vorontsov@linaro.org> Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
f | suspend.c | s | 5.0K | 187 | Brian King | brking@linux.vnet.ibm.com | 1329192099 |  | powerpc/pseries: Fix partition migration hang in stop_topology_update  This fixes a hang that was observed during live partition migration. Since stop_topology_update must not be called from an interrupt context, call it earlier in the migration process. The hang observed can be seen below:  WARNING: at kernel/timer.c:1011 Modules linked in: ip6t_LOG xt_tcpudp xt_pkttype ipt_LOG xt_limit ip6t_REJECT nf_conntrack_ipv6 nf_defrag_ipv6 ip6table_raw xt_NOTRACK ipt_REJECT xt_state iptable_raw iptable_filter ip6table_mangle nf_conntrack_netbios_ns nf_conntrack_broadcast nf_conntrack_ipv4 nf_conntrack nf_defrag_ipv4 ip_tables ip6table_filter ip6_tables x_tables ipv6 fuse loop ibmveth sg ext3 jbd mbcache raid456 async_raid6_recov async_pq raid6_pq async_xor xor async_memcpy async_tx raid10 raid1 raid0 scsi_dh_alua scsi_dh_rdac scsi_dh_hp_sw scsi_dh_emc dm_round_robin dm_multipath scsi_dh sd_mod crc_t10dif ibmvfc scsi_transport_fc scsi_tgt scsi_mod dm_snapshot dm_mod NIP: c0000000000c52d8 LR: c00000000004be28 CTR: 0000000000000000 REGS: c00000005ffd77d0 TRAP: 0700   Not tainted  (3.2.0-git-00001-g07d106d) MSR: 8000000000021032 <ME,CE,IR,DR>  CR: 48000084  XER: 00000001 CFAR: c00000000004be20 TASK = c00000005ec78860[0] 'swapper/3' THREAD: c00000005ec98000 CPU: 3 GPR00: 0000000000000001 c00000005ffd7a50 c000000000fbbc98 c000000000ec8340 GPR04: 00000000282a0020 0000000000000000 0000000000004000 0000000000000101 GPR08: 0000000000000012 c00000005ffd4000 0000000000000020 c000000000f3ba88 GPR12: 0000000000000000 c000000007f40900 0000000000000001 0000000000000004 GPR16: 0000000000000001 0000000000000000 0000000000000000 c000000001022310 GPR20: 0000000000000001 0000000000000000 0000000000200200 c000000001029e14 GPR24: 0000000000000000 0000000000000001 0000000000000040 c00000003f74bc80 GPR28: c00000003f74bc84 c000000000f38038 c000000000f16b58 c000000000ec8340 NIP [c0000000000c52d8] .del_timer_sync+0x28/0x60 LR [c00000000004be28] .stop_topology_update+0x20/0x38 Call Trace: [c00000005ffd7a50] [c00000005ec78860] 0xc00000005ec78860 (unreliable) [c00000005ffd7ad0] [c00000000004be28] .stop_topology_update+0x20/0x38 [c00000005ffd7b40] [c000000000028378] .__rtas_suspend_last_cpu+0x58/0x260 [c00000005ffd7bf0] [c0000000000fa230] .generic_smp_call_function_interrupt+0x160/0x358 [c00000005ffd7cf0] [c000000000036ec8] .smp_ipi_demux+0x88/0x100 [c00000005ffd7d80] [c00000000005c154] .icp_hv_ipi_action+0x5c/0x80 [c00000005ffd7e00] [c00000000012a088] .handle_irq_event_percpu+0x100/0x318 [c00000005ffd7f00] [c00000000012e774] .handle_percpu_irq+0x84/0xd0 [c00000005ffd7f90] [c000000000022ba8] .call_handle_irq+0x1c/0x2c [c00000005ec9ba20] [c00000000001157c] .do_IRQ+0x22c/0x2a8 [c00000005ec9bae0] [c0000000000054bc] hardware_interrupt_entry+0x18/0x1c Exception: 501 at .cpu_idle+0x194/0x2f8     LR = .cpu_idle+0x194/0x2f8 [c00000005ec9bdd0] [c000000000017e58] .cpu_idle+0x188/0x2f8 (unreliable) [c00000005ec9be90] [c00000000067ec18] .start_secondary+0x3e4/0x524 [c00000005ec9bf90] [c0000000000093e8] .start_secondary_prolog+0x10/0x14 Instruction dump: ebe1fff8 4e800020 fbe1fff8 7c0802a6 f8010010 7c7f1b78 f821ff81 78290464 80090014 5400019e 7c0000d0 78000fe0 <0b000000> 4800000c 7c210b78 7c421378  Signed-off-by: Brian King <brking@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | eeh.c | s | 34K | 1049 | Anton Blanchard | anton@samba.org | 1335764247 |  | powerpc: Use WARN instead of dump_stack when printing EEH error backtrace  When we get an EEH error we just print a backtrace with dump_stack which is rather cryptic. We really should print something before spewing out the backtrace.  Also switch from dump_stack to WARN so we get more information about the fail - what modules were loaded, what process was running etc. This was useful information when debugging a recent EEH subsystem bug.  The standard WARN output should also get picked up by monitoring tools like kerneloops.  The register dump is of questionable value here but I figured it was better to use something standard and not roll my own.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | plpar_wrappers.h | s | 6.4K | 210 | Anton Blanchard | anton@samba.org | 1335764235 |  | powerpc: Clean up lppaca->cede_latency_hint  We have a union containing fields from the old iseries hypervisor that has been reused for the cede latency hint. Since we no longer support iseries, remove the union completely.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | lpar.c | s | 16K | 527 | Stephen Rothwell | sfr@canb.auug.org.au | 1332288971 |  | powerpc: Remove FW_FEATURE ISERIES from arch code  This is no longer selectable, so just remove all the dependent code.  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | io_event_irq.c | s | 5.1K | 146 | Anton Blanchard | anton@samba.org | 1332894718 |  | powerpc: Make function that parses RTAS error logs global  The IO event interrupt code has a function that finds specific sections in an RTAS error log. We want to use it in the EPOW code so make it global.  Rename things to make it less cryptic:  find_xelog_section() -> get_pseries_errorlog() struct pseries_elog_section -> struct pseries_errorlog  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | eeh_dev.c | s | 3.2K | 91 | Gavin Shan | shangw@linux.vnet.ibm.com | 1332894717 |  | powerpc/eeh: Remove eeh device from OF node  Originally, the PCI sensitive OF node is tracing the eeh device through struct device_node->edev. However, it was regarded as bad idea.  The patch removes struct device_node->edev and uses PCI_DN to trace the corresponding eeh device according to BenH's comments.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | pseries.h | s | 1.8K | 47 | Deepthi Dharwar | deepthi@linux.vnet.ibm.com | 1323312991 |  | powerpc/cpuidle: cpuidle driver for pSeries  This patch implements a back-end cpuidle driver for pSeries based on pseries_dedicated_idle_loop and pseries_shared_idle_loop routines.  The driver is built only if CONFIG_CPU_IDLE is set. This cpuidle driver uses global registration of idle states and not per-cpu.  Signed-off-by: Deepthi Dharwar <deepthi@linux.vnet.ibm.com> Signed-off-by: Trinabh Gupta <g.trinabh@gmail.com> Signed-off-by: Arun R Bharadwaj <arun.r.bharadwaj@gmail.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | scanlog.c | s | 5.4K | 183 | Arnd Bergmann | arnd@arndb.de | 1287150807 |  | llseek: automatically add .llseek fop  All file_operations should get a .llseek operation so we can make nonseekable_open the default for future file operations without a .llseek pointer.  The three cases that we can automatically detect are no_llseek, seq_lseek and default_llseek. For cases where we can we can automatically prove that the file offset is always ignored, we use noop_llseek, which maintains the current behavior of not returning an error from a seek.  New drivers should normally not use noop_llseek but instead use no_llseek and call nonseekable_open at open time.  Existing drivers can be converted to do the same when the maintainer knows for certain that no user code relies on calling seek on the device file.  The generated code is often incorrectly indented and right now contains comments that clarify for each added line why a specific variant was chosen. In the version that gets submitted upstream, the comments will be gone and I will manually fix the indentation, because there does not seem to be a way to do that using coccinelle.  Some amount of new code is currently sitting in linux-next that should get the same modifications, which I will do at the end of the merge window.  Many thanks to Julia Lawall for helping me learn to write a semantic patch that does all this.  ===== begin semantic patch ===== // This adds an llseek= method to all file operations, // as a preparation for making no_llseek the default. // // The rules are // - use no_llseek explicitly if we do nonseekable_open // - use seq_lseek for sequential files // - use default_llseek if we know we access f_pos // - use noop_llseek if we know we don't access f_pos, //   but we still want to allow users to call lseek // @ open1 exists @ identifier nested_open; @@ nested_open(...) { <+... nonseekable_open(...) ...+> }  @ open exists@ identifier open_f; identifier i, f; identifier open1.nested_open; @@ int open_f(struct inode *i, struct file *f) { <+... ( nonseekable_open(...) || nested_open(...) ) ...+> }  @ read disable optional_qualifier exists @ identifier read_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; expression E; identifier func; @@ ssize_t read_f(struct file *f, char *p, size_t s, loff_t *off) { <+... (    *off = E ||    *off += E ||    func(..., off, ...) ||    E = *off ) ...+> }  @ read_no_fpos disable optional_qualifier exists @ identifier read_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; @@ ssize_t read_f(struct file *f, char *p, size_t s, loff_t *off) { ... when != off }  @ write @ identifier write_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; expression E; identifier func; @@ ssize_t write_f(struct file *f, const char *p, size_t s, loff_t *off) { <+... (   *off = E ||   *off += E ||   func(..., off, ...) ||   E = *off ) ...+> }  @ write_no_fpos @ identifier write_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; @@ ssize_t write_f(struct file *f, const char *p, size_t s, loff_t *off) { ... when != off }  @ fops0 @ identifier fops; @@ struct file_operations fops = {  ... };  @ has_llseek depends on fops0 @ identifier fops0.fops; identifier llseek_f; @@ struct file_operations fops = { ...  .llseek = llseek_f, ... };  @ has_read depends on fops0 @ identifier fops0.fops; identifier read_f; @@ struct file_operations fops = { ...  .read = read_f, ... };  @ has_write depends on fops0 @ identifier fops0.fops; identifier write_f; @@ struct file_operations fops = { ...  .write = write_f, ... };  @ has_open depends on fops0 @ identifier fops0.fops; identifier open_f; @@ struct file_operations fops = { ...  .open = open_f, ... };  // use no_llseek if we call nonseekable_open //////////////////////////////////////////// @ nonseekable1 depends on !has_llseek && has_open @ identifier fops0.fops; identifier nso ~= "nonseekable_open"; @@ struct file_operations fops = { ...  .open = nso, ... +.llseek = no_llseek, /* nonseekable */ };  @ nonseekable2 depends on !has_llseek @ identifier fops0.fops; identifier open.open_f; @@ struct file_operations fops = { ...  .open = open_f, ... +.llseek = no_llseek, /* open uses nonseekable */ };  // use seq_lseek for sequential files ///////////////////////////////////// @ seq depends on !has_llseek @ identifier fops0.fops; identifier sr ~= "seq_read"; @@ struct file_operations fops = { ...  .read = sr, ... +.llseek = seq_lseek, /* we have seq_read */ };  // use default_llseek if there is a readdir /////////////////////////////////////////// @ fops1 depends on !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier readdir_e; @@ // any other fop is used that changes pos struct file_operations fops = { ... .readdir = readdir_e, ... +.llseek = default_llseek, /* readdir is present */ };  // use default_llseek if at least one of read/write touches f_pos ///////////////////////////////////////////////////////////////// @ fops2 depends on !fops1 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read.read_f; @@ // read fops use offset struct file_operations fops = { ... .read = read_f, ... +.llseek = default_llseek, /* read accesses f_pos */ };  @ fops3 depends on !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier write.write_f; @@ // write fops use offset struct file_operations fops = { ... .write = write_f, ... +	.llseek = default_llseek, /* write accesses f_pos */ };  // Use noop_llseek if neither read nor write accesses f_pos ///////////////////////////////////////////////////////////  @ fops4 depends on !fops1 && !fops2 && !fops3 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read_no_fpos.read_f; identifier write_no_fpos.write_f; @@ // write fops use offset struct file_operations fops = { ...  .write = write_f,  .read = read_f, ... +.llseek = noop_llseek, /* read and write both use no f_pos */ };  @ depends on has_write && !has_read && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier write_no_fpos.write_f; @@ struct file_operations fops = { ... .write = write_f, ... +.llseek = noop_llseek, /* write uses no f_pos */ };  @ depends on has_read && !has_write && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read_no_fpos.read_f; @@ struct file_operations fops = { ... .read = read_f, ... +.llseek = noop_llseek, /* read uses no f_pos */ };  @ depends on !has_read && !has_write && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; @@ struct file_operations fops = { ... +.llseek = noop_llseek, /* no read or write fn */ }; ===== End semantic patch =====  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Cc: Julia Lawall <julia@diku.dk> Cc: Christoph Hellwig <hch@infradead.org>
f | power.c | s | 2.1K | 71 | Stephen Rothwell | sfr@canb.auug.org.au | 1203474817 |  | [POWERPC] Fix warning in pseries/power.c  Introduced by commit 79393fc46ede43451a500a132e5de9856f5a4c83 ("kobject: convert pseries/power.c to kobj_attr interface").  sys_create_file takes a "struct attrbute *" not a "struct kobj_addribute *".  arch/powerpc/platforms/pseries/power.c: In function 'apo_pm_init': arch/powerpc/platforms/pseries/power.c:78: warning: passing argument 2 of 'sysfs_create_file' from incompatible pointer type  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | kexec.c | s | 1.9K | 65 | Anton Blanchard | anton@samba.org | 1312519678 |  | powerpc/pseries: Simplify vpa deregistration functions  The VPA, SLB shadow and DTL degistration functions do not need an address, so simplify things and remove it.  Also cleanup pseries_kexec_cpu_down a bit by storing the cpu IDs in local variables.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | eeh_cache.c | s | 8.8K | 277 | Gavin Shan | shangw@linux.vnet.ibm.com | 1331253582 |  | powerpc/eeh: Replace pci_dn with eeh_dev for EEH address cache  With original EEH implementation, struct pci_dn is used while building PCI I/O address cache, which helps on searching the corresponding PCI device according to the given physical I/O address. Besides, pci_dn is associated with the corresponding PCI device while building its I/O cache.  The patch replaces struct pci_dn with struct eeh_dev so that EEH address cache won't depend on struct pci_dn. That will help EEH to become an independent module in future. Besides, the binding of eeh_dev and PCI device is done while building PCI device I/O cache.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | setup.c | s | 16K | 560 | Linus Torvalds | torvalds@linux-foundation.org | 1332536532 |  | Merge branch 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci  Pull PCI changes (including maintainer change) from Jesse Barnes:  "This pull has some good cleanups from Bjorn and Yinghai, as well as   some more code from Yinghai to better handle resource re-allocation   when enabled.    There's also a new initcall_debug feature from Arjan which will print   out quirk timing information to help identify slow quirks for fixing   or refinement (Yinghai sent in a few patches to do just that once the   new debug code landed).    Beyond that, I'm handing off PCI maintainership to Bjorn Helgaas.   He's been a core PCI and Linux contributor for some time now, and has   kindly volunteered to take over.  I just don't feel I have the time   for PCI review and work that it deserves lately (I've taken on some   other projects), and haven't been as responsive lately as I'd like, so   I approached Bjorn asking if he'd like to manage things.  He's going   to give it a try, and I'm confident he'll do at least as well as I   have in keeping the tree managed, patches flowing, and keeping things   stable."  Fix up some fairly trivial conflicts due to other cleanups (mips device resource fixup cleanups clashing with list handling cleanup, ppc iseries removal clashing with pci_probe_only cleanup etc)  * 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci: (112 commits)   PCI: Bjorn gets PCI hotplug too   PCI: hand PCI maintenance over to Bjorn Helgaas   unicore32/PCI: move <asm-generic/pci-bridge.h> include to asm/pci.h   sparc/PCI: convert devtree and arch-probed bus addresses to resource   powerpc/PCI: allow reallocation on PA Semi   powerpc/PCI: convert devtree bus addresses to resource   powerpc/PCI: compute I/O space bus-to-resource offset consistently   arm/PCI: don't export pci_flags   PCI: fix bridge I/O window bus-to-resource conversion   x86/PCI: add spinlock held check to 'pcibios_fwaddrmap_lookup()'   PCI / PCIe: Introduce command line option to disable ARI   PCI: make acpihp use __pci_remove_bus_device instead   PCI: export __pci_remove_bus_device   PCI: Rename pci_remove_behind_bridge to pci_stop_and_remove_behind_bridge   PCI: Rename pci_remove_bus_device to pci_stop_and_remove_bus_device   PCI: print out PCI device info along with duration   PCI: Move "pci reassigndev resource alignment" out of quirks.c   PCI: Use class for quirk for usb host controller fixup   PCI: Use class for quirk for ti816x class fixup   PCI: Use class for quirk for intel e100 interrupt fixup   ...
f | dlpar.c | s | 11K | 459 | Anton Blanchard | anton@samba.org | 1316474400 |  | powerpc/pseries: Avoid spurious error during hotplug CPU add  During hotplug CPU add we get the following error:  Unexpected Error (0) returned from configure-connector  ibm,configure-connector returns 0 for configuration complete, so catch this and avoid the error.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: <stable@kernel.org>
f | Kconfig | g | 3.9K |  | Linus Torvalds | torvalds@linux-foundation.org | 1337739770 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial  Pull trivial updates from Jiri Kosina:  "As usual, it's mostly typo fixes, redundant code elimination and some   documentation updates."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial: (57 commits)   edac, mips: don't change code that has been removed in edac/mips tree   xtensa: Change mail addresses of Hannes Weiner and Oskar Schirmer   lib: Change mail address of Oskar Schirmer   net: Change mail address of Oskar Schirmer   arm/m68k: Change mail address of Sebastian Hess   i2c: Change mail address of Oskar Schirmer   net: Fix tcp_build_and_update_options comment in struct tcp_sock   atomic64_32.h: fix parameter naming mismatch   Kconfig: replace "--- help ---" with "---help---"   c2port: fix bogus Kconfig "default no"   edac: Fix spelling errors.   qla1280: Remove redundant NULL check before release_firmware() call   remoteproc: remove redundant NULL check before release_firmware()   qla2xxx: Remove redundant NULL check before release_firmware() call.   aic94xx: Get rid of redundant NULL check before release_firmware() call   tehuti: delete redundant NULL check before release_firmware()   qlogic: get rid of a redundant test for NULL before call to release_firmware()   bna: remove redundant NULL test before release_firmware()   tg3: remove redundant NULL test before release_firmware() call   typhoon: get rid of redundant conditional before all to release_firmware()   ...
f | eeh_sysfs.c | s | 3.4K | 77 | Gavin Shan | shangw@linux.vnet.ibm.com | 1331253580 |  | powerpc/eeh: Replace pci_dn with eeh_dev for EEH sysfs  With original EEH implementation, all EEH related statistics have been put into struct pci_dn. We've introduced struct eeh_dev to replace struct pci_dn in EEH core components, including EEH sysfs component.  The patch shows EEH statistics from struct eeh_dev instead of struct pci_dn in EEH sysfs component. Besides, it also fixed the EEH device retrieval from PCI device, which was introduced by the previous patch in the series of patch.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | smp.c | s | 6.2K | 217 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | dtl.c | s | 8.5K | 311 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | ras.c | s | 11K | 339 | Anton Blanchard | anton@samba.org | 1332894721 |  | powerpc/pseries: Cut down on enthusiastic use of defines in RAS code  So many defines for such a little file. Most of them can go.  Also remove the single entry changelog, we have git for that.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | eeh_pseries.c | s | 15K | 505 | Gavin Shan | shangw@linux.vnet.ibm.com | 1331253591 |  | powerpc/eeh: pseries platform config space access in EEH  With the original EEH implementation, the access to config space of the corresponding PCI device is done by RTAS sensitive function. That depends on pci_dn heavily. That would limit EEH extension to other platforms like powernv because other platforms might have different ways to access PCI config space.  The patch splits those functions used to access PCI config space and implement them in platform related EEH component. It would be helpful to support EEH on multiple platforms simutaneously in future.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | reconfig.c | s | 12K | 472 | Kent Yoder | key@linux.vnet.ibm.com | 1336956546 |  | powerpc/pseries: Add pseries update notifier for OFDT prop changes  This adds an update notifier mechanism for changes to properties in the device tree.  One use of this would be a device driver that needs to act on changes to it's properties in the device tree after a live migration or a dynamic activation that is triggered by updates to ofdt properties.  Signed-off-by: Robert Jennings <rcj@linux.vnet.ibm.com> Signed-off-by: Kent Yoder <key@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | firmware.c | s | 2.6K | 77 | Jesse Larrew | jlarrew@linux.vnet.ibm.com | 1291006102 |  | powerpc: Add VPHN firmware feature  This simple patch adds the firmware feature for VPHN to the firmware features bitmask.  Signed-off-by: Jesse Larrew <jlarrew@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | msi.c | s | 10K | 384 | Gavin Shan | shangw@linux.vnet.ibm.com | 1331251717 |  | powerpc/eeh: Cleanup function names in the EEH core  The EEH has been implemented on pSeries platform. The original code looks a little bit nasty. The patch does cleanup on the current EEH implementation so that it looks more clean.          * Try adding prefix "eeh" for functions.         * Some function names have been adjusted so that they looks           shorter and meaningful.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | hvconsole.c | s | 2.3K | 70 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103843 |  | powerpc: convert hvconsole.c to export.h ; fix implicit use of errno.h  This file is only exporting symbols and so should use export.h and not module.h header.  But in doing the conversion, we will uncover that it was implicitly using errno.h via module.h:    CC      arch/powerpc/platforms/pseries/hvconsole.o arch/powerpc/platforms/pseries/hvconsole.c: In function 'hvc_put_chars': arch/powerpc/platforms/pseries/hvconsole.c:77: error: 'EIO' undeclared (first use in this function)  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | hotplug-memory.c | s | 5.5K | 199 | Linus Torvalds | torvalds@linux-foundation.org | 1311659979 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc  * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc: (99 commits)   drivers/virt: add missing linux/interrupt.h to fsl_hypervisor.c   powerpc/85xx: fix mpic configuration in CAMP mode   powerpc: Copy back TIF flags on return from softirq stack   powerpc/64: Make server perfmon only built on ppc64 server devices   powerpc/pseries: Fix hvc_vio.c build due to recent changes   powerpc: Exporting boot_cpuid_phys   powerpc: Add CFAR to oops output   hvc_console: Add kdb support   powerpc/pseries: Fix hvterm_raw_get_chars to accept < 16 chars, fixing xmon   powerpc/irq: Quieten irq mapping printks   powerpc: Enable lockup and hung task detectors in pseries and ppc64 defeconfigs   powerpc: Add mpt2sas driver to pseries and ppc64 defconfig   powerpc: Disable IRQs off tracer in ppc64 defconfig   powerpc: Sync pseries and ppc64 defconfigs   powerpc/pseries/hvconsole: Fix dropped console output   hvc_console: Improve tty/console put_chars handling   powerpc/kdump: Fix timeout in crash_kexec_wait_realmode   powerpc/mm: Fix output of total_ram.   powerpc/cpufreq: Add cpufreq driver for Momentum Maple boards   powerpc: Correct annotations of pmu registration functions   ...  Fix up trivial Kconfig/Makefile conflicts in arch/powerpc, drivers, and drivers/cpufreq
f | hvCall.S | g | 5.4K |  | Li Zhong | zhong@linux.vnet.ibm.com | 1326246626 |  | powerpc: Fix unpaired __trace_hcall_entry and __trace_hcall_exit   Unpaired calling of __trace_hcall_entry and __trace_hcall_exit could  cause incorrect preempt count. And it might happen as the global  variable hcall_tracepoint_refcount is checked separately before calling  them.   Instead, store the value that was used on entry in the stack frame  and retreive it from there after the call  Reported-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Signed-off-by: Li Zhong <zhong@linux.vnet.ibm.com> Tested-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | hvCall_inst.c | s | 3.9K | 135 | Li Zhong | zhong@linux.vnet.ibm.com | 1325552967 |  | powerpc: Fix unpaired probe_hcall_entry and probe_hcall_exit  Unpaired calling of probe_hcall_entry and probe_hcall_exit might happen as following, which could cause incorrect preempt count.  __trace_hcall_entry => trace_hcall_entry -> probe_hcall_entry => get_cpu_var => preempt_disable  __trace_hcall_exit => trace_hcall_exit -> probe_hcall_exit => put_cpu_var => preempt_enable  where: A => B and A -> B means A calls B, but => means A will call B through function name, and B will definitely be called. -> means A will call B through function pointer, so B might not be called if the function pointer is not set.  So error happens when only one of probe_hcall_entry and probe_hcall_exit get called during a hcall.  This patch tries to move the preempt count operations from probe_hcall_entry and probe_hcall_exit to its callers.  Reported-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Signed-off-by: Li Zhong <zhong@linux.vnet.ibm.com> Tested-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> CC: stable@kernel.org [v2.6.32+] Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
