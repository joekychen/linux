f | Makefile | g | 2.4K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1336313951 |  | kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM  There is nothing in the code for emulating TCE tables in the kernel that prevents it from working on "PR" KVM... other than ifdef's and location of the code.  This and moves the bulk of the code there to a new file called book3s_64_vio.c.  This speeds things up a bit on my G5.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: fix for hv kvm, 32bit, whitespace] Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_64_mmu_hv.c | s | 26K | 895 | Linus Torvalds | torvalds@linux-foundation.org | 1337901450 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM changes from Avi Kivity:  "Changes include additional instruction emulation, page-crossing MMIO,   faster dirty logging, preventing the watchdog from killing a stopped   guest, module autoload, a new MSI ABI, and some minor optimizations   and fixes.  Outside x86 we have a small s390 and a very large ppc   update.    Regarding the new (for kvm) rebaseless workflow, some of the patches   that were merged before we switch trees had to be rebased, while   others are true pulls.  In either case the signoffs should be correct   now."  Fix up trivial conflicts in Documentation/feature-removal-schedule.txt arch/powerpc/kvm/book3s_segment.S and arch/x86/include/asm/kvm_para.h.  I suspect the kvm_para.h resolution ends up doing the "do I have cpuid" check effectively twice (it was done differently in two different commits), but better safe than sorry ;)  * 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (125 commits)   KVM: make asm-generic/kvm_para.h have an ifdef __KERNEL__ block   KVM: s390: onereg for timer related registers   KVM: s390: epoch difference and TOD programmable field   KVM: s390: KVM_GET/SET_ONEREG for s390   KVM: s390: add capability indicating COW support   KVM: Fix mmu_reload() clash with nested vmx event injection   KVM: MMU: Don't use RCU for lockless shadow walking   KVM: VMX: Optimize %ds, %es reload   KVM: VMX: Fix %ds/%es clobber   KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()   KVM: VMX: unlike vmcs on fail path   KVM: PPC: Emulator: clean up SPR reads and writes   KVM: PPC: Emulator: clean up instruction parsing   kvm/powerpc: Add new ioctl to retreive server MMU infos   kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM   KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler   KVM: PPC: Book3S: Enable IRQs during exit handling   KVM: PPC: Fix PR KVM on POWER7 bare metal   KVM: PPC: Fix stbux emulation   KVM: PPC: bookehv: Use lwz/stw instead of PPC_LL/PPC_STL for 32-bit fields   ...
f | booke_emulate.c | s | 7.0K | 274 | Alexander Graf | agraf@suse.de | 1336313953 |  | KVM: PPC: Emulator: clean up SPR reads and writes  When reading and writing SPRs, every SPR emulation piece had to read or write the respective GPR the value was read from or stored in itself.  This approach is pretty prone to failure. What if we accidentally implement mfspr emulation where we just do "break" and nothing else? Suddenly we would get a random value in the return register - which is always a bad idea.  So let's consolidate the generic code paths and only give the core specific SPR handling code readily made variables to read/write from/to.  Functionally, this patch doesn't change anything, but it increases the readability of the code and makes is less prone to bugs.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | timing.c | s | 7.2K | 208 | Stuart Yoder | stuart.yoder@freescale.com | 1310465788 |  | KVM: PPC: fix partial application of "exit timing in ticks"  When http://www.spinics.net/lists/kvm-ppc/msg02664.html was applied to produce commit b51e7aa7ed6d8d134d02df78300ab0f91cfff4d2, the removal of the conversion in add_exit_timing was left out.  Signed-off-by: Stuart Yoder <stuart.yoder@freescale.com> Signed-off-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_hv_interrupts.S | g | 4.5K |  | Paul Mackerras | paulus@samba.org | 1333882896 |  | KVM: PPC: Work around POWER7 DABR corruption problem  It turns out that on POWER7, writing to the DABR can cause a corrupted value to be written if the PMU is active and updating SDAR in continuous sampling mode.  To work around this, we make sure that the PMU is inactive and SDAR updates are disabled (via MMCRA) when we are context-switching DABR.  When the guest sets DABR via the H_SET_DABR hypercall, we use a slightly different workaround, which is to read back the DABR and write it again if it got corrupted.  While we are at it, make it consistent that the saving and restoring of the guest's non-volatile GPRs and the FPRs are done with the guest setup of the PMU active.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | e500_emulate.c | s | 6.8K | 290 | Alexander Graf | agraf@suse.de | 1336313953 |  | KVM: PPC: Emulator: clean up SPR reads and writes  When reading and writing SPRs, every SPR emulation piece had to read or write the respective GPR the value was read from or stored in itself.  This approach is pretty prone to failure. What if we accidentally implement mfspr emulation where we just do "break" and nothing else? Suddenly we would get a random value in the return register - which is always a bad idea.  So let's consolidate the generic code paths and only give the core specific SPR handling code readily made variables to read/write from/to.  Functionally, this patch doesn't change anything, but it increases the readability of the code and makes is less prone to bugs.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | trace.h | s | 9.7K | 325 | Liu Yu | yu.liu@freescale.com | 1330951960 |  | KVM: PPC: booke: Add booke206 TLB trace  The existing kvm_stlb_write/kvm_gtlb_write were a poor match for the e500/book3e MMU -- mas1 was passed as "tid", mas2 was limited to "unsigned int" which will be a problem on 64-bit, mas3/7 got split up rather than treated as a single 64-bit word, etc.  Signed-off-by: Liu Yu <yu.liu@freescale.com> [scottwood@freescale.com: made mas2 64-bit, and added mas8 init] Signed-off-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | book3s_interrupts.S | g | 5.0K |  | Alexander Graf | agraf@suse.de | 1333435354 |  | KVM: PPC: Save/Restore CR over vcpu_run  On PPC, CR2-CR4 are nonvolatile, thus have to be saved across function calls. We didn't respect that for any architecture until Paul spotted it in his patch for Book3S-HV. This patch saves/restores CR for all KVM capable PPC hosts.  Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | book3s_segment.S | g | 8.9K |  | Linus Torvalds | torvalds@linux-foundation.org | 1337901450 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM changes from Avi Kivity:  "Changes include additional instruction emulation, page-crossing MMIO,   faster dirty logging, preventing the watchdog from killing a stopped   guest, module autoload, a new MSI ABI, and some minor optimizations   and fixes.  Outside x86 we have a small s390 and a very large ppc   update.    Regarding the new (for kvm) rebaseless workflow, some of the patches   that were merged before we switch trees had to be rebased, while   others are true pulls.  In either case the signoffs should be correct   now."  Fix up trivial conflicts in Documentation/feature-removal-schedule.txt arch/powerpc/kvm/book3s_segment.S and arch/x86/include/asm/kvm_para.h.  I suspect the kvm_para.h resolution ends up doing the "do I have cpuid" check effectively twice (it was done differently in two different commits), but better safe than sorry ;)  * 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (125 commits)   KVM: make asm-generic/kvm_para.h have an ifdef __KERNEL__ block   KVM: s390: onereg for timer related registers   KVM: s390: epoch difference and TOD programmable field   KVM: s390: KVM_GET/SET_ONEREG for s390   KVM: s390: add capability indicating COW support   KVM: Fix mmu_reload() clash with nested vmx event injection   KVM: MMU: Don't use RCU for lockless shadow walking   KVM: VMX: Optimize %ds, %es reload   KVM: VMX: Fix %ds/%es clobber   KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()   KVM: VMX: unlike vmcs on fail path   KVM: PPC: Emulator: clean up SPR reads and writes   KVM: PPC: Emulator: clean up instruction parsing   kvm/powerpc: Add new ioctl to retreive server MMU infos   kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM   KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler   KVM: PPC: Book3S: Enable IRQs during exit handling   KVM: PPC: Fix PR KVM on POWER7 bare metal   KVM: PPC: Fix stbux emulation   KVM: PPC: bookehv: Use lwz/stw instead of PPC_LL/PPC_STL for 32-bit fields   ...
f | e500_tlb.c | s | 35K | 1112 | Bharat Bhushan | r65777@freescale.com | 1336313947 |  | KVM: Use minimum and maximum address mapped by TLB1  Keep track of minimum and maximum address mapped by tlb1. This helps in TLBMISS handling in KVM to quick check whether the address lies in mapped range. If address does not lies in this range then no need to look in each tlb1 entry of tlb1 array.  Signed-off-by: Bharat Bhushan <bharat.bhushan@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_pr_papr.c | s | 7.0K | 210 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1336313951 |  | kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM  There is nothing in the code for emulating TCE tables in the kernel that prevents it from working on "PR" KVM... other than ifdef's and location of the code.  This and moves the bulk of the code there to a new file called book3s_64_vio.c.  This speeds things up a bit on my G5.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: fix for hv kvm, 32bit, whitespace] Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_32_sr.S | g | 3.7K |  | Paul Mackerras | paulus@samba.org | 1316969549 |  | KVM: PPC: book3s_pr: Simplify transitions between virtual and real mode  This simplifies the way that the book3s_pr makes the transition to real mode when entering the guest.  We now call kvmppc_entry_trampoline (renamed from kvmppc_rmcall) in the base kernel using a normal function call instead of doing an indirect call through a pointer in the vcpu. If kvm is a module, the module loader takes care of generating a trampoline as it does for other calls to functions outside the module.  kvmppc_entry_trampoline then disables interrupts and jumps to kvmppc_handler_trampoline_enter in real mode using an rfi[d]. That then uses the link register as the address to return to (potentially in module space) when the guest exits.  This also simplifies the way that we call the Linux interrupt handler when we exit the guest due to an external, decrementer or performance monitor interrupt.  Instead of turning on the MMU, then deciding that we need to call the Linux handler and turning the MMU back off again, we now go straight to the handler at the point where we would turn the MMU on.  The handler will then return to the virtual-mode code (potentially in the module).  Along the way, this moves the setting and clearing of the HID5 DCBZ32 bit into real-mode interrupts-off code, and also makes sure that we clear the MSR[RI] bit before loading values into SRR0/1.  The net result is that we no longer need any code addresses to be stored in vcpu->arch.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de>
f | bookehv_interrupts.S | g | 17K |  | Mihai Caraman | mihai.caraman@freescale.com | 1336313951 |  | KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler  Guest r8 register is held in the scratch register and stored correctly, so remove the instruction that clobbers it. Guest r13 was missing from vcpu, store it there.  Signed-off-by: Mihai Caraman <mihai.caraman@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de>
f | booke_interrupts.S | g | 12K |  | Varun Sethi | Varun.Sethi@freescale.com | 1336313949 |  | KVM: PPC: booke(hv): Fix save/restore of guest accessible SPRGs.  For Guest accessible SPRGs 4-7, save/restore must be handled differently for 64bit and non-64 bit case. Use the PPC_STD/PPC_LD macros for saving/restoring to/from these registers.  Signed-off-by: Varun Sethi <Varun.Sethi@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_32_mmu.c | s | 9.7K | 347 | Alexander Graf | agraf@suse.de | 1287910331 |  | KVM: PPC: Put segment registers in shared page  Now that the actual mtsr doesn't do anything anymore, we can move the sr contents over to the shared page, so a guest can directly read and write its sr contents from guest context.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | timing.h | s | 3.2K | 103 | Scott Wood | scottwood@freescale.com | 1333878679 |  | KVM: PPC: booke: category E.HV (GS-mode) support  Chips such as e500mc that implement category E.HV in Power ISA 2.06 provide hardware virtualization features, including a new MSR mode for guest state.  The guest OS can perform many operations without trapping into the hypervisor, including transitions to and from guest userspace.  Since we can use SRR1[GS] to reliably tell whether an exception came from guest state, instead of messing around with IVPR, we use DO_KVM similarly to book3s.  Current issues include:  - Machine checks from guest state are not routed to the host handler.  - The guest can cause a host oops by executing an emulated instruction    in a page that lacks read permission.  Existing e500/4xx support has    the same problem.  Includes work by Ashish Kalra <Ashish.Kalra@freescale.com>, Varun Sethi <Varun.Sethi@freescale.com>, and Liu Yu <yu.liu@freescale.com>.  Signed-off-by: Scott Wood <scottwood@freescale.com> [agraf: remove pt_regs usage] Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | emulate.c | s | 11K | 422 | Alexander Graf | agraf@suse.de | 1336313953 |  | KVM: PPC: Emulator: clean up SPR reads and writes  When reading and writing SPRs, every SPR emulation piece had to read or write the respective GPR the value was read from or stored in itself.  This approach is pretty prone to failure. What if we accidentally implement mfspr emulation where we just do "break" and nothing else? Suddenly we would get a random value in the return register - which is always a bad idea.  So let's consolidate the generic code paths and only give the core specific SPR handling code readily made variables to read/write from/to.  Functionally, this patch doesn't change anything, but it increases the readability of the code and makes is less prone to bugs.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | e500.c | s | 13K | 435 | Scott Wood | scottwood@freescale.com | 1333878672 |  | KVM: PPC: e500: refactor core-specific TLB code  The PID handling is e500v1/v2-specific, and is moved to e500.c.  The MMU sregs code and kvmppc_core_vcpu_translate will be shared with e500mc, and is moved from e500.c to e500_tlb.c.  Partially based on patches from Liu Yu <yu.liu@freescale.com>.  Signed-off-by: Scott Wood <scottwood@freescale.com> [agraf: fix bisectability] Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | booke.h | s | 4.2K | 114 | Alexander Graf | agraf@suse.de | 1336313953 |  | KVM: PPC: Emulator: clean up SPR reads and writes  When reading and writing SPRs, every SPR emulation piece had to read or write the respective GPR the value was read from or stored in itself.  This approach is pretty prone to failure. What if we accidentally implement mfspr emulation where we just do "break" and nothing else? Suddenly we would get a random value in the return register - which is always a bad idea.  So let's consolidate the generic code paths and only give the core specific SPR handling code readily made variables to read/write from/to.  Functionally, this patch doesn't change anything, but it increases the readability of the code and makes is less prone to bugs.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_64_mmu_host.c | s | 8.4K | 268 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1337173331 |  | powerpc/kvm: Fix VSID usage in 64-bit "PR" KVM  The code forgot to scramble the VSIDs the way we normally do and was basically using the "proto VSID" directly with the MMU.  This means that in practice, KVM used random VSIDs that could collide with segments used by other user space programs.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: simplify ppc32 case] Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_hv.c | s | 38K | 1361 | Paul Mackerras | paulus@samba.org | 1340107453 |  | KVM: PPC: Book3S HV: Drop locks around call to kvmppc_pin_guest_page  At the moment we call kvmppc_pin_guest_page() in kvmppc_update_vpa() with two spinlocks held: the vcore lock and the vcpu->vpa_update_lock. This is not good, since kvmppc_pin_guest_page() calls down_read() and get_user_pages_fast(), both of which can sleep.  This bug was introduced in 2e25aa5f ("KVM: PPC: Book3S HV: Make virtual processor area registration more robust").  This arranges to drop those spinlocks before calling kvmppc_pin_guest_page() and re-take them afterwards.  Dropping the vcore lock in kvmppc_run_core() means we have to set the vcore_state field to VCORE_RUNNING before we drop the lock, so that other vcpus won't try to run this vcore.  Signed-off-by: Paul Mackerras <paulus@samba.org> Acked-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | book3s_hv_builtin.c | s | 5.5K | 190 | Paul Mackerras | paulus@samba.org | 1333435342 |  | KVM: PPC: Book3S HV: Fix kvm_alloc_linear in case where no linears exist  In kvm_alloc_linear we were using and deferencing ri after the list_for_each_entry had come to the end of the list.  In that situation, ri is not really defined and probably points to the list head.  This will happen every time if the free_linears list is empty, for instance.  This led to a NULL pointer dereference crash in memset on POWER7 while trying to allocate an HPT in the case where no HPTs were preallocated.  This fixes it by using a separate variable for the return value from the loop iterator.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | book3s_rmhandlers.S | g | 6.2K |  | Paul Mackerras | paulus@samba.org | 1316969549 |  | KVM: PPC: book3s_pr: Simplify transitions between virtual and real mode  This simplifies the way that the book3s_pr makes the transition to real mode when entering the guest.  We now call kvmppc_entry_trampoline (renamed from kvmppc_rmcall) in the base kernel using a normal function call instead of doing an indirect call through a pointer in the vcpu. If kvm is a module, the module loader takes care of generating a trampoline as it does for other calls to functions outside the module.  kvmppc_entry_trampoline then disables interrupts and jumps to kvmppc_handler_trampoline_enter in real mode using an rfi[d]. That then uses the link register as the address to return to (potentially in module space) when the guest exits.  This also simplifies the way that we call the Linux interrupt handler when we exit the guest due to an external, decrementer or performance monitor interrupt.  Instead of turning on the MMU, then deciding that we need to call the Linux handler and turning the MMU back off again, we now go straight to the handler at the point where we would turn the MMU on.  The handler will then return to the virtual-mode code (potentially in the module).  Along the way, this moves the setting and clearing of the HID5 DCBZ32 bit into real-mode interrupts-off code, and also makes sure that we clear the MSR[RI] bit before loading values into SRR0/1.  The net result is that we no longer need any code addresses to be stored in vcpu->arch.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de>
f | 44x_tlb.h | s | 2.4K | 71 | Hollis Blanchard | hollisb@us.ibm.com | 1237885376 |  | KVM: ppc: rename 44x MMU functions used in booke.c  e500 will provide its own implementation of these.  Signed-off-by: Hollis Blanchard <hollisb@us.ibm.com> Signed-off-by: Avi Kivity <avi@redhat.com>
f | book3s_emulate.c | s | 13K | 542 | Alexander Graf | agraf@suse.de | 1336313953 |  | KVM: PPC: Emulator: clean up SPR reads and writes  When reading and writing SPRs, every SPR emulation piece had to read or write the respective GPR the value was read from or stored in itself.  This approach is pretty prone to failure. What if we accidentally implement mfspr emulation where we just do "break" and nothing else? Suddenly we would get a random value in the return register - which is always a bad idea.  So let's consolidate the generic code paths and only give the core specific SPR handling code readily made variables to read/write from/to.  Functionally, this patch doesn't change anything, but it increases the readability of the code and makes is less prone to bugs.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s.c | s | 12K | 410 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1333882959 |  | powerpc/kvm: Fix magic page vs. 32-bit RTAS on ppc64  When the kernel calls into RTAS, it switches to 32-bit mode. The magic page was is longer accessible in that case, causing the patched instructions in the RTAS call wrapper to crash.  This fixes it by making available a 32-bit mapping of the magic page in that case. This mapping is flushed whenever we switch the kernel back to 64-bit mode.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: add a check if the magic page is mapped] Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | book3s_exports.c | s | 1.1K | 32 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: various straight conversions from module.h --> export.h  All these files were including module.h just for the basic EXPORT_SYMBOL infrastructure.  We can shift them off to the export.h header which is a way smaller footprint and thus realize some compile time gains.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | book3s_32_mmu_host.c | s | 9.6K | 314 | Alexander Graf | agraf@suse.de | 1330951950 |  | KVM: PPC: Use get/set for to_svcpu to help preemption  When running the 64-bit Book3s PR code without CONFIG_PREEMPT_NONE, we were doing a few things wrong, most notably access to PACA fields without making sure that the pointers stay stable accross the access (preempt_disable()).  This patch moves to_svcpu towards a get/put model which allows us to disable preemption while accessing the shadow vcpu fields in the PACA. That way we can run preemptible and everyone's happy!  Reported-by: Jörg Sommer <joerg@alea.gnuu.de> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | booke.c | s | 34K | 1137 | Alexander Graf | agraf@suse.de | 1333882958 |  | KVM: PPC: Ignore unhalt request from kvm_vcpu_block  When running kvm_vcpu_block and it realizes that the CPU is actually good to run, we get a request bit set for KVM_REQ_UNHALT. Right now, there's nothing we can do with that bit, so let's unset it right after the call again so we don't get confused in our later checks for pending work.  Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | e500.h | s | 8.0K | 245 | Bharat Bhushan | r65777@freescale.com | 1336313947 |  | KVM: Use minimum and maximum address mapped by TLB1  Keep track of minimum and maximum address mapped by tlb1. This helps in TLBMISS handling in KVM to quick check whether the address lies in mapped range. If address does not lies in this range then no need to look in each tlb1 entry of tlb1 array.  Signed-off-by: Bharat Bhushan <bharat.bhushan@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_paired_singles.c | s | 30K | 1135 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1333339204 |  | powerpc/kvm: Fallout from system.h disintegration  Add a missing include to fix build  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | 44x_tlb.c | s | 13K | 426 | Liu Yu | yu.liu@freescale.com | 1310465799 |  | KVM: PPC: e500: Add shadow PID support  Dynamically assign host PIDs to guest PIDs, splitting each guest PID into multiple host (shadow) PIDs based on kernel/user and MSR[IS/DS].  Use both PID0 and PID1 so that the shadow PIDs for the right mode can be selected, that correspond both to guest TID = zero and guest TID = guest PID.  This allows us to significantly reduce the frequency of needing to invalidate the entire TLB.  When the guest mode or PID changes, we just update the host PID0/PID1.  And since the allocation of shadow PIDs is global, multiple guests can share the TLB without conflict.  Note that KVM does not yet support the guest setting PID1 or PID2 to a value other than zero.  This will need to be fixed for nested KVM to work.  Until then, we enforce the requirement for guest PID1/PID2 to stay zero by failing the emulation if the guest tries to set them to something else.  Signed-off-by: Liu Yu <yu.liu@freescale.com> Signed-off-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de>
f | Kconfig | g | 4.0K |  | Alexander Graf | agraf@suse.de | 1333878899 |  | KVM: PPC: make e500v2 kvm and e500mc cpu mutually exclusive  We can't run e500v2 kvm on e500mc kernels, so indicate that by making the 2 options mutually exclusive in kconfig.  Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | 44x_emulate.c | s | 4.1K | 146 | Alexander Graf | agraf@suse.de | 1336313953 |  | KVM: PPC: Emulator: clean up SPR reads and writes  When reading and writing SPRs, every SPR emulation piece had to read or write the respective GPR the value was read from or stored in itself.  This approach is pretty prone to failure. What if we accidentally implement mfspr emulation where we just do "break" and nothing else? Suddenly we would get a random value in the return register - which is always a bad idea.  So let's consolidate the generic code paths and only give the core specific SPR handling code readily made variables to read/write from/to.  Functionally, this patch doesn't change anything, but it increases the readability of the code and makes is less prone to bugs.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_64_slb.S | g | 4.1K |  | Alexander Graf | agraf@suse.de | 1336313949 |  | KVM: PPC: Book3S: PR: No isync in slbie path  While messing around with the SLBs we're running in real mode. The entry to guest space goes through rfid, which is context synchronizing, so there's no need to manually synchronize anything through isync.  With this patch and a simple priviledged SPR access loop guest, I get a speed bump from 2035607 to 2181301 exits per second.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | e500mc.c | s | 8.0K | 268 | Scott Wood | scottwood@freescale.com | 1333878873 |  | KVM: PPC: e500mc support  Add processor support for e500mc, using hardware virtualization support (GS-mode).  Current issues include:  - No support for external proxy (coreint) interrupt mode in the guest.  Includes work by Ashish Kalra <Ashish.Kalra@freescale.com>, Varun Sethi <Varun.Sethi@freescale.com>, and Liu Yu <yu.liu@freescale.com>.  Signed-off-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | powerpc.c | s | 18K | 739 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1336313952 |  | kvm/powerpc: Add new ioctl to retreive server MMU infos  This is necessary for qemu to be able to pass the right information to the guest, such as the supported page sizes and corresponding encodings in the SLB and hash table, which can vary depending on the processor type, the type of KVM used (PR vs HV) and the version of KVM  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: fix compilation on hv, adjust for newer ioctl numbers] Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_hv_rm_mmu.c | s | 22K | 739 | Paul Mackerras | paulus@samba.org | 1337173332 |  | KVM: PPC: Book3S HV: Fix bug leading to deadlock in guest HPT updates  When handling the H_BULK_REMOVE hypercall, we were forgetting to invalidate and unlock the hashed page table entry (HPTE) in the case where the page had been paged out.  This fixes it by clearing the first doubleword of the HPTE in that case.  This fixes a regression introduced in commit a92bce95f0 ("KVM: PPC: Book3S HV: Keep HPTE locked when invalidating").  The effect of the regression is that the host kernel will sometimes hang when under memory pressure.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_64_mmu.c | s | 11K | 431 | Alexander Graf | agraf@suse.de | 1316969541 |  | KVM: PPC: Interpret SDR1 as HVA in PAPR mode  When running a PAPR guest, the guest is not allowed to set SDR1 - instead the HTAB information is held in internal hypervisor structures. But all of our current code relies on SDR1 and walking the HTAB like on real hardware.  So in order to not be too intrusive, we simply set SDR1 to the HTAB we hold in host memory. That way we can keep the HTAB in user space, but use it from kernel space to map the guest.  Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_mmu_hpte.c | s | 8.7K | 276 | Paul Mackerras | paulus@samba.org | 1310465806 |  | KVM: PPC: Move fields between struct kvm_vcpu_arch and kvmppc_vcpu_book3s  This moves the slb field, which represents the state of the emulated SLB, from the kvmppc_vcpu_book3s struct to the kvm_vcpu_arch, and the hpte_hash_[v]pte[_long] fields from kvm_vcpu_arch to kvmppc_vcpu_book3s. This is in accord with the principle that the kvm_vcpu_arch struct represents the state of the emulated CPU, and the kvmppc_vcpu_book3s struct holds the auxiliary data structures used in the emulation.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de>
f | book3s_pr.c | s | 31K | 1066 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1336313952 |  | kvm/powerpc: Add new ioctl to retreive server MMU infos  This is necessary for qemu to be able to pass the right information to the guest, such as the supported page sizes and corresponding encodings in the SLB and hash table, which can vary depending on the processor type, the type of KVM used (PR vs HV) and the version of KVM  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: fix compilation on hv, adjust for newer ioctl numbers] Signed-off-by: Alexander Graf <agraf@suse.de>
f | 44x.c | s | 4.3K | 155 | Scott Wood | scottwood@freescale.com | 1333878665 |  | KVM: PPC: booke: Move vm core init/destroy out of booke.c  e500mc will want to do lpid allocation/deallocation here.  Signed-off-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | book3s_64_vio_hv.c | s | 2.3K | 66 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1336313951 |  | kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM  There is nothing in the code for emulating TCE tables in the kernel that prevents it from working on "PR" KVM... other than ifdef's and location of the code.  This and moves the bulk of the code there to a new file called book3s_64_vio.c.  This speeds things up a bit on my G5.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: fix for hv kvm, 32bit, whitespace] Signed-off-by: Alexander Graf <agraf@suse.de>
f | fpu.S | g | 5.7K |  | Andreas Schwab | schwab@linux-m68k.org | 1283400452 |  | powerpc: Remove fpscr use from [kvm_]cvt_{fd,df}  Neither lfs nor stfs touch the fpscr, so remove the restore/save of it around them.  Signed-off-by: Andreas Schwab <schwab@linux-m68k.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | book3s_hv_rmhandlers.S | g | 39K |  | Michael Neuling | mikey@neuling.org | 1341203412 |  | powerpc/kvm: sldi should be sld  Since we are taking a registers, this should never have been an sldi. Talking to paulus offline, this is the correct fix.  Was introduced by:  commit 19ccb76a1938ab364a412253daec64613acbf3df  Author: Paul Mackerras <paulus@samba.org>  Date:   Sat Jul 23 17:42:46 2011 +1000  Talking to paulus, this shouldn't be a literal.  Signed-off-by: Michael Neuling <mikey@neuling.org> CC: <stable@kernel.org> [v3.2+] Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | book3s_64_vio.c | s | 3.7K | 123 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1336313951 |  | kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM  There is nothing in the code for emulating TCE tables in the kernel that prevents it from working on "PR" KVM... other than ifdef's and location of the code.  This and moves the bulk of the code there to a new file called book3s_64_vio.c.  This speeds things up a bit on my G5.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> [agraf: fix for hv kvm, 32bit, whitespace] Signed-off-by: Alexander Graf <agraf@suse.de>
