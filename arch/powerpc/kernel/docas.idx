f | head_8xx.S | g | 27K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331250908 |  | powerpc: Call do_page_fault() with interrupts off  We currently turn interrupts back to their previous state before calling do_page_fault(). This can be annoying when debugging as a bad fault will potentially have lost some processor state before getting into the debugger.  We also end up calling some generic code with interrupts enabled such as notify_page_fault() with interrupts enabled, which could be unexpected.  This changes our code to behave more like other architectures, and make the assembly entry code call into do_page_faults() with interrupts disabled. They are conditionally re-enabled from within do_page_fault() in the same spot x86 does it.  While there, add the might_sleep() test in the case of a successful trylock of the mmap semaphore, again like x86.  Also fix a bug in the existing assembly where r12 (_MSR) could get clobbered by C calls (the DTL accounting in the exception common macro and DISABLE_INTS) in some cases.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> ---  v2. Add the r12 clobber fix
f | setup-common.c | s | 17K | 630 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | cpu_setup_power7.S | g | 1.9K |  | Paul Mackerras | paulus@samba.org | 1310465818 |  | powerpc, KVM: Split HVMODE_206 cpu feature bit into separate HV and architecture bits  This replaces the single CPU_FTR_HVMODE_206 bit with two bits, one to indicate that we have a usable hypervisor mode, and another to indicate that the processor conforms to PowerISA version 2.06.  We also add another bit to indicate that the processor conforms to ISA version 2.01 and set that for PPC970 and derivatives.  Some PPC970 chips (specifically those in Apple machines) have a hypervisor mode in that MSR[HV] is always 1, but the hypervisor mode is not useful in the sense that there is no way to run any code in supervisor mode (HV=0 PR=0).  On these processors, the LPES0 and LPES1 bits in HID4 are always 0, and we use that as a way of detecting that hypervisor mode is not useful.  Where we have a feature section in assembly code around code that only applies on POWER7 in hypervisor mode, we use a construct like  END_FTR_SECTION_IFSET(CPU_FTR_HVMODE || CPU_FTR_ARCH_206)  The definition of END_FTR_SECTION_IFSET is such that the code will be enabled (not overwritten with nops) only if all bits in the provided mask are set.  Note that the CPU feature check in __tlbie() only needs to check the ARCH_206 bit, not the HVMODE bit, because __tlbie() can only get called if we are running bare-metal, i.e. in hypervisor mode.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de>
f | io-workarounds.c | s | 4.2K | 150 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103837 |  | powerpc: io-workarounds.c was implicitly getting init_mm  It was coming in via device.h --> module.h etc. but we want to clean that up.  So explicitly include the header where init_mm is being declared.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | head_44x.S | g | 32K |  | Linus Torvalds | torvalds@linux-foundation.org | 1337901450 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM changes from Avi Kivity:  "Changes include additional instruction emulation, page-crossing MMIO,   faster dirty logging, preventing the watchdog from killing a stopped   guest, module autoload, a new MSI ABI, and some minor optimizations   and fixes.  Outside x86 we have a small s390 and a very large ppc   update.    Regarding the new (for kvm) rebaseless workflow, some of the patches   that were merged before we switch trees had to be rebased, while   others are true pulls.  In either case the signoffs should be correct   now."  Fix up trivial conflicts in Documentation/feature-removal-schedule.txt arch/powerpc/kvm/book3s_segment.S and arch/x86/include/asm/kvm_para.h.  I suspect the kvm_para.h resolution ends up doing the "do I have cpuid" check effectively twice (it was done differently in two different commits), but better safe than sorry ;)  * 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (125 commits)   KVM: make asm-generic/kvm_para.h have an ifdef __KERNEL__ block   KVM: s390: onereg for timer related registers   KVM: s390: epoch difference and TOD programmable field   KVM: s390: KVM_GET/SET_ONEREG for s390   KVM: s390: add capability indicating COW support   KVM: Fix mmu_reload() clash with nested vmx event injection   KVM: MMU: Don't use RCU for lockless shadow walking   KVM: VMX: Optimize %ds, %es reload   KVM: VMX: Fix %ds/%es clobber   KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()   KVM: VMX: unlike vmcs on fail path   KVM: PPC: Emulator: clean up SPR reads and writes   KVM: PPC: Emulator: clean up instruction parsing   kvm/powerpc: Add new ioctl to retreive server MMU infos   kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM   KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler   KVM: PPC: Book3S: Enable IRQs during exit handling   KVM: PPC: Fix PR KVM on POWER7 bare metal   KVM: PPC: Fix stbux emulation   KVM: PPC: bookehv: Use lwz/stw instead of PPC_LL/PPC_STL for 32-bit fields   ...
f | entry_32.S | g | 33K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1334042495 |  | powerpc: Fix page fault with lockdep regression  commit a546498f3bf9aac311c66f965186373aee2ca0b0 introduced a regression on 32-bit when irq tracing is enabled by exposing an old bug in our irq tracing code for exception entry.  The code would save and restore some GPRs around the calls to the C lockdep code, however, it tries to be too smart for its own good and restores some of the GPRs from the exception frame (as saved there on exception entry).  However, for page faults, we do replace those GPRs with arguments to do_page_fault before we call transfer_to_handler and so restoring from the exception frame is plain wrong in this case.  This was fine as long as we didn't touch the interrupt state when taking page fault, but when I started doing it, it would trigger the lockdep calls and the bug.  This fixes it by cleaning up that code a bit. It did create a small stack frame for the sake of backtraces, so let's make it a bit bigger and use it to save and restore the stuff we care about.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | setup_32.c | s | 8.2K | 287 | Baruch Siach | baruch@tkos.co.il | 1334865343 |  | powerpc: fix build when CONFIG_BOOKE_WDT is enabled  Commit ae3a197e (Disintegrate asm/system.h for PowerPC) broke build of assembly files when CONFIG_BOOKE_WDT is enabled as follows:    AS      arch/powerpc/lib/string.o /home/baruch/git/stable/arch/powerpc/include/asm/reg_booke.h: Assembler messages: /home/baruch/git/stable/arch/powerpc/include/asm/reg_booke.h:19: Error: Unrecognized opcode: `extern' /home/baruch/git/stable/arch/powerpc/include/asm/reg_booke.h:20: Error: Unrecognized opcode: `extern'  Since setup_32.c is the only user of the booke_wdt configuration variables, move the declarations there.  Cc: David Howells <dhowells@redhat.com> Signed-off-by: Baruch Siach <baruch@tkos.co.il> Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
f | of_platform.c | s | 2.9K | 101 | Gavin Shan | shangw@linux.vnet.ibm.com | 1331253569 |  | powerpc/eeh: Introduce EEH device  Original EEH implementation depends on struct pci_dn heavily. However, EEH shouldn't depend on that actually because EEH needn't share much information with other PCI components. That's to say, EEH should have worked independently.  The patch introduces struct eeh_dev so that EEH core components needn't be working based on struct pci_dn in future. Also, struct pci_dn, struct eeh_dev instances are created in dynamic fasion and the binding with EEH device, OF node, PCI device is implemented as well.  The EEH devices are created after PHBs are detected and initialized, but PCI emunation hasn't started yet. Apart from that, PHB might be created dynamically through DLPAR component and the EEH devices should be creatd as well. Another case might be OF node is created dynamically by DR (Dynamic Reconfiguration), which has been defined by PAPR. For those OF nodes created by DR, EEH devices should be also created accordingly. The binding between EEH device and OF node is done while the EEH device is initially created.  The binding between EEH device and PCI device should be done after PCI emunation is done. Besides, PCI hotplug also needs the binding so that the EEH devices could be traced from the newly coming PCI buses or PCI devices.  Signed-off-by: Gavin Shan <shangw@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | ppc_ksyms.c | s | 4.6K | 172 | Paul Mackerras | paulus@samba.org | 1338177607 |  | powerpc: Use the new generic strncpy_from_user() and strnlen_user()  This is much the same as for SPARC except that we can do the find_zero() function more efficiently using the count-leading-zeroes instructions. Tested on 32-bit and 64-bit PowerPC.  Signed-off-by: Paul Mackerras <paulus@samba.org> Acked-by: David S. Miller <davem@davemloft.net> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | head_fsl_booke.S | g | 28K |  | Linus Torvalds | torvalds@linux-foundation.org | 1337901450 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM changes from Avi Kivity:  "Changes include additional instruction emulation, page-crossing MMIO,   faster dirty logging, preventing the watchdog from killing a stopped   guest, module autoload, a new MSI ABI, and some minor optimizations   and fixes.  Outside x86 we have a small s390 and a very large ppc   update.    Regarding the new (for kvm) rebaseless workflow, some of the patches   that were merged before we switch trees had to be rebased, while   others are true pulls.  In either case the signoffs should be correct   now."  Fix up trivial conflicts in Documentation/feature-removal-schedule.txt arch/powerpc/kvm/book3s_segment.S and arch/x86/include/asm/kvm_para.h.  I suspect the kvm_para.h resolution ends up doing the "do I have cpuid" check effectively twice (it was done differently in two different commits), but better safe than sorry ;)  * 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (125 commits)   KVM: make asm-generic/kvm_para.h have an ifdef __KERNEL__ block   KVM: s390: onereg for timer related registers   KVM: s390: epoch difference and TOD programmable field   KVM: s390: KVM_GET/SET_ONEREG for s390   KVM: s390: add capability indicating COW support   KVM: Fix mmu_reload() clash with nested vmx event injection   KVM: MMU: Don't use RCU for lockless shadow walking   KVM: VMX: Optimize %ds, %es reload   KVM: VMX: Fix %ds/%es clobber   KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()   KVM: VMX: unlike vmcs on fail path   KVM: PPC: Emulator: clean up SPR reads and writes   KVM: PPC: Emulator: clean up instruction parsing   kvm/powerpc: Add new ioctl to retreive server MMU infos   kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM   KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler   KVM: PPC: Book3S: Enable IRQs during exit handling   KVM: PPC: Fix PR KVM on POWER7 bare metal   KVM: PPC: Fix stbux emulation   KVM: PPC: bookehv: Use lwz/stw instead of PPC_LL/PPC_STL for 32-bit fields   ...
f | pmc.c | s | 2.3K | 84 | Paul Gortmaker | paul.gortmaker@windriver.com | 1330553708 |  | bug.h: add include of it to various implicit C users  With bug.h currently living right in linux/kernel.h there are files that use BUG_ON and friends but are not including the header explicitly.  Fix them up so we can remove the presence in kernel.h file.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | Makefile | g | 5.2K |  | Thomas Gleixner | tglx@linutronix.de | 1336215625 |  | powerpc: Use generic init_task  Same code. Use the generic version.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Link: http://lkml.kernel.org/r/20120503085035.211123184@linutronix.de
f | head_booke.h | s | 17K | 414 | Scott Wood | scottwood@freescale.com | 1333878679 |  | KVM: PPC: booke: category E.HV (GS-mode) support  Chips such as e500mc that implement category E.HV in Power ISA 2.06 provide hardware virtualization features, including a new MSR mode for guest state.  The guest OS can perform many operations without trapping into the hypervisor, including transitions to and from guest userspace.  Since we can use SRR1[GS] to reliably tell whether an exception came from guest state, instead of messing around with IVPR, we use DO_KVM similarly to book3s.  Current issues include:  - Machine checks from guest state are not routed to the host handler.  - The guest can cause a host oops by executing an emulated instruction    in a page that lacks read permission.  Existing e500/4xx support has    the same problem.  Includes work by Ashish Kalra <Ashish.Kalra@freescale.com>, Varun Sethi <Varun.Sethi@freescale.com>, and Liu Yu <yu.liu@freescale.com>.  Signed-off-by: Scott Wood <scottwood@freescale.com> [agraf: remove pt_regs usage] Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | kvm_emul.S | g | 8.5K |  | Liu Yu-B13201 | Yu.Liu@freescale.com | 1330951954 |  | KVM: PPC: Avoid patching paravirt template code  Currently we patch the whole code include paravirt template code. This isn't safe for scratch area and has impact to performance.  Signed-off-by: Liu Yu <yu.liu@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | setup_64.c | s | 17K | 581 | Linus Torvalds | torvalds@linux-foundation.org | 1332975501 |  | 
f | udbg.c | s | 4.4K | 178 | Stephen Rothwell | sfr@canb.auug.org.au | 1332894803 |  | powerpc: Random little legacy iSeries removal tidy ups  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | time.c | s | 26K | 865 | Paul Mackerras | paulus@samba.org | 1339128455 |  | powerpc/time: Sanity check of decrementer expiration is necessary  This reverts 68568add2c ("powerpc/time: Remove unnecessary sanity check of decrementer expiration").  We do need to check whether we have reached the expiration time of the next event, because we sometimes get an early decrementer interrupt, most notably when we set the decrementer to 1 in arch_irq_work_raise().  The effect of not having the sanity check is that if timer_interrupt() gets called early, we leave the decrementer set to its maximum value, which means we then don't get any more decrementer interrupts for about 4 seconds (or longer, depending on timebase frequency).  I saw these pauses as a consequence of getting a stray hypervisor decrementer interrupt left over from exiting a KVM guest.  This isn't quite a straight revert because of changes to the surrounding code, but it restores the same algorithm as was previously used.  Cc: stable@vger.kernel.org Acked-by: Anton Blanchard <anton@samba.org> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | idle_power4.S | g | 1.6K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331850497 |  | powerpc: Fix power4/970 idle code regression with lockdep  in commit 7230c5644188cd9e3fb380cc97dde00c464a3ba7 "powerpc: Rework lazy-interrupt handling"  I introduced a regression, accidentally calling irq tracing twice and not properly restoring a clobbered register (r7) later used for writing to the MSR.  This caused lockups when booting on a G5 with lockdep enabled.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | iommu.c | s | 18K | 570 | Mahesh Salgaonkar | mahesh@linux.vnet.ibm.com | 1329954601 |  | fadump: Register for firmware assisted dump.  On 2012-02-20 11:02:51 Mon, Paul Mackerras wrote: > On Thu, Feb 16, 2012 at 04:44:30PM +0530, Mahesh J Salgaonkar wrote: > > If I have read the code correctly, we are going to get this printk on > non-pSeries machines or on older pSeries machines, even if the user > has not put the fadump=on option on the kernel command line.  The > printk will be annoying since there is no actual error condition.  It > seems to me that the condition for the printk should include > fw_dump.fadump_enabled.  In other words you should probably add > > 	if (!fw_dump.fadump_enabled) > 		return 0; > > at the beginning of the function.  Hi Paul,  Thanks for pointing it out. Please find the updated patch below.  The existing patches above this (4/10 through 10/10) cleanly applies on this update.  Thanks, -Mahesh.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | machine_kexec_64.c | s | 10K | 344 | Joe Perches | joe@perches.com | 1326427983 |  | treewide: convert uses of ATTRIB_NORETURN to __noreturn  Use the more commonly used __noreturn instead of ATTRIB_NORETURN.  [akpm@linux-foundation.org: coding-style fixes] Signed-off-by: Joe Perches <joe@perches.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Haavard Skinnemoen <hskinnemoen@gmail.com> Cc: Hans-Christian Egtvedt <egtvedt@samfundet.no> Cc: Tony Luck <tony.luck@intel.com> Cc: Fenghua Yu <fenghua.yu@intel.com> Acked-by: Geert Uytterhoeven <geert@linux-m68k.org> Acked-by: Ralf Baechle <ralf@linux-mips.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mackerras <paulus@samba.org> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: Heiko Carstens <heiko.carstens@de.ibm.com> Cc: Chris Metcalf <cmetcalf@tilera.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | exceptions-64e.S | g | 36K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331259906 |  | powerpc: Rework lazy-interrupt handling  The current implementation of lazy interrupts handling has some issues that this tries to address.  We don't do the various workarounds we need to do when re-enabling interrupts in some cases such as when returning from an interrupt and thus we may still lose or get delayed decrementer or doorbell interrupts.  The current scheme also makes it much harder to handle the external "edge" interrupts provided by some BookE processors when using the EPR facility (External Proxy) and the Freescale Hypervisor.  Additionally, we tend to keep interrupts hard disabled in a number of cases, such as decrementer interrupts, external interrupts, or when a masked decrementer interrupt is pending. This is sub-optimal.  This is an attempt at fixing it all in one go by reworking the way we do the lazy interrupt disabling from the ground up.  The base idea is to replace the "hard_enabled" field with a "irq_happened" field in which we store a bit mask of what interrupt occurred while soft-disabled.  When re-enabling, either via arch_local_irq_restore() or when returning from an interrupt, we can now decide what to do by testing bits in that field.  We then implement replaying of the missed interrupts either by re-using the existing exception frame (in exception exit case) or via the creation of a new one from an assembly trampoline (in the arch_local_irq_enable case).  This removes the need to play with the decrementer to try to create fake interrupts, among others.  In addition, this adds a few refinements:   - We no longer  hard disable decrementer interrupts that occur while soft-disabled. We now simply bump the decrementer back to max (on BookS) or leave it stopped (on BookE) and continue with hard interrupts enabled, which means that we'll potentially get better sample quality from performance monitor interrupts.   - Timer, decrementer and doorbell interrupts now hard-enable shortly after removing the source of the interrupt, which means they no longer run entirely hard disabled. Again, this will improve perf sample quality.   - On Book3E 64-bit, we now make the performance monitor interrupt act as an NMI like Book3S (the necessary C code for that to work appear to already be present in the FSL perf code, notably calling nmi_enter instead of irq_enter). (This also fixes a bug where BookE perfmon interrupts could clobber r14 ... oops)   - We could make "masked" decrementer interrupts act as NMIs when doing timer-based perf sampling to improve the sample quality.  Signed-off-by-yet: Benjamin Herrenschmidt <benh@kernel.crashing.org> ---  v2:  - Add hard-enable to decrementer, timer and doorbells - Fix CR clobber in masked irq handling on BookE - Make embedded perf interrupt act as an NMI - Add a PACA_HAPPENED_EE_EDGE for use by FSL if they want   to retrigger an interrupt without preventing hard-enable  v3:   - Fix or vs. ori bug on Book3E  - Fix enabling of interrupts for some exceptions on Book3E  v4:   - Fix resend of doorbells on return from interrupt on Book3E  v5:   - Rebased on top of my latest series, which involves some significant rework of some aspects of the patch.  v6:  - 32-bit compile fix  - more compile fixes with various .config combos  - factor out the asm code to soft-disable interrupts  - remove the C wrapper around preempt_schedule_irq  v7:  - Fix a bug with hard irq state tracking on native power7
f | asm-offsets.c | s | 28K | 589 | Linus Torvalds | torvalds@linux-foundation.org | 1337901450 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM changes from Avi Kivity:  "Changes include additional instruction emulation, page-crossing MMIO,   faster dirty logging, preventing the watchdog from killing a stopped   guest, module autoload, a new MSI ABI, and some minor optimizations   and fixes.  Outside x86 we have a small s390 and a very large ppc   update.    Regarding the new (for kvm) rebaseless workflow, some of the patches   that were merged before we switch trees had to be rebased, while   others are true pulls.  In either case the signoffs should be correct   now."  Fix up trivial conflicts in Documentation/feature-removal-schedule.txt arch/powerpc/kvm/book3s_segment.S and arch/x86/include/asm/kvm_para.h.  I suspect the kvm_para.h resolution ends up doing the "do I have cpuid" check effectively twice (it was done differently in two different commits), but better safe than sorry ;)  * 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (125 commits)   KVM: make asm-generic/kvm_para.h have an ifdef __KERNEL__ block   KVM: s390: onereg for timer related registers   KVM: s390: epoch difference and TOD programmable field   KVM: s390: KVM_GET/SET_ONEREG for s390   KVM: s390: add capability indicating COW support   KVM: Fix mmu_reload() clash with nested vmx event injection   KVM: MMU: Don't use RCU for lockless shadow walking   KVM: VMX: Optimize %ds, %es reload   KVM: VMX: Fix %ds/%es clobber   KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()   KVM: VMX: unlike vmcs on fail path   KVM: PPC: Emulator: clean up SPR reads and writes   KVM: PPC: Emulator: clean up instruction parsing   kvm/powerpc: Add new ioctl to retreive server MMU infos   kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM   KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler   KVM: PPC: Book3S: Enable IRQs during exit handling   KVM: PPC: Fix PR KVM on POWER7 bare metal   KVM: PPC: Fix stbux emulation   KVM: PPC: bookehv: Use lwz/stw instead of PPC_LL/PPC_STL for 32-bit fields   ...
f | rtas-proc.c | s | 21K | 708 | Nathan Fontenot | nfont@austin.ibm.com | 1263522377 |  | powerpc: Move /proc/ppc64 to /proc/powerpc update  It looks like the previous patch sent out to move RTAS and other items from /proc/ppc64 to /proc/powerpc missed a few files needed for RAS and DLPAR functionality.  Original Patch here: http://lists.ozlabs.org/pipermail/linuxppc-dev/2009-September/076096.html  This patch updates the remaining files to be created under /proc/powerpc.  Signed-off-by: Nathan Fontenot <nfont@austin.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | swsusp_booke.S | g | 3.4K |  | Anton Vorontsov | avorontsov@mvista.com | 1274445713 |  | powerpc/fsl-booke: Add hibernation support for FSL BookE processors  This is started as swsusp_32.S modifications, but the amount of #ifdefs made the whole file horribly unreadable, so let's put the support into its own separate file.  The code should be relatively easy to modify to support 44x BookEs as well, but since I don't have any 44x to test, let's confine the code to FSL BookE. (The only FSL-specific part so far is 'flush_dcache_L1'.)  Signed-off-by: Anton Vorontsov <avorontsov@mvista.com> Acked-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
f | isa-bridge.c | s | 7.2K | 227 | Stephen Rothwell | sfr@canb.auug.org.au | 1332288971 |  | powerpc: Remove FW_FEATURE ISERIES from arch code  This is no longer selectable, so just remove all the dependent code.  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | iomap.c | s | 2.8K | 124 | Michael S. Tsirkin | mst@redhat.com | 1322507598 |  | powerpc: switch to GENERIC_PCI_IOMAP  powerpc copied pci_iomap from generic code, probably to avoid pulling the rest of iomap.c in.  Since that's in a separate file now, we can reuse the common implementation.  The only difference is handling of nocache flag, that turns out to be done correctly by the generic code since arch/powerpc/include/asm/io.h defines ioremap_nocache same as ioremap.  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
f | systbl_chk.c | s | 1.7K | 52 | Stephen Rothwell | sfr@canb.auug.org.au | 1201261970 |  | [POWERPC] Fix a couple of copyright symbols  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | compat_audit.c | s | 664B | 37 | Amy Griffis | amy.griffis@hp.com | 1178876305 |  | [PATCH] add SIGNAL syscall class (v3)  Add a syscall class for sending signals.  Signed-off-by: Amy Griffis <amy.griffis@hp.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | prom_init.c | s | 81K | 2600 | Li Zhong | zhong@linux.vnet.ibm.com | 1340944536 |  | powerpc: Fix Section mismatch warnings in prom_init.c  This patches tries to fix a couple of Section mismatch warnings like following one:  WARNING: arch/powerpc/kernel/built-in.o(.text+0x2923c): Section mismatch in reference from the function .prom_query_opal() to the function .init.text:.call_prom() The function .prom_query_opal() references the function __init .call_prom(). This is often because .prom_query_opal lacks a __init annotation or the annotation of .call_prom is wrong.  Signed-off-by: Li Zhong <zhong@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | dma.c | s | 5.8K | 195 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1332945393 |  | PowerPC: adapt for dma_map_ops changes  Adapt core PowerPC architecture code for dma_map_ops changes: replace alloc/free_coherent with generic alloc/free methods.  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> [added missing changes to arch/powerpc/kernel/vio.c] Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Reviewed-by: David Gibson <david@gibson.dropbear.id.au> Reviewed-by: Arnd Bergmann <arnd@arndb.de>
f | rtas_flash.c | s | 21K | 682 | Ravi K. Nittala | ravi.nittala@in.ibm.com | 1322190689 |  | powerpc/pseries: Cancel RTAS event scan before firmware flash  The RTAS firmware flash update is conducted using an RTAS call that is serialized by lock_rtas() which uses spin_lock. While the flash is in progress, rtasd performs scan for any RTAS events that are generated by the system. rtasd keeps scanning for the RTAS events generated on the machine. This is performed via workqueue mechanism. The rtas_event_scan() also uses an RTAS call to scan the events, eventually trying to acquire the spin_lock before issuing the request.  The flash update takes a while to complete and during this time, any other RTAS call has to wait. In this case, rtas_event_scan() waits for a long time on the spin_lock resulting in a soft lockup.  Fix: Just before the flash update is performed, the queued rtas_event_scan() work item is cancelled from the work queue so that there is no other RTAS call issued while the flash is in progress. After the flash completes, the system reboots and the rtas_event_scan() is rescheduled.  Signed-off-by: Suzuki Poulose <suzuki@in.ibm.com> Signed-off-by: Ravi Nittala <ravi.nittala@in.ibm.com> Reported-by: Divya Vikas <divya.vikas@in.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | suspend.c | s | 642B | 21 | Pavel Machek | pavel@ucw.cz | 1279529814 |  | update email address  pavel@suse.cz no longer works, replace it with working address.  Signed-off-by: Pavel Machek <pavel@ucw.cz> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | vector.S | g | 8.7K |  | Anton Blanchard | anton@samba.org | 1335764237 |  | powerpc: Optimise enable_kernel_altivec  Add two optimisations to enable_kernel_altivec:  - enable_kernel_altivec has already determined if we need to save the previous task's state but we call giveup_altivec in both cases, requiring an extra branch in giveup_altivec. Create giveup_altivec_notask which only turns on the VMX bit in the MSR.  - We write the VMX MSR bit each time we call enable_kernel_altivec even it was already set. Check the bit and branch out if we have already set it. The classic case for this is vectored IO where we have to copy multiple buffers to or from userspace.  The following testcase was used to confirm this patch improves performance:  http://ozlabs.org/~anton/junkcode/copy_to_user.c  Since the current breakpoint for using VMX in copy_tofrom_user is 4096 bytes, I'm using buffers of 4096 + 1 cacheline (4224) bytes. A benchmark of 16 entry readvs (-s 16):  time copy_to_user -l 4224 -s 16 -i 1000000  completes 5.2% faster on a POWER7 PS700.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | swsusp_32.S | g | 6.6K |  | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | swsusp_asm64.S | g | 4.2K |  | Johannes Berg | johannes@sipsolutions.net | 1223349980 |  | powerpc: Fix 64-bit hibernation with 64k pages  A bug in my initial 64-bit hibernation code breaks it when using page sizes that aren't 4K.  Signed-off-by: Johannes Berg <johannes@sipsolutions.net> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | rtas-rtc.c | s | 2.7K | 96 | Christian Dietrich | christian.dietrich@informatik.uni-erlangen.de | 1309325443 |  | powerpc/rtas-rtc: remove sideeffects of printk_ratelimit  Don't use printk_ratelimit() as an additional condition for returning on an error. Because when the ratelimit is reached, printk_ratelimit will return 0 and e.g. in rtas_get_boot_time won't check for an error condition.  Signed-off-by: Christian Dietrich <christian.dietrich@informatik.uni-erlangen.de> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | cputable.c | s | 64K | 2158 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | swsusp_64.c | s | 355B | 21 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | head_40x.S | g | 28K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331250908 |  | powerpc: Call do_page_fault() with interrupts off  We currently turn interrupts back to their previous state before calling do_page_fault(). This can be annoying when debugging as a bad fault will potentially have lost some processor state before getting into the debugger.  We also end up calling some generic code with interrupts enabled such as notify_page_fault() with interrupts enabled, which could be unexpected.  This changes our code to behave more like other architectures, and make the assembly entry code call into do_page_faults() with interrupts disabled. They are conditionally re-enabled from within do_page_fault() in the same spot x86 does it.  While there, add the might_sleep() test in the case of a successful trylock of the mmap semaphore, again like x86.  Also fix a bug in the existing assembly where r12 (_MSR) could get clobbered by C calls (the DTL accounting in the exception common macro and DISABLE_INTS) in some cases.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> ---  v2. Add the r12 clobber fix
f | kgdb.c | s | 14K | 415 | Stephen Rothwell | sfr@canb.auug.org.au | 1333339203 |  | powerpc: Fix fallout from system.h split up  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | traps.c | s | 40K | 1403 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1336520553 |  | powerpc/irq: Make alignment & program interrupt behave the same  Alignment was the last user of the ENABLE_INTS macro, which we can now remove. All non-syscall exceptions now disable interrupts on entry, they get re-enabled conditionally from C code. Don't unconditionally re-enable in program check either, check the original context.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | vmlinux.lds.S | g | 5.3K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331250899 |  | powerpc: Remove legacy iSeries bits from assembly files  This removes the various bits of assembly in the kernel entry, exception handling and SLB management code that were specific to running under the legacy iSeries hypervisor which is no longer supported.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | rtasd.c | s | 13K | 455 | Ravi K. Nittala | ravi.nittala@in.ibm.com | 1322190689 |  | powerpc/pseries: Cancel RTAS event scan before firmware flash  The RTAS firmware flash update is conducted using an RTAS call that is serialized by lock_rtas() which uses spin_lock. While the flash is in progress, rtasd performs scan for any RTAS events that are generated by the system. rtasd keeps scanning for the RTAS events generated on the machine. This is performed via workqueue mechanism. The rtas_event_scan() also uses an RTAS call to scan the events, eventually trying to acquire the spin_lock before issuing the request.  The flash update takes a while to complete and during this time, any other RTAS call has to wait. In this case, rtas_event_scan() waits for a long time on the spin_lock resulting in a soft lockup.  Fix: Just before the flash update is performed, the queued rtas_event_scan() work item is cancelled from the work queue so that there is no other RTAS call issued while the flash is in progress. After the flash completes, the system reboots and the rtas_event_scan() is rescheduled.  Signed-off-by: Suzuki Poulose <suzuki@in.ibm.com> Signed-off-by: Ravi Nittala <ravi.nittala@in.ibm.com> Reported-by: Divya Vikas <divya.vikas@in.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | reloc_64.S | g | 2.0K |  | Paul Mackerras | paulus@samba.org | 1221502118 |  | powerpc: Make the 64-bit kernel as a position-independent executable  This implements CONFIG_RELOCATABLE for 64-bit by making the kernel as a position-independent executable (PIE) when it is set.  This involves processing the dynamic relocations in the image in the early stages of booting, even if the kernel is being run at the address it is linked at, since the linker does not necessarily fill in words in the image for which there are dynamic relocations.  (In fact the linker does fill in such words for 64-bit executables, though not for 32-bit executables, so in principle we could avoid calling relocate() entirely when we're running a 64-bit kernel at the linked address.)  The dynamic relocations are processed by a new function relocate(addr), where the addr parameter is the virtual address where the image will be run.  In fact we call it twice; once before calling prom_init, and again when starting the main kernel.  This means that reloc_offset() returns 0 in prom_init (since it has been relocated to the address it is running at), which necessitated a few adjustments.  This also changes __va and __pa to use an equivalent definition that is simpler.  With the relocatable kernel, PAGE_OFFSET and MEMORY_START are constants (for 64-bit) whereas PHYSICAL_START is a variable (and KERNELBASE ideally should be too, but isn't yet).  With this, relocatable kernels still copy themselves down to physical address 0 and run there.  Signed-off-by: Paul Mackerras <paulus@samba.org>
f | dma-iommu.c | s | 3.5K | 102 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1332945393 |  | PowerPC: adapt for dma_map_ops changes  Adapt core PowerPC architecture code for dma_map_ops changes: replace alloc/free_coherent with generic alloc/free methods.  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> [added missing changes to arch/powerpc/kernel/vio.c] Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Reviewed-by: David Gibson <david@gibson.dropbear.id.au> Reviewed-by: Arnd Bergmann <arnd@arndb.de>
f | nvram_64.c | s | 13K | 478 | Jim Keniston | jkenisto@linux.vnet.ibm.com | 1299223144 |  | powerpc/nvram: Generalize code for OS partitions in NVRAM  Adapt the functions used to create and write to the RTAS-log partition to work with any OS-type partition.  Signed-off-by: Jim Keniston <jkenisto@us.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | module_64.c | s | 12K | 384 | Jonas Bonn | jonas@southpole.se | 1311510964 |  | modules: make arch's use default loader hooks  This patch removes all the module loader hook implementations in the architecture specific code where the functionality is the same as that now provided by the recently added default hooks.  Signed-off-by: Jonas Bonn <jonas@southpole.se> Acked-by: Mike Frysinger <vapier@gentoo.org> Acked-by: Geert Uytterhoeven <geert@linux-m68k.org> Tested-by: Michal Simek <monstr@monstr.eu> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
f | clock.c | s | 1.7K | 71 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: various straight conversions from module.h --> export.h  All these files were including module.h just for the basic EXPORT_SYMBOL infrastructure.  We can shift them off to the export.h header which is a way smaller footprint and thus realize some compile time gains.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | ptrace.c | s | 43K | 1500 | Linus Torvalds | torvalds@linux-foundation.org | 1337788962 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc  Pull powerpc updates from Benjamin Herrenschmidt:  "Here are the powerpc goodies for 3.5.  Main highlights are:     - Support for the NX crypto engine in Power7+    - A bunch of Anton goodness, including some micro optimization of our      syscall entry on Power7    - I converted a pile of our thermal control drivers to the new i2c      APIs (essentially turning the old therm_pm72 into a proper set of      windfarm drivers).  That's one more step toward removing the      deprecated i2c APIs, there's still a few drivers to fix, but we are      getting close    - kexec/kdump support for 47x embedded cores    The big missing thing here is no updates from Freescale.  Not sure   what's up here, but with Kumar not working for them anymore things are   a bit in a state of flux in that area."  * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/benh/powerpc: (71 commits)   powerpc: Fix irq distribution   Revert "powerpc/hw-breakpoint: Use generic hw-breakpoint interfaces for new PPC ptrace flags"   powerpc: Fixing a cputhread code documentation   powerpc/crypto: Enable the PFO-based encryption device   powerpc/crypto: Build files for the nx device driver   powerpc/crypto: debugfs routines and docs for the nx device driver   powerpc/crypto: SHA512 hash routines for nx encryption   powerpc/crypto: SHA256 hash routines for nx encryption   powerpc/crypto: AES-XCBC mode routines for nx encryption   powerpc/crypto: AES-GCM mode routines for nx encryption   powerpc/crypto: AES-ECB mode routines for nx encryption   powerpc/crypto: AES-CTR mode routines for nx encryption   powerpc/crypto: AES-CCM mode routines for nx encryption   powerpc/crypto: AES-CBC mode routines for nx encryption   powerpc/crypto: nx driver code supporting nx encryption   powerpc/pseries: Enable the PFO-based RNG accelerator   powerpc/pseries/hwrng: PFO-based hwrng driver   powerpc/pseries: Add PFO support to the VIO bus   powerpc/pseries: Add pseries update notifier for OFDT prop changes   powerpc/pseries: Add new hvcall constants to support PFO   ...
f | rtas_pci.c | s | 7.2K | 250 | Linus Torvalds | torvalds@linux-foundation.org | 1332536532 |  | Merge branch 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci  Pull PCI changes (including maintainer change) from Jesse Barnes:  "This pull has some good cleanups from Bjorn and Yinghai, as well as   some more code from Yinghai to better handle resource re-allocation   when enabled.    There's also a new initcall_debug feature from Arjan which will print   out quirk timing information to help identify slow quirks for fixing   or refinement (Yinghai sent in a few patches to do just that once the   new debug code landed).    Beyond that, I'm handing off PCI maintainership to Bjorn Helgaas.   He's been a core PCI and Linux contributor for some time now, and has   kindly volunteered to take over.  I just don't feel I have the time   for PCI review and work that it deserves lately (I've taken on some   other projects), and haven't been as responsive lately as I'd like, so   I approached Bjorn asking if he'd like to manage things.  He's going   to give it a try, and I'm confident he'll do at least as well as I   have in keeping the tree managed, patches flowing, and keeping things   stable."  Fix up some fairly trivial conflicts due to other cleanups (mips device resource fixup cleanups clashing with list handling cleanup, ppc iseries removal clashing with pci_probe_only cleanup etc)  * 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci: (112 commits)   PCI: Bjorn gets PCI hotplug too   PCI: hand PCI maintenance over to Bjorn Helgaas   unicore32/PCI: move <asm-generic/pci-bridge.h> include to asm/pci.h   sparc/PCI: convert devtree and arch-probed bus addresses to resource   powerpc/PCI: allow reallocation on PA Semi   powerpc/PCI: convert devtree bus addresses to resource   powerpc/PCI: compute I/O space bus-to-resource offset consistently   arm/PCI: don't export pci_flags   PCI: fix bridge I/O window bus-to-resource conversion   x86/PCI: add spinlock held check to 'pcibios_fwaddrmap_lookup()'   PCI / PCIe: Introduce command line option to disable ARI   PCI: make acpihp use __pci_remove_bus_device instead   PCI: export __pci_remove_bus_device   PCI: Rename pci_remove_behind_bridge to pci_stop_and_remove_behind_bridge   PCI: Rename pci_remove_bus_device to pci_stop_and_remove_bus_device   PCI: print out PCI device info along with duration   PCI: Move "pci reassigndev resource alignment" out of quirks.c   PCI: Use class for quirk for usb host controller fixup   PCI: Use class for quirk for ti816x class fixup   PCI: Use class for quirk for intel e100 interrupt fixup   ...
f | cpu_setup_44x.S | g | 1.6K |  | Tirumala Marri | tmarri@apm.com | 1286974029 |  | powerpc/44x: Add support for the AMCC APM821xx SoC  This patch adds CPU, device tree, defconfig and bluestone board support for APM821xx SoC.  Signed-off-by: Tirumala R Marri <tmarri@apm.com> Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>
f | reloc_32.S | g | 5.4K |  | Suzuki Poulose | suzuki@in.ibm.com | 1324394468 |  | powerpc: Process dynamic relocations for kernel  The following patch implements the dynamic relocation processing for PPC32 kernel. relocate() accepts the target virtual address and relocates  the kernel image to the same.  Currently the following relocation types are handled :  	R_PPC_RELATIVE 	R_PPC_ADDR16_LO 	R_PPC_ADDR16_HI 	R_PPC_ADDR16_HA  The last 3 relocations in the above list depends on value of Symbol indexed whose index is encoded in the Relocation entry. Hence we need the Symbol Table for processing such relocations.  Note: The GNU ld for ppc32 produces buggy relocations for relocation types that depend on symbols. The value of the symbols with STB_LOCAL scope should be assumed to be zero. - Alan Modra  Signed-off-by: Suzuki K. Poulose <suzuki@in.ibm.com> Signed-off-by: Josh Poimboeuf <jpoimboe@linux.vnet.ibm.com> Cc: Paul Mackerras <paulus@samba.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Alan Modra <amodra@au1.ibm.com> Cc: Kumar Gala <galak@kernel.crashing.org> Cc: linuxppc-dev <linuxppc-dev@lists.ozlabs.org> Signed-off-by: Josh Boyer <jwboyer@gmail.com>
f | vdso.c | s | 20K | 713 | Linus Torvalds | torvalds@linux-foundation.org | 1332975501 |  | 
f | pci_dn.c | s | 4.8K | 151 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1322193195 |  | powerpc/powernv: PCI support for p7IOC under OPAL v2  This adds support for p7IOC (and possibly other IODA v1 IO Hubs) using OPAL v2 interfaces.  We completely take over resource assignment and assign them using an algorithm that hands out device BARs in a way that makes them fit in individual segments of the M32 window of the bridge, which enables us to assign individual PEs to devices and functions.  The current implementation gives out a PE per functions on PCIe, and a PE for the entire bridge for PCIe to PCI-X bridges.  This can be adjusted / fine tuned later.  We also setup DMA resources (32-bit only for now) and MSIs (both 32-bit and 64-bit MSI are supported).  The DMA allocation tries to divide the available 256M segments of the 32-bit DMA address space "fairly" among PEs. This is done using a "weight" heuristic which assigns less value to things like OHCI USB controllers than, for example SCSI RAID controllers. This algorithm will probably want some fine tuning for specific devices or device types.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | audit.c | s | 1.8K | 74 | Amy Griffis | amy.griffis@hp.com | 1178876305 |  | [PATCH] audit signal recipients  When auditing syscalls that send signals, log the pid and security context for each target process. Optimize the data collection by adding a counter for signal-related rules, and avoiding allocating an aux struct unless we have more than one target process. For process groups, collect pid/context data in blocks of 16. Move the audit_signal_info() hook up in check_kill_permission() so we audit attempts where permission is denied.  Signed-off-by: Amy Griffis <amy.griffis@hp.com> Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | setup.h | s | 210B | 7 | Michael Ellerman | michael@ellerman.id.au | 1148014932 |  | [PATCH] powerpc: Make early xmon logic immune to location of early parsing  Currently early_xmon() calls directly into debugger() if xmon=early is passed. This ties the invocation of early xmon to the location of parse_early_param(), which might change.  Tested on P5 LPAR and F50.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | pci_of_scan.c | s | 10K | 332 | Bjorn Helgaas | bhelgaas@google.com | 1332265311 |  | powerpc/PCI: convert devtree bus addresses to resource  Normal PCI enumeration via PCI config space uses __pci_read_base(), where the PCI core applies any bus-to-resource offset.  But powerpc doesn't use that path when enumerating via the device tree.  In 6c5705fec63d, I converted powerpc to use the PCI core bus-to-resource conversion, but I missed these powerpc-specific paths.  Some powerpc platforms fail to boot ("Cannot allocate resource region," "device not available," etc.) between that commit and this one.  This adds the corresponding bus-to-resource conversion in the paths that read BAR values from the OF device tree.  CC: Anton Blanchard <anton@samba.org> CC: Benjamin Herrenschmidt <benh@kernel.crashing.org> CC: linuxppc-dev@lists.ozlabs.org Signed-off-by: Bjorn Helgaas <bhelgaas@google.com> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
d | vdso64 |  | 9 items |  | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | align.c | s | 24K | 889 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | cpu_setup_6xx.S | g | 10K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1297043831 |  | powerpc: Fix some 6xx/7xxx CPU setup functions  Some of those functions try to adjust the CPU features, for example to remove NAP support on some revisions. However, they seem to use r5 as an index into the CPU table entry, which might have been right a long time ago but no longer is. r4 is the right register to use.  This probably caused some off behaviours on some PowerMac variants using 750cx or 7455 processor revisions.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> CC: stable@kernel.org
f | legacy_serial.c | s | 17K | 531 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1327458802 |  | powerpc: Fix build on some non-freescale platforms  Commit 9deaa53ac7fa373623123aa4f18828dd62292b1a broke build on platforms that use legacy_serial.c without also having CONFIG_SERIAL_8250_FSL enabled due to an unconditional code to a routine in that module.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | pci_32.c | s | 7.5K | 261 | Bjorn Helgaas | bhelgaas@google.com | 1332265304 |  | powerpc/PCI: compute I/O space bus-to-resource offset consistently  Make sure we compute CPU addresses (resource start/end) the same way both when we set up the I/O aperture (hose->io_resource) and when we use pcibios_bus_to_resource() to convert BAR values into resources.  This fixes a build failure ("cast from pointer to integer of different size" in configs where resource_size_t is 64 bits but pointers are 32 bits) I introduced in 6c5705fec63d.  Acked-By: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Bjorn Helgaas <bhelgaas@google.com> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
f | crash_dump.c | s | 4.2K | 133 | Suzuki Poulose | suzuki@in.ibm.com | 1324394419 |  | powerpc: Rename mapping based RELOCATABLE to DYNAMIC_MEMSTART for BookE  The current implementation of CONFIG_RELOCATABLE in BookE is based on mapping the page aligned kernel load address to KERNELBASE. This approach however is not enough for platforms, where the TLB page size is large (e.g, 256M on 44x). So we are renaming the RELOCATABLE used currently in BookE to DYNAMIC_MEMSTART to reflect the actual method.  The CONFIG_RELOCATABLE for PPC32(BookE) based on processing of the dynamic relocations will be introduced in the later in the patch series.  This change would allow the use of the old method of RELOCATABLE for platforms which can afford to enforce the page alignment (platforms with smaller TLB size).  Changes since v3:  * Introduced a new config, NONSTATIC_KERNEL, to denote a kernel which is   either a RELOCATABLE or DYNAMIC_MEMSTART(Suggested by: Josh Boyer)  Suggested-by: Scott Wood <scottwood@freescale.com> Tested-by: Scott Wood <scottwood@freescale.com>  Signed-off-by: Suzuki K. Poulose <suzuki@in.ibm.com> Cc: Scott Wood <scottwood@freescale.com> Cc: Kumar Gala <galak@kernel.crashing.org> Cc: Josh Boyer <jwboyer@gmail.com> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: linux ppc dev <linuxppc-dev@lists.ozlabs.org> Signed-off-by: Josh Boyer <jwboyer@gmail.com>
f | idle_6xx.S | g | 5.0K |  | Kumar Gala | galak@kernel.crashing.org | 1220439227 |  | powerpc: Fix for getting CPU number in power_save_ppc32_restore()  The calculation to get TI_CPU based off of SPRG3 was just plain wrong, meaning that we were getting garbage for the CPU number on 6xx/G3/G4 based SMP boxes in this code.  Just offset off the stack pointer (to get to thread_info) like all the other references to TI_CPU do.  This was pointed out by Chen Gong <G.Chen@freescale.com>  [paulus@samba.org - use rlwinm r12,r11,... instead of  rlwinm r12,r1,...; tophys()]  Signed-off-by: Kumar Gala <galak@kernel.crashing.org> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | signal_32.c | s | 35K | 1150 | Al Viro | viro@zeniv.linux.org.uk | 1338569931 |  | powerpc: get rid of restore_sigmask()  ... it's just a call of set_current_blocked() now  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | idle_power7.S | g | 2.6K |  | Paul Mackerras | paulus@samba.org | 1333882880 |  | KVM: PPC: Book3S HV: Make secondary threads more robust against stray IPIs  Currently on POWER7, if we are running the guest on a core and we don't need all the hardware threads, we do nothing to ensure that the unused threads aren't executing in the kernel (other than checking that they are offline).  We just assume they're napping and we don't do anything to stop them trying to enter the kernel while the guest is running. This means that a stray IPI can wake up the hardware thread and it will then try to enter the kernel, but since the core is in guest context, it will execute code from the guest in hypervisor mode once it turns the MMU on, which tends to lead to crashes or hangs in the host.  This fixes the problem by adding two new one-byte flags in the kvmppc_host_state structure in the PACA which are used to interlock between the primary thread and the unused secondary threads when entering the guest.  With these flags, the primary thread can ensure that the unused secondaries are not already in kernel mode (i.e. handling a stray IPI) and then indicate that they should not try to enter the kernel if they do get woken for any reason.  Instead they will go into KVM code, find that there is no vcpu to run, acknowledge and clear the IPI and go back to nap mode.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | kprobes.c | s | 15K | 506 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | fsl_booke_entry_mapping.S | g | 5.5K |  | Matthew McClintock | msm@freescale.com | 1278864248 |  | powerpc/fsl-booke: Fix address issue when using relocatable kernels  When booting a relocatable kernel it needs to jump to the correct start address, which for BookE parts is usually unchanged regardless of the physical memory offset.  Recent changes cause problems with how we calculate the start address, it was always adding the RMO into the start address which is incorrect. This patch only adds in the RMO offset if we are in the kexec code path, as it needs the RMO to work correctly.  Instead of adding the RMO offset in in the common code path, we can just set r6 to the RMO offset in the kexec code path instead of to zero, and finally perform the masking in the common code path  Signed-off-by: Matthew McClintock <msm@freescale.com> Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
f | paca.c | s | 5.6K | 173 | Anton Blanchard | anton@samba.org | 1335764236 |  | powerpc: Remove iseries specific fields in lppaca  Remove all the iseries specific fields in the lppaca.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | ptrace32.c | s | 8.2K | 275 | Anton Blanchard | anton@samba.org | 1335764248 |  | powerpc: Remove old powerpc specific ptrace getregs/setregs calls  PowerPC has non standard getregs calls that only dump the GPRs or FPRs and have their arguments reversed. commit e17666ba48f7 (ptrace updates & new, better requests) in 2.6.3 deprecated them and introduced more standard versions.  It's been about 5 years and I know of no users of the old calls so lets remove them.  Signed-off-by: Anton Blanchard <anton@samba.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | machine_kexec.c | s | 6.2K | 205 | Grant Likely | grant.likely@secretlab.ca | 1335746726 |  | powerpc/irqdomain: Fix broken NR_IRQ references  The switch from using irq_map to irq_alloc_desc*() for managing irq number allocations introduced new bugs in some of the powerpc interrupt code.  Several functions rely on the value of NR_IRQS to determine the maximum irq number that could get allocated.  However, with sparse_irq and using irq_alloc_desc*() the maximum possible irq number is now specified with 'nr_irqs' which may be a number larger than NR_IRQS.  This has caused breakage on powermac when CONFIG_NR_IRQS is set to 32.  This patch removes most of the direct references to NR_IRQS in the powerpc code and replaces them with either a nr_irqs reference or by using the common for_each_irq_desc() macro.  The powerpc-specific for_each_irq() macro is removed at the same time.  Also, the Cell axon_msi driver is refactored to remove the global build assumption on the size of NR_IRQS and instead add a limit to the maximum irq number when calling irq_domain_add_nomap().  Signed-off-by: Grant Likely <grant.likely@secretlab.ca> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | jump_label.c | s | 693B | 22 | Al Viro | viro@zeniv.linux.org.uk | 1321413919 |  | powerpc: Fix build breakage in jump_label.c  Should do what other architectures do and wrap all that code into the appropriate ifdef  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | irq.c | s | 15K | 528 | Steven Rostedt | rostedt@goodmis.org | 1340944536 |  | powerpc/ftrace: Do not trace restore_interrupts()  As I was adding code that affects all archs, I started testing function tracer against PPC64 and found that it currently locks up with 3.4 kernel. I figured it was due to tracing a function that shouldn't be, so I went through the following process to bisect to find the culprit:   cat /debug/tracing/available_filter_functions > t  num=`wc -l t`  sed -ne "1,${num}p" t > t1  let num=num+1  sed -ne "${num},$p" t > t2  cat t1 > /debug/tracing/set_ftrace_filter  echo function /debug/tracing/current_tracer  <failed? bisect t1, if not bisect t2>  It finally came down to this function: restore_interrupts()  I'm not sure why this locks up the system. It just seems to prevent scheduling from occurring. Interrupts seem to still work, as I can ping the box. But all user processes freeze.  When restore_interrupts() is not traced, function tracing works fine.  Cc: stable@kernel.org Signed-off-by: Steven Rostedt <rostedt@goodmis.org> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | hw_breakpoint.c | s | 9.0K | 317 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: remove non-required uses of include <linux/module.h>  None of the files touched here are modules, and they are not exporting any symbols either -- so there is no need to be including the module.h.  Builds of all the files remains successful.  Even kernel/module.c does not need to include it, since it includes linux/moduleloader.h instead.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | softemu8xx.c | s | 4.6K | 182 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | ppc32.h | s | 3.4K | 117 | Michael Neuling | mikey@neuling.org | 1214875730 |  | powerpc: Add VSX context save/restore, ptrace and signal support  This patch extends the floating point save and restore code to use the VSX load/stores when VSX is available.  This will make FP context save/restore marginally slower on FP only code, when VSX is available, as it has to load/store 128bits rather than just 64bits.  Mixing FP, VMX and VSX code will get constant architected state.  The signals interface is extended to enable access to VSR 0-31 doubleword 1 after discussions with tool chain maintainers.  Backward compatibility is maintained.  The ptrace interface is also extended to allow access to VSR 0-31 full registers.  Signed-off-by: Michael Neuling <mikey@neuling.org> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | entry_64.S | g | 25K |  | Tiejun Chen | tiejun.chen@windriver.com | 1340944535 |  | ppc64: fix missing to check all bits of _TIF_USER_WORK_MASK in preempt  In entry_64.S version of ret_from_except_lite, you'll notice that in the !preempt case, after we've checked MSR_PR we test for any TIF flag in _TIF_USER_WORK_MASK to decide whether to go to do_work or not. However, in the preempt case, we do a convoluted trick to test SIGPENDING only if PR was set and always test NEED_RESCHED ... but we forget to test any other bit of _TIF_USER_WORK_MASK !!! So that means that with preempt, we completely fail to test for things like single step, syscall tracing, etc...  This should be fixed as the following path:   - Test PR. If not set, go to resume_kernel, else continue.   - If go resume_kernel, to do that original do_work.   - If else, then always test for _TIF_USER_WORK_MASK to decide to do that original user_work, else restore directly.  Signed-off-by: Tiejun Chen <tiejun.chen@windriver.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | prom_init_check.sh | s | 2.0K | 69 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1316498988 |  | powerpc/powernv: Get kernel command line accross OPAL takeover  We stash it in boot_command_line which isn't in BSS and so won't be overwritten. We then use that as a default cmd_line before we walk the device-tree.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | misc_64.S | g | 13K |  | Dmitry Eremin-Solenikov | dbaryshkov@gmail.com | 1309333700 |  | powerpc/maple: Enable scom access functions on Maple  Enable functions used to access SCOM if PPC_MAPLE is defined: they are used by cpufreq driver to control hardware.  Signed-off-by: Dmitry Eremin-Solenikov <dbaryshkov@gmail.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | idle_book3e.S | g | 1.7K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331259906 |  | powerpc: Rework lazy-interrupt handling  The current implementation of lazy interrupts handling has some issues that this tries to address.  We don't do the various workarounds we need to do when re-enabling interrupts in some cases such as when returning from an interrupt and thus we may still lose or get delayed decrementer or doorbell interrupts.  The current scheme also makes it much harder to handle the external "edge" interrupts provided by some BookE processors when using the EPR facility (External Proxy) and the Freescale Hypervisor.  Additionally, we tend to keep interrupts hard disabled in a number of cases, such as decrementer interrupts, external interrupts, or when a masked decrementer interrupt is pending. This is sub-optimal.  This is an attempt at fixing it all in one go by reworking the way we do the lazy interrupt disabling from the ground up.  The base idea is to replace the "hard_enabled" field with a "irq_happened" field in which we store a bit mask of what interrupt occurred while soft-disabled.  When re-enabling, either via arch_local_irq_restore() or when returning from an interrupt, we can now decide what to do by testing bits in that field.  We then implement replaying of the missed interrupts either by re-using the existing exception frame (in exception exit case) or via the creation of a new one from an assembly trampoline (in the arch_local_irq_enable case).  This removes the need to play with the decrementer to try to create fake interrupts, among others.  In addition, this adds a few refinements:   - We no longer  hard disable decrementer interrupts that occur while soft-disabled. We now simply bump the decrementer back to max (on BookS) or leave it stopped (on BookE) and continue with hard interrupts enabled, which means that we'll potentially get better sample quality from performance monitor interrupts.   - Timer, decrementer and doorbell interrupts now hard-enable shortly after removing the source of the interrupt, which means they no longer run entirely hard disabled. Again, this will improve perf sample quality.   - On Book3E 64-bit, we now make the performance monitor interrupt act as an NMI like Book3S (the necessary C code for that to work appear to already be present in the FSL perf code, notably calling nmi_enter instead of irq_enter). (This also fixes a bug where BookE perfmon interrupts could clobber r14 ... oops)   - We could make "masked" decrementer interrupts act as NMIs when doing timer-based perf sampling to improve the sample quality.  Signed-off-by-yet: Benjamin Herrenschmidt <benh@kernel.crashing.org> ---  v2:  - Add hard-enable to decrementer, timer and doorbells - Fix CR clobber in masked irq handling on BookE - Make embedded perf interrupt act as an NMI - Add a PACA_HAPPENED_EE_EDGE for use by FSL if they want   to retrigger an interrupt without preventing hard-enable  v3:   - Fix or vs. ori bug on Book3E  - Fix enabling of interrupts for some exceptions on Book3E  v4:   - Fix resend of doorbells on return from interrupt on Book3E  v5:   - Rebased on top of my latest series, which involves some significant rework of some aspects of the patch.  v6:  - 32-bit compile fix  - more compile fixes with various .config combos  - factor out the asm code to soft-disable interrupts  - remove the C wrapper around preempt_schedule_irq  v7:  - Fix a bug with hard irq state tracking on native power7
f | swsusp.c | s | 892B | 33 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
d | vdso32 |  | 9 items |  | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | stacktrace.c | s | 1.4K | 52 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: various straight conversions from module.h --> export.h  All these files were including module.h just for the basic EXPORT_SYMBOL infrastructure.  We can shift them off to the export.h header which is a way smaller footprint and thus realize some compile time gains.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | vecemu.c | s | 8.4K | 316 | Stephen Rothwell | sfr@canb.auug.org.au | 1127294467 |  | [PATCH] powerpc: Move arch/ppc*/kernel/vecemu.c to arch/powerpc  This file is the same in both architectures so create arch/powerpc/kernel and move it there.  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | prom.c | s | 23K | 778 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | machine_kexec_32.c | s | 2.0K | 58 | Joe Perches | joe@perches.com | 1326427983 |  | treewide: convert uses of ATTRIB_NORETURN to __noreturn  Use the more commonly used __noreturn instead of ATTRIB_NORETURN.  [akpm@linux-foundation.org: coding-style fixes] Signed-off-by: Joe Perches <joe@perches.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Haavard Skinnemoen <hskinnemoen@gmail.com> Cc: Hans-Christian Egtvedt <egtvedt@samfundet.no> Cc: Tony Luck <tony.luck@intel.com> Cc: Fenghua Yu <fenghua.yu@intel.com> Acked-by: Geert Uytterhoeven <geert@linux-m68k.org> Acked-by: Ralf Baechle <ralf@linux-mips.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mackerras <paulus@samba.org> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: Heiko Carstens <heiko.carstens@de.ibm.com> Cc: Chris Metcalf <cmetcalf@tilera.com> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | module.c | s | 2.4K | 67 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: remove non-required uses of include <linux/module.h>  None of the files touched here are modules, and they are not exporting any symbols either -- so there is no need to be including the module.h.  Builds of all the files remains successful.  Even kernel/module.c does not need to include it, since it includes linux/moduleloader.h instead.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | systbl_chk.sh | s | 878B | 32 | Stephen Rothwell | sfr@canb.auug.org.au | 1201261970 |  | [POWERPC] Fix a couple of copyright symbols  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | signal_64.c | s | 14K | 423 | Al Viro | viro@zeniv.linux.org.uk | 1338569931 |  | powerpc: get rid of restore_sigmask()  ... it's just a call of set_current_blocked() now  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | pci_64.c | s | 7.4K | 223 | Bjorn Helgaas | bhelgaas@google.com | 1332265304 |  | powerpc/PCI: compute I/O space bus-to-resource offset consistently  Make sure we compute CPU addresses (resource start/end) the same way both when we set up the I/O aperture (hose->io_resource) and when we use pcibios_bus_to_resource() to convert BAR values into resources.  This fixes a build failure ("cast from pointer to integer of different size" in configs where resource_size_t is 64 bits but pointers are 32 bits) I introduced in 6c5705fec63d.  Acked-By: Benjamin Herrenschmidt <benh@kernel.crashing.org> Signed-off-by: Bjorn Helgaas <bhelgaas@google.com> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
f | pci-common.c | s | 47K | 1495 | Linus Torvalds | torvalds@linux-foundation.org | 1332536532 |  | Merge branch 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci  Pull PCI changes (including maintainer change) from Jesse Barnes:  "This pull has some good cleanups from Bjorn and Yinghai, as well as   some more code from Yinghai to better handle resource re-allocation   when enabled.    There's also a new initcall_debug feature from Arjan which will print   out quirk timing information to help identify slow quirks for fixing   or refinement (Yinghai sent in a few patches to do just that once the   new debug code landed).    Beyond that, I'm handing off PCI maintainership to Bjorn Helgaas.   He's been a core PCI and Linux contributor for some time now, and has   kindly volunteered to take over.  I just don't feel I have the time   for PCI review and work that it deserves lately (I've taken on some   other projects), and haven't been as responsive lately as I'd like, so   I approached Bjorn asking if he'd like to manage things.  He's going   to give it a try, and I'm confident he'll do at least as well as I   have in keeping the tree managed, patches flowing, and keeping things   stable."  Fix up some fairly trivial conflicts due to other cleanups (mips device resource fixup cleanups clashing with list handling cleanup, ppc iseries removal clashing with pci_probe_only cleanup etc)  * 'linux-next' of git://git.kernel.org/pub/scm/linux/kernel/git/jbarnes/pci: (112 commits)   PCI: Bjorn gets PCI hotplug too   PCI: hand PCI maintenance over to Bjorn Helgaas   unicore32/PCI: move <asm-generic/pci-bridge.h> include to asm/pci.h   sparc/PCI: convert devtree and arch-probed bus addresses to resource   powerpc/PCI: allow reallocation on PA Semi   powerpc/PCI: convert devtree bus addresses to resource   powerpc/PCI: compute I/O space bus-to-resource offset consistently   arm/PCI: don't export pci_flags   PCI: fix bridge I/O window bus-to-resource conversion   x86/PCI: add spinlock held check to 'pcibios_fwaddrmap_lookup()'   PCI / PCIe: Introduce command line option to disable ARI   PCI: make acpihp use __pci_remove_bus_device instead   PCI: export __pci_remove_bus_device   PCI: Rename pci_remove_behind_bridge to pci_stop_and_remove_behind_bridge   PCI: Rename pci_remove_bus_device to pci_stop_and_remove_bus_device   PCI: print out PCI device info along with duration   PCI: Move "pci reassigndev resource alignment" out of quirks.c   PCI: Use class for quirk for usb host controller fixup   PCI: Use class for quirk for ti816x class fixup   PCI: Use class for quirk for intel e100 interrupt fixup   ...
f | syscalls.c | s | 3.9K | 124 | Christoph Hellwig | hch@lst.de | 1268437952 |  | Add generic sys_olduname()  Add generic implementations of the old and really old uname system calls. Note that sh only implements sys_olduname but not sys_oldolduname, but I'm not going to bother with another ifdef for that special case.  m32r implemented an old uname but never wired it up, so kill it, too.  Signed-off-by: Christoph Hellwig <hch@lst.de> Cc: Ralf Baechle <ralf@linux-mips.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mundt <lethal@linux-sh.org> Cc: Jeff Dike <jdike@addtoit.com> Cc: Hirokazu Takata <takata@linux-m32r.org> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Ingo Molnar <mingo@elte.hu> Cc: H. Peter Anvin <hpa@zytor.com> Cc: Al Viro <viro@zeniv.linux.org.uk> Cc: Arnd Bergmann <arnd@arndb.de> Cc: Heiko Carstens <heiko.carstens@de.ibm.com> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: "Luck, Tony" <tony.luck@intel.com> Cc: James Morris <jmorris@namei.org> Cc: Andreas Schwab <schwab@linux-m68k.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | vio.c | s | 47K | 1446 | Kent Yoder | key@linux.vnet.ibm.com | 1336956549 |  | powerpc/pseries: Add PFO support to the VIO bus  Add support for the Platform Facilities Option (PFO) to the VIO bus. These devices have a separate root node in OpenFirmware which requires additional parsing to map into the existing VIO device structure fields. This adds the interface for PFO device drivers to make synchronous hypervisor calls.  Signed-off-by: Robert Jennings <rcj@linux.vnet.ibm.com> Signed-off-by: Kent Yoder <key@linux.vnet.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | cpu_setup_fsl_booke.S | g | 2.2K |  | Scott Wood | scottwood@freescale.com | 1333878873 |  | KVM: PPC: e500mc support  Add processor support for e500mc, using hardware virtualization support (GS-mode).  Current issues include:  - No support for external proxy (coreint) interrupt mode in the guest.  Includes work by Ashish Kalra <Ashish.Kalra@freescale.com>, Varun Sethi <Varun.Sethi@freescale.com>, and Liu Yu <yu.liu@freescale.com>.  Signed-off-by: Scott Wood <scottwood@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | cpu_setup_a2.S | g | 3.1K |  | Jimi Xenidis | jimix@pobox.com | 1322190688 |  | powerpc/book3e: Add ICSWX/ACOP support to Book3e cores like A2  ICSWX is also used by the A2 processor to access coprocessors, although not all "chips" that contain A2s have coprocessors.  Signed-off-by: Jimi Xenidis <jimix@pobox.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | proc_powerpc.c | s | 3.0K | 103 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | module_32.c | s | 8.6K | 268 | Steffen Rumler | steffen.rumler.ext@nsn.com | 1339149548 |  | powerpc: Fix kernel panic during kernel module load  This fixes a problem which can causes kernel oopses while loading a kernel module.  According to the PowerPC EABI specification, GPR r11 is assigned the dedicated function to point to the previous stack frame. In the powerpc-specific kernel module loader, do_plt_call() (in arch/powerpc/kernel/module_32.c), GPR r11 is also used to generate trampoline code.  This combination crashes the kernel, in the case where the compiler chooses to use a helper function for saving GPRs on entry, and the module loader has placed the .init.text section far away from the .text section, meaning that it has to generate a trampoline for functions in the .init.text section to call the GPR save helper. Because the trampoline trashes r11, references to the stack frame using r11 can cause an oops.  The fix just uses GPR r12 instead of GPR r11 for generating the trampoline code.  According to the statements from Freescale, this is safe from an EABI perspective.  I've tested the fix for kernel 2.6.33 on MPC8541.  Cc: stable@vger.kernel.org Signed-off-by: Steffen Rumler <steffen.rumler.ext@nsn.com> [paulus@samba.org: reworded the description] Signed-off-by: Paul Mackerras <paulus@samba.org>
f | prom_parse.c | s | 883B | 26 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: remove non-required uses of include <linux/module.h>  None of the files touched here are modules, and they are not exporting any symbols either -- so there is no need to be including the module.h.  Builds of all the files remains successful.  Even kernel/module.c does not need to include it, since it includes linux/moduleloader.h instead.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | sys_ppc32.c | s | 20K | 531 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | cpu_setup_pa6t.S | g | 1.2K |  | Olof Johansson | olof@lixom.net | 1177414309 |  | [POWERPC] pasemi: Enable one more hid bit  Minor HID change. Firmware can't know that we want this set so we have to set it in the kernel.  Signed-off-by: Olof Johansson <olof@lixom.net> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | smp.c | s | 15K | 592 | Thomas Gleixner | tglx@linutronix.de | 1335434770 |  | powerpc: Use generic idle thread allocation  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Rusty Russell <rusty@rustcorp.com.au> Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Cc: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Link: http://lkml.kernel.org/r/20120420124557.311212868@linutronix.de
f | misc.S | g | 2.3K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331250899 |  | powerpc: Remove legacy iSeries bits from assembly files  This removes the various bits of assembly in the kernel entry, exception handling and SLB management code that were specific to running under the legacy iSeries hypervisor which is no longer supported.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | ppc_save_regs.S | g | 2.1K |  | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | smp-tbsync.c | s | 3.1K | 138 | Arun Sharma | asharma@fb.com | 1311724187 |  | atomic: use <linux/atomic.h>  This allows us to move duplicated code in <asm/atomic.h> (atomic_inc_not_zero() for now) to <linux/atomic.h>  Signed-off-by: Arun Sharma <asharma@fb.com> Reviewed-by: Eric Dumazet <eric.dumazet@gmail.com> Cc: Ingo Molnar <mingo@elte.hu> Cc: David Miller <davem@davemloft.net> Cc: Eric Dumazet <eric.dumazet@gmail.com> Acked-by: Mike Frysinger <vapier@gentoo.org> Signed-off-by: Andrew Morton <akpm@linux-foundation.org> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | misc_32.S | g | 25K |  | Suzuki Poulose | suzuki@in.ibm.com | 1336048823 |  | powerpc/47x: Kernel support for KEXEC  This patch adds support for creating 1:1 mapping for the PPC_47x during a KEXEC. The implementation is similar to that of the PPC440x which is described here :  	http://patchwork.ozlabs.org/patch/104323/  PPC_47x MMU :  The 47x uses Unified TLB 1024 entries, with 4-way associative mapping (4 x 256 entries). The index to be used is calculated by the MMU by hashing the PID, EPN and TS. The software can choose to specify the way by setting bit 0(enable way select) and the way in bits 1-2 in the TLB Word 0.  Implementation:  The patch erases all the UTLB entries which includes the tlb covering the mapping for our code. The shadow TLB caches the mapping for the running code which helps us to continue the execution until we do isync/rfi. We then create a tmp mapping for the current code in the other address space (TS) and switch to it.  Then we create a 1:1 mapping(EPN=RPN) for 0-2GiB in the original address space and switch to the new mapping.  TODO: Add SMP support.  Signed-off-by: Suzuki K. Poulose <suzuki@in.ibm.com> Signed-off-by: Josh Boyer <jwboyer@gmail.com>
f | sysfs.c | s | 16K | 552 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | dbell.c | s | 1.1K | 42 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331259906 |  | powerpc: Rework lazy-interrupt handling  The current implementation of lazy interrupts handling has some issues that this tries to address.  We don't do the various workarounds we need to do when re-enabling interrupts in some cases such as when returning from an interrupt and thus we may still lose or get delayed decrementer or doorbell interrupts.  The current scheme also makes it much harder to handle the external "edge" interrupts provided by some BookE processors when using the EPR facility (External Proxy) and the Freescale Hypervisor.  Additionally, we tend to keep interrupts hard disabled in a number of cases, such as decrementer interrupts, external interrupts, or when a masked decrementer interrupt is pending. This is sub-optimal.  This is an attempt at fixing it all in one go by reworking the way we do the lazy interrupt disabling from the ground up.  The base idea is to replace the "hard_enabled" field with a "irq_happened" field in which we store a bit mask of what interrupt occurred while soft-disabled.  When re-enabling, either via arch_local_irq_restore() or when returning from an interrupt, we can now decide what to do by testing bits in that field.  We then implement replaying of the missed interrupts either by re-using the existing exception frame (in exception exit case) or via the creation of a new one from an assembly trampoline (in the arch_local_irq_enable case).  This removes the need to play with the decrementer to try to create fake interrupts, among others.  In addition, this adds a few refinements:   - We no longer  hard disable decrementer interrupts that occur while soft-disabled. We now simply bump the decrementer back to max (on BookS) or leave it stopped (on BookE) and continue with hard interrupts enabled, which means that we'll potentially get better sample quality from performance monitor interrupts.   - Timer, decrementer and doorbell interrupts now hard-enable shortly after removing the source of the interrupt, which means they no longer run entirely hard disabled. Again, this will improve perf sample quality.   - On Book3E 64-bit, we now make the performance monitor interrupt act as an NMI like Book3S (the necessary C code for that to work appear to already be present in the FSL perf code, notably calling nmi_enter instead of irq_enter). (This also fixes a bug where BookE perfmon interrupts could clobber r14 ... oops)   - We could make "masked" decrementer interrupts act as NMIs when doing timer-based perf sampling to improve the sample quality.  Signed-off-by-yet: Benjamin Herrenschmidt <benh@kernel.crashing.org> ---  v2:  - Add hard-enable to decrementer, timer and doorbells - Fix CR clobber in masked irq handling on BookE - Make embedded perf interrupt act as an NMI - Add a PACA_HAPPENED_EE_EDGE for use by FSL if they want   to retrigger an interrupt without preventing hard-enable  v3:   - Fix or vs. ori bug on Book3E  - Fix enabling of interrupts for some exceptions on Book3E  v4:   - Fix resend of doorbells on return from interrupt on Book3E  v5:   - Rebased on top of my latest series, which involves some significant rework of some aspects of the patch.  v6:  - 32-bit compile fix  - more compile fixes with various .config combos  - factor out the asm code to soft-disable interrupts  - remove the C wrapper around preempt_schedule_irq  v7:  - Fix a bug with hard irq state tracking on native power7
f | tau_6xx.c | s | 6.2K | 225 | André Goddard Rosa | andre.goddard@gmail.com | 1259937595 |  | tree-wide: fix assorted typos all over the place  That is "success", "unknown", "through", "performance", "[re||un]mapping" , "access", "default", "reasonable", "[con]currently", "temperature" , "channel", "[un]used", "application", "example","hierarchy", "therefore" , "[over||under]flow", "contiguous", "threshold", "enough" and others.  Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | rtas.c | s | 25K | 899 | Linus Torvalds | torvalds@linux-foundation.org | 1332975501 |  | 
f | process.c | s | 32K | 1161 | Linus Torvalds | torvalds@linux-foundation.org | 1337795947 |  | Merge branch 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip  Pull fpu state cleanups from Ingo Molnar:  "This tree streamlines further aspects of FPU handling by eliminating   the prepare_to_copy() complication and moving that logic to   arch_dup_task_struct().    It also fixes the FPU dumps in threaded core dumps, removes and old   (and now invalid) assumption plus micro-optimizes the exit path by   avoiding an FPU save for dead tasks."  Fixed up trivial add-add conflict in arch/sh/kernel/process.c that came in because we now do the FPU handling in arch_dup_task_struct() rather than the legacy (and now gone) prepare_to_copy().  * 'x86-fpu-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:   x86, fpu: drop the fpu state during thread exit   x86, xsave: remove thread_has_fpu() bug check in __sanitize_i387_state()   coredump: ensure the fpu state is flushed for proper multi-threaded core dump   fork: move the real prepare_to_copy() users to arch_dup_task_struct()
f | idle_e500.S | g | 2.4K |  | Bharat Bhushan | r65777@freescale.com | 1318393404 |  | powerpc: e500mc: Fix: use CONFIG_PPC_E500MC in idle_e500.S  It is wrongly using undefined CONFIG_E500MC.  Signed-off-by: Bharat Bhushan <bharat.bhushan@freescale.com> Signed-off-by: Kumar Gala <galak@kernel.crashing.org>
f | l2cr_6xx.S | g | 10K |  | Lucas De Marchi | lucas.demarchi@profusion.mobi | 1301581583 |  | Fix common misspellings  Fixes generated by 'codespell' and manually reviewed.  Signed-off-by: Lucas De Marchi <lucas.demarchi@profusion.mobi>
f | ibmebus.c | s | 16K | 610 | Linus Torvalds | torvalds@linux-foundation.org | 1333584823 |  | Merge branch 'for-linus' of git://git.linaro.org/people/mszyprowski/linux-dma-mapping  Pull DMA mapping branch from Marek Szyprowski:  "Short summary for the whole series:    A few limitations have been identified in the current dma-mapping   design and its implementations for various architectures.  There exist   more than one function for allocating and freeing the buffers:   currently these 3 are used dma_{alloc, free}_coherent,   dma_{alloc,free}_writecombine, dma_{alloc,free}_noncoherent.    For most of the systems these calls are almost equivalent and can be   interchanged.  For others, especially the truly non-coherent ones   (like ARM), the difference can be easily noticed in overall driver   performance.  Sadly not all architectures provide implementations for   all of them, so the drivers might need to be adapted and cannot be   easily shared between different architectures.  The provided patches   unify all these functions and hide the differences under the already   existing dma attributes concept.  The thread with more references is   available here:      http://www.spinics.net/lists/linux-sh/msg09777.html    These patches are also a prerequisite for unifying DMA-mapping   implementation on ARM architecture with the common one provided by   dma_map_ops structure and extending it with IOMMU support.  More   information is available in the following thread:      http://thread.gmane.org/gmane.linux.kernel.cross-arch/12819    More works on dma-mapping framework are planned, especially in the   area of buffer sharing and managing the shared mappings (together with   the recently introduced dma_buf interface: commit d15bd7ee445d   "dma-buf: Introduce dma buffer sharing mechanism").    The patches in the current set introduce a new alloc/free methods   (with support for memory attributes) in dma_map_ops structure, which   will later replace dma_alloc_coherent and dma_alloc_writecombine   functions."  People finally started piping up with support for merging this, so I'm merging it as the last of the pending stuff from the merge window. Looks like pohmelfs is going to wait for 3.5 and more external support for merging.  * 'for-linus' of git://git.linaro.org/people/mszyprowski/linux-dma-mapping:   common: DMA-mapping: add NON-CONSISTENT attribute   common: DMA-mapping: add WRITE_COMBINE attribute   common: dma-mapping: introduce mmap method   common: dma-mapping: remove old alloc_coherent and free_coherent methods   Hexagon: adapt for dma_map_ops changes   Unicore32: adapt for dma_map_ops changes   Microblaze: adapt for dma_map_ops changes   SH: adapt for dma_map_ops changes   Alpha: adapt for dma_map_ops changes   SPARC: adapt for dma_map_ops changes   PowerPC: adapt for dma_map_ops changes   MIPS: adapt for dma_map_ops changes   X86 & IA64: adapt for dma_map_ops changes   common: dma-mapping: introduce generic alloc() and free() methods
f | head_32.S | g | 34K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331250908 |  | powerpc: Call do_page_fault() with interrupts off  We currently turn interrupts back to their previous state before calling do_page_fault(). This can be annoying when debugging as a bad fault will potentially have lost some processor state before getting into the debugger.  We also end up calling some generic code with interrupts enabled such as notify_page_fault() with interrupts enabled, which could be unexpected.  This changes our code to behave more like other architectures, and make the assembly entry code call into do_page_faults() with interrupts disabled. They are conditionally re-enabled from within do_page_fault() in the same spot x86 does it.  While there, add the might_sleep() test in the case of a successful trylock of the mmap semaphore, again like x86.  Also fix a bug in the existing assembly where r12 (_MSR) could get clobbered by C calls (the DTL accounting in the exception common macro and DISABLE_INTS) in some cases.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> ---  v2. Add the r12 clobber fix
f | firmware.c | s | 704B | 19 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103841 |  | powerpc: fix implicit use of cache.h in kernel/firmware.c  This file only needs export.h to get EXPORT_SYMBOL, but in doing so, it uncovers an implicit use of linux/cache.h as follows:   CC      arch/powerpc/kernel/firmware.o arch/powerpc/kernel/firmware.c:20: error: expected '=', ',', ';', 'asm' or '__attribute__' before '__read_mostly' arch/powerpc/kernel/firmware.c:21: error: expected '=', ',', ';', 'asm' or '__attribute__' before '__used' make[2]: *** [arch/powerpc/kernel/firmware.o] Error 1  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | cacheinfo.c | s | 19K | 652 | Kay Sievers | kay.sievers@vrfy.org | 1324506582 |  | cpu: convert 'cpu' and 'machinecheck' sysdev_class to a regular subsystem  This moves the 'cpu sysdev_class' over to a regular 'cpu' subsystem and converts the devices to regular devices. The sysdev drivers are implemented as subsystem interfaces now.  After all sysdev classes are ported to regular driver core entities, the sysdev implementation will be entirely removed from the kernel.  Userspace relies on events and generic sysfs subsystem infrastructure from sysdev devices, which are made available with this conversion.  Cc: Haavard Skinnemoen <hskinnemoen@gmail.com> Cc: Hans-Christian Egtvedt <egtvedt@samfundet.no> Cc: Tony Luck <tony.luck@intel.com> Cc: Fenghua Yu <fenghua.yu@intel.com> Cc: Arnd Bergmann <arnd@arndb.de> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Paul Mackerras <paulus@samba.org> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: Heiko Carstens <heiko.carstens@de.ibm.com> Cc: Paul Mundt <lethal@linux-sh.org> Cc: "David S. Miller" <davem@davemloft.net> Cc: Chris Metcalf <cmetcalf@tilera.com> Cc: Thomas Gleixner <tglx@linutronix.de> Cc: Ingo Molnar <mingo@redhat.com> Cc: "H. Peter Anvin" <hpa@zytor.com> Cc: Borislav Petkov <bp@amd64.org> Cc: Tigran Aivazian <tigran@aivazian.fsnet.co.uk> Cc: Len Brown <lenb@kernel.org> Cc: Zhang Rui <rui.zhang@intel.com> Cc: Dave Jones <davej@redhat.com> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Russell King <rmk+kernel@arm.linux.org.uk> Cc: Andrew Morton <akpm@linux-foundation.org> Cc: Arjan van de Ven <arjan@linux.intel.com> Cc: "Rafael J. Wysocki" <rjw@sisk.pl> Cc: "Srivatsa S. Bhat" <srivatsa.bhat@linux.vnet.ibm.com> Signed-off-by: Kay Sievers <kay.sievers@vrfy.org> Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
f | udbg_16550.c | s | 7.4K | 302 | Jack Miller | jack@codezen.org | 1304652761 |  | powerpc: Add early debug for WSP platforms  Signed-off-by: Jack Miller <jack@codezen.org> Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | fpu.S | g | 4.4K |  | Stephen Rothwell | sfr@canb.auug.org.au | 1291006103 |  | powerpc: Remove second definition of STACK_FRAME_OVERHEAD  Since STACK_FRAME_OVERHEAD is defined in asm/ptrace.h and that is ASSEMBER safe, we can just include that instead of going via asm-offsets.h.  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | io.c | s | 4.2K | 187 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: various straight conversions from module.h --> export.h  All these files were including module.h just for the basic EXPORT_SYMBOL infrastructure.  We can shift them off to the export.h header which is a way smaller footprint and thus realize some compile time gains.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | cacheinfo.h | s | 240B | 6 | Nathan Lynch | ntl@pobox.com | 1231392310 |  | powerpc: Rewrite sysfs processor cache info code  The current code for providing processor cache information in sysfs has the following deficiencies: - several complex functions that are hard to understand - implicit recursion (cache_desc_release -> kobject_put -> cache_desc_release) - explicit recursion (create_cache_index_info) - use of two per-cpu arrays when one would suffice - duplication of work on systems where CPUs share cache  Also, when I looked at implementing support for a shared_cpu_map attribute, it was pretty much impossible to handle hotplug without checking every single online CPU's cache_desc list and fixing things up... not that this is a hot path, but it would have introduced O(n^2)-ish behavior during boot.  Addressing this involved rethinking the core data structures used, which didn't lend itself to an incremental approach.  This implementation maintains a "forest" (potentially more than one tree) of cache objects which reflects the system's cache topology. Cache objects are instantiated as needed as CPUs come online.  A per-cpu array is used mainly for sysfs-related bookkeeping; the objects in the array just point to the appropriate points in the forest.  This maintains compatibility with the existing code and includes some enhancements: - Implement the shared_cpu_map attribute, which is essential for   enabling userspace to discover the system's overall cache topology. - Use cache-block-size properties if cache-line-size is not available.  I chose to place this implementation in a new file since it would have roughly doubled the size of sysfs.c, which is already kind of messy.  Signed-off-by: Nathan Lynch <ntl@pobox.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | crash.c | s | 8.4K | 306 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
f | head_64.S | g | 19K |  | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1331259906 |  | powerpc: Rework lazy-interrupt handling  The current implementation of lazy interrupts handling has some issues that this tries to address.  We don't do the various workarounds we need to do when re-enabling interrupts in some cases such as when returning from an interrupt and thus we may still lose or get delayed decrementer or doorbell interrupts.  The current scheme also makes it much harder to handle the external "edge" interrupts provided by some BookE processors when using the EPR facility (External Proxy) and the Freescale Hypervisor.  Additionally, we tend to keep interrupts hard disabled in a number of cases, such as decrementer interrupts, external interrupts, or when a masked decrementer interrupt is pending. This is sub-optimal.  This is an attempt at fixing it all in one go by reworking the way we do the lazy interrupt disabling from the ground up.  The base idea is to replace the "hard_enabled" field with a "irq_happened" field in which we store a bit mask of what interrupt occurred while soft-disabled.  When re-enabling, either via arch_local_irq_restore() or when returning from an interrupt, we can now decide what to do by testing bits in that field.  We then implement replaying of the missed interrupts either by re-using the existing exception frame (in exception exit case) or via the creation of a new one from an assembly trampoline (in the arch_local_irq_enable case).  This removes the need to play with the decrementer to try to create fake interrupts, among others.  In addition, this adds a few refinements:   - We no longer  hard disable decrementer interrupts that occur while soft-disabled. We now simply bump the decrementer back to max (on BookS) or leave it stopped (on BookE) and continue with hard interrupts enabled, which means that we'll potentially get better sample quality from performance monitor interrupts.   - Timer, decrementer and doorbell interrupts now hard-enable shortly after removing the source of the interrupt, which means they no longer run entirely hard disabled. Again, this will improve perf sample quality.   - On Book3E 64-bit, we now make the performance monitor interrupt act as an NMI like Book3S (the necessary C code for that to work appear to already be present in the FSL perf code, notably calling nmi_enter instead of irq_enter). (This also fixes a bug where BookE perfmon interrupts could clobber r14 ... oops)   - We could make "masked" decrementer interrupts act as NMIs when doing timer-based perf sampling to improve the sample quality.  Signed-off-by-yet: Benjamin Herrenschmidt <benh@kernel.crashing.org> ---  v2:  - Add hard-enable to decrementer, timer and doorbells - Fix CR clobber in masked irq handling on BookE - Make embedded perf interrupt act as an NMI - Add a PACA_HAPPENED_EE_EDGE for use by FSL if they want   to retrigger an interrupt without preventing hard-enable  v3:   - Fix or vs. ori bug on Book3E  - Fix enabling of interrupts for some exceptions on Book3E  v4:   - Fix resend of doorbells on return from interrupt on Book3E  v5:   - Rebased on top of my latest series, which involves some significant rework of some aspects of the patch.  v6:  - 32-bit compile fix  - more compile fixes with various .config combos  - factor out the asm code to soft-disable interrupts  - remove the C wrapper around preempt_schedule_irq  v7:  - Fix a bug with hard irq state tracking on native power7
f | btext.c | s | 37K | 862 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103844 |  | powerpc: various straight conversions from module.h --> export.h  All these files were including module.h just for the basic EXPORT_SYMBOL infrastructure.  We can shift them off to the export.h header which is a way smaller footprint and thus realize some compile time gains.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | msi.c | s | 1.1K | 35 | Jesse Barnes | jbarnes@hobbes.lan | 1237996469 |  | powerpc/PCI: include pci.h in powerpc MSI implementation  This file uses PCI MSI defines and so needs pci.h.  Tested-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
f | signal.h | s | 1.6K | 42 | Al Viro | viro@zeniv.linux.org.uk | 1338569931 |  | powerpc: get rid of restore_sigmask()  ... it's just a call of set_current_blocked() now  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | signal.c | s | 4.3K | 149 | Al Viro | viro@zeniv.linux.org.uk | 1338569932 |  | new helper: signal_delivered()  Does block_sigmask() + tracehook_signal_handler();  called when sigframe has been successfully built.  All architectures converted to it; block_sigmask() itself is gone now (merged into this one).  I'm still not too happy with the signature, but that's a separate story (IMO we need a structure that would contain signal number + siginfo + k_sigaction, so that get_signal_to_deliver() would fill one, signal_delivered(), handle_signal() and probably setup...frame() - take one).  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | idle.c | s | 3.3K | 130 | Thomas Gleixner | tglx@linutronix.de | 1336473307 |  | powerpc: Remove unused cpu_idle_wait()  cpuidle uses a generic function now. Remove the cruft.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Link: http://lkml.kernel.org/r/20120507175652.330322737@linutronix.de
f | cpu_setup_ppc970.S | g | 4.1K |  | Paul Mackerras | paulus@samba.org | 1310465818 |  | powerpc, KVM: Split HVMODE_206 cpu feature bit into separate HV and architecture bits  This replaces the single CPU_FTR_HVMODE_206 bit with two bits, one to indicate that we have a usable hypervisor mode, and another to indicate that the processor conforms to PowerISA version 2.06.  We also add another bit to indicate that the processor conforms to ISA version 2.01 and set that for PPC970 and derivatives.  Some PPC970 chips (specifically those in Apple machines) have a hypervisor mode in that MSR[HV] is always 1, but the hypervisor mode is not useful in the sense that there is no way to run any code in supervisor mode (HV=0 PR=0).  On these processors, the LPES0 and LPES1 bits in HID4 are always 0, and we use that as a way of detecting that hypervisor mode is not useful.  Where we have a feature section in assembly code around code that only applies on POWER7 in hypervisor mode, we use a construct like  END_FTR_SECTION_IFSET(CPU_FTR_HVMODE || CPU_FTR_ARCH_206)  The definition of END_FTR_SECTION_IFSET is such that the code will be enabled (not overwritten with nops) only if all bits in the provided mask are set.  Note that the CPU feature check in __tlbie() only needs to check the ARCH_206 bit, not the HVMODE bit, because __tlbie() can only get called if we are running bare-metal, i.e. in hypervisor mode.  Signed-off-by: Paul Mackerras <paulus@samba.org> Signed-off-by: Alexander Graf <agraf@suse.de>
f | fadump.c | s | 35K | 1130 | Stephen Rothwell | sfr@canb.auug.org.au | 1333339203 |  | powerpc: Fix fallout from system.h split up  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | dma-swiotlb.c | s | 2.9K | 89 | Andrzej Pietrasiewicz | andrzej.p@samsung.com | 1332945393 |  | PowerPC: adapt for dma_map_ops changes  Adapt core PowerPC architecture code for dma_map_ops changes: replace alloc/free_coherent with generic alloc/free methods.  Signed-off-by: Andrzej Pietrasiewicz <andrzej.p@samsung.com> [added missing changes to arch/powerpc/kernel/vio.c] Signed-off-by: Kyungmin Park <kyungmin.park@samsung.com> Signed-off-by: Marek Szyprowski <m.szyprowski@samsung.com> Reviewed-by: David Gibson <david@gibson.dropbear.id.au> Reviewed-by: Arnd Bergmann <arnd@arndb.de>
f | ftrace.c | s | 14K | 495 | Ian Munsie | imunsie@au.ibm.com | 1306381137 |  | powerpc/ftrace: Implement raw syscall tracepoints on PowerPC  This patch implements the raw syscall tracepoints on PowerPC and exports them for ftrace syscalls to use.  To minimise reworking existing code, I slightly re-ordered the thread info flags such that the new TIF_SYSCALL_TRACEPOINT bit would still fit within the 16 bits of the andi. instruction's UI field. The instructions in question are in /arch/powerpc/kernel/entry_{32,64}.S to and the _TIF_SYSCALL_T_OR_A with the thread flags to see if system call tracing is enabled.  In the case of 64bit PowerPC, arch_syscall_addr and arch_syscall_match_sym_name are overridden to allow ftrace syscalls to work given the unusual system call table structure and symbol names that start with a period.  Signed-off-by: Ian Munsie <imunsie@au1.ibm.com> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | systbl.S | g | 1.5K |  | Stephen Rothwell | sfr@canb.auug.org.au | 1192077407 |  | [POWERPC] Align the sys_call_table  Our _GLOBAL macro does a ".align 2" so the alignment is fine for 32 bit, but on 64 bit it is possible for it to end up only 4 byte aligned. I don't know if it matters, but it can't hurt to 8 byte align it.  It also means that when we build with --emit_relocs, none of our 64 bit relocations are to misaligned places.  Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au> Signed-off-by: Paul Mackerras <paulus@samba.org>
f | kvm.c | s | 20K | 693 | Liu Yu-B13201 | Yu.Liu@freescale.com | 1330951954 |  | KVM: PPC: Avoid patching paravirt template code  Currently we patch the whole code include paravirt template code. This isn't safe for scratch area and has impact to performance.  Signed-off-by: Liu Yu <yu.liu@freescale.com> Signed-off-by: Alexander Graf <agraf@suse.de> Signed-off-by: Avi Kivity <avi@redhat.com>
f | exceptions-64s.S | g | 26K |  | Linus Torvalds | torvalds@linux-foundation.org | 1337901450 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm  Pull KVM changes from Avi Kivity:  "Changes include additional instruction emulation, page-crossing MMIO,   faster dirty logging, preventing the watchdog from killing a stopped   guest, module autoload, a new MSI ABI, and some minor optimizations   and fixes.  Outside x86 we have a small s390 and a very large ppc   update.    Regarding the new (for kvm) rebaseless workflow, some of the patches   that were merged before we switch trees had to be rebased, while   others are true pulls.  In either case the signoffs should be correct   now."  Fix up trivial conflicts in Documentation/feature-removal-schedule.txt arch/powerpc/kvm/book3s_segment.S and arch/x86/include/asm/kvm_para.h.  I suspect the kvm_para.h resolution ends up doing the "do I have cpuid" check effectively twice (it was done differently in two different commits), but better safe than sorry ;)  * 'next' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (125 commits)   KVM: make asm-generic/kvm_para.h have an ifdef __KERNEL__ block   KVM: s390: onereg for timer related registers   KVM: s390: epoch difference and TOD programmable field   KVM: s390: KVM_GET/SET_ONEREG for s390   KVM: s390: add capability indicating COW support   KVM: Fix mmu_reload() clash with nested vmx event injection   KVM: MMU: Don't use RCU for lockless shadow walking   KVM: VMX: Optimize %ds, %es reload   KVM: VMX: Fix %ds/%es clobber   KVM: x86 emulator: convert bsf/bsr instructions to emulate_2op_SrcV_nobyte()   KVM: VMX: unlike vmcs on fail path   KVM: PPC: Emulator: clean up SPR reads and writes   KVM: PPC: Emulator: clean up instruction parsing   kvm/powerpc: Add new ioctl to retreive server MMU infos   kvm/book3s: Make kernel emulated H_PUT_TCE available for "PR" KVM   KVM: PPC: bookehv: Fix r8/r13 storing in level exception handler   KVM: PPC: Book3S: Enable IRQs during exit handling   KVM: PPC: Fix PR KVM on POWER7 bare metal   KVM: PPC: Fix stbux emulation   KVM: PPC: bookehv: Use lwz/stw instead of PPC_LL/PPC_STL for 32-bit fields   ...
f | lparcfg.c | s | 19K | 603 | David Howells | dhowells@redhat.com | 1332955802 |  | Disintegrate asm/system.h for PowerPC  Disintegrate asm/system.h for PowerPC.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Benjamin Herrenschmidt <benh@kernel.crashing.org> cc: linuxppc-dev@lists.ozlabs.org
