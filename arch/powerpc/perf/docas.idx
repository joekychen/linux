f | power4-pmu.c | s | 16K | 576 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1332894804 |  | powerpc/perf: Fix instruction address sampling on 970 and Power4  970 and Power4 don't support "continuous sampling" which means that when we aren't in marked instruction sampling mode (marked events), SIAR isn't updated with the last instruction sampled before the perf interrupt. On those processors, we must thus use the exception SRR0 value as the sampled instruction pointer.  Those processors also don't support the SIPR and SIHV bits in MMCRA which means we need some kind of heuristic to decide if SIAR values represent kernel or user addresses.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | Makefile | g | 478B |  | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | mpc7450-pmu.c | s | 10K | 385 | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | e500-pmu.c | s | 3.6K | 120 | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | core-book3s.c | s | 35K | 1303 | Robert Richter | robert.richter@amd.com | 1336569792 |  | perf: Pass last sampling period to perf_sample_data_init()  We always need to pass the last sample period to perf_sample_data_init(), otherwise the event distribution will be wrong. Thus, modifiyng the function interface with the required period as argument. So basically a pattern like this:          perf_sample_data_init(&data, ~0ULL);         data.period = event->hw.last_period;  will now be like that:          perf_sample_data_init(&data, ~0ULL, event->hw.last_period);  Avoids unininitialized data.period and simplifies code.  Signed-off-by: Robert Richter <robert.richter@amd.com> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1333390758-10893-3-git-send-email-robert.richter@amd.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | ppc970-pmu.c | s | 13K | 470 | Benjamin Herrenschmidt | benh@kernel.crashing.org | 1332894804 |  | powerpc/perf: Fix instruction address sampling on 970 and Power4  970 and Power4 don't support "continuous sampling" which means that when we aren't in marked instruction sampling mode (marked events), SIAR isn't updated with the last instruction sampled before the perf interrupt. On those processors, we must thus use the exception SRR0 value as the sampled instruction pointer.  Those processors also don't support the SIPR and SIHV bits in MMCRA which means we need some kind of heuristic to decide if SIAR values represent kernel or user addresses.  Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | power5-pmu.c | s | 16K | 590 | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | power5+-pmu.c | s | 18K | 643 | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | core-fsl-emb.c | s | 14K | 579 | Robert Richter | robert.richter@amd.com | 1336569792 |  | perf: Pass last sampling period to perf_sample_data_init()  We always need to pass the last sample period to perf_sample_data_init(), otherwise the event distribution will be wrong. Thus, modifiyng the function interface with the required period as argument. So basically a pattern like this:          perf_sample_data_init(&data, ~0ULL);         data.period = event->hw.last_period;  will now be like that:          perf_sample_data_init(&data, ~0ULL, event->hw.last_period);  Avoids unininitialized data.period and simplifies code.  Signed-off-by: Robert Richter <robert.richter@amd.com> Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Link: http://lkml.kernel.org/r/1333390758-10893-3-git-send-email-robert.richter@amd.com Signed-off-by: Ingo Molnar <mingo@kernel.org>
f | power7-pmu.c | s | 9.6K | 349 | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | callchain.c | s | 12K | 431 | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
f | power6-pmu.c | s | 15K | 517 | Michael Ellerman | michael@ellerman.id.au | 1329954604 |  | powerpc/perf: Move perf core & PMU code into a subdirectory  The perf code has grown a lot since it started, and is big enough to warrant its own subdirectory. For reference it's ~60% bigger than the oprofile code. It declutters the kernel directory, makes it simpler to grep for "just perf stuff", and allows us to shorten some filenames.  While we're at it, make it more obvious that we have two implementations of the core perf logic. One for (roughly) Book3S CPUs, which was the original implementation, and the other for Freescale embedded CPUs.  Signed-off-by: Michael Ellerman <michael@ellerman.id.au> Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
