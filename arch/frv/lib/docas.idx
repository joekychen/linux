f | Makefile | g | 244B |  | Peter Zijlstra | a.p.zijlstra@chello.nl | 1287424730 |  | irq_work: Add generic hardirq context callbacks  Provide a mechanism that allows running code in IRQ context. It is most useful for NMI code that needs to interact with the rest of the system -- like wakeup a task to drain buffers.  Perf currently has such a mechanism, so extract that and provide it as a generic feature, independent of perf so that others may also benefit.  The IRQ context callback is generated through self-IPIs where possible, or on architectures like powerpc the decrementer (the built-in timer facility) is set to generate an interrupt immediately.  Architectures that don't have anything like this get to do with a callback from the timer tick. These architectures can call irq_work_run() at the tail of any IRQ handlers that might enqueue such work (like the perf IRQ handler) to avoid undue latencies in processing the work.  Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl> Acked-by: Kyle McMartin <kyle@mcmartin.ca> Acked-by: Martin Schwidefsky <schwidefsky@de.ibm.com> [ various fixes ] Signed-off-by: Huang Ying <ying.huang@intel.com> LKML-Reference: <1287036094.7768.291.camel@yhuang-dev> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | atomic-ops.S | g | 5.2K |  | David Howells | dhowells@redhat.com | 1246502289 |  | FRV: Implement atomic64_t  Implement atomic64_t and its ops for FRV.  Tested with the following patch:  	diff --git a/arch/frv/kernel/setup.c b/arch/frv/kernel/setup.c 	index 55e4fab..086d50d 100644 	--- a/arch/frv/kernel/setup.c 	+++ b/arch/frv/kernel/setup.c 	@@ -746,6 +746,52 @@ static void __init parse_cmdline_early(char *cmdline)  	 } /* end parse_cmdline_early() */  	+static atomic64_t xxx; 	+ 	+static void test_atomic64(void) 	+{ 	+	atomic64_set(&xxx, 0x12300000023LL); 	+ 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x12300000023LL); 	+	mb(); 	+	if (atomic64_inc_return(&xxx) != 0x12300000024LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x12300000024LL); 	+	mb(); 	+	if (atomic64_sub_return(0x36900000050LL, &xxx) != -0x2460000002cLL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != -0x2460000002cLL); 	+	mb(); 	+	if (atomic64_dec_return(&xxx) != -0x2460000002dLL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != -0x2460000002dLL); 	+	mb(); 	+	if (atomic64_add_return(0x36800000001LL, &xxx) != 0x121ffffffd4LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x121ffffffd4LL); 	+	mb(); 	+	if (atomic64_cmpxchg(&xxx, 0x123456789abcdefLL, 0x121ffffffd4LL) != 0x121ffffffd4LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x121ffffffd4LL); 	+	mb(); 	+	if (atomic64_cmpxchg(&xxx, 0x121ffffffd4LL, 0x123456789abcdefLL) != 0x121ffffffd4LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x123456789abcdefLL); 	+	mb(); 	+	if (atomic64_xchg(&xxx, 0xabcdef123456789LL) != 0x123456789abcdefLL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0xabcdef123456789LL); 	+	mb(); 	+} 	+ 	 /*****************************************************************************/ 	 /* 	  * 	@@ -845,6 +891,8 @@ void __init setup_arch(char **cmdline_p) 	 //	asm volatile("movgs %0,timerd" :: "r"(10000000)); 	 //	__set_HSR(0, __get_HSR(0) || HSR0_ETMD);  	+	test_atomic64(); 	+ 	 } /* end setup_arch() */  	 #if 0  Note that this doesn't cover all the trivial wrappers, but does cover all the substantial implementations.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | __muldi3.S | g | 1.0K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | insl_sw.S | g | 1.1K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | __negdi2.S | g | 819B |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | __ashldi3.S | g | 1.3K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | memcpy.S | g | 3.3K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | outsl_sw.S | g | 1.1K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | __lshrdi3.S | g | 1.3K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | insl_ns.S | g | 1.3K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | memset.S | g | 4.9K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | __ucmpdi2.S | g | 1.2K |  | David Howells | dhowells@redhat.com | 1136780016 |  | [PATCH] frv: implement and export various things required by modules  Export a number of features required to build all the modules.  It also implements the following simple features:   (*) csum_partial_copy_from_user() for MMU as well as no-MMU.   (*) __ucmpdi2().  so that they can be exported too.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Andrew Morton <akpm@osdl.org> Signed-off-by: Linus Torvalds <torvalds@osdl.org>
f | checksum.c | s | 4.1K | 149 | Al Viro | viro@zeniv.linux.org.uk | 1165123383 |  | [NET]: FRV checksum annotations.  * sanitize prototypes and annotate * collapse csum_partial_copy  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk> Signed-off-by: David S. Miller <davem@davemloft.net>
f | cache.S | g | 2.8K |  | Uwe Kleine-Koenig | u.kleine-koenig@pengutronix.de | 1253538896 |  | trivial: fix typos "man[ae]g?ment" -> "management"  Signed-off-by: Uwe Kleine-Koenig <u.kleine-koenig@pengutronix.de> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | atomic64-ops.S | g | 4.7K |  | David Howells | dhowells@redhat.com | 1246502289 |  | FRV: Implement atomic64_t  Implement atomic64_t and its ops for FRV.  Tested with the following patch:  	diff --git a/arch/frv/kernel/setup.c b/arch/frv/kernel/setup.c 	index 55e4fab..086d50d 100644 	--- a/arch/frv/kernel/setup.c 	+++ b/arch/frv/kernel/setup.c 	@@ -746,6 +746,52 @@ static void __init parse_cmdline_early(char *cmdline)  	 } /* end parse_cmdline_early() */  	+static atomic64_t xxx; 	+ 	+static void test_atomic64(void) 	+{ 	+	atomic64_set(&xxx, 0x12300000023LL); 	+ 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x12300000023LL); 	+	mb(); 	+	if (atomic64_inc_return(&xxx) != 0x12300000024LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x12300000024LL); 	+	mb(); 	+	if (atomic64_sub_return(0x36900000050LL, &xxx) != -0x2460000002cLL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != -0x2460000002cLL); 	+	mb(); 	+	if (atomic64_dec_return(&xxx) != -0x2460000002dLL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != -0x2460000002dLL); 	+	mb(); 	+	if (atomic64_add_return(0x36800000001LL, &xxx) != 0x121ffffffd4LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x121ffffffd4LL); 	+	mb(); 	+	if (atomic64_cmpxchg(&xxx, 0x123456789abcdefLL, 0x121ffffffd4LL) != 0x121ffffffd4LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x121ffffffd4LL); 	+	mb(); 	+	if (atomic64_cmpxchg(&xxx, 0x121ffffffd4LL, 0x123456789abcdefLL) != 0x121ffffffd4LL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0x123456789abcdefLL); 	+	mb(); 	+	if (atomic64_xchg(&xxx, 0xabcdef123456789LL) != 0x123456789abcdefLL) 	+		BUG(); 	+	mb(); 	+	BUG_ON(atomic64_read(&xxx) != 0xabcdef123456789LL); 	+	mb(); 	+} 	+ 	 /*****************************************************************************/ 	 /* 	  * 	@@ -845,6 +891,8 @@ void __init setup_arch(char **cmdline_p) 	 //	asm volatile("movgs %0,timerd" :: "r"(10000000)); 	 //	__set_HSR(0, __get_HSR(0) || HSR0_ETMD);  	+	test_atomic64(); 	+ 	 } /* end setup_arch() */  	 #if 0  Note that this doesn't cover all the trivial wrappers, but does cover all the substantial implementations.  Signed-off-by: David Howells <dhowells@redhat.com> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
f | __ashrdi3.S | g | 1.3K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | outsl_ns.S | g | 1.3K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
