f | Makefile | g | 609B |  | Linus Torvalds | torvalds@linux-foundation.org | 1337986778 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile  Pull tile updates from Chris Metcalf:  "These changes cover a range of new arch/tile features and   optimizations.  They've been through LKML review and on linux-next for   a month or so.  There's also one bug-fix that just missed 3.4, which   I've marked for stable."  Fixed up trivial conflict in arch/tile/Kconfig (new added tile Kconfig entries clashing with the generic timer/clockevents changes).  * git://git.kernel.org/pub/scm/linux/kernel/git/cmetcalf/linux-tile:   tile: default to tilegx_defconfig for ARCH=tile   tile: fix bug where fls(0) was not returning 0   arch/tile: mark TILEGX as not EXPERIMENTAL   tile/mm/fault.c: Port OOM changes to handle_page_fault   arch/tile: add descriptive text if the kernel reports a bad trap   arch/tile: allow querying cpu module information from the hypervisor   arch/tile: fix hardwall for tilegx and generalize for idn and ipi   arch/tile: support multiple huge page sizes dynamically   mm: add new arch_make_huge_pte() method for tile support   arch/tile: support kexec() for tilegx   arch/tile: support <asm/cachectl.h> header for cacheflush() syscall   arch/tile: Allow tilegx to build with either 16K or 64K page size   arch/tile: optimize get_user/put_user and friends   arch/tile: support building big-endian kernel   arch/tile: allow building Linux with transparent huge pages enabled   arch/tile: use interrupt critical sections less
f | intvec_32.S | g | 52K |  | Chris Metcalf | cmetcalf@tilera.com | 1337198476 |  | arch/tile: fix up some issues in calling do_work_pending()  First, we were at risk of handling thread-info flags, in particular do_signal(), when returning from kernel space.  This could happen after a failed kernel_execve(), or when forking a kernel thread. The fix is to test in do_work_pending() for user_mode() and return immediately if so; we already had this test for one of the flags, so I just hoisted it to the top of the function.  Second, if a ptraced process updated the callee-saved registers in the ptregs struct and then processed another thread-info flag, we would overwrite the modifications with the original callee-saved registers.  To fix this, we add a register to note if we've already saved the registers once, and skip doing it on additional passes through the loop.  To avoid a performance hit from the couple of extra instructions involved, I modified the GET_THREAD_INFO() macro to be guaranteed to be one instruction, then bundled it with adjacent instructions, yielding an overall net savings.  Reported-By: Al Viro <viro@ZenIV.linux.org.uk> Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | smpboot.c | s | 7.5K | 232 | Thomas Gleixner | tglx@linutronix.de | 1335434769 |  | smp: Add task_struct argument to __cpu_up()  Preparatory patch to make the idle thread allocation for secondary cpus generic.  Signed-off-by: Thomas Gleixner <tglx@linutronix.de> Cc: Peter Zijlstra <peterz@infradead.org> Cc: Rusty Russell <rusty@rustcorp.com.au> Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Cc: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com> Cc: Matt Turner <mattst88@gmail.com> Cc: Russell King <linux@arm.linux.org.uk> Cc: Mike Frysinger <vapier@gentoo.org> Cc: Jesper Nilsson <jesper.nilsson@axis.com> Cc: Richard Kuo <rkuo@codeaurora.org> Cc: Tony Luck <tony.luck@intel.com> Cc: Hirokazu Takata <takata@linux-m32r.org> Cc: Ralf Baechle <ralf@linux-mips.org> Cc: David Howells <dhowells@redhat.com> Cc: James E.J. Bottomley <jejb@parisc-linux.org> Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org> Cc: Martin Schwidefsky <schwidefsky@de.ibm.com> Cc: Paul Mundt <lethal@linux-sh.org> Cc: David S. Miller <davem@davemloft.net> Cc: Chris Metcalf <cmetcalf@tilera.com> Cc: Richard Weinberger <richard@nod.at> Cc: x86@kernel.org Link: http://lkml.kernel.org/r/20120420124556.964170564@linutronix.de
f | regs_64.S | g | 4.0K |  | David Howells | dhowells@redhat.com | 1332955803 |  | Disintegrate asm/system.h for Tile  Disintegrate asm/system.h for Tile.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Chris Metcalf <cmetcalf@tilera.com>
f | pci.c | s | 16K | 546 | Chris Metcalf | cmetcalf@tilera.com | 1335372326 |  | arch/tile: fix a couple of functions that should be __init  They were marked __devinit by mistake, causing some warnings at link time.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | single_step.c | s | 21K | 684 | Chris Metcalf | cmetcalf@tilera.com | 1337964502 |  | arch/tile: support building big-endian kernel  The toolchain supports big-endian mode now, so add support for building the kernel to run big-endian as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | time.c | s | 6.3K | 198 | John Stultz | johnstul@us.ibm.com | 1307136381 |  | clocksource: tile: convert to use clocksource_register_hz  Convert tile to use clocksource_register_hz.  CC: Thomas Gleixner <tglx@linutronix.de> Signed-off-by: John Stultz <johnstul@us.ibm.com> Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | asm-offsets.c | s | 2.6K | 69 | Chris Metcalf | cmetcalf@tilera.com | 1275685878 |  | arch/tile: core support for Tilera 32-bit chips.  This change is the core kernel support for TILEPro and TILE64 chips. No driver support (except the console driver) is included yet.  This includes the relevant Linux headers in asm/; the low-level low-level "Tile architecture" headers in arch/, which are shared with the hypervisor, etc., and are build-system agnostic; and the relevant hypervisor headers in hv/.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Acked-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp> Reviewed-by: Paul Mundt <lethal@linux-sh.org>
f | proc.c | s | 3.5K | 141 | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: support multiple huge page sizes dynamically  This change adds support for a new "super" bit in the PTE, using the new arch_make_huge_pte() method.  The Tilera hypervisor sees the bit set at a given level of the page table and gangs together 4, 16, or 64 consecutive pages from that level of the hierarchy to create a larger TLB entry.  One extra "super" page size can be specified at each of the three levels of the page table hierarchy on tilegx, using the "hugepagesz" argument on the boot command line.  A new hypervisor API is added to allow Linux to tell the hypervisor how many PTEs to gang together at each level of the page table.  To allow pre-allocating huge pages larger than the buddy allocator can handle, this change modifies the Tilera bootmem support to put all of memory on tilegx platforms into bootmem.  As part of this change I eliminate the vestigial CONFIG_HIGHPTE support, which never worked anyway, and eliminate the hv_page_size() API in favor of the standard vma_kernel_pagesize() API.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | tile-desc_64.c | s | 94K | 2191 | Chris Metcalf | cmetcalf@tilera.com | 1320353934 |  | arch/tile: factor out <arch/opcode.h> header  The kernel code was using some <asm> headers that included a mix of hardware-specific information (typically found in Tilera <arch> headers) and structures, enums, and function declarations supporting the disassembly function of the tile-desc.c sources.  This change refactors that code so that a hardware-specific, but OS- and application-agnostic header, is created: <arch/opcode.h>. This header is then exported to userspace along with the other <arch> headers and can be used to build userspace code; in particular, it is used by glibc as part of implementing the backtrace() function.  The new header, together with a header that specifically describes the disassembly code (<asm/tile-desc.h> with _32 and _64 variants), replaces the old <asm/opcode-tile*.h> and <asm/opcode_constants*.h> headers.  As part of this change, we are also renaming the 32-bit constants from TILE_xxx to TILEPRO_xxx to better reflect the fact that they are specific to the TILEPro architecture, and not to TILE-Gx and any successor "tile" architecture chips.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | vmlinux.lds.S | g | 2.0K |  | Tejun Heo | tj@kernel.org | 1300989009 |  | percpu: Always align percpu output section to PAGE_SIZE  Percpu allocator honors alignment request upto PAGE_SIZE and both the percpu addresses in the percpu address space and the translated kernel addresses should be aligned accordingly.  The calculation of the former depends on the alignment of percpu output section in the kernel image.  The linker script macros PERCPU_VADDR() and PERCPU() are used to define this output section and the latter takes @align parameter. Several architectures are using @align smaller than PAGE_SIZE breaking percpu memory alignment.  This patch removes @align parameter from PERCPU(), renames it to PERCPU_SECTION() and makes it always align to PAGE_SIZE.  While at it, add PCPU_SETUP_BUG_ON() checks such that alignment problems are reliably detected and remove percpu alignment comment recently added in workqueue.c as the condition would trigger BUG way before reaching there.  For um, this patch raises the alignment of percpu area.  As the area is in .init, there shouldn't be any noticeable difference.  This problem was discovered by David Howells while debugging boot failure on mn10300.  Signed-off-by: Tejun Heo <tj@kernel.org> Acked-by: Mike Frysinger <vapier@gentoo.org> Cc: uclinux-dist-devel@blackfin.uclinux.org Cc: David Howells <dhowells@redhat.com> Cc: Jeff Dike <jdike@addtoit.com> Cc: user-mode-linux-devel@lists.sourceforge.net
f | hardwall.c | s | 29K | 956 | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: fix hardwall for tilegx and generalize for idn and ipi  The hardwall drain code was not properly implemented for tilegx, just tilepro, so you couldn't reliably restart an application that made use of the udn.  In addition, the code was only applicable to the udn (user dynamic network).  On tilegx there is a second user network that is available (the "idn"), and there is support for having I/O shims deliver user-level interrupts to applications ("ipi") which functions in a very similar way to the inter-core permissions used for udn/idn. So this change also generalizes the code from supporting just the udn to supports udn/idn/ipi on tilegx.  By default we now use /dev/hardwall/{udn,idn,ipi} with separate minor numbers for the three devices.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | compat_signal.c | s | 11K | 371 | Al Viro | viro@zeniv.linux.org.uk | 1338569931 |  | most of set_current_blocked() callers want SIGKILL/SIGSTOP removed from set  Only 3 out of 63 do not.  Renamed the current variant to __set_current_blocked(), added set_current_blocked() that will exclude unblockable signals, switched open-coded instances to it.  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | traps.c | s | 8.7K | 323 | Chris Metcalf | cmetcalf@tilera.com | 1337964508 |  | arch/tile: add descriptive text if the kernel reports a bad trap  If the kernel unexpectedly takes a bad trap, it's convenient to have it report the type of trap as part of the error.  This gives customers a bit more context before they call up customer support.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | compat.c | s | 3.5K | 100 | Chris Metcalf | cmetcalf@tilera.com | 1331831618 |  | [PATCH v3] ipc: provide generic compat versions of IPC syscalls  When using the "compat" APIs, architectures will generally want to be able to make direct syscalls to msgsnd(), shmctl(), etc., and in the kernel we would want them to be handled directly by compat_sys_xxx() functions, as is true for other compat syscalls.  However, for historical reasons, several of the existing compat IPC syscalls do not do this.  semctl() expects a pointer to the fourth argument, instead of the fourth argument itself.  msgsnd(), msgrcv() and shmat() expect arguments in different order.  This change adds an ARCH_WANT_OLD_COMPAT_IPC config option that can be set to preserve this behavior for ports that use it (x86, sparc, powerpc, s390, and mips).  No actual semantics are changed for those architectures, and there is only a minimal amount of code refactoring in ipc/compat.c.  Newer architectures like tile (and perhaps future architectures such as arm64 and unicore64) should not select this option, and thus can avoid having any IPC-specific code at all in their architecture-specific compat layer.  In the same vein, if this option is not selected, IPC_64 mode is assumed, since that's what the <asm-generic> headers expect.  The workaround code in "tile" for msgsnd() and msgrcv() is removed with this change; it also fixes the bug that shmat() and semctl() were not being properly handled.  Reviewed-by: Arnd Bergmann <arnd@arndb.de> Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | regs_32.S | g | 4.0K |  | David Howells | dhowells@redhat.com | 1332955803 |  | Disintegrate asm/system.h for Tile  Disintegrate asm/system.h for Tile.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Chris Metcalf <cmetcalf@tilera.com>
f | pci-dma.c | s | 6.9K | 214 | Chris Metcalf | cmetcalf@tilera.com | 1322944301 |  | arch/tile: add a few #includes and an EXPORT to catch up with kernel changes.  The empty_zero_page[] export is required for ZERO_PAGE() module references. The #includes are due to changes in implicit inclusion, and should of course have been in the sources from the beginning.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | sys.c | s | 3.7K | 111 | Chris Metcalf | cmetcalf@tilera.com | 1337964504 |  | arch/tile: support <asm/cachectl.h> header for cacheflush() syscall  We already had a syscall that did some dcache flushing, but it was not used in practice.  Make it MIPS compatible instead so it can do both the DCACHE and ICACHE actions.  We have code that wants to be able to use the ICACHE flush mode from userspace so this change enables that.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | tlb.c | s | 2.8K | 88 | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: support multiple huge page sizes dynamically  This change adds support for a new "super" bit in the PTE, using the new arch_make_huge_pte() method.  The Tilera hypervisor sees the bit set at a given level of the page table and gangs together 4, 16, or 64 consecutive pages from that level of the hierarchy to create a larger TLB entry.  One extra "super" page size can be specified at each of the three levels of the page table hierarchy on tilegx, using the "hugepagesz" argument on the boot command line.  A new hypervisor API is added to allow Linux to tell the hypervisor how many PTEs to gang together at each level of the page table.  To allow pre-allocating huge pages larger than the buddy allocator can handle, this change modifies the Tilera bootmem support to put all of memory on tilegx platforms into bootmem.  As part of this change I eliminate the vestigial CONFIG_HIGHPTE support, which never worked anyway, and eliminate the hv_page_size() API in favor of the standard vma_kernel_pagesize() API.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | ptrace.c | s | 5.1K | 179 | Chris Metcalf | cmetcalf@tilera.com | 1288639877 |  | arch/tile: don't allow user code to set the PL via ptrace or signal return  The kernel was allowing any component of the pt_regs to be updated either by signal handlers writing to the stack, or by processes writing via PTRACE_POKEUSR or PTRACE_SETREGS, which meant they could set their PL up from 0 to 1 and get access to kernel code and data (or, in practice, cause a kernel panic).  We now always reset the ex1 field, allowing the user to set their ICS bit only.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | intvec_64.S | g | 35K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: fix hardwall for tilegx and generalize for idn and ipi  The hardwall drain code was not properly implemented for tilegx, just tilepro, so you couldn't reliably restart an application that made use of the udn.  In addition, the code was only applicable to the udn (user dynamic network).  On tilegx there is a second user network that is available (the "idn"), and there is support for having I/O shims deliver user-level interrupts to applications ("ipi") which functions in a very similar way to the inter-core permissions used for udn/idn. So this change also generalizes the code from supporting just the udn to supports udn/idn/ipi on tilegx.  By default we now use /dev/hardwall/{udn,idn,ipi} with separate minor numbers for the three devices.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | machine_kexec.c | s | 7.9K | 261 | Chris Metcalf | cmetcalf@tilera.com | 1337964505 |  | arch/tile: support kexec() for tilegx  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | stack.c | s | 13K | 441 | Chris Metcalf | cmetcalf@tilera.com | 1333383165 |  | arch/tile: various bugs in stack backtracer  Fix a long-standing bug in the stack backtracer where we would print garbage to the console instead of kernel function names, if the kernel wasn't built with symbol support (e.g. mboot).  Make sure to tag every line of userspace backtrace output if we actually have the mmap_sem, since that way if there's no tag, we know that it's because we couldn't trylock the semaphore.  Stop doing a TLB flush and examining page tables during backtrace. Instead, just trust that __copy_from_user_inatomic() will properly fault and return a failure, which it should do in all cases.  Fix a latent bug where the backtracer would directly examine a signal context in user space, rather than copying it safely to kernel memory first.  This meant that a race with another thread could potentially have caused a kernel panic.  Guard against unaligned sp when trying to restart backtrace at an interrupt or signal handler point in the kernel backtracer.  Report kernel symbolic information for the call instruction rather than for the following instruction.  We still report the actual numeric address corresponding to the instruction after the call, for the sake of consistency with the normal expectations for stack backtracers.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | relocate_kernel_64.S | g | 5.7K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964505 |  | arch/tile: support kexec() for tilegx  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | setup.c | s | 45K | 1415 | Chris Metcalf | cmetcalf@tilera.com | 1338996575 |  | tile: add #include to unbreak build after generic init_task conversion  Some code was moved from init_task.c to setup.c but the appropriate header needed to be moved as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | module.c | s | 5.9K | 220 | Chris Metcalf | cmetcalf@tilera.com | 1337964502 |  | arch/tile: support building big-endian kernel  The toolchain supports big-endian mode now, so add support for building the kernel to run big-endian as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | irq.c | s | 8.1K | 258 | Chris Metcalf | cmetcalf@tilera.com | 1322944309 |  | arch/tile: use new generic {enable,disable}_percpu_irq() routines  We provided very similar routines internally, but now we can hook into the generic framework by supplying our routines as function pointers in the irq_chip structure instead.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | futex_64.S | g | 1.6K |  | Chris Metcalf | cmetcalf@tilera.com | 1305229932 |  | arch/tile: finish enabling support for TILE-Gx 64-bit chip  This support was partially present in the existing code (look for "__tilegx__" ifdefs) but with this change you can build a working kernel using the TILE-Gx toolchain and ARCH=tilegx.  Most of these files are new, generally adding a foo_64.c file where previously there was just a foo_32.c file.  The ARCH=tilegx directive redirects to arch/tile, not arch/tilegx, using the existing SRCARCH mechanism in the top-level Makefile.  Changes to existing files:  - <asm/bitops.h> and <asm/bitops_32.h> changed to factor the   include of <asm-generic/bitops/non-atomic.h> in the common header.  - <asm/compat.h> and arch/tile/kernel/compat.c changed to remove   the "const" markers I had put on compat_sys_execve() when trying   to match some recent similar changes to the non-compat execve.   It turns out the compat version wasn't "upgraded" to use const.  - <asm/opcode-tile_64.h> and <asm/opcode_constants_64.h> were   previously included accidentally, with the 32-bit contents.  Now   they have the proper 64-bit contents.  Finally, I had to hack the existing hacky drivers/input/input-compat.h to add yet another "#ifdef" for INPUT_COMPAT_TEST (same as x86_64).  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com> [drivers/input]
f | sysfs.c | s | 5.3K | 166 | Chris Metcalf | cmetcalf@tilera.com | 1337964508 |  | arch/tile: allow querying cpu module information from the hypervisor  This just adds a few more attributes to the information Linux can query from the hypervisor for the /sys/hypervisor/board/ directory, providing part, serial#, revision#, and description for cpu modules (as opposed to the board itself, or any mezzanine boards).  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | smp.c | s | 5.4K | 203 | Chris Metcalf | cmetcalf@tilera.com | 1337964504 |  | arch/tile: Allow tilegx to build with either 16K or 64K page size  This change introduces new flags for the hv_install_context() API that passes a page table pointer to the hypervisor.  Clients can explicitly request 4K, 16K, or 64K small pages when they install a new context.  In practice, the page size is fixed at kernel compile time and the same size is always requested every time a new page table is installed.  The <hv/hypervisor.h> header changes so that it provides more abstract macros for managing "page" things like PFNs and page tables.  For example there is now a HV_DEFAULT_PAGE_SIZE_SMALL instead of the old HV_PAGE_SIZE_SMALL.  The various PFN routines have been eliminated and only PA- or PTFN-based ones remain (since PTFNs are always expressed in fixed 2KB "page" size).  The page-table management macros are renamed with a leading underscore and take page-size arguments with the presumption that clients will use those macros in some single place to provide the "real" macros they will use themselves.  I happened to notice the old hv_set_caching() API was totally broken (it assumed 4KB pages) so I changed it so it would nominally work correctly with other page sizes.  Tag modules with the page size so you can't load a module built with a conflicting page size.  (And add a test for SMP while we're at it.)  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | reboot.c | s | 1.2K | 45 | Chris Metcalf | cmetcalf@tilera.com | 1288639842 |  | arch/tile: bomb raw_local_irq_ to arch_local_irq_  This completes the tile migration to the new naming scheme for the architecture-specific irq management code.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | relocate_kernel_32.S | g | 6.4K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964505 |  | arch/tile: support kexec() for tilegx  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | process.c | s | 20K | 645 | Linus Torvalds | torvalds@linux-foundation.org | 1338515250 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/signal  Pull second pile of signal handling patches from Al Viro:  "This one is just task_work_add() series + remaining prereqs for it.    There probably will be another pull request from that tree this   cycle - at least for helpers, to get them out of the way for per-arch   fixes remaining in the tree."  Fix trivial conflict in kernel/irq/manage.c: the merge of Andrew's pile had brought in commit 97fd75b7b8e0 ("kernel/irq/manage.c: use the pr_foo() infrastructure to prefix printks") which changed one of the pr_err() calls that this merge moves around.  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/signal:   keys: kill task_struct->replacement_session_keyring   keys: kill the dummy key_replace_session_keyring()   keys: change keyctl_session_to_parent() to use task_work_add()   genirq: reimplement exit_irq_thread() hook via task_work_add()   task_work_add: generic process-context callbacks   avr32: missed _TIF_NOTIFY_RESUME on one of do_notify_resume callers   parisc: need to check NOTIFY_RESUME when exiting from syscall   move key_repace_session_keyring() into tracehook_notify_resume()   TIF_NOTIFY_RESUME is defined on all targets now
f | backtrace.c | s | 17K | 589 | Chris Metcalf | cmetcalf@tilera.com | 1320353934 |  | arch/tile: factor out <arch/opcode.h> header  The kernel code was using some <asm> headers that included a mix of hardware-specific information (typically found in Tilera <arch> headers) and structures, enums, and function declarations supporting the disassembly function of the tile-desc.c sources.  This change refactors that code so that a hardware-specific, but OS- and application-agnostic header, is created: <arch/opcode.h>. This header is then exported to userspace along with the other <arch> headers and can be used to build userspace code; in particular, it is used by glibc as part of implementing the backtrace() function.  The new header, together with a header that specifically describes the disassembly code (<asm/tile-desc.h> with _32 and _64 variants), replaces the old <asm/opcode-tile*.h> and <asm/opcode_constants*.h> headers.  As part of this change, we are also renaming the 32-bit constants from TILE_xxx to TILEPRO_xxx to better reflect the fact that they are specific to the TILEPro architecture, and not to TILE-Gx and any successor "tile" architecture chips.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | early_printk.c | s | 2.7K | 95 | David Howells | dhowells@redhat.com | 1332955803 |  | Disintegrate asm/system.h for Tile  Disintegrate asm/system.h for Tile.  Signed-off-by: David Howells <dhowells@redhat.com> Acked-by: Chris Metcalf <cmetcalf@tilera.com>
f | hvglue.lds | g | 2.4K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: support multiple huge page sizes dynamically  This change adds support for a new "super" bit in the PTE, using the new arch_make_huge_pte() method.  The Tilera hypervisor sees the bit set at a given level of the page table and gangs together 4, 16, or 64 consecutive pages from that level of the hierarchy to create a larger TLB entry.  One extra "super" page size can be specified at each of the three levels of the page table hierarchy on tilegx, using the "hugepagesz" argument on the boot command line.  A new hypervisor API is added to allow Linux to tell the hypervisor how many PTEs to gang together at each level of the page table.  To allow pre-allocating huge pages larger than the buddy allocator can handle, this change modifies the Tilera bootmem support to put all of memory on tilegx platforms into bootmem.  As part of this change I eliminate the vestigial CONFIG_HIGHPTE support, which never worked anyway, and eliminate the hv_page_size() API in favor of the standard vma_kernel_pagesize() API.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | entry.S | g | 3.1K |  | Chris Metcalf | cmetcalf@tilera.com | 1338996571 |  | tile: remove cpu_idle_on_new_stack  This routine isn't used unless CONFIG_HOMECACHE is enabled, which isn't even available as a public configuration option yet. Since it no longer links correctly in 3.4, just remove it for now.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | head_64.S | g | 7.0K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964504 |  | arch/tile: Allow tilegx to build with either 16K or 64K page size  This change introduces new flags for the hv_install_context() API that passes a page table pointer to the hypervisor.  Clients can explicitly request 4K, 16K, or 64K small pages when they install a new context.  In practice, the page size is fixed at kernel compile time and the same size is always requested every time a new page table is installed.  The <hv/hypervisor.h> header changes so that it provides more abstract macros for managing "page" things like PFNs and page tables.  For example there is now a HV_DEFAULT_PAGE_SIZE_SMALL instead of the old HV_PAGE_SIZE_SMALL.  The various PFN routines have been eliminated and only PA- or PTFN-based ones remain (since PTFNs are always expressed in fixed 2KB "page" size).  The page-table management macros are renamed with a leading underscore and take page-size arguments with the presumption that clients will use those macros in some single place to provide the "real" macros they will use themselves.  I happened to notice the old hv_set_caching() API was totally broken (it assumed 4KB pages) so I changed it so it would nominally work correctly with other page sizes.  Tag modules with the page size so you can't load a module built with a conflicting page size.  (And add a test for SMP while we're at it.)  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | tile-desc_32.c | s | 111K | 2579 | Chris Metcalf | cmetcalf@tilera.com | 1320353934 |  | arch/tile: factor out <arch/opcode.h> header  The kernel code was using some <asm> headers that included a mix of hardware-specific information (typically found in Tilera <arch> headers) and structures, enums, and function declarations supporting the disassembly function of the tile-desc.c sources.  This change refactors that code so that a hardware-specific, but OS- and application-agnostic header, is created: <arch/opcode.h>. This header is then exported to userspace along with the other <arch> headers and can be used to build userspace code; in particular, it is used by glibc as part of implementing the backtrace() function.  The new header, together with a header that specifically describes the disassembly code (<asm/tile-desc.h> with _32 and _64 variants), replaces the old <asm/opcode-tile*.h> and <asm/opcode_constants*.h> headers.  As part of this change, we are also renaming the 32-bit constants from TILE_xxx to TILEPRO_xxx to better reflect the fact that they are specific to the TILEPro architecture, and not to TILE-Gx and any successor "tile" architecture chips.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | head_32.S | g | 4.8K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964504 |  | arch/tile: Allow tilegx to build with either 16K or 64K page size  This change introduces new flags for the hv_install_context() API that passes a page table pointer to the hypervisor.  Clients can explicitly request 4K, 16K, or 64K small pages when they install a new context.  In practice, the page size is fixed at kernel compile time and the same size is always requested every time a new page table is installed.  The <hv/hypervisor.h> header changes so that it provides more abstract macros for managing "page" things like PFNs and page tables.  For example there is now a HV_DEFAULT_PAGE_SIZE_SMALL instead of the old HV_PAGE_SIZE_SMALL.  The various PFN routines have been eliminated and only PA- or PTFN-based ones remain (since PTFNs are always expressed in fixed 2KB "page" size).  The page-table management macros are renamed with a leading underscore and take page-size arguments with the presumption that clients will use those macros in some single place to provide the "real" macros they will use themselves.  I happened to notice the old hv_set_caching() API was totally broken (it assumed 4KB pages) so I changed it so it would nominally work correctly with other page sizes.  Tag modules with the page size so you can't load a module built with a conflicting page size.  (And add a test for SMP while we're at it.)  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | signal.c | s | 11K | 384 | Al Viro | viro@zeniv.linux.org.uk | 1338569932 |  | new helper: signal_delivered()  Does block_sigmask() + tracehook_signal_handler();  called when sigframe has been successfully built.  All architectures converted to it; block_sigmask() itself is gone now (merged into this one).  I'm still not too happy with the signature, but that's a separate story (IMO we need a structure that would contain signal number + siginfo + k_sigaction, so that get_signal_to_deliver() would fill one, signal_delivered(), handle_signal() and probably setup...frame() - take one).  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
f | messaging.c | s | 3.1K | 100 | Chris Metcalf | cmetcalf@tilera.com | 1288639842 |  | arch/tile: bomb raw_local_irq_ to arch_local_irq_  This completes the tile migration to the new naming scheme for the architecture-specific irq management code.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
