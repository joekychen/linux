f | Makefile | g | 481B |  | Chris Metcalf | cmetcalf@tilera.com | 1333383162 |  | arch/tile: make sure to build memcpy_user_64 without frame pointer  Add a comment explaining why this is important, and add a CFLAGS_REMOVE clause to the Makefile to make sure it happens.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | atomic_32.c | s | 8.3K | 239 | Chris Metcalf | cmetcalf@tilera.com | 1337964503 |  | arch/tile: optimize get_user/put_user and friends  Use direct load/store for the get_user/put_user.  Previously, we would call out to a helper routine that would do the appropriate thing and then return, handling the possible exception internally.  Now we inline the load or store, along with a "we succeeded" indication in a register; if the load or store faults, we write a "we failed" indication into the same register and then return to the following instruction.  This is more efficient and gives us more compact code, as well as being more in line with what other architectures do.  The special futex assembly source file for TILE-Gx also disappears in this change; we just use the same inlining idiom there as well, putting the appropriate atomic operations directly into futex_atomic_op_inuser() (and thus into the FUTEX_WAIT function).  The underlying atomic copy_from_user, copy_to_user functions were renamed using the (cryptic) x86 convention as copy_from_user_ll and copy_to_user_ll.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memcpy_64.c | s | 5.5K | 210 | Chris Metcalf | cmetcalf@tilera.com | 1337964502 |  | arch/tile: support building big-endian kernel  The toolchain supports big-endian mode now, so add support for building the kernel to run big-endian as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | usercopy_32.S | g | 4.6K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964503 |  | arch/tile: optimize get_user/put_user and friends  Use direct load/store for the get_user/put_user.  Previously, we would call out to a helper routine that would do the appropriate thing and then return, handling the possible exception internally.  Now we inline the load or store, along with a "we succeeded" indication in a register; if the load or store faults, we write a "we failed" indication into the same register and then return to the following instruction.  This is more efficient and gives us more compact code, as well as being more in line with what other architectures do.  The special futex assembly source file for TILE-Gx also disappears in this change; we just use the same inlining idiom there as well, putting the appropriate atomic operations directly into futex_atomic_op_inuser() (and thus into the FUTEX_WAIT function).  The underlying atomic copy_from_user, copy_to_user functions were renamed using the (cryptic) x86 convention as copy_from_user_ll and copy_to_user_ll.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memchr_64.c | s | 1.9K | 59 | Chris Metcalf | cmetcalf@tilera.com | 1337964502 |  | arch/tile: support building big-endian kernel  The toolchain supports big-endian mode now, so add support for building the kernel to run big-endian as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | strlen_64.c | s | 1.0K | 30 | Chris Metcalf | cmetcalf@tilera.com | 1337964502 |  | arch/tile: support building big-endian kernel  The toolchain supports big-endian mode now, so add support for building the kernel to run big-endian as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memcpy_32.S | g | 20K |  | Chris Metcalf | cmetcalf@tilera.com | 1287171534 |  | arch/tile: minor whitespace/naming changes for string support files  Our internal process shares memcpy, memset, etc., with libc, and we did some minor tweaking as part of moving from uclibc to glibc, which is now reflected in the kernel versions of these files.  There are no semantic changes in this commit, just whitespace (memcpy_32.S now properly uses tabs), naming (memmove.c instead of memmove_32.c, since TILE-Gx shares the file with TILEPro), and a couple of other minor tweaks.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memset_64.c | s | 3.4K | 121 | Chris Metcalf | cmetcalf@tilera.com | 1305229932 |  | arch/tile: finish enabling support for TILE-Gx 64-bit chip  This support was partially present in the existing code (look for "__tilegx__" ifdefs) but with this change you can build a working kernel using the TILE-Gx toolchain and ARCH=tilegx.  Most of these files are new, generally adding a foo_64.c file where previously there was just a foo_32.c file.  The ARCH=tilegx directive redirects to arch/tile, not arch/tilegx, using the existing SRCARCH mechanism in the top-level Makefile.  Changes to existing files:  - <asm/bitops.h> and <asm/bitops_32.h> changed to factor the   include of <asm-generic/bitops/non-atomic.h> in the common header.  - <asm/compat.h> and arch/tile/kernel/compat.c changed to remove   the "const" markers I had put on compat_sys_execve() when trying   to match some recent similar changes to the non-compat execve.   It turns out the compat version wasn't "upgraded" to use const.  - <asm/opcode-tile_64.h> and <asm/opcode_constants_64.h> were   previously included accidentally, with the 32-bit contents.  Now   they have the proper 64-bit contents.  Finally, I had to hack the existing hacky drivers/input/input-compat.h to add yet another "#ifdef" for INPUT_COMPAT_TEST (same as x86_64).  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com> [drivers/input]
f | exports.c | s | 2.6K | 78 | Chris Metcalf | cmetcalf@tilera.com | 1337964503 |  | arch/tile: optimize get_user/put_user and friends  Use direct load/store for the get_user/put_user.  Previously, we would call out to a helper routine that would do the appropriate thing and then return, handling the possible exception internally.  Now we inline the load or store, along with a "we succeeded" indication in a register; if the load or store faults, we write a "we failed" indication into the same register and then return to the following instruction.  This is more efficient and gives us more compact code, as well as being more in line with what other architectures do.  The special futex assembly source file for TILE-Gx also disappears in this change; we just use the same inlining idiom there as well, putting the appropriate atomic operations directly into futex_atomic_op_inuser() (and thus into the FUTEX_WAIT function).  The underlying atomic copy_from_user, copy_to_user functions were renamed using the (cryptic) x86 convention as copy_from_user_ll and copy_to_user_ll.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | cpumask.c | s | 1.3K | 49 | Chris Metcalf | cmetcalf@tilera.com | 1278438111 |  | arch/tile: Miscellaneous cleanup changes.  This commit is primarily changes caused by reviewing "sparse" and "checkpatch" output on our sources, so is somewhat noisy, since things like "printk() -> pr_err()" (or whatever) throughout the codebase tend to get tedious to read.  Rather than trying to tease apart precisely which things changed due to which type of code review, this commit includes various cleanups in the code:  - sparse: Add declarations in headers for globals. - sparse: Fix __user annotations. - sparse: Using gfp_t consistently instead of int. - sparse: removing functions not actually used. - checkpatch: Clean up printk() warnings by using pr_info(), etc.;   also avoid partial-line printks except in bootup code.   - checkpatch: Use exposed structs rather than typedefs.   - checkpatch: Change some C99 comments to C89 comments.  In addition, a couple of minor other changes are rolled in to this commit:  - Add support for a "raise" instruction to cause SIGFPE, etc., to be raised. - Remove some compat code that is unnecessary when we fully eliminate   some of the deprecated syscalls from the generic syscall ABI. - Update the tile_defconfig to reflect current config contents.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de>
f | memchr_32.c | s | 2.0K | 61 | Chris Metcalf | cmetcalf@tilera.com | 1290625062 |  | arch/tile: fix memchr() not to dereference memory for zero length  This change fixes a bug that memchr() will read the first word of the source even if the length is zero.  Ironically, the code was originally written with a test to avoid exactly this problem, but to make the code conform to Linux coding standards with all declarations preceding all statements, the first load from memory was moved up above that test as the initial value for a variable.  The change just moves all the variable declarations to the top of the file, with no initializers, so that the test can also be at the top of the file.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | uaccess.c | s | 1021B | 29 | Chris Metcalf | cmetcalf@tilera.com | 1278438111 |  | arch/tile: Miscellaneous cleanup changes.  This commit is primarily changes caused by reviewing "sparse" and "checkpatch" output on our sources, so is somewhat noisy, since things like "printk() -> pr_err()" (or whatever) throughout the codebase tend to get tedious to read.  Rather than trying to tease apart precisely which things changed due to which type of code review, this commit includes various cleanups in the code:  - sparse: Add declarations in headers for globals. - sparse: Fix __user annotations. - sparse: Using gfp_t consistently instead of int. - sparse: removing functions not actually used. - checkpatch: Clean up printk() warnings by using pr_info(), etc.;   also avoid partial-line printks except in bootup code.   - checkpatch: Use exposed structs rather than typedefs.   - checkpatch: Change some C99 comments to C89 comments.  In addition, a couple of minor other changes are rolled in to this commit:  - Add support for a "raise" instruction to cause SIGFPE, etc., to be raised. - Remove some compat code that is unnecessary when we fully eliminate   some of the deprecated syscalls from the generic syscall ABI. - Update the tile_defconfig to reflect current config contents.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de>
f | delay.c | s | 1.2K | 41 | Chris Metcalf | cmetcalf@tilera.com | 1299014404 |  | arch/tile: fix __ndelay etc to work better  The current implementations of __ndelay and __udelay call a hypervisor service to delay, but the hypervisor service isn't actually implemented very well, and the consensus is that Linux should handle figuring this out natively and not use a hypervisor service.  By converting nanoseconds to cycles, and then spinning until the cycle counter reaches the desired cycle, we get several benefits: first, we are sensitive to the actual clock speed; second, we use less power by issuing a slow SPR read once every six cycles while we delay; and third, we properly handle the case of an interrupt by exiting at the target time rather than after some number of cycles.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memset_32.c | s | 6.2K | 210 | Chris Metcalf | cmetcalf@tilera.com | 1287171534 |  | arch/tile: minor whitespace/naming changes for string support files  Our internal process shares memcpy, memset, etc., with libc, and we did some minor tweaking as part of moving from uclibc to glibc, which is now reflected in the kernel versions of these files.  There are no semantic changes in this commit, just whitespace (memcpy_32.S now properly uses tabs), naming (memmove.c instead of memmove_32.c, since TILE-Gx shares the file with TILEPro), and a couple of other minor tweaks.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memmove.c | s | 1.4K | 55 | Chris Metcalf | cmetcalf@tilera.com | 1287171534 |  | arch/tile: minor whitespace/naming changes for string support files  Our internal process shares memcpy, memset, etc., with libc, and we did some minor tweaking as part of moving from uclibc to glibc, which is now reflected in the kernel versions of these files.  There are no semantic changes in this commit, just whitespace (memcpy_32.S now properly uses tabs), naming (memmove.c instead of memmove_32.c, since TILE-Gx shares the file with TILEPro), and a couple of other minor tweaks.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | string-endian.h | s | 1.2K | 31 | Chris Metcalf | cmetcalf@tilera.com | 1337964502 |  | arch/tile: support building big-endian kernel  The toolchain supports big-endian mode now, so add support for building the kernel to run big-endian as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | usercopy_64.S | g | 4.6K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964503 |  | arch/tile: optimize get_user/put_user and friends  Use direct load/store for the get_user/put_user.  Previously, we would call out to a helper routine that would do the appropriate thing and then return, handling the possible exception internally.  Now we inline the load or store, along with a "we succeeded" indication in a register; if the load or store faults, we write a "we failed" indication into the same register and then return to the following instruction.  This is more efficient and gives us more compact code, as well as being more in line with what other architectures do.  The special futex assembly source file for TILE-Gx also disappears in this change; we just use the same inlining idiom there as well, putting the appropriate atomic operations directly into futex_atomic_op_inuser() (and thus into the FUTEX_WAIT function).  The underlying atomic copy_from_user, copy_to_user functions were renamed using the (cryptic) x86 convention as copy_from_user_ll and copy_to_user_ll.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memcpy_tile64.c | s | 8.7K | 249 | Chris Metcalf | cmetcalf@tilera.com | 1337964504 |  | arch/tile: Allow tilegx to build with either 16K or 64K page size  This change introduces new flags for the hv_install_context() API that passes a page table pointer to the hypervisor.  Clients can explicitly request 4K, 16K, or 64K small pages when they install a new context.  In practice, the page size is fixed at kernel compile time and the same size is always requested every time a new page table is installed.  The <hv/hypervisor.h> header changes so that it provides more abstract macros for managing "page" things like PFNs and page tables.  For example there is now a HV_DEFAULT_PAGE_SIZE_SMALL instead of the old HV_PAGE_SIZE_SMALL.  The various PFN routines have been eliminated and only PA- or PTFN-based ones remain (since PTFNs are always expressed in fixed 2KB "page" size).  The page-table management macros are renamed with a leading underscore and take page-size arguments with the presumption that clients will use those macros in some single place to provide the "real" macros they will use themselves.  I happened to notice the old hv_set_caching() API was totally broken (it assumed 4KB pages) so I changed it so it would nominally work correctly with other page sizes.  Tag modules with the page size so you can't load a module built with a conflicting page size.  (And add a test for SMP while we're at it.)  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | spinlock_64.c | s | 3.0K | 95 | Chris Metcalf | cmetcalf@tilera.com | 1305229932 |  | arch/tile: finish enabling support for TILE-Gx 64-bit chip  This support was partially present in the existing code (look for "__tilegx__" ifdefs) but with this change you can build a working kernel using the TILE-Gx toolchain and ARCH=tilegx.  Most of these files are new, generally adding a foo_64.c file where previously there was just a foo_32.c file.  The ARCH=tilegx directive redirects to arch/tile, not arch/tilegx, using the existing SRCARCH mechanism in the top-level Makefile.  Changes to existing files:  - <asm/bitops.h> and <asm/bitops_32.h> changed to factor the   include of <asm-generic/bitops/non-atomic.h> in the common header.  - <asm/compat.h> and arch/tile/kernel/compat.c changed to remove   the "const" markers I had put on compat_sys_execve() when trying   to match some recent similar changes to the non-compat execve.   It turns out the compat version wasn't "upgraded" to use const.  - <asm/opcode-tile_64.h> and <asm/opcode_constants_64.h> were   previously included accidentally, with the 32-bit contents.  Now   they have the proper 64-bit contents.  Finally, I had to hack the existing hacky drivers/input/input-compat.h to add yet another "#ifdef" for INPUT_COMPAT_TEST (same as x86_64).  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Dmitry Torokhov <dmitry.torokhov@gmail.com> [drivers/input]
f | strchr_32.c | s | 1.9K | 54 | Chris Metcalf | cmetcalf@tilera.com | 1275685878 |  | arch/tile: core support for Tilera 32-bit chips.  This change is the core kernel support for TILEPro and TILE64 chips. No driver support (except the console driver) is included yet.  This includes the relevant Linux headers in asm/; the low-level low-level "Tile architecture" headers in arch/, which are shared with the hypervisor, etc., and are build-system agnostic; and the relevant hypervisor headers in hv/.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Acked-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp> Reviewed-by: Paul Mundt <lethal@linux-sh.org>
f | strchr_64.c | s | 1.8K | 51 | Chris Metcalf | cmetcalf@tilera.com | 1337964502 |  | arch/tile: support building big-endian kernel  The toolchain supports big-endian mode now, so add support for building the kernel to run big-endian as well.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | memcpy_user_64.c | s | 2.9K | 86 | Chris Metcalf | cmetcalf@tilera.com | 1333383162 |  | arch/tile: make sure to build memcpy_user_64 without frame pointer  Add a comment explaining why this is important, and add a CFLAGS_REMOVE clause to the Makefile to make sure it happens.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | spinlock_32.c | s | 7.2K | 229 | roel | roel.kluin@gmail.com | 1331580738 |  | arch/tile: misplaced parens near likely  Parentheses were missing.  Signed-off-by: Roel Kluin <roel.kluin@gmail.com> Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | checksum.c | s | 2.3K | 96 | Chris Metcalf | cmetcalf@tilera.com | 1275685878 |  | arch/tile: core support for Tilera 32-bit chips.  This change is the core kernel support for TILEPro and TILE64 chips. No driver support (except the console driver) is included yet.  This includes the relevant Linux headers in asm/; the low-level low-level "Tile architecture" headers in arch/, which are shared with the hypervisor, etc., and are build-system agnostic; and the relevant hypervisor headers in hv/.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Acked-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp> Reviewed-by: Paul Mundt <lethal@linux-sh.org>
f | cacheflush.c | s | 5.4K | 149 | Chris Metcalf | cmetcalf@tilera.com | 1333383233 |  | arch/tile: fix finv_buffer_remote() for tilegx  There were some correctness issues with this code that are now fixed with this change.  The change is likely less performant than it could be, but it should no longer be vulnerable to any races with memory operations on the memory network while invalidating a range of memory. This code is run infrequently so performance isn't critical, but correctness definitely is.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | atomic_asm_32.S | g | 6.6K |  | Chris Metcalf | cmetcalf@tilera.com | 1318508701 |  | tile: revert change from <asm/atomic.h> to <linux/atomic.h> in asm files  The 32-bit TILEPro support uses some #defines in <asm/atomic_32.h> for atomic support routines in assembly.  To make this more explicit, I've turned those includes into includes of <asm/atomic_32.h>, which should hopefully make it clear that they shouldn't be bombed into <linux/atomic.h> in any cleanups.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | strlen_32.c | s | 1.1K | 32 | Chris Metcalf | cmetcalf@tilera.com | 1287171534 |  | arch/tile: minor whitespace/naming changes for string support files  Our internal process shares memcpy, memset, etc., with libc, and we did some minor tweaking as part of moving from uclibc to glibc, which is now reflected in the kernel versions of these files.  There are no semantic changes in this commit, just whitespace (memcpy_32.S now properly uses tabs), naming (memmove.c instead of memmove_32.c, since TILE-Gx shares the file with TILEPro), and a couple of other minor tweaks.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | spinlock_common.h | s | 1.7K | 56 | Chris Metcalf | cmetcalf@tilera.com | 1333383195 |  | arch/tile: fix bug in delay_backoff()  We were carefully computing a value to use for the number of loops to spin for, and then ignoring it.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
