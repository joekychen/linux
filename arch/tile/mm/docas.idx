f | init.c | s | 31K | 973 | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: support multiple huge page sizes dynamically  This change adds support for a new "super" bit in the PTE, using the new arch_make_huge_pte() method.  The Tilera hypervisor sees the bit set at a given level of the page table and gangs together 4, 16, or 64 consecutive pages from that level of the hierarchy to create a larger TLB entry.  One extra "super" page size can be specified at each of the three levels of the page table hierarchy on tilegx, using the "hugepagesz" argument on the boot command line.  A new hypervisor API is added to allow Linux to tell the hypervisor how many PTEs to gang together at each level of the page table.  To allow pre-allocating huge pages larger than the buddy allocator can handle, this change modifies the Tilera bootmem support to put all of memory on tilegx platforms into bootmem.  As part of this change I eliminate the vestigial CONFIG_HIGHPTE support, which never worked anyway, and eliminate the hv_page_size() API in favor of the standard vma_kernel_pagesize() API.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | homecache.c | s | 12K | 408 | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: support multiple huge page sizes dynamically  This change adds support for a new "super" bit in the PTE, using the new arch_make_huge_pte() method.  The Tilera hypervisor sees the bit set at a given level of the page table and gangs together 4, 16, or 64 consecutive pages from that level of the hierarchy to create a larger TLB entry.  One extra "super" page size can be specified at each of the three levels of the page table hierarchy on tilegx, using the "hugepagesz" argument on the boot command line.  A new hypervisor API is added to allow Linux to tell the hypervisor how many PTEs to gang together at each level of the page table.  To allow pre-allocating huge pages larger than the buddy allocator can handle, this change modifies the Tilera bootmem support to put all of memory on tilegx platforms into bootmem.  As part of this change I eliminate the vestigial CONFIG_HIGHPTE support, which never worked anyway, and eliminate the hv_page_size() API in favor of the standard vma_kernel_pagesize() API.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | migrate_32.S | g | 4.0K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964500 |  | arch/tile: use interrupt critical sections less  In general we want to avoid ever touching memory while within an interrupt critical section, since the page fault path goes through a different path from the hypervisor when in an interrupt critical section, and we carefully decided with tilegx that we didn't need to support this path in the kernel.  (On tilepro we did implement that path as part of supporting atomic instructions in software.)  In practice we always need to touch the kernel stack, since that's where we store the interrupt state before releasing the critical section, but this change cleans up a few things.  The IRQ_ENABLE macro is split up so that when we want to enable interrupts in a deferred way (e.g. for cpu_idle or for interrupt return) we can read the per-cpu enable mask before entering the critical section. The cache-migration code is changed to use interrupt masking instead of interrupt critical sections.  And, the interrupt-entry code is changed so that we defer loading "tp" from per-cpu data until after we have released the interrupt critical section.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | Makefile | g | 246B |  | Chris Metcalf | cmetcalf@tilera.com | 1275685878 |  | arch/tile: core support for Tilera 32-bit chips.  This change is the core kernel support for TILEPro and TILE64 chips. No driver support (except the console driver) is included yet.  This includes the relevant Linux headers in asm/; the low-level low-level "Tile architecture" headers in arch/, which are shared with the hypervisor, etc., and are build-system agnostic; and the relevant hypervisor headers in hv/.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Acked-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp> Reviewed-by: Paul Mundt <lethal@linux-sh.org>
f | elf.c | s | 4.0K | 139 | Linus Torvalds | torvalds@linux-foundation.org | 1332975501 |  | 
f | migrate_64.S | g | 3.5K |  | Chris Metcalf | cmetcalf@tilera.com | 1337964500 |  | arch/tile: use interrupt critical sections less  In general we want to avoid ever touching memory while within an interrupt critical section, since the page fault path goes through a different path from the hypervisor when in an interrupt critical section, and we carefully decided with tilegx that we didn't need to support this path in the kernel.  (On tilepro we did implement that path as part of supporting atomic instructions in software.)  In practice we always need to touch the kernel stack, since that's where we store the interrupt state before releasing the critical section, but this change cleans up a few things.  The IRQ_ENABLE macro is split up so that when we want to enable interrupts in a deferred way (e.g. for cpu_idle or for interrupt return) we can read the per-cpu enable mask before entering the critical section. The cache-migration code is changed to use interrupt masking instead of interrupt critical sections.  And, the interrupt-entry code is changed so that we defer loading "tp" from per-cpu data until after we have released the interrupt critical section.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | mmap.c | s | 2.0K | 67 | Chris Metcalf | cmetcalf@tilera.com | 1275685878 |  | arch/tile: core support for Tilera 32-bit chips.  This change is the core kernel support for TILEPro and TILE64 chips. No driver support (except the console driver) is included yet.  This includes the relevant Linux headers in asm/; the low-level low-level "Tile architecture" headers in arch/, which are shared with the hypervisor, etc., and are build-system agnostic; and the relevant hypervisor headers in hv/.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Acked-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp> Reviewed-by: Paul Mundt <lethal@linux-sh.org>
f | extable.c | s | 843B | 26 | Chris Metcalf | cmetcalf@tilera.com | 1275685878 |  | arch/tile: core support for Tilera 32-bit chips.  This change is the core kernel support for TILEPro and TILE64 chips. No driver support (except the console driver) is included yet.  This includes the relevant Linux headers in asm/; the low-level low-level "Tile architecture" headers in arch/, which are shared with the hypervisor, etc., and are build-system agnostic; and the relevant hypervisor headers in hv/.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com> Acked-by: Arnd Bergmann <arnd@arndb.de> Acked-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp> Reviewed-by: Paul Mundt <lethal@linux-sh.org>
f | pgtable.c | s | 16K | 546 | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: support multiple huge page sizes dynamically  This change adds support for a new "super" bit in the PTE, using the new arch_make_huge_pte() method.  The Tilera hypervisor sees the bit set at a given level of the page table and gangs together 4, 16, or 64 consecutive pages from that level of the hierarchy to create a larger TLB entry.  One extra "super" page size can be specified at each of the three levels of the page table hierarchy on tilegx, using the "hugepagesz" argument on the boot command line.  A new hypervisor API is added to allow Linux to tell the hypervisor how many PTEs to gang together at each level of the page table.  To allow pre-allocating huge pages larger than the buddy allocator can handle, this change modifies the Tilera bootmem support to put all of memory on tilegx platforms into bootmem.  As part of this change I eliminate the vestigial CONFIG_HIGHPTE support, which never worked anyway, and eliminate the hv_page_size() API in favor of the standard vma_kernel_pagesize() API.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | hugetlbpage.c | s | 12K | 438 | Chris Metcalf | cmetcalf@tilera.com | 1337964507 |  | arch/tile: support multiple huge page sizes dynamically  This change adds support for a new "super" bit in the PTE, using the new arch_make_huge_pte() method.  The Tilera hypervisor sees the bit set at a given level of the page table and gangs together 4, 16, or 64 consecutive pages from that level of the hierarchy to create a larger TLB entry.  One extra "super" page size can be specified at each of the three levels of the page table hierarchy on tilegx, using the "hugepagesz" argument on the boot command line.  A new hypervisor API is added to allow Linux to tell the hypervisor how many PTEs to gang together at each level of the page table.  To allow pre-allocating huge pages larger than the buddy allocator can handle, this change modifies the Tilera bootmem support to put all of memory on tilegx platforms into bootmem.  As part of this change I eliminate the vestigial CONFIG_HIGHPTE support, which never worked anyway, and eliminate the hv_page_size() API in favor of the standard vma_kernel_pagesize() API.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | migrate.h | s | 1.9K | 51 | Chris Metcalf | cmetcalf@tilera.com | 1337964500 |  | arch/tile: use interrupt critical sections less  In general we want to avoid ever touching memory while within an interrupt critical section, since the page fault path goes through a different path from the hypervisor when in an interrupt critical section, and we carefully decided with tilegx that we didn't need to support this path in the kernel.  (On tilepro we did implement that path as part of supporting atomic instructions in software.)  In practice we always need to touch the kernel stack, since that's where we store the interrupt state before releasing the critical section, but this change cleans up a few things.  The IRQ_ENABLE macro is split up so that when we want to enable interrupts in a deferred way (e.g. for cpu_idle or for interrupt return) we can read the per-cpu enable mask before entering the critical section. The cache-migration code is changed to use interrupt masking instead of interrupt critical sections.  And, the interrupt-entry code is changed so that we defer loading "tp" from per-cpu data until after we have released the interrupt critical section.  Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
f | highmem.c | s | 8.3K | 253 | Cong Wang | amwang@redhat.com | 1332251310 |  | highmem: kill all __kmap_atomic() [swarren@nvidia.com: highmem: Fix ARM build break due to __kmap_atomic rename]  Signed-off-by: Stephen Warren <swarren@nvidia.com> Signed-off-by: Cong Wang <amwang@redhat.com>
f | fault.c | s | 24K | 813 | Kautuk Consul | consul.kautuk@gmail.com | 1337964509 |  | tile/mm/fault.c: Port OOM changes to handle_page_fault  Commit d065bd810b6deb67d4897a14bfe21f8eb526ba99 (mm: retry page fault when blocking on disk transfer) and commit 37b23e0525d393d48a7d59f870b3bc061a30ccdb (x86,mm: make pagefault killable)  The above commits introduced changes into the x86 pagefault handler for making the page fault handler retryable as well as killable.  These changes reduce the mmap_sem hold time, which is crucial during OOM killer invocation.  Port these changes to tile.  Signed-off-by: Kautuk Consul <consul.kautuk@gmail.com> [cmetcalf@tilera.com: initialize "flags" after "write" updated.] Signed-off-by: Chris Metcalf <cmetcalf@tilera.com>
