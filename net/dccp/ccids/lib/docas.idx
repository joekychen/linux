f | tfrc.c | s | 847B | 38 | Rusty Russell | rusty@rustcorp.com.au | 1324351649 |  | module_param: make bool parameters really bool (net & drivers/net)  module_param(bool) used to counter-intuitively take an int.  In fddd5201 (mid-2009) we allowed bool or int/unsigned int using a messy trick.  It's time to remove the int/unsigned int option.  For this version it'll simply give a warning, but it'll break next kernel version.  (Thanks to Joe Perches for suggesting coccinelle for 0/1 -> true/false).  Cc: "David S. Miller" <davem@davemloft.net> Cc: netdev@vger.kernel.org Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: David S. Miller <davem@davemloft.net>
f | tfrc.h | s | 2.3K | 67 | Rusty Russell | rusty@rustcorp.com.au | 1324351649 |  | module_param: make bool parameters really bool (net & drivers/net)  module_param(bool) used to counter-intuitively take an int.  In fddd5201 (mid-2009) we allowed bool or int/unsigned int using a messy trick.  It's time to remove the int/unsigned int option.  For this version it'll simply give a warning, but it'll break next kernel version.  (Thanks to Joe Perches for suggesting coccinelle for 0/1 -> true/false).  Cc: "David S. Miller" <davem@davemloft.net> Cc: netdev@vger.kernel.org Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: David S. Miller <davem@davemloft.net>
f | packet_history.h | s | 5.1K | 140 | Gerrit Renker | gerrit@erg.abdn.ac.uk | 1284546962 |  | dccp ccid-3: remove buggy RTT-sampling history lookup  This removes the RTT-sampling function tfrc_tx_hist_rtt(), since   1. it suffered from complex passing of return values (the return value both     indicated successful lookup while the value doubled as RTT sample);   2. when for some odd reason the sample value equalled 0, this triggered a bug     warning about "bogus Ack", due to the ambiguity of the return value;   3. on a passive host which has not sent anything the TX history is empty and     thus will lead to unwanted "bogus Ack" warnings such as     ccid3_hc_tx_packet_recv: server(e7b7d518): DATAACK with bogus ACK-28197148     ccid3_hc_tx_packet_recv: server(e7b7d518): DATAACK with bogus ACK-26641606.  The fix is to replace the implicit encoding by performing the steps manually.  Furthermore, the "bogus Ack" warning has been removed, since it can actually be triggered due to several reasons (network reordering, old packet, (3) above), hence it is not very useful.  Signed-off-by: Gerrit Renker <gerrit@erg.abdn.ac.uk>
f | packet_history.c | s | 13K | 385 | Gerrit Renker | gerrit@erg.abdn.ac.uk | 1284546962 |  | dccp ccid-3: remove buggy RTT-sampling history lookup  This removes the RTT-sampling function tfrc_tx_hist_rtt(), since   1. it suffered from complex passing of return values (the return value both     indicated successful lookup while the value doubled as RTT sample);   2. when for some odd reason the sample value equalled 0, this triggered a bug     warning about "bogus Ack", due to the ambiguity of the return value;   3. on a passive host which has not sent anything the TX history is empty and     thus will lead to unwanted "bogus Ack" warnings such as     ccid3_hc_tx_packet_recv: server(e7b7d518): DATAACK with bogus ACK-28197148     ccid3_hc_tx_packet_recv: server(e7b7d518): DATAACK with bogus ACK-26641606.  The fix is to replace the implicit encoding by performing the steps manually.  Furthermore, the "bogus Ack" warning has been removed, since it can actually be triggered due to several reasons (network reordering, old packet, (3) above), hence it is not very useful.  Signed-off-by: Gerrit Renker <gerrit@erg.abdn.ac.uk>
f | loss_interval.c | s | 5.5K | 155 | Eric Dumazet | eric.dumazet@gmail.com | 1285277619 |  | net: return operator cleanup  Change "return (EXPR);" to "return EXPR;"  return is not a function, parentheses are not required.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | tfrc_equation.c | s | 18K | 669 | Gerrit Renker | gerrit@erg.abdn.ac.uk | 1285064066 |  | dccp tfrc/ccid-3: computing the loss rate from the Loss Event Rate  This adds a function to take care of the following, separate cases occurring in the computation of the Loss Rate p:   * 1/(2^32-1) is mapped into 0% as per RFC 4342, 8.5;  * 1/0        is mapped into 100%, the maximum;  * to avoid that p = 1/x is rounded down to 0 when x is very large, since this    means accidentally re-entering slow-start indicated by p == 0, the minimum    resolution value of p is now returned instead;  * a bug in ccid3_hc_rx_getsockopt is fixed: 1/0 was mapped into ~0U.  Signed-off-by: Gerrit Renker <gerrit@erg.abdn.ac.uk>
f | loss_interval.h | s | 2.2K | 64 | Gerrit Renker | gerrit@erg.abdn.ac.uk | 1252972974 |  | net-next-2.6 [PATCH 1/1] dccp: ccids whitespace-cleanup / CodingStyle  No code change, cosmetical changes only:   * whitespace cleanup via scripts/cleanfile,  * remove self-references to filename at top of files,  * fix coding style (extraneous brackets),  * fix documentation style (kernel-doc-nano-HOWTO).  Thanks are due to Ivo Augusto Calado who raised these issues by submitting good-quality patches.  Signed-off-by: Gerrit Renker <gerrit@erg.abdn.ac.uk> Signed-off-by: David S. Miller <davem@davemloft.net>
