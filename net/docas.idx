d | sunrpc |  | 31 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1339807043 |  | 
f | Makefile | g | 2.0K |  | Stephen Hemminger | shemminger@vyatta.com | 1337319308 |  | econet: remove ancient bug ridden protocol  More spring cleaning!  The ancient Econet protocol should go. Most of the bug fixes in recent years have been fixing security vulnerabilities. The hardware hasn't been made since the 90s, it is only interesting as an archeological curiosity.  For the truly curious, or insomniac, go read up on it.   http://en.wikipedia.org/wiki/Econet  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | appletalk |  | 6 items |  | Dave Jones | davej@redhat.com | 1339099919 |  | appletalk: Remove out of date message in printk  I accidentally triggered this printk, which amused me for a few moments. Given we're post 2.2, we could just -EACCES, but does anyone even care about Appletalk now ? I figure it's better to leave sleeping dogs lie, and just update the message.  Signed-off-by: Dave Jones <davej@redhat.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | x25 |  | 14 items |  | Eric Dumazet | edumazet@google.com | 1335234508 |  | net: add a limit parameter to sk_add_backlog()  sk_add_backlog() & sk_rcvqueues_full() hard coded sk_rcvbuf as the memory limit. We need to make this limit a parameter for TCP use.  No functional change expected in this patch, all callers still using the old sk_rcvbuf limit.  Signed-off-by: Eric Dumazet <edumazet@google.com> Cc: Neal Cardwell <ncardwell@google.com> Cc: Tom Herbert <therbert@google.com> Cc: Maciej Żenczykowski <maze@google.com> Cc: Yuchung Cheng <ycheng@google.com> Cc: Ilpo Järvinen <ilpo.jarvinen@helsinki.fi> Cc: Rick Jones <rick.jones2@hp.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | sched |  | 56 items |  | Al Viro | viro@zeniv.linux.org.uk | 1338561438 |  | sch_atm.c: get rid of poinless extern  sockfd_lookup() is declared in linux/net.h, which is pulled by linux/skbuff.h (and needed for a lot of other stuff in sch_atm.c anyway).  Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
d | dccp |  | 23 items |  | Eric Dumazet | edumazet@google.com | 1337244621 |  | net: include/net/sock.h cleanup  bool/const conversions where possible  __inline__ -> inline  space cleanups  Signed-off-by: Eric Dumazet <edumazet@google.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | mac802154 |  | 9 items |  | alex.bluesman.smirnov@gmail.com | alex.bluesman.smirnov@gmail.com | 1340667330 |  | mac802154: add missed braces  Add missed braces after 'if' operator.  Signed-off-by: Alexander Smirnov <alex.bluesman.smirnov@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | iucv |  | 4 items |  | Eric Dumazet | edumazet@google.com | 1339799415 |  | net: remove skb_orphan_try()  Orphaning skb in dev_hard_start_xmit() makes bonding behavior unfriendly for applications sending big UDP bursts : Once packets pass the bonding device and come to real device, they might hit a full qdisc and be dropped. Without orphaning, the sender is automatically throttled because sk->sk_wmemalloc reaches sk->sk_sndbuf (assuming sk_sndbuf is not too big)  We could try to defer the orphaning adding another test in dev_hard_start_xmit(), but all this seems of little gain, now that BQL tends to make packets more likely to be parked in Qdisc queues instead of NIC TX ring, in cases where performance matters.  Reverts commits : fc6055a5ba31 net: Introduce skb_orphan_try() 87fd308cfc6b net: skb_tx_hash() fix relative to skb_orphan_try() and removes SKBTX_DRV_NEEDS_SK_REF flag  Reported-and-bisected-by: Jean-Michel Hautbois <jhautbois@gmail.com> Signed-off-by: Eric Dumazet <edumazet@google.com> Tested-by: Oliver Hartkopp <socketcan@hartkopp.net> Acked-by: Oliver Hartkopp <socketcan@hartkopp.net> Signed-off-by: David S. Miller <davem@davemloft.net>
f | sysctl_net.c | s | 2.4K | 91 | Paul Gortmaker | paul.gortmaker@windriver.com | 1337127275 |  | net: delete all instances of special processing for token ring  We are going to delete the Token ring support.  This removes any special processing in the core networking for token ring, (aside from net/tr.c itself), leaving the drivers and remaining tokenring support present but inert.  The mass removal of the drivers and net/tr.c will be in a separate commit, so that the history of these files that we still care about won't have the giant deletion tied into their history.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | unix |  | 6 items |  | Shan Wei | davidshan@tencent.com | 1335401219 |  | net: sock_diag_handler structs can be const  read only, so change it to const.  Signed-off-by: Shan Wei <davidshan@tencent.com> Acked-by: Pavel Emelyanov <xemul@parallels.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | key |  | 2 items |  | Eric Dumazet | eric.dumazet@gmail.com | 1334508280 |  | net: cleanup unsigned to unsigned int  Use of "unsigned int" is preferred to bare "unsigned" in net tree.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | netlabel |  | 15 items |  | Dan Carpenter | dan.carpenter@oracle.com | 1332458997 |  | netlabel: use GFP flags from caller instead of GFP_ATOMIC  This function takes a GFP flags as a parameter, but they are never used. We don't take a lock in this function so there is no reason to prefer GFP_ATOMIC over the caller's GFP flags.  There is only one caller, cipso_v4_map_cat_rng_ntoh(), and it passes GFP_ATOMIC as the GFP flags so this doesn't change how the code works. It's just a cleanup.  Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | 9p |  | 13 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1340907631 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net  Pull networking update from David Miller:   1) Pairing and deadlock fixes in bluetooth from Johan Hedberg.   2) Add device IDs for AR3011 and AR3012 bluetooth chips.  From     Giancarlo Formicuccia and Marek Vasut.   3) Fix wireless regulatory deadlock, from Eliad Peller.   4) Fix full TX ring panic in bnx2x driver, from Eric Dumazet.   5) Revert the two commits that added skb_orphan_try(), it causes     erratic bonding behavior with UDP clients and the gains it used to     give are mostly no longer happening due to how BQL works.  From Eric     Dumazet.   6) It took two tries, but Thomas Graf fixed a problem wherein we     registered ipv6 routing procfs files before their backend data were     initialized properly.   7) Fix max GSO size setting in be2net, from Sarveshwar Bandi.   8) PHY device id mask is wrong for KSZ9021 and KS8001 chips, fix from     Jason Wang.   9) Fix use of stale SKB data pointer after skb_linearize() call in     batman-adv, from Antonio Quartulli.  10) Fix memory leak in IXGBE due to missing __GFP_COMP, from Alexander     Duyck.  11) Fix probing of Gobi devices in qmi_wwan usbnet driver, from Bjørn     Mork.  12) Fix suspend/resume and open failure handling in usbnet from Ming     Lei.  13) Attempt to fix device r8169 hangs for certain chips, from Francois     Romieu.  14) Fix advancement of RX dirty pointer in some situations in sh_eth     driver, from Yoshihiro Shimoda.  15) Attempt to fix restart of IPV6 routing table dumps when there is an     intervening table update.  From Eric Dumazet.  16) Respect security_inet_conn_request() return value in ipv6 TCP.  From     Neal Cardwell.  17) Add another iPAD device ID to ipheth driver, from Davide Gerhard.  18) Fix access to freed SKB in l2tp_eth_dev_xmit(), and fix l2tp lockdep     splats, from Eric Dumazet.  19) Make sure all bridge devices, regardless of whether they were     created via netlink or ioctls, have their rtnetlink ops hooked up.     From Thomas Graf and Stephen Hemminger.  * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (81 commits)   9p: fix min_t() casting in p9pdu_vwritef()   can: flexcan: use be32_to_cpup to handle the value of dt entry   xen/netfront: teardown the device before unregistering it.   bridge: Assign rtnl_link_ops to bridge devices created via ioctl (v2)   vhost: use USER_DS in vhost_worker thread   ixgbe: Do not pad FCoE frames as this can cause issues with FCoE DDP   net: l2tp_eth: use LLTX to avoid LOCKDEP splats   mac802154: add missed braces   net: l2tp_eth: fix l2tp_eth_dev_xmit race   net/mlx4_en: Release QP range in free_resources   net/mlx4: Use single completion vector after NOP failure   net/mlx4_en: Set correct port parameters during device initialization   ipheth: add support for iPad   caif-hsi: Add missing return in error path   caif-hsi: Bugfix - Piggyback'ed embedded CAIF frame lost   caif: Clear shutdown mask to zero at reconnect.   tcp: heed result of security_inet_conn_request() in tcp_v6_conn_request()   ipv6: fib: fix fib dump restart   batman-adv: fix race condition in TT full-table replacement   batman-adv: only drop packets of known wifi clients   ...
f | socket.c | s | 81K | 2887 | Linus Torvalds | torvalds@linux-foundation.org | 1337733467 |  | Merge branch 'for-3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/percpu  Pull percpu updates from Tejun Heo:  "Contains Alex Shi's three patches to remove percpu_xxx() which overlap   with this_cpu_xxx().  There shouldn't be any functional change."  * 'for-3.5' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/percpu:   percpu: remove percpu_xxx() functions   x86: replace percpu_xxx funcs with this_cpu_xxx   net: replace percpu_xxx funcs with this_cpu_xxx or __this_cpu_xxx
d | netlink |  | 3 items |  | Neil Horman | nhorman@tuxdriver.com | 1338345236 |  | genetlink: Build a generic netlink family module alias  Generic netlink searches for -type- formatted aliases when requesting a module to fulfill a protocol request (i.e. net-pf-16-proto-16-type-<x>, where x is a type value).  However generic netlink protocols have no well defined type numbers, they have string names.  Modify genl_ctrl_getfamily to request an alias in the format net-pf-16-proto-16-family-<x> instead, where x is a generic string, and add a macro that builds on the previously added MODULE_ALIAS_NET_PF_PROTO_NAME macro to allow modules to specifify those generic strings.  Note, l2tp previously hacked together an net-pf-16-proto-16-type-l2tp alias using the MODULE_ALIAS macro, with these updates we can convert that to use the PROTO_NAME macro.  Signed-off-by: Neil Horman <nhorman@tuxdriver.com> CC: Eric Dumazet <eric.dumazet@gmail.com> CC: James Chapman <jchapman@katalix.com> CC: David Miller <davem@davemloft.net> Signed-off-by: David S. Miller <davem@davemloft.net>
d | wimax |  | 11 items |  | Eric Dumazet | eric.dumazet@gmail.com | 1334508280 |  | net: cleanup unsigned to unsigned int  Use of "unsigned int" is preferred to bare "unsigned" in net tree.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | ipv6 |  | 51 items |  | Neal Cardwell | ncardwell@google.com | 1340665519 |  | tcp: heed result of security_inet_conn_request() in tcp_v6_conn_request()  If security_inet_conn_request() returns non-zero then TCP/IPv6 should drop the request, just as in TCP/IPv4 and DCCP in both IPv4 and IPv6.  Signed-off-by: Neal Cardwell <ncardwell@google.com> Acked-by: Eric Dumazet <edumazet@google.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | ipx |  | 6 items |  | David S. Miller | davem@davemloft.net | 1337403064 |  | ipx: Remove spurious NULL checking in ipx_ioctl().  We already unconditionally dereference 'sk' via lock_sock(sk) earlier in this function, and our caller (sock_do_ioctl()) makes takes similar liberties.  Reported-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | ieee802154 |  | 14 items |  | alex.bluesman.smirnov@gmail.com | alex.bluesman.smirnov@gmail.com | 1337195828 |  | ieee802154: interface type to be added  This stack implementation distinguishes several types of slave interfaces. Another parameter to 'add_iface_' function is added to clarify the interface type is going to be registered.  Signed-off-by: Alexander Smirnov <alex.bluesman.smirnov@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | compat.c | s | 24K | 773 | Linus Torvalds | torvalds@linux-foundation.org | 1337657256 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security  Pull security subsystem updates from James Morris:  "New notable features:    - The seccomp work from Will Drewry    - PR_{GET,SET}_NO_NEW_PRIVS from Andy Lutomirski    - Longer security labels for Smack from Casey Schaufler    - Additional ptrace restriction modes for Yama by Kees Cook"  Fix up trivial context conflicts in arch/x86/Kconfig and include/linux/filter.h  * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security: (65 commits)   apparmor: fix long path failure due to disconnected path   apparmor: fix profile lookup for unconfined   ima: fix filename hint to reflect script interpreter name   KEYS: Don't check for NULL key pointer in key_validate()   Smack: allow for significantly longer Smack labels v4   gfp flags for security_inode_alloc()?   Smack: recursive tramsmute   Yama: replace capable() with ns_capable()   TOMOYO: Accept manager programs which do not start with / .   KEYS: Add invalidation support   KEYS: Do LRU discard in full keyrings   KEYS: Permit in-place link replacement in keyring list   KEYS: Perform RCU synchronisation on keys prior to key destruction   KEYS: Announce key type (un)registration   KEYS: Reorganise keys Makefile   KEYS: Move the key config into security/keys/Kconfig   KEYS: Use the compat keyctl() syscall wrapper on Sparc64 for Sparc32 compat   Yama: remove an unused variable   samples/seccomp: fix dependencies on arch macros   Yama: add additional ptrace scopes   ...
d | netfilter |  | 113 items |  | Tomasz Bursztyka | tomasz.bursztyka@linux.intel.com | 1340967856 |  | netfilter: nfnetlink: fix missing rcu_read_unlock in nfnetlink_rcv_msg  Bug added in commit 6b75e3e8d664a9a (netfilter: nfnetlink: add RCU in nfnetlink_rcv_msg())  Signed-off-by: Tomasz Bursztyka <tomasz.bursztyka@linux.intel.com> Acked-by: Eric Dumazet <edumazet@google.com> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
d | caif |  | 19 items |  | Sjur Brændeland | sjur.brandeland@stericsson.com | 1340665642 |  | caif: Clear shutdown mask to zero at reconnect.  Clear caif sockets's shutdown mask at (re)connect.  Signed-off-by: Sjur Brændeland <sjur.brandeland@stericsson.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | irda |  | 27 items |  | Eric W. Biederman | ebiederm@xmission.com | 1334971350 |  | net: Convert all sysctl registrations to register_net_sysctl  This results in code with less boiler plate that is a bit easier to read.  Additionally stops us from using compatibility code in the sysctl core, hastening the day when the compatibility code can be removed.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com> Acked-by: Pavel Emelyanov <xemul@parallels.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | ethernet |  | 3 items |  | Joe Perches | joe@perches.com | 1336707181 |  | net, drivers/net: Convert compare_ether_addr_64bits to ether_addr_equal_64bits  Use the new bool function ether_addr_equal_64bits to add some clarity and reduce the likelihood for misuse of compare_ether_addr_64bits for sorting.  Done via cocci script:  $ cat compare_ether_addr_64bits.cocci @@ expression a,b; @@ -	!compare_ether_addr_64bits(a, b) +	ether_addr_equal_64bits(a, b)  @@ expression a,b; @@ -	compare_ether_addr_64bits(a, b) +	!ether_addr_equal_64bits(a, b)  @@ expression a,b; @@ -	!ether_addr_equal_64bits(a, b) == 0 +	ether_addr_equal_64bits(a, b)  @@ expression a,b; @@ -	!ether_addr_equal_64bits(a, b) != 0 +	!ether_addr_equal_64bits(a, b)  @@ expression a,b; @@ -	ether_addr_equal_64bits(a, b) == 0 +	!ether_addr_equal_64bits(a, b)  @@ expression a,b; @@ -	ether_addr_equal_64bits(a, b) != 0 +	ether_addr_equal_64bits(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal_64bits(a, b) +	ether_addr_equal_64bits(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | batman-adv |  | 42 items |  | Antonio Quartulli | ordex@autistici.org | 1340464895 |  | batman-adv: fix race condition in TT full-table replacement  bug introduced with cea194d90b11aff7fc289149e4c7f305fad3535a  In the current TT code, when a TT_Response containing a full table is received from an originator, first the node purges all the clients for that originator in the global translation-table and then merges the newly received table. During the purging phase each client deletion is done by means of a call_rcu() invocation and at the end of this phase the global entry counter for that originator is set to 0. However the invoked rcu function decreases the global entry counter for that originator by one too and since the rcu invocation is likely to be postponed, the node will end up in first setting the counter to 0 and then decreasing it one by one for each deleted client.  This bug leads to having a wrong global entry counter for the related node, say X. Then when the node with the broken counter will answer to a TT_REQUEST on behalf of node X, it will create faulty TT_RESPONSE that will generate an unrecoverable situation on the node that asked for the full table recover.  The non-recoverability is given by the fact that the node with the broken counter will keep answering on behalf of X because its knowledge about X's state (ttvn + tt_crc) is correct.  To solve this problem the counter is not explicitly set to 0 anymore and the counter decrement is performed right before the invocation of call_rcu().  Signed-off-by: Antonio Quartulli <ordex@autistici.org>
d | l2tp |  | 10 items |  | Eric Dumazet | edumazet@google.com | 1340754153 |  | net: l2tp_eth: use LLTX to avoid LOCKDEP splats  Denys Fedoryshchenko reported a LOCKDEP issue with l2tp code.  [ 8683.927442] ====================================================== [ 8683.927555] [ INFO: possible circular locking dependency detected ] [ 8683.927672] 3.4.1-build-0061 #14 Not tainted [ 8683.927782] ------------------------------------------------------- [ 8683.927895] swapper/0/0 is trying to acquire lock: [ 8683.928007]  (slock-AF_INET){+.-...}, at: [<e0fc73ec>] l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121] [ 8683.928121] but task is already holding lock: [ 8683.928121]  (_xmit_ETHER#2){+.-...}, at: [<c02f062d>] sch_direct_xmit+0x36/0x119 [ 8683.928121] [ 8683.928121] which lock already depends on the new lock. [ 8683.928121] [ 8683.928121] [ 8683.928121] the existing dependency chain (in reverse order) is: [ 8683.928121] [ 8683.928121] -> #1 (_xmit_ETHER#2){+.-...}: [ 8683.928121]        [<c015a561>] lock_acquire+0x71/0x85 [ 8683.928121]        [<c034da2d>] _raw_spin_lock+0x33/0x40 [ 8683.928121]        [<c0304e0c>] ip_send_reply+0xf2/0x1ce [ 8683.928121]        [<c0317dbc>] tcp_v4_send_reset+0x153/0x16f [ 8683.928121]        [<c0317f4a>] tcp_v4_do_rcv+0x172/0x194 [ 8683.928121]        [<c031929b>] tcp_v4_rcv+0x387/0x5a0 [ 8683.928121]        [<c03001d0>] ip_local_deliver_finish+0x13a/0x1e9 [ 8683.928121]        [<c0300645>] NF_HOOK.clone.11+0x46/0x4d [ 8683.928121]        [<c030075b>] ip_local_deliver+0x41/0x45 [ 8683.928121]        [<c03005dd>] ip_rcv_finish+0x31a/0x33c [ 8683.928121]        [<c0300645>] NF_HOOK.clone.11+0x46/0x4d [ 8683.928121]        [<c0300960>] ip_rcv+0x201/0x23d [ 8683.928121]        [<c02de91b>] __netif_receive_skb+0x329/0x378 [ 8683.928121]        [<c02deae8>] netif_receive_skb+0x4e/0x7d [ 8683.928121]        [<e08d5ef3>] rtl8139_poll+0x243/0x33d [8139too] [ 8683.928121]        [<c02df103>] net_rx_action+0x90/0x15d [ 8683.928121]        [<c012b2b5>] __do_softirq+0x7b/0x118 [ 8683.928121] [ 8683.928121] -> #0 (slock-AF_INET){+.-...}: [ 8683.928121]        [<c0159f1b>] __lock_acquire+0x9a3/0xc27 [ 8683.928121]        [<c015a561>] lock_acquire+0x71/0x85 [ 8683.928121]        [<c034da2d>] _raw_spin_lock+0x33/0x40 [ 8683.928121]        [<e0fc73ec>] l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]        [<e0fe31fb>] l2tp_eth_dev_xmit+0x1a/0x2f [l2tp_eth] [ 8683.928121]        [<c02e01e7>] dev_hard_start_xmit+0x333/0x3f2 [ 8683.928121]        [<c02f064c>] sch_direct_xmit+0x55/0x119 [ 8683.928121]        [<c02e0528>] dev_queue_xmit+0x282/0x418 [ 8683.928121]        [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]        [<c031f524>] arp_xmit+0x22/0x24 [ 8683.928121]        [<c031f567>] arp_send+0x41/0x48 [ 8683.928121]        [<c031fa7d>] arp_process+0x289/0x491 [ 8683.928121]        [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]        [<c031f7a0>] arp_rcv+0xb1/0xc3 [ 8683.928121]        [<c02de91b>] __netif_receive_skb+0x329/0x378 [ 8683.928121]        [<c02de9d3>] process_backlog+0x69/0x130 [ 8683.928121]        [<c02df103>] net_rx_action+0x90/0x15d [ 8683.928121]        [<c012b2b5>] __do_softirq+0x7b/0x118 [ 8683.928121] [ 8683.928121] other info that might help us debug this: [ 8683.928121] [ 8683.928121]  Possible unsafe locking scenario: [ 8683.928121] [ 8683.928121]        CPU0                    CPU1 [ 8683.928121]        ----                    ---- [ 8683.928121]   lock(_xmit_ETHER#2); [ 8683.928121]                                lock(slock-AF_INET); [ 8683.928121]                                lock(_xmit_ETHER#2); [ 8683.928121]   lock(slock-AF_INET); [ 8683.928121] [ 8683.928121]  *** DEADLOCK *** [ 8683.928121] [ 8683.928121] 3 locks held by swapper/0/0: [ 8683.928121]  #0:  (rcu_read_lock){.+.+..}, at: [<c02dbc10>] rcu_lock_acquire+0x0/0x30 [ 8683.928121]  #1:  (rcu_read_lock_bh){.+....}, at: [<c02dbc10>] rcu_lock_acquire+0x0/0x30 [ 8683.928121]  #2:  (_xmit_ETHER#2){+.-...}, at: [<c02f062d>] sch_direct_xmit+0x36/0x119 [ 8683.928121] [ 8683.928121] stack backtrace: [ 8683.928121] Pid: 0, comm: swapper/0 Not tainted 3.4.1-build-0061 #14 [ 8683.928121] Call Trace: [ 8683.928121]  [<c034bdd2>] ? printk+0x18/0x1a [ 8683.928121]  [<c0158904>] print_circular_bug+0x1ac/0x1b6 [ 8683.928121]  [<c0159f1b>] __lock_acquire+0x9a3/0xc27 [ 8683.928121]  [<c015a561>] lock_acquire+0x71/0x85 [ 8683.928121]  [<e0fc73ec>] ? l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]  [<c034da2d>] _raw_spin_lock+0x33/0x40 [ 8683.928121]  [<e0fc73ec>] ? l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]  [<e0fc73ec>] l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]  [<e0fe31fb>] l2tp_eth_dev_xmit+0x1a/0x2f [l2tp_eth] [ 8683.928121]  [<c02e01e7>] dev_hard_start_xmit+0x333/0x3f2 [ 8683.928121]  [<c02f064c>] sch_direct_xmit+0x55/0x119 [ 8683.928121]  [<c02e0528>] dev_queue_xmit+0x282/0x418 [ 8683.928121]  [<c02e02a6>] ? dev_hard_start_xmit+0x3f2/0x3f2 [ 8683.928121]  [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]  [<c031f524>] arp_xmit+0x22/0x24 [ 8683.928121]  [<c02e02a6>] ? dev_hard_start_xmit+0x3f2/0x3f2 [ 8683.928121]  [<c031f567>] arp_send+0x41/0x48 [ 8683.928121]  [<c031fa7d>] arp_process+0x289/0x491 [ 8683.928121]  [<c031f7f4>] ? __neigh_lookup.clone.20+0x42/0x42 [ 8683.928121]  [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]  [<c031f7a0>] arp_rcv+0xb1/0xc3 [ 8683.928121]  [<c031f7f4>] ? __neigh_lookup.clone.20+0x42/0x42 [ 8683.928121]  [<c02de91b>] __netif_receive_skb+0x329/0x378 [ 8683.928121]  [<c02de9d3>] process_backlog+0x69/0x130 [ 8683.928121]  [<c02df103>] net_rx_action+0x90/0x15d [ 8683.928121]  [<c012b2b5>] __do_softirq+0x7b/0x118 [ 8683.928121]  [<c012b23a>] ? local_bh_enable+0xd/0xd [ 8683.928121]  <IRQ>  [<c012b4d0>] ? irq_exit+0x41/0x91 [ 8683.928121]  [<c0103c6f>] ? do_IRQ+0x79/0x8d [ 8683.928121]  [<c0157ea1>] ? trace_hardirqs_off_caller+0x2e/0x86 [ 8683.928121]  [<c034ef6e>] ? common_interrupt+0x2e/0x34 [ 8683.928121]  [<c0108a33>] ? default_idle+0x23/0x38 [ 8683.928121]  [<c01091a8>] ? cpu_idle+0x55/0x6f [ 8683.928121]  [<c033df25>] ? rest_init+0xa1/0xa7 [ 8683.928121]  [<c033de84>] ? __read_lock_failed+0x14/0x14 [ 8683.928121]  [<c0498745>] ? start_kernel+0x303/0x30a [ 8683.928121]  [<c0498209>] ? repair_env_string+0x51/0x51 [ 8683.928121]  [<c04980a8>] ? i386_start_kernel+0xa8/0xaf  It appears that like most virtual devices, l2tp should be converted to LLTX mode.  This patch takes care of statistics using atomic_long in both RX and TX paths, and fix a bug in l2tp_eth_dev_recv(), which was caching skb->data before a pskb_may_pull() call.  Signed-off-by: Eric Dumazet <edumazet@google.com> Reported-by: Denys Fedoryshchenko <denys@visp.net.lb> Cc: James Chapman <jchapman@katalix.com> Cc: Hong zhi guo <honkiko@gmail.com> Cc: Francois Romieu <romieu@fr.zoreil.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | openvswitch |  | 14 items |  | David S. Miller | davem@davemloft.net | 1337221057 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
d | llc |  | 19 items |  | Eric Dumazet | edumazet@google.com | 1337244621 |  | net: include/net/sock.h cleanup  bool/const conversions where possible  __inline__ -> inline  space cleanups  Signed-off-by: Eric Dumazet <edumazet@google.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | bluetooth |  | 18 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1340907631 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net  Pull networking update from David Miller:   1) Pairing and deadlock fixes in bluetooth from Johan Hedberg.   2) Add device IDs for AR3011 and AR3012 bluetooth chips.  From     Giancarlo Formicuccia and Marek Vasut.   3) Fix wireless regulatory deadlock, from Eliad Peller.   4) Fix full TX ring panic in bnx2x driver, from Eric Dumazet.   5) Revert the two commits that added skb_orphan_try(), it causes     erratic bonding behavior with UDP clients and the gains it used to     give are mostly no longer happening due to how BQL works.  From Eric     Dumazet.   6) It took two tries, but Thomas Graf fixed a problem wherein we     registered ipv6 routing procfs files before their backend data were     initialized properly.   7) Fix max GSO size setting in be2net, from Sarveshwar Bandi.   8) PHY device id mask is wrong for KSZ9021 and KS8001 chips, fix from     Jason Wang.   9) Fix use of stale SKB data pointer after skb_linearize() call in     batman-adv, from Antonio Quartulli.  10) Fix memory leak in IXGBE due to missing __GFP_COMP, from Alexander     Duyck.  11) Fix probing of Gobi devices in qmi_wwan usbnet driver, from Bjørn     Mork.  12) Fix suspend/resume and open failure handling in usbnet from Ming     Lei.  13) Attempt to fix device r8169 hangs for certain chips, from Francois     Romieu.  14) Fix advancement of RX dirty pointer in some situations in sh_eth     driver, from Yoshihiro Shimoda.  15) Attempt to fix restart of IPV6 routing table dumps when there is an     intervening table update.  From Eric Dumazet.  16) Respect security_inet_conn_request() return value in ipv6 TCP.  From     Neal Cardwell.  17) Add another iPAD device ID to ipheth driver, from Davide Gerhard.  18) Fix access to freed SKB in l2tp_eth_dev_xmit(), and fix l2tp lockdep     splats, from Eric Dumazet.  19) Make sure all bridge devices, regardless of whether they were     created via netlink or ioctls, have their rtnetlink ops hooked up.     From Thomas Graf and Stephen Hemminger.  * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (81 commits)   9p: fix min_t() casting in p9pdu_vwritef()   can: flexcan: use be32_to_cpup to handle the value of dt entry   xen/netfront: teardown the device before unregistering it.   bridge: Assign rtnl_link_ops to bridge devices created via ioctl (v2)   vhost: use USER_DS in vhost_worker thread   ixgbe: Do not pad FCoE frames as this can cause issues with FCoE DDP   net: l2tp_eth: use LLTX to avoid LOCKDEP splats   mac802154: add missed braces   net: l2tp_eth: fix l2tp_eth_dev_xmit race   net/mlx4_en: Release QP range in free_resources   net/mlx4: Use single completion vector after NOP failure   net/mlx4_en: Set correct port parameters during device initialization   ipheth: add support for iPad   caif-hsi: Add missing return in error path   caif-hsi: Bugfix - Piggyback'ed embedded CAIF frame lost   caif: Clear shutdown mask to zero at reconnect.   tcp: heed result of security_inet_conn_request() in tcp_v6_conn_request()   ipv6: fib: fix fib dump restart   batman-adv: fix race condition in TT full-table replacement   batman-adv: only drop packets of known wifi clients   ...
d | packet |  | 3 items |  | Eric Dumazet | edumazet@google.com | 1335040602 |  | af_packet: packet_getsockopt() cleanup  Factorize code, since most fetched values are int type.  Signed-off-by: Eric Dumazet <edumazet@google.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | rose |  | 11 items |  | Eric W. Biederman | ebiederm@xmission.com | 1334971350 |  | net: Convert all sysctl registrations to register_net_sysctl  This results in code with less boiler plate that is a bit easier to read.  Additionally stops us from using compatibility code in the sysctl core, hastening the day when the compatibility code can be removed.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com> Acked-by: Pavel Emelyanov <xemul@parallels.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | dsa |  | 8 items |  | Joe Perches | joe@perches.com | 1336610959 |  | dsa: Convert compare_ether_addr to ether_addr_equal  Use the new bool function ether_addr_equal to add some clarity and reduce the likelihood for misuse of compare_ether_addr for sorting.  Done via cocci script:  $ cat compare_ether_addr.cocci @@ expression a,b; @@ -	!compare_ether_addr(a, b) +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	compare_ether_addr(a, b) +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) == 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) != 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) == 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) != 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal(a, b) +	ether_addr_equal(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | wireless |  | 37 items |  | Eliad Peller | eliad@wizery.com | 1339575473 |  | cfg80211: fix potential deadlock in regulatory  reg_timeout_work() calls restore_regulatory_settings() which takes cfg80211_mutex.  reg_set_request_processed() already holds cfg80211_mutex before calling cancel_delayed_work_sync(reg_timeout), so it might deadlock.  Call the async cancel_delayed_work instead, in order to avoid the potential deadlock.  This is the relevant lockdep warning:  cfg80211: Calling CRDA for country: XX  ====================================================== [ INFO: possible circular locking dependency detected ] 3.4.0-rc5-wl+ #26 Not tainted ------------------------------------------------------- kworker/0:2/1391 is trying to acquire lock:  (cfg80211_mutex){+.+.+.}, at: [<bf28ae00>] restore_regulatory_settings+0x34/0x418 [cfg80211]  but task is already holding lock:  ((reg_timeout).work){+.+...}, at: [<c0059e94>] process_one_work+0x1f0/0x480  which lock already depends on the new lock.  the existing dependency chain (in reverse order) is:  -> #2 ((reg_timeout).work){+.+...}:        [<c008fd44>] validate_chain+0xb94/0x10f0        [<c0090b68>] __lock_acquire+0x8c8/0x9b0        [<c0090d40>] lock_acquire+0xf0/0x114        [<c005b600>] wait_on_work+0x4c/0x154        [<c005c000>] __cancel_work_timer+0xd4/0x11c        [<c005c064>] cancel_delayed_work_sync+0x1c/0x20        [<bf28b274>] reg_set_request_processed+0x50/0x78 [cfg80211]        [<bf28bd84>] set_regdom+0x550/0x600 [cfg80211]        [<bf294cd8>] nl80211_set_reg+0x218/0x258 [cfg80211]        [<c03c7738>] genl_rcv_msg+0x1a8/0x1e8        [<c03c6a00>] netlink_rcv_skb+0x5c/0xc0        [<c03c7584>] genl_rcv+0x28/0x34        [<c03c6720>] netlink_unicast+0x15c/0x228        [<c03c6c7c>] netlink_sendmsg+0x218/0x298        [<c03933c8>] sock_sendmsg+0xa4/0xc0        [<c039406c>] __sys_sendmsg+0x1e4/0x268        [<c0394228>] sys_sendmsg+0x4c/0x70        [<c0013840>] ret_fast_syscall+0x0/0x3c  -> #1 (reg_mutex){+.+.+.}:        [<c008fd44>] validate_chain+0xb94/0x10f0        [<c0090b68>] __lock_acquire+0x8c8/0x9b0        [<c0090d40>] lock_acquire+0xf0/0x114        [<c04734dc>] mutex_lock_nested+0x48/0x320        [<bf28b2cc>] reg_todo+0x30/0x538 [cfg80211]        [<c0059f44>] process_one_work+0x2a0/0x480        [<c005a4b4>] worker_thread+0x1bc/0x2bc        [<c0061148>] kthread+0x98/0xa4        [<c0014af4>] kernel_thread_exit+0x0/0x8  -> #0 (cfg80211_mutex){+.+.+.}:        [<c008ed58>] print_circular_bug+0x68/0x2cc        [<c008fb28>] validate_chain+0x978/0x10f0        [<c0090b68>] __lock_acquire+0x8c8/0x9b0        [<c0090d40>] lock_acquire+0xf0/0x114        [<c04734dc>] mutex_lock_nested+0x48/0x320        [<bf28ae00>] restore_regulatory_settings+0x34/0x418 [cfg80211]        [<bf28b200>] reg_timeout_work+0x1c/0x20 [cfg80211]        [<c0059f44>] process_one_work+0x2a0/0x480        [<c005a4b4>] worker_thread+0x1bc/0x2bc        [<c0061148>] kthread+0x98/0xa4        [<c0014af4>] kernel_thread_exit+0x0/0x8  other info that might help us debug this:  Chain exists of:   cfg80211_mutex --> reg_mutex --> (reg_timeout).work   Possible unsafe locking scenario:         CPU0                    CPU1        ----                    ----   lock((reg_timeout).work);                                lock(reg_mutex);                                lock((reg_timeout).work);   lock(cfg80211_mutex);   *** DEADLOCK ***  2 locks held by kworker/0:2/1391:  #0:  (events){.+.+.+}, at: [<c0059e94>] process_one_work+0x1f0/0x480  #1:  ((reg_timeout).work){+.+...}, at: [<c0059e94>] process_one_work+0x1f0/0x480  stack backtrace: [<c001b928>] (unwind_backtrace+0x0/0x12c) from [<c0471d3c>] (dump_stack+0x20/0x24) [<c0471d3c>] (dump_stack+0x20/0x24) from [<c008ef70>] (print_circular_bug+0x280/0x2cc) [<c008ef70>] (print_circular_bug+0x280/0x2cc) from [<c008fb28>] (validate_chain+0x978/0x10f0) [<c008fb28>] (validate_chain+0x978/0x10f0) from [<c0090b68>] (__lock_acquire+0x8c8/0x9b0) [<c0090b68>] (__lock_acquire+0x8c8/0x9b0) from [<c0090d40>] (lock_acquire+0xf0/0x114) [<c0090d40>] (lock_acquire+0xf0/0x114) from [<c04734dc>] (mutex_lock_nested+0x48/0x320) [<c04734dc>] (mutex_lock_nested+0x48/0x320) from [<bf28ae00>] (restore_regulatory_settings+0x34/0x418 [cfg80211]) [<bf28ae00>] (restore_regulatory_settings+0x34/0x418 [cfg80211]) from [<bf28b200>] (reg_timeout_work+0x1c/0x20 [cfg80211]) [<bf28b200>] (reg_timeout_work+0x1c/0x20 [cfg80211]) from [<c0059f44>] (process_one_work+0x2a0/0x480) [<c0059f44>] (process_one_work+0x2a0/0x480) from [<c005a4b4>] (worker_thread+0x1bc/0x2bc) [<c005a4b4>] (worker_thread+0x1bc/0x2bc) from [<c0061148>] (kthread+0x98/0xa4) [<c0061148>] (kthread+0x98/0xa4) from [<c0014af4>] (kernel_thread_exit+0x0/0x8) cfg80211: Calling CRDA to update world regulatory domain cfg80211: World regulatory domain updated: cfg80211:   (start_freq - end_freq @ bandwidth), (max_antenna_gain, max_eirp) cfg80211:   (2402000 KHz - 2472000 KHz @ 40000 KHz), (300 mBi, 2000 mBm) cfg80211:   (2457000 KHz - 2482000 KHz @ 20000 KHz), (300 mBi, 2000 mBm) cfg80211:   (2474000 KHz - 2494000 KHz @ 20000 KHz), (300 mBi, 2000 mBm) cfg80211:   (5170000 KHz - 5250000 KHz @ 40000 KHz), (300 mBi, 2000 mBm) cfg80211:   (5735000 KHz - 5835000 KHz @ 40000 KHz), (300 mBi, 2000 mBm)  Cc: stable@kernel.org Signed-off-by: Eliad Peller <eliad@wizery.com> Signed-off-by: Johannes Berg <johannes.berg@intel.com>
d | bridge |  | 22 items |  | stephen hemminger | shemminger@vyatta.com | 1340770352 |  | bridge: Assign rtnl_link_ops to bridge devices created via ioctl (v2)  This ensures that bridges created with brctl(8) or ioctl(2) directly also carry IFLA_LINKINFO when dumped over netlink. This also allows to create a bridge with ioctl(2) and delete it with RTM_DELLINK.  Signed-off-by: Thomas Graf <tgraf@suug.ch> Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | netrom |  | 10 items |  | Eric W. Biederman | ebiederm@xmission.com | 1334971350 |  | net: Convert all sysctl registrations to register_net_sysctl  This results in code with less boiler plate that is a bit easier to read.  Additionally stops us from using compatibility code in the sysctl core, hastening the day when the compatibility code can be removed.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com> Acked-by: Pavel Emelyanov <xemul@parallels.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | wanrouter |  | 5 items |  | Joe Perches | joe@perches.com | 1337890973 |  | net/wanrouter: Deprecate and schedule for removal  No one uses this on current kernels anymore.  Let it be known it's going to be removed eventually.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | xfrm |  | 14 items |  | Gao feng | gaofeng@cn.fujitsu.com | 1338095482 |  | ipv6: fix incorrect ipsec fragment  Since commit ad0081e43a "ipv6: Fragment locally generated tunnel-mode IPSec6 packets as needed" the fragment of packets is incorrect. because tunnel mode needs IPsec headers and trailer for all fragments, while on transport mode it is sufficient to add the headers to the first fragment and the trailer to the last.  so modify mtu and maxfraglen base on ipsec mode and if fragment is first or last.  with my test,it work well(every fragment's size is the mtu) and does not trigger slow fragment path.  Changes from v1: 	though optimization, mtu_prev and maxfraglen_prev can be delete. 	replace xfrm mode codes with dst_entry's new frag DST_XFRM_TUNNEL. 	add fuction ip6_append_data_mtu to make codes clearer.  Signed-off-by: Gao feng <gaofeng@cn.fujitsu.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | atm |  | 29 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1337739770 |  | Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial  Pull trivial updates from Jiri Kosina:  "As usual, it's mostly typo fixes, redundant code elimination and some   documentation updates."  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/jikos/trivial: (57 commits)   edac, mips: don't change code that has been removed in edac/mips tree   xtensa: Change mail addresses of Hannes Weiner and Oskar Schirmer   lib: Change mail address of Oskar Schirmer   net: Change mail address of Oskar Schirmer   arm/m68k: Change mail address of Sebastian Hess   i2c: Change mail address of Oskar Schirmer   net: Fix tcp_build_and_update_options comment in struct tcp_sock   atomic64_32.h: fix parameter naming mismatch   Kconfig: replace "--- help ---" with "---help---"   c2port: fix bogus Kconfig "default no"   edac: Fix spelling errors.   qla1280: Remove redundant NULL check before release_firmware() call   remoteproc: remove redundant NULL check before release_firmware()   qla2xxx: Remove redundant NULL check before release_firmware() call.   aic94xx: Get rid of redundant NULL check before release_firmware() call   tehuti: delete redundant NULL check before release_firmware()   qlogic: get rid of a redundant test for NULL before call to release_firmware()   bna: remove redundant NULL test before release_firmware()   tg3: remove redundant NULL test before release_firmware() call   typhoon: get rid of redundant conditional before all to release_firmware()   ...
d | 8021q |  | 10 items |  | David S. Miller | davem@davemloft.net | 1337221057 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
d | rds |  | 47 items |  | Thadeu Lima de Souza Cascardo | cascardo@linux.vnet.ibm.com | 1338327007 |  | rds_rdma: don't assume infiniband device is PCI  RDS code assumes that the struct ib_device dma_device member, which is a pointer, points to a struct device embedded in a struct pci_dev.  This is not the case for ehca, for example, which is a OF driver, and makes dma_device point to a struct device embedded in a struct platform_device.  This will make the system crash when rds_rdma is loaded in a system with ehca, since it will try to access the bus member of a non-existent struct pci_dev.  The only reason rds_rdma uses the struct pci_dev is to get the NUMA node the device is attached to. Using dev_to_node for that is much better, since it won't assume which bus the infiniband is attached to.  Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@linux.vnet.ibm.com> Cc: dledford@redhat.com Cc: Jes.Sorensen@redhat.com Cc: Venkat Venkatsubra <venkat.x.venkatsubra@oracle.com> Acked-by: Venkat Venkatsubra <venkat.x.venkatsubra@oracle.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | nfc |  | 10 items |  | Eric Dumazet | edumazet@google.com | 1340667326 |  | NFC: Return from rawsock_release when sk is NULL  Sasha Levin reported following panic :  [ 2136.383310] BUG: unable to handle kernel NULL pointer dereference at 00000000000003b0 [ 2136.384022] IP: [<ffffffff8114e400>] __lock_acquire+0xc0/0x4b0 [ 2136.384022] PGD 131c4067 PUD 11c0c067 PMD 0 [ 2136.388106] Oops: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC [ 2136.388106] CPU 1 [ 2136.388106] Pid: 24855, comm: trinity-child1 Tainted: G        W 3.5.0-rc2-sasha-00015-g7b268f7 #374 [ 2136.388106] RIP: 0010:[<ffffffff8114e400>]  [<ffffffff8114e400>] __lock_acquire+0xc0/0x4b0 [ 2136.388106] RSP: 0018:ffff8800130b3ca8  EFLAGS: 00010046 [ 2136.388106] RAX: 0000000000000086 RBX: ffff88001186b000 RCX: 0000000000000000 [ 2136.388106] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000 [ 2136.388106] RBP: ffff8800130b3d08 R08: 0000000000000001 R09: 0000000000000000 [ 2136.388106] R10: 0000000000000000 R11: 0000000000000001 R12: 0000000000000002 [ 2136.388106] R13: 00000000000003b0 R14: 0000000000000000 R15: 0000000000000000 [ 2136.388106] FS:  00007fa5b1bd4700(0000) GS:ffff88001b800000(0000) knlGS:0000000000000000 [ 2136.388106] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033 [ 2136.388106] CR2: 00000000000003b0 CR3: 0000000011d1f000 CR4: 00000000000406e0 [ 2136.388106] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000 [ 2136.388106] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400 [ 2136.388106] Process trinity-child1 (pid: 24855, threadinfo ffff8800130b2000, task ffff88001186b000) [ 2136.388106] Stack: [ 2136.388106]  ffff8800130b3cd8 ffffffff81121785 ffffffff81236774 000080d000000001 [ 2136.388106]  ffff88001b9d6c00 00000000001d6c00 ffffffff130b3d08 ffff88001186b000 [ 2136.388106]  0000000000000000 0000000000000002 0000000000000000 0000000000000000 [ 2136.388106] Call Trace: [ 2136.388106]  [<ffffffff81121785>] ? sched_clock_local+0x25/0x90 [ 2136.388106]  [<ffffffff81236774>] ? get_empty_filp+0x74/0x220 [ 2136.388106]  [<ffffffff8114e97a>] lock_acquire+0x18a/0x1e0 [ 2136.388106]  [<ffffffff836b37df>] ? rawsock_release+0x4f/0xa0 [ 2136.388106]  [<ffffffff837c0ef0>] _raw_write_lock_bh+0x40/0x80 [ 2136.388106]  [<ffffffff836b37df>] ? rawsock_release+0x4f/0xa0 [ 2136.388106]  [<ffffffff836b37df>] rawsock_release+0x4f/0xa0 [ 2136.388106]  [<ffffffff8321cfe8>] sock_release+0x18/0x70 [ 2136.388106]  [<ffffffff8321d069>] sock_close+0x29/0x30 [ 2136.388106]  [<ffffffff81236bca>] __fput+0x11a/0x2c0 [ 2136.388106]  [<ffffffff81236d85>] fput+0x15/0x20 [ 2136.388106]  [<ffffffff8321de34>] sys_accept4+0x1b4/0x200 [ 2136.388106]  [<ffffffff837c165c>] ? _raw_spin_unlock_irq+0x4c/0x80 [ 2136.388106]  [<ffffffff837c1669>] ? _raw_spin_unlock_irq+0x59/0x80 [ 2136.388106]  [<ffffffff837c2565>] ? sysret_check+0x22/0x5d [ 2136.388106]  [<ffffffff8321de8b>] sys_accept+0xb/0x10 [ 2136.388106]  [<ffffffff837c2539>] system_call_fastpath+0x16/0x1b [ 2136.388106] Code: ec 04 00 0f 85 ea 03 00 00 be d5 0b 00 00 48 c7 c7 8a c1 40 84 e8 b1 a5 f8 ff 31 c0 e9 d4 03 00 00 66 2e 0f 1f 84 00 00 00 00 00 <49> 81 7d 00 60 73 5e 85 b8 01 00 00 00 44 0f 44 e0 83 fe 01 77 [ 2136.388106] RIP  [<ffffffff8114e400>] __lock_acquire+0xc0/0x4b0 [ 2136.388106]  RSP <ffff8800130b3ca8> [ 2136.388106] CR2: 00000000000003b0 [ 2136.388106] ---[ end trace 6d450e935ee18982 ]--- [ 2136.388106] Kernel panic - not syncing: Fatal exception in interrupt  rawsock_release() should test if sock->sk is NULL before calling sock_orphan()/sock_put()  Reported-by: Sasha Levin <levinsasha928@gmail.com> Tested-by: Sasha Levin <levinsasha928@gmail.com> Cc: stable@kernel.org Signed-off-by: Eric Dumazet <edumazet@google.com> Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>
d | sctp |  | 30 items |  | Neil Horman | nhorman@tuxdriver.com | 1341121475 |  | sctp: be more restrictive in transport selection on bundled sacks  It was noticed recently that when we send data on a transport, its possible that we might bundle a sack that arrived on a different transport.  While this isn't a major problem, it does go against the SHOULD requirement in section 6.4 of RFC 2960:   An endpoint SHOULD transmit reply chunks (e.g., SACK, HEARTBEAT ACK,    etc.) to the same destination transport address from which it    received the DATA or control chunk to which it is replying.  This    rule should also be followed if the endpoint is bundling DATA chunks    together with the reply chunk.  This patch seeks to correct that.  It restricts the bundling of sack operations to only those transports which have moved the ctsn of the association forward since the last sack.  By doing this we guarantee that we only bundle outbound saks on a transport that has received a chunk since the last sack.  This brings us into stricter compliance with the RFC.  Vlad had initially suggested that we strictly allow only sack bundling on the transport that last moved the ctsn forward.  While this makes sense, I was concerned that doing so prevented us from bundling in the case where we had received chunks that moved the ctsn on multiple transports.  In those cases, the RFC allows us to select any of the transports having received chunks to bundle the sack on.  so I've modified the approach to allow for that, by adding a state variable to each transport that tracks weather it has moved the ctsn since the last sack.  This I think keeps our behavior (and performance), close enough to our current profile that I think we can do this without a sysctl knob to enable/disable it.  Signed-off-by: Neil Horman <nhorman@tuxdriver.com> CC: Vlad Yaseivch <vyasevich@gmail.com> CC: David S. Miller <davem@davemloft.net> CC: linux-sctp@vger.kernel.org Reported-by: Michele Baldessari <michele@redhat.com> Reported-by: sorin serban <sserban@redhat.com> Acked-by: Vlad Yasevich <vyasevich@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | Kconfig | g | 10K |  | Sam Ravnborg | sam@ravnborg.org | 1337629812 |  | net: drop NET dependency from HAVE_BPF_JIT  There is no point having the NET dependency on the select target, as it forces all users to depend on NET to tell they support BPF_JIT.  Move the config option to the bottom of the file - this could be a nice place also for future "selectable" config symbols.  Fix up all users to drop the dependency on NET now that it is not required to supress warnings for non-NET builds.  Reported-by: Linus Torvalds <torvalds@linux-foundation.org> Signed-off-by: Sam Ravnborg <sam@ravnborg.org> Acked-by: David Miller <davem@davemloft.net> Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
d | tipc |  | 40 items |  | Paul Gortmaker | paul.gortmaker@windriver.com | 1335815636 |  | tipc: compress out gratuitous extra carriage returns  Some of the comment blocks are floating in limbo between two functions, or between blocks of code.  Delete the extra line feeds between any comment and its associated following block of code, to be consistent with the majority of the rest of the kernel.  Also delete trailing newlines at EOF and fix a couple trivial typos in existing comments.  This is a 100% cosmetic change with no runtime impact.  We get rid of over 500 lines of non-code, and being blank line deletes, they won't even show up as noise in git blame.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | ipv4 |  | 80 items |  | Vincent Bernat | bernat@luffy.cx | 1339105856 |  | snmp: fix OutOctets counter to include forwarded datagrams  RFC 4293 defines ipIfStatsOutOctets (similar definition for ipSystemStatsOutOctets):     The total number of octets in IP datagrams delivered to the lower    layers for transmission.  Octets from datagrams counted in    ipIfStatsOutTransmits MUST be counted here.  And ipIfStatsOutTransmits:     The total number of IP datagrams that this entity supplied to the    lower layers for transmission.  This includes datagrams generated    locally and those forwarded by this entity.  Therefore, IPSTATS_MIB_OUTOCTETS must be incremented when incrementing IPSTATS_MIB_OUTFORWDATAGRAMS.  IP_UPD_PO_STATS is not used since ipIfStatsOutRequests must not include forwarded datagrams:     The total number of IP datagrams that local IP user-protocols    (including ICMP) supplied to IP in requests for transmission.  Note    that this counter does not include any datagrams counted in    ipIfStatsOutForwDatagrams.  Signed-off-by: Vincent Bernat <bernat@luffy.cx> Signed-off-by: David S. Miller <davem@davemloft.net>
d | mac80211 |  | 71 items |  | Johannes Berg | johannes.berg@intel.com | 1340822893 |  | mac80211: correct behaviour on unrecognised action frames  When receiving an "individually addressed" action frame, the receiver is required to return it to the sender. mac80211 gets this wrong as it also returns group addressed (mcast) frames to the sender. Fix this and update the reference to the new 802.11 standards version since things were shuffled around significantly.  Cc: stable@kernel.org Signed-off-by: Johannes Berg <johannes.berg@intel.com> Signed-off-by: John W. Linville <linville@tuxdriver.com>
d | 802 |  | 10 items |  | Paul Gortmaker | paul.gortmaker@windriver.com | 1337127796 |  | tokenring: delete all remaining driver support  This represents the mass deletion of the of the tokenring support.  It gets rid of:   - the net/tr.c which the drivers depended on   - the drivers/net component   - the Kbuild infrastructure around it   - any tokenring related CONFIG_ settings in any defconfigs   - the tokenring headers in the include/linux dir   - the firmware associated with the tokenring drivers.   - any associated token ring documentation.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
d | ax25 |  | 21 items |  | David S. Miller | davem@davemloft.net | 1335237317 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net  Fix merge between commit 3adadc08cc1e ("net ax25: Reorder ax25_exit to remove races") and commit 0ca7a4c87d27 ("net ax25: Simplify and cleanup the ax25 sysctl handling")  The former moved around the sysctl register/unregister calls, the later simply removed them.  With help from Stephen Rothwell.  Signed-off-by: David S. Miller <davem@davemloft.net>
d | ceph |  | 25 items |  | Sage Weil | sage@inktank.com | 1340196230 |  | libceph: flush msgr queue during mon_client shutdown  We need to flush the msgr workqueue during mon_client shutdown to ensure that any work affecting our embedded ceph_connection is finished so that we can be safely destroyed.  Previously, we were flushing the work queue after osd_client shutdown and before mon_client shutdown to ensure that any osd connection refs to authorizers are flushed.  Remove the redundant flush, and document in the comment that the mon_client flush is needed to cover that case as well.  Signed-off-by: Sage Weil <sage@inktank.com> Reviewed-by: Alex Elder <elder@inktank.com> (cherry picked from commit f3dea7edd3d449fe7a6d402c1ce56a294b985261)
d | core |  | 36 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1341363714 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net  Pull networking update from David Miller:   1) Fix RX sequence number handling in mwifiex, from Stone Piao.   2) Netfilter ipset mis-compares device names, fix from Florian     Westphal.   3) Fix route leak in ipv6 IPVS, from Eric Dumazet.   4) NFS fixes.  Several buffer overflows in NCI layer from Dan     Rosenberg, and release sock OOPS'er fix from Eric Dumazet.   5) Fix WEP handling ath9k, we started using a bit the chip provides to     indicate undecrypted packets but that bit turns out to be unreliable     in certain configurations.  Fix from Felix Fietkau.   6) Fix Kconfig dependency bug in wlcore, from Randy Dunlap.   7) New USB IDs for rtlwifi driver from Larry Finger.   8) Fix crashes in qmi_wwan usbnet driver when disconnecting, from Bjørn     Mork.   9) Gianfar driver programs coalescing settings properly in single queue     mode, but does not do so in multi-queue mode.  Fix from Claudiu     Manoil.  10) Missing module.h include in davinci_cpdma.c, from Daniel Mack.  11) Need dummy handler for IPSET_CMD_NONE otherwise we crash in ipset if     we get this via nfnetlink, fix from Tomasz Bursztyka.  12) Missing RCU unlock in nfnetlink error path, also from Tomasz.  13) Fix divide by zero in igbvf when the user tries to set an RX     coalescing value of 0 usecs, from Mitch A Williams.  14) We can process SCTP sacks for the wrong transport, oops.  Fix from     Neil Horman.  15) Remove hw IP payload checksumming from e1000e driver.  This has zery     value in our stack, and turning it on creates a very unintuitive     restriction for users when using jumbo MTUs.      Specifically, when IP payload checksums are on you cannot use both     receive hashing offload and jumbo MTU.  Fix from Bruce Allan.  * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (27 commits)   e1000e: remove use of IP payload checksum   sctp: be more restrictive in transport selection on bundled sacks   igbvf: fix divide by zero   netfilter: nfnetlink: fix missing rcu_read_unlock in nfnetlink_rcv_msg   netfilter: ipset: fix crash if IPSET_CMD_NONE command is sent   davinci_cpdma: include linux/module.h   gianfar: Fix RXICr/TXICr programming for multi-queue mode   net: Downgrade CAP_SYS_MODULE deprecated message from error to warning.   net: qmi_wwan: fix Oops while disconnecting   mwifiex: fix memory leak associated with IE manamgement   ath9k: fix panic caused by returning a descriptor we have queued for reuse   mac80211: correct behaviour on unrecognised action frames   ath9k: enable serialize_regmode for non-PCIE AR9287   rtlwifi: rtl8192cu: New USB IDs   NFC: Return from rawsock_release when sk is NULL   iwlwifi: fix activating inactive stations   wlcore: drop INET dependency   ath9k: fix dynamic WEP related regression   NFC: Prevent multiple buffer overflows in NCI   netfilter: update location of my trees   ...
d | phonet |  | 10 items |  | Rémi Denis-Courmont | remi.denis-courmont@nokia.com | 1339975778 |  | net: remove my future former mail address  Signed-off-by: Rémi Denis-Courmont <remi@remlab.net> Cc: Sakari Ailus <sakari.ailus@nokia.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | lapb |  | 7 items |  | Joe Perches | joe@perches.com | 1337294720 |  | lapb: Neaten debugging  Enable dynamic debugging and remove a bunch of #ifdef/#endifs.  Add a lapb_dbg(level, fmt, ...) macro and replace the printk(KERN_DEBUG uses. Add pr_fmt and remove embedded prefixes.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | can |  | 8 items |  | Eric Dumazet | edumazet@google.com | 1339799415 |  | net: remove skb_orphan_try()  Orphaning skb in dev_hard_start_xmit() makes bonding behavior unfriendly for applications sending big UDP bursts : Once packets pass the bonding device and come to real device, they might hit a full qdisc and be dropped. Without orphaning, the sender is automatically throttled because sk->sk_wmemalloc reaches sk->sk_sndbuf (assuming sk_sndbuf is not too big)  We could try to defer the orphaning adding another test in dev_hard_start_xmit(), but all this seems of little gain, now that BQL tends to make packets more likely to be parked in Qdisc queues instead of NIC TX ring, in cases where performance matters.  Reverts commits : fc6055a5ba31 net: Introduce skb_orphan_try() 87fd308cfc6b net: skb_tx_hash() fix relative to skb_orphan_try() and removes SKBTX_DRV_NEEDS_SK_REF flag  Reported-and-bisected-by: Jean-Michel Hautbois <jhautbois@gmail.com> Signed-off-by: Eric Dumazet <edumazet@google.com> Tested-by: Oliver Hartkopp <socketcan@hartkopp.net> Acked-by: Oliver Hartkopp <socketcan@hartkopp.net> Signed-off-by: David S. Miller <davem@davemloft.net>
d | dcb |  | 4 items |  | John Fastabend | john.r.fastabend@intel.com | 1335397637 |  | net: dcb: add CEE notify calls  This adds code to trigger CEE events when an APP change or setall command is made from user space. This simplifies user space code significantly by creating a single interface to listen on that works with both firmware and userland agents.  And if we end up with multiple agents this keeps every thing in sync userland agents, firmware agents, and kernel notifier consumers.  For an example agent that listens for these events see:  https://github.com/jrfastab/cgdcbxd  cgdcbxd is a daemon used to monitor DCB netlink events and manage the net_prio control group sub-system.  Signed-off-by: John Fastabend <john.r.fastabend@intel.com> Acked-by: Shmulik Ravid <shmulikr@broadcom.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | decnet |  | 16 items |  | Joe Perches | joe@perches.com | 1337103903 |  | net: Convert net_ratelimit uses to net_<level>_ratelimited  Standardize the net core ratelimited logging functions.  Coalesce formats, align arguments. Change a printk then vprintk sequence to use printf extension %pV.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | rxrpc |  | 21 items |  | Eric Dumazet | eric.dumazet@gmail.com | 1334508280 |  | net: cleanup unsigned to unsigned int  Use of "unsigned int" is preferred to bare "unsigned" in net tree.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | dns_resolver |  | 5 items |  | Linus Torvalds | torvalds@linux-foundation.org | 1337657256 |  | Merge branch 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security  Pull security subsystem updates from James Morris:  "New notable features:    - The seccomp work from Will Drewry    - PR_{GET,SET}_NO_NEW_PRIVS from Andy Lutomirski    - Longer security labels for Smack from Casey Schaufler    - Additional ptrace restriction modes for Yama by Kees Cook"  Fix up trivial context conflicts in arch/x86/Kconfig and include/linux/filter.h  * 'next' of git://git.kernel.org/pub/scm/linux/kernel/git/jmorris/linux-security: (65 commits)   apparmor: fix long path failure due to disconnected path   apparmor: fix profile lookup for unconfined   ima: fix filename hint to reflect script interpreter name   KEYS: Don't check for NULL key pointer in key_validate()   Smack: allow for significantly longer Smack labels v4   gfp flags for security_inode_alloc()?   Smack: recursive tramsmute   Yama: replace capable() with ns_capable()   TOMOYO: Accept manager programs which do not start with / .   KEYS: Add invalidation support   KEYS: Do LRU discard in full keyrings   KEYS: Permit in-place link replacement in keyring list   KEYS: Perform RCU synchronisation on keys prior to key destruction   KEYS: Announce key type (un)registration   KEYS: Reorganise keys Makefile   KEYS: Move the key config into security/keys/Kconfig   KEYS: Use the compat keyctl() syscall wrapper on Sparc64 for Sparc32 compat   Yama: remove an unused variable   samples/seccomp: fix dependencies on arch macros   Yama: add additional ptrace scopes   ...
d | rfkill |  | 7 items |  | Paul Gortmaker | paul.gortmaker@windriver.com | 1331490457 |  | device.h: cleanup users outside of linux/include (C files)  For files that are actively using linux/device.h, make sure that they call it out.  This will allow us to clean up some of the implicit uses of linux/device.h within include/* without introducing build regressions.  Yes, this was created by "cheating" -- i.e. the headers were cleaned up, and then the fallout was found and fixed, and then the two commits were reordered.  This ensures we don't introduce build regressions into the git history.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | nonet.c | s | 552B | 23 | Arnd Bergmann | arnd@arndb.de | 1287150807 |  | llseek: automatically add .llseek fop  All file_operations should get a .llseek operation so we can make nonseekable_open the default for future file operations without a .llseek pointer.  The three cases that we can automatically detect are no_llseek, seq_lseek and default_llseek. For cases where we can we can automatically prove that the file offset is always ignored, we use noop_llseek, which maintains the current behavior of not returning an error from a seek.  New drivers should normally not use noop_llseek but instead use no_llseek and call nonseekable_open at open time.  Existing drivers can be converted to do the same when the maintainer knows for certain that no user code relies on calling seek on the device file.  The generated code is often incorrectly indented and right now contains comments that clarify for each added line why a specific variant was chosen. In the version that gets submitted upstream, the comments will be gone and I will manually fix the indentation, because there does not seem to be a way to do that using coccinelle.  Some amount of new code is currently sitting in linux-next that should get the same modifications, which I will do at the end of the merge window.  Many thanks to Julia Lawall for helping me learn to write a semantic patch that does all this.  ===== begin semantic patch ===== // This adds an llseek= method to all file operations, // as a preparation for making no_llseek the default. // // The rules are // - use no_llseek explicitly if we do nonseekable_open // - use seq_lseek for sequential files // - use default_llseek if we know we access f_pos // - use noop_llseek if we know we don't access f_pos, //   but we still want to allow users to call lseek // @ open1 exists @ identifier nested_open; @@ nested_open(...) { <+... nonseekable_open(...) ...+> }  @ open exists@ identifier open_f; identifier i, f; identifier open1.nested_open; @@ int open_f(struct inode *i, struct file *f) { <+... ( nonseekable_open(...) || nested_open(...) ) ...+> }  @ read disable optional_qualifier exists @ identifier read_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; expression E; identifier func; @@ ssize_t read_f(struct file *f, char *p, size_t s, loff_t *off) { <+... (    *off = E ||    *off += E ||    func(..., off, ...) ||    E = *off ) ...+> }  @ read_no_fpos disable optional_qualifier exists @ identifier read_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; @@ ssize_t read_f(struct file *f, char *p, size_t s, loff_t *off) { ... when != off }  @ write @ identifier write_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; expression E; identifier func; @@ ssize_t write_f(struct file *f, const char *p, size_t s, loff_t *off) { <+... (   *off = E ||   *off += E ||   func(..., off, ...) ||   E = *off ) ...+> }  @ write_no_fpos @ identifier write_f; identifier f, p, s, off; type ssize_t, size_t, loff_t; @@ ssize_t write_f(struct file *f, const char *p, size_t s, loff_t *off) { ... when != off }  @ fops0 @ identifier fops; @@ struct file_operations fops = {  ... };  @ has_llseek depends on fops0 @ identifier fops0.fops; identifier llseek_f; @@ struct file_operations fops = { ...  .llseek = llseek_f, ... };  @ has_read depends on fops0 @ identifier fops0.fops; identifier read_f; @@ struct file_operations fops = { ...  .read = read_f, ... };  @ has_write depends on fops0 @ identifier fops0.fops; identifier write_f; @@ struct file_operations fops = { ...  .write = write_f, ... };  @ has_open depends on fops0 @ identifier fops0.fops; identifier open_f; @@ struct file_operations fops = { ...  .open = open_f, ... };  // use no_llseek if we call nonseekable_open //////////////////////////////////////////// @ nonseekable1 depends on !has_llseek && has_open @ identifier fops0.fops; identifier nso ~= "nonseekable_open"; @@ struct file_operations fops = { ...  .open = nso, ... +.llseek = no_llseek, /* nonseekable */ };  @ nonseekable2 depends on !has_llseek @ identifier fops0.fops; identifier open.open_f; @@ struct file_operations fops = { ...  .open = open_f, ... +.llseek = no_llseek, /* open uses nonseekable */ };  // use seq_lseek for sequential files ///////////////////////////////////// @ seq depends on !has_llseek @ identifier fops0.fops; identifier sr ~= "seq_read"; @@ struct file_operations fops = { ...  .read = sr, ... +.llseek = seq_lseek, /* we have seq_read */ };  // use default_llseek if there is a readdir /////////////////////////////////////////// @ fops1 depends on !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier readdir_e; @@ // any other fop is used that changes pos struct file_operations fops = { ... .readdir = readdir_e, ... +.llseek = default_llseek, /* readdir is present */ };  // use default_llseek if at least one of read/write touches f_pos ///////////////////////////////////////////////////////////////// @ fops2 depends on !fops1 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read.read_f; @@ // read fops use offset struct file_operations fops = { ... .read = read_f, ... +.llseek = default_llseek, /* read accesses f_pos */ };  @ fops3 depends on !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier write.write_f; @@ // write fops use offset struct file_operations fops = { ... .write = write_f, ... +	.llseek = default_llseek, /* write accesses f_pos */ };  // Use noop_llseek if neither read nor write accesses f_pos ///////////////////////////////////////////////////////////  @ fops4 depends on !fops1 && !fops2 && !fops3 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read_no_fpos.read_f; identifier write_no_fpos.write_f; @@ // write fops use offset struct file_operations fops = { ...  .write = write_f,  .read = read_f, ... +.llseek = noop_llseek, /* read and write both use no f_pos */ };  @ depends on has_write && !has_read && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier write_no_fpos.write_f; @@ struct file_operations fops = { ... .write = write_f, ... +.llseek = noop_llseek, /* write uses no f_pos */ };  @ depends on has_read && !has_write && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; identifier read_no_fpos.read_f; @@ struct file_operations fops = { ... .read = read_f, ... +.llseek = noop_llseek, /* read uses no f_pos */ };  @ depends on !has_read && !has_write && !fops1 && !fops2 && !has_llseek && !nonseekable1 && !nonseekable2 && !seq @ identifier fops0.fops; @@ struct file_operations fops = { ... +.llseek = noop_llseek, /* no read or write fn */ }; ===== End semantic patch =====  Signed-off-by: Arnd Bergmann <arnd@arndb.de> Cc: Julia Lawall <julia@diku.dk> Cc: Christoph Hellwig <hch@infradead.org>
