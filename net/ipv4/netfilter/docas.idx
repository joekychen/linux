f | arp_tables.c | s | 46K | 1640 | Joe Perches | joe@perches.com | 1337103903 |  | net: Convert net_ratelimit uses to net_<level>_ratelimited  Standardize the net core ratelimited logging functions.  Coalesce formats, align arguments. Change a printk then vprintk sequence to use printf extension %pV.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | Makefile | g | 2.3K |  | Pablo Neira Ayuso | pablo@netfilter.org | 1336501542 |  | netfilter: remove ip_queue support  This patch removes ip_queue support which was marked as obsolete years ago. The nfnetlink_queue modules provides more advanced user-space packet queueing mechanism.  This patch also removes capability code included in SELinux that refers to ip_queue. Otherwise, we break compilation.  Several warning has been sent regarding this to the mailing list in the past month without anyone rising the hand to stop this with some strong argument.  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_defrag_ipv4.c | s | 3.2K | 109 | Paul Gortmaker | paul.gortmaker@windriver.com | 1308713614 |  | ip: introduce ip_is_fragment helper inline function  There are enough instances of this:      iph->frag_off & htons(IP_MF || IP_OFFSET)  that a helper function is probably warranted.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | ipt_REDIRECT.c | s | 3.0K | 94 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_proto_sctp.c | s | 2.5K | 81 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_sip.c | s | 16K | 493 | Eric Dumazet | eric.dumazet@gmail.com | 1334508280 |  | net: cleanup unsigned to unsigned int  Use of "unsigned int" is preferred to bare "unsigned" in net tree.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_h323.c | s | 17K | 543 | Joe Perches | joe@perches.com | 1337103903 |  | net: Convert net_ratelimit uses to net_<level>_ratelimited  Standardize the net core ratelimited logging functions.  Coalesce formats, align arguments. Change a printk then vprintk sequence to use printf extension %pV.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_tftp.c | s | 1.3K | 43 | Stephen Hemminger | shemminger@vyatta.com | 1312284563 |  | rcu: convert uses of rcu_assign_pointer(x, NULL) to RCU_INIT_POINTER  When assigning a NULL value to an RCU protected pointer, no barrier is needed. The rcu_assign_pointer, used to handle that but will soon change to not handle the special case.  Convert all rcu_assign_pointer of NULL value.  //smpl @@ expression P; @@  - rcu_assign_pointer(P, NULL) + RCU_INIT_POINTER(P, NULL)  // </smpl>  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_proto_tcp.c | s | 2.6K | 78 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_amanda.c | s | 2.3K | 72 | Stephen Hemminger | shemminger@vyatta.com | 1312284563 |  | rcu: convert uses of rcu_assign_pointer(x, NULL) to RCU_INIT_POINTER  When assigning a NULL value to an RCU protected pointer, no barrier is needed. The rcu_assign_pointer, used to handle that but will soon change to not handle the special case.  Convert all rcu_assign_pointer of NULL value.  //smpl @@ expression P; @@  - rcu_assign_pointer(P, NULL) + RCU_INIT_POINTER(P, NULL)  // </smpl>  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | ipt_REJECT.c | s | 5.2K | 181 | Julian Anastasov | ja@ssi.bg | 1309351652 |  | netfilter: Fix ip_route_me_harder triggering ip_rt_bug  	Avoid creating input routes with ip_route_me_harder. It does not work for locally generated packets. Instead, restrict sockets to provide valid saddr for output route (or unicast saddr for transparent proxy). For other traffic allow saddr to be unicast or local but if callers forget to check saddr type use 0 for the output route.  	The resulting handling should be:  - REJECT TCP: 	- in INPUT we can provide addr_type = RTN_LOCAL but 	better allow rejecting traffic delivered with 	local route (no IP address => use RTN_UNSPEC to 	allow also RTN_UNICAST). 	- FORWARD: RTN_UNSPEC => allow RTN_LOCAL/RTN_UNICAST 	saddr, add fix to ignore RTN_BROADCAST and RTN_MULTICAST 	- OUTPUT: RTN_UNSPEC  - NAT, mangle, ip_queue, nf_ip_reroute: RTN_UNSPEC in LOCAL_OUT  - IPVS: 	- use RTN_LOCAL in LOCAL_OUT and FORWARD after SNAT 	to restrict saddr to be local  Signed-off-by: Julian Anastasov <ja@ssi.bg> Signed-off-by: David S. Miller <davem@davemloft.net>
f | iptable_security.c | s | 3.0K | 94 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | nf_nat_proto_gre.c | s | 3.9K | 128 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_helper.c | s | 12K | 376 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: nf_nat: remove obsolete check in nf_nat_mangle_udp_packet()  The packet size check originates from a time when UDP helpers could accidentally mangle incorrect packets (NEWNAT) and is unnecessary nowadays since the conntrack helpers invoke the NAT helpers for the proper packet directly.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_proto_icmp.c | s | 2.4K | 73 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_irc.c | s | 2.7K | 85 | Stephen Hemminger | shemminger@vyatta.com | 1312284563 |  | rcu: convert uses of rcu_assign_pointer(x, NULL) to RCU_INIT_POINTER  When assigning a NULL value to an RCU protected pointer, no barrier is needed. The rcu_assign_pointer, used to handle that but will soon change to not handle the special case.  Convert all rcu_assign_pointer of NULL value.  //smpl @@ expression P; @@  - rcu_assign_pointer(P, NULL) + RCU_INIT_POINTER(P, NULL)  // </smpl>  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_proto_common.c | s | 3.1K | 102 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | ipt_CLUSTERIP.c | s | 18K | 617 | Joe Perches | joe@perches.com | 1337103903 |  | net: Convert net_ratelimit uses to net_<level>_ratelimited  Standardize the net core ratelimited logging functions.  Coalesce formats, align arguments. Change a printk then vprintk sequence to use printf extension %pV.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_ftp.c | s | 3.6K | 115 | Stephen Hemminger | shemminger@vyatta.com | 1312284563 |  | rcu: convert uses of rcu_assign_pointer(x, NULL) to RCU_INIT_POINTER  When assigning a NULL value to an RCU protected pointer, no barrier is needed. The rcu_assign_pointer, used to handle that but will soon change to not handle the special case.  Convert all rcu_assign_pointer of NULL value.  //smpl @@ expression P; @@  - rcu_assign_pointer(P, NULL) + RCU_INIT_POINTER(P, NULL)  // </smpl>  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Acked-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | ipt_rpfilter.c | s | 3.5K | 121 | Florian Westphal | fw@strlen.de | 1323035017 |  | netfilter: add ipv4 reverse path filter match  This tries to do the same thing as fib_validate_source(), but differs in several aspects.  The most important difference is that the reverse path filter built into fib_validate_source uses the oif as iif when performing the reverse lookup.  We do not do this, as the oif is not yet known by the time the PREROUTING hook is invoked.  We can't wait until FORWARD chain because by the time FORWARD is invoked ipv4 forward path may have already sent icmp messages is response to to-be-discarded-via-rpfilter packets.  To avoid the such an additional lookup in PREROUTING, Patrick McHardy suggested to attach the path information directly in the match (i.e., just do what the standard ipv4 path does a bit earlier in PREROUTING).  This works, but it also has a few caveats. Most importantly, when using marks in PREROUTING to re-route traffic based on the nfmark, -m rpfilter would have to be used after the nfmark has been set; otherwise the nfmark would have no effect (because the route is already attached).  Another problem would be interaction with -j TPROXY, as this target sets an nfmark and uses ACCEPT instead of continue, i.e. such a version of -m rpfilter cannot be used for the initial to-be-intercepted packets.  In case in turns out that the oif is required, we can add Patricks suggestion with a new match option (e.g. --rpf-use-oif) to keep ruleset compatibility.  Another difference to current builtin ipv4 rpfilter is that packets subject to ipsec transformation are not automatically excluded. If you want this, simply combine -m rpfilter with the policy match.  Packets arriving on loopback interfaces always match.  Signed-off-by: Florian Westphal <fw@strlen.de> Acked-by: David S. Miller <davem@davemloft.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_snmp_basic.c | s | 28K | 1113 | Joe Perches | joe@perches.com | 1337103903 |  | net: Convert net_ratelimit uses to net_<level>_ratelimited  Standardize the net core ratelimited logging functions.  Coalesce formats, align arguments. Change a printk then vprintk sequence to use printf extension %pV.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_proto_unknown.c | s | 1.4K | 45 | Patrick McHardy | kaber@trash.net | 1324647405 |  | netfilter: nat: remove module reference counting from NAT protocols  The only remaining user of NAT protocol module reference counting is NAT ctnetlink support. Since this is a fairly short sequence of code, convert over to use RCU and remove module reference counting.  Module unregistration is already protected by RCU using synchronize_rcu(), so no further changes are necessary.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_pptp.c | s | 9.7K | 268 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_rule.c | s | 5.5K | 178 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_proto_udplite.c | s | 2.7K | 83 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_nat_core.c | s | 21K | 634 | Pablo Neira Ayuso | pablo@netfilter.org | 1331138446 |  | netfilter: ctnetlink: allow to set expectfn for expectations  This patch allows you to set expectfn which is specifically used by the NAT side of most of the existing conntrack helpers.  I have added a symbol map that uses a string as key to look up for the function that is attached to the expectation object. This is the best solution I came out with to solve this issue.  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | arpt_mangle.c | s | 2.3K | 80 | Pablo Neira Ayuso | pablo@netfilter.org | 1296572626 |  | netfilter: arpt_mangle: fix return values of checkentry  In 135367b "netfilter: xtables: change xt_target.checkentry return type", the type returned by checkentry was changed from boolean to int, but the return values where not adjusted.  arptables: Input/output error  This broke arptables with the mangle target since it returns true under success, which is interpreted by xtables as >0, thus returning EIO.  Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | ipt_NETMAP.c | s | 2.8K | 84 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_l3proto_ipv4.c | s | 12K | 409 | Eric W. Biederman | ebiederm@xmission.com | 1334971350 |  | net: Convert nf_conntrack_proto to use register_net_sysctl  There isn't much advantage here except that strings paths are a bit easier to read, and converting everything to them allows me to kill off ctl_path.  Signed-off-by: Eric W. Biederman <ebiederm@xmission.com> Acked-by: Pavel Emelyanov <xemul@parallels.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_proto_udp.c | s | 2.3K | 73 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | ipt_ah.c | s | 2.3K | 78 | Jan Engelhardt | jengelh@medozas.de | 1273595727 |  | netfilter: xtables: change hotdrop pointer to direct modification  Since xt_action_param is writable, let's use it. The pointer to 'bool hotdrop' always worried (8 bytes (64-bit) to write 1 byte!). Surprisingly results in a reduction in size:     text    data     bss filename 5457066  692730  357892 vmlinux.o-prev 5456554  692730  357892 vmlinux.o  Signed-off-by: Jan Engelhardt <jengelh@medozas.de>
f | iptable_raw.c | s | 2.3K | 79 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | iptable_filter.c | s | 3.0K | 95 | Rusty Russell | rusty@rustcorp.com.au | 1332470177 |  | netfilter: remove forward module param confusion.  It used to be an int, and it got changed to a bool parameter at least 7 years ago.  It happens that NF_ACCEPT and NF_DROP are 0 and 1, so this works, but it's unclear, and the check that it's in range is not required.  Reported-by: Dan Carpenter <dan.carpenter@oracle.com> Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_conntrack_proto_icmp.c | s | 10K | 322 | David S. Miller | davem@davemloft.net | 1333355623 |  | netfilter: ipv4: Stop using NLA_PUT*().  These macros contain a hidden goto, and are thus extremely error prone and make code hard to audit.  Signed-off-by: David S. Miller <davem@davemloft.net>
f | Kconfig | g | 11K |  | Richard Weinberger | richard@nod.at | 1331138449 |  | netfilter: merge ipt_LOG and ip6_LOG into xt_LOG  ipt_LOG and ip6_LOG have a lot of common code, merge them to reduce duplicate code.  Signed-off-by: Richard Weinberger <richard@nod.at> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | ipt_MASQUERADE.c | s | 4.4K | 143 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | ipt_ULOG.c | s | 11K | 366 | Rusty Russell | rusty@rustcorp.com.au | 1324351649 |  | module_param: make bool parameters really bool (net & drivers/net)  module_param(bool) used to counter-intuitively take an int.  In fddd5201 (mid-2009) we allowed bool or int/unsigned int using a messy trick.  It's time to remove the int/unsigned int option.  For this version it'll simply give a warning, but it'll break next kernel version.  (Thanks to Joe Perches for suggesting coccinelle for 0/1 -> true/false).  Cc: "David S. Miller" <davem@davemloft.net> Cc: netdev@vger.kernel.org Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> Signed-off-by: David S. Miller <davem@davemloft.net>
f | arptable_filter.c | s | 2.3K | 76 | Tejun Heo | tj@kernel.org | 1269954152 |  | include cleanup: Update gfp.h and slab.h includes to prepare for breaking implicit slab.h inclusion from percpu.h  percpu.h is included by sched.h and module.h and thus ends up being included when building most .c files.  percpu.h includes slab.h which in turn includes gfp.h making everything defined by the two files universally available and complicating inclusion dependencies.  percpu.h -> slab.h dependency is about to be removed.  Prepare for this change by updating users of gfp and slab facilities include those headers directly instead of assuming availability.  As this conversion needs to touch large number of source files, the following script is used as the basis of conversion.    http://userweb.kernel.org/~tj/misc/slabh-sweep.py  The script does the followings.  * Scan files for gfp and slab usages and update includes such that   only the necessary includes are there.  ie. if only gfp is used,   gfp.h, if slab is used, slab.h.  * When the script inserts a new include, it looks at the include   blocks and try to put the new include such that its order conforms   to its surrounding.  It's put in the include block which contains   core kernel includes, in the same order that the rest are ordered -   alphabetical, Christmas tree, rev-Xmas-tree or at the end if there   doesn't seem to be any matching order.  * If the script can't find a place to put a new include (mostly   because the file doesn't have fitting include block), it prints out   an error message indicating which .h file needs to be added to the   file.  The conversion was done in the following steps.  1. The initial automatic conversion of all .c files updated slightly    over 4000 files, deleting around 700 includes and adding ~480 gfp.h    and ~3000 slab.h inclusions.  The script emitted errors for ~400    files.  2. Each error was manually checked.  Some didn't need the inclusion,    some needed manual addition while adding it to implementation .h or    embedding .c file was more appropriate for others.  This step added    inclusions to around 150 files.  3. The script was run again and the output was compared to the edits    from #2 to make sure no file was left behind.  4. Several build tests were done and a couple of problems were fixed.    e.g. lib/decompress_*.c used malloc/free() wrappers around slab    APIs requiring slab.h to be added manually.  5. The script was run on all .h files but without automatically    editing them as sprinkling gfp.h and slab.h inclusions around .h    files could easily lead to inclusion dependency hell.  Most gfp.h    inclusion directives were ignored as stuff from gfp.h was usually    wildly available and often used in preprocessor macros.  Each    slab.h inclusion directive was examined and added manually as    necessary.  6. percpu.h was updated not to include slab.h.  7. Build test were done on the following configurations and failures    were fixed.  CONFIG_GCOV_KERNEL was turned off for all tests (as my    distributed build env didn't work with gcov compiles) and a few    more options had to be turned off depending on archs to make things    build (like ipr on powerpc/64 which failed due to missing writeq).     * x86 and x86_64 UP and SMP allmodconfig and a custom test config.    * powerpc and powerpc64 SMP allmodconfig    * sparc and sparc64 SMP allmodconfig    * ia64 SMP allmodconfig    * s390 SMP allmodconfig    * alpha SMP allmodconfig    * um on x86_64 SMP allmodconfig  8. percpu.h modifications were reverted so that it could be applied as    a separate patch and serve as bisection point.  Given the fact that I had only a couple of failures from tests on step 6, I'm fairly confident about the coverage of this conversion patch. If there is a breakage, it's likely to be something in one of the arch headers which should be easily discoverable easily on most builds of the specific arch.  Signed-off-by: Tejun Heo <tj@kernel.org> Guess-its-ok-by: Christoph Lameter <cl@linux-foundation.org> Cc: Ingo Molnar <mingo@redhat.com> Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
f | iptable_mangle.c | s | 3.8K | 129 | Florian Westphal | fw@strlen.de | 1295515406 |  | netfilter: do not omit re-route check on NF_QUEUE verdict  ret != NF_QUEUE only works in the "--queue-num 0" case; for queues > 0 the test should be '(ret & NF_VERDICT_MASK) != NF_QUEUE'.  However, NF_QUEUE no longer DROPs the skb unconditionally if queueing fails (due to NF_VERDICT_FLAG_QUEUE_BYPASS verdict flag), so the re-route test should also be performed if this flag is set in the verdict.  The full test would then look something like  && ((ret & NF_VERDICT_MASK) == NF_QUEUE && (ret & NF_VERDICT_FLAG_QUEUE_BYPASS))  This is rather ugly, so just remove the NF_QUEUE test altogether.  The only effect is that we might perform an unnecessary route lookup in the NF_QUEUE case.  ip6table_mangle did not have such a check.  Signed-off-by: Florian Westphal <fw@strlen.de> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | ipt_ECN.c | s | 3.7K | 118 | Jan Engelhardt | jengelh@medozas.de | 1273595477 |  | netfilter: xtables: substitute temporary defines by final name  Signed-off-by: Jan Engelhardt <jengelh@medozas.de>
f | ip_tables.c | s | 54K | 1970 | Joe Perches | joe@perches.com | 1337103903 |  | net: Convert net_ratelimit uses to net_<level>_ratelimited  Standardize the net core ratelimited logging functions.  Coalesce formats, align arguments. Change a printk then vprintk sequence to use printf extension %pV.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | nf_nat_proto_dccp.c | s | 2.8K | 89 | Patrick McHardy | kaber@trash.net | 1324647406 |  | netfilter: ctnetlink: remove dead NAT code  The NAT range to nlattr conversation callbacks and helpers are entirely dead code and are also useless since there are no NAT ranges in conntrack context, they are only used for initially selecting a tuple. The final NAT information is contained in the selected tuples of the conntrack entry.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
f | nf_conntrack_l3proto_ipv4_compat.c | s | 10K | 386 | Paul Gortmaker | paul.gortmaker@windriver.com | 1320103830 |  | net: Add export.h for EXPORT_SYMBOL/THIS_MODULE to non-modules  These files are non modular, but need to export symbols using the macros now living in export.h -- call out the include so that things won't break when we remove the implicit presence of module.h from everywhere.  Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
f | nf_nat_standalone.c | s | 8.2K | 289 | Patrick McHardy | kaber@trash.net | 1324647403 |  | netfilter: nf_nat: export NAT definitions to userspace  Export the NAT definitions to userspace. So far userspace (specifically, iptables) has been copying the headers files from include/net. Also rename some structures and definitions in preparation for IPv6 NAT. Since these have never been officially exported, this doesn't affect existing userspace code.  Signed-off-by: Patrick McHardy <kaber@trash.net> Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
