f | br_sysfs_br.c | s | 23K | 721 | Herbert Xu | herbert@gondor.apana.org.au | 1334508695 |  | bridge: Add multicast_querier toggle and disable queries by default  Sending general queries was implemented as an optimisation to speed up convergence on start-up.  In order to prevent interference with multicast routers a zero source address has to be used.  Unfortunately these packets appear to cause some multicast-aware switches to misbehave, e.g., by disrupting multicast packets to us.  Since the multicast snooping feature still functions without sending our own queries, this patch will change the default to not send queries.  For those that need queries in order to speed up convergence on start-up, a toggle is provided to restore the previous behaviour.  Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_stp_bpdu.c | s | 5.4K | 191 | Joe Perches | joe@perches.com | 1336610957 |  | bridge: Convert compare_ether_addr to ether_addr_equal  Use the new bool function ether_addr_equal to add some clarity and reduce the likelihood for misuse of compare_ether_addr for sorting.  Done via cocci script:  $ cat compare_ether_addr.cocci @@ expression a,b; @@ -	!compare_ether_addr(a, b) +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	compare_ether_addr(a, b) +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) == 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) != 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) == 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) != 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal(a, b) +	ether_addr_equal(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_ioctl.c | s | 8.7K | 313 | David S. Miller | davem@davemloft.net | 1302554665 |  | Merge branch 'master' of master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6  Conflicts: 	drivers/net/smsc911x.c
f | Makefile | g | 474B |  | Herbert Xu | herbert@gondor.apana.org.au | 1267346925 |  | bridge: Add core IGMP snooping support  This patch adds the core functionality of IGMP snooping support without actually hooking it up.  So this patch should be a no-op as far as the bridge's external behaviour is concerned.  All the new code and data is controlled by the Kconfig option BRIDGE_IGMP_SNOOPING.  A run-time toggle is also available.  The multicast switching is done using an hash table that is lockless on the read-side through RCU.  On the write-side the new multicast_lock is used for all operations.  The hash table supports dynamic growth/rehashing.  The hash table will be rehashed if any chain length exceeds a preset limit.  If rehashing does not reduce the maximum chain length then snooping will be disabled.  These features may be added in future (in no particular order):  * IGMPv3 source support * Non-querier router detection * IPv6  Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_stp.c | s | 12K | 439 | Eric Dumazet | eric.dumazet@gmail.com | 1334508280 |  | net: cleanup unsigned to unsigned int  Use of "unsigned int" is preferred to bare "unsigned" in net tree.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_private.h | s | 15K | 485 | stephen hemminger | shemminger@vyatta.com | 1340770352 |  | bridge: Assign rtnl_link_ops to bridge devices created via ioctl (v2)  This ensures that bridges created with brctl(8) or ioctl(2) directly also carry IFLA_LINKINFO when dumped over netlink. This also allows to create a bridge with ioctl(2) and delete it with RTM_DELLINK.  Signed-off-by: Thomas Graf <tgraf@suug.ch> Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_private_stp.h | s | 1.9K | 57 | Eric Dumazet | eric.dumazet@gmail.com | 1334508280 |  | net: cleanup unsigned to unsigned int  Use of "unsigned int" is preferred to bare "unsigned" in net tree.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_stp_timer.c | s | 4.5K | 143 | Eric Dumazet | eric.dumazet@gmail.com | 1334508280 |  | net: cleanup unsigned to unsigned int  Use of "unsigned int" is preferred to bare "unsigned" in net tree.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_netfilter.c | s | 27K | 911 | Eldad Zack | eldad@fogrefinery.com | 1337284191 |  | ipv6: correct the ipv6 option name - Pad0 to Pad1  The padding destination or hop-by-hop option is called Pad1 and not Pad0.  See RFC2460 (4.2) or the IANA ipv6-parameters registry: http://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xml  Signed-off-by: Eldad Zack <eldad@fogrefinery.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_multicast.c | s | 39K | 1477 | Eldad Zack | eldad@fogrefinery.com | 1337284191 |  | ipv6: correct the ipv6 option name - Pad0 to Pad1  The padding destination or hop-by-hop option is called Pad1 and not Pad0.  See RFC2460 (4.2) or the IANA ipv6-parameters registry: http://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xml  Signed-off-by: Eldad Zack <eldad@fogrefinery.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_device.c | s | 8.5K | 304 | Joe Perches | joe@perches.com | 1336610957 |  | bridge: Convert compare_ether_addr to ether_addr_equal  Use the new bool function ether_addr_equal to add some clarity and reduce the likelihood for misuse of compare_ether_addr for sorting.  Done via cocci script:  $ cat compare_ether_addr.cocci @@ expression a,b; @@ -	!compare_ether_addr(a, b) +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	compare_ether_addr(a, b) +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) == 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) != 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) == 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) != 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal(a, b) +	ether_addr_equal(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
d | netfilter |  | 24 items |  | Joe Perches | joe@perches.com | 1336610957 |  | bridge: netfilter: Convert compare_ether_addr to ether_addr_equal  Use the new bool function ether_addr_equal to add some clarity and reduce the likelihood for misuse of compare_ether_addr for sorting.  Done via cocci script:  $ cat compare_ether_addr.cocci @@ expression a,b; @@ -	!compare_ether_addr(a, b) +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	compare_ether_addr(a, b) +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) == 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) != 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) == 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) != 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal(a, b) +	ether_addr_equal(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Acked-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_forward.c | s | 6.1K | 225 | David S. Miller | davem@davemloft.net | 1336448140 |  | Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net  Conflicts: 	drivers/net/ethernet/intel/e1000e/param.c 	drivers/net/wireless/iwlwifi/iwl-agn-rx.c 	drivers/net/wireless/iwlwifi/iwl-trans-pcie-rx.c 	drivers/net/wireless/iwlwifi/iwl-trans.h  Resolved the iwlwifi conflict with mainline using 3-way diff posted by John Linville and Stephen Rothwell.  In 'net' we added a bug fix to make iwlwifi report a more accurate skb->truesize but this conflicted with RX path changes that happened meanwhile in net-next.  In e1000e a conflict arose in the validation code for settings of adapter->itr.  'net-next' had more sophisticated logic so that logic was used.  Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_stp_if.c | s | 7.4K | 243 | Joe Perches | joe@perches.com | 1336610957 |  | bridge: Convert compare_ether_addr to ether_addr_equal  Use the new bool function ether_addr_equal to add some clarity and reduce the likelihood for misuse of compare_ether_addr for sorting.  Done via cocci script:  $ cat compare_ether_addr.cocci @@ expression a,b; @@ -	!compare_ether_addr(a, b) +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	compare_ether_addr(a, b) +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) == 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) != 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) == 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) != 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal(a, b) +	ether_addr_equal(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_input.c | s | 5.6K | 194 | Joe Perches | joe@perches.com | 1336610957 |  | bridge: Convert compare_ether_addr to ether_addr_equal  Use the new bool function ether_addr_equal to add some clarity and reduce the likelihood for misuse of compare_ether_addr for sorting.  Done via cocci script:  $ cat compare_ether_addr.cocci @@ expression a,b; @@ -	!compare_ether_addr(a, b) +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	compare_ether_addr(a, b) +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) == 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) != 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) == 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) != 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal(a, b) +	ether_addr_equal(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_sysfs_if.c | s | 7.6K | 242 | stephen hemminger | shemminger@vyatta.com | 1301962949 |  | bridge: range check STP parameters  Apply restrictions on STP parameters based 802.1D 1998 standard.    * Fixes missing locking in set path cost ioctl    * Uses common code for both ioctl and sysfs  This is based on an earlier patch Sasikanth V but with overhaul.  Note: 1. It does NOT enforce the restriction on the relationship max_age and    forward delay or hello time because in existing implementation these are    set as independant operations.  2. If STP is disabled, there is no restriction on forward delay  3. No restriction on holding time because users use Linux code to act    as hub or be sticky.  4. Although standard allow 0-255, Linux only allows 0-63 for port priority    because more bits are reserved for port number.  Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_fdb.c | s | 15K | 575 | Joe Perches | joe@perches.com | 1336610957 |  | bridge: Convert compare_ether_addr to ether_addr_equal  Use the new bool function ether_addr_equal to add some clarity and reduce the likelihood for misuse of compare_ether_addr for sorting.  Done via cocci script:  $ cat compare_ether_addr.cocci @@ expression a,b; @@ -	!compare_ether_addr(a, b) +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	compare_ether_addr(a, b) +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) == 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!ether_addr_equal(a, b) != 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) == 0 +	!ether_addr_equal(a, b)  @@ expression a,b; @@ -	ether_addr_equal(a, b) != 0 +	ether_addr_equal(a, b)  @@ expression a,b; @@ -	!!ether_addr_equal(a, b) +	ether_addr_equal(a, b)  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_if.c | s | 9.2K | 356 | stephen hemminger | shemminger@vyatta.com | 1340770352 |  | bridge: Assign rtnl_link_ops to bridge devices created via ioctl (v2)  This ensures that bridges created with brctl(8) or ioctl(2) directly also carry IFLA_LINKINFO when dumped over netlink. This also allows to create a bridge with ioctl(2) and delete it with RTM_DELLINK.  Signed-off-by: Thomas Graf <tgraf@suug.ch> Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_notify.c | s | 2.6K | 92 | Andrei Warkentin | andreiw@motorola.com | 1312951484 |  | Bridge: Always send NETDEV_CHANGEADDR up on br MAC change.  This ensures the neighbor entries associated with the bridge dev are flushed, also invalidating the associated cached L2 headers.  This means we br_add_if/br_del_if ports to implement hand-over and not wind up with bridge packets going out with stale MAC.  This means we can also change MAC of port device and also not wind up with bridge packets going out with stale MAC.  This builds on Stephen Hemminger's patch, also handling the br_del_if case and the port MAC change case.  Cc: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: Andrei Warkentin <andreiw@motorola.com> Acked-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | Kconfig | g | 1.6K |  | Randy Dunlap | randy.dunlap@oracle.com | 1299793557 |  | net: bridge builtin vs. ipv6 modular  When configs BRIDGE=y and IPV6=m, this build error occurs:  br_multicast.c:(.text+0xa3341): undefined reference to `ipv6_dev_get_saddr'  BRIDGE_IGMP_SNOOPING is boolean; if it were tristate, then adding 	depends on IPV6 |||| IPV6=n to BRIDGE_IGMP_SNOOPING would be a good fix.  As it is currently, making BRIDGE depend on the IPV6 config works.  Reported-by: Patrick Schaaf <netdev@bof.de> Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br_netlink.c | s | 5.9K | 210 | stephen hemminger | shemminger@vyatta.com | 1340770352 |  | bridge: Assign rtnl_link_ops to bridge devices created via ioctl (v2)  This ensures that bridges created with brctl(8) or ioctl(2) directly also carry IFLA_LINKINFO when dumped over netlink. This also allows to create a bridge with ioctl(2) and delete it with RTM_DELLINK.  Signed-off-by: Thomas Graf <tgraf@suug.ch> Signed-off-by: Stephen Hemminger <shemminger@vyatta.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | br.c | s | 2.0K | 86 | Igor Maravić | igorm@etf.rs | 1324068592 |  | net:bridge: use IS_ENABLED  Use IS_ENABLED(CONFIG_FOO) instead of defined(CONFIG_FOO) |||| defined (CONFIG_FOO_MODULE)  Signed-off-by: Igor Maravić <igorm@etf.rs> Signed-off-by: David S. Miller <davem@davemloft.net>
