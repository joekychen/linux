f | l2tp_eth.c | s | 8.0K | 284 | Eric Dumazet | edumazet@google.com | 1340754153 |  | net: l2tp_eth: use LLTX to avoid LOCKDEP splats  Denys Fedoryshchenko reported a LOCKDEP issue with l2tp code.  [ 8683.927442] ====================================================== [ 8683.927555] [ INFO: possible circular locking dependency detected ] [ 8683.927672] 3.4.1-build-0061 #14 Not tainted [ 8683.927782] ------------------------------------------------------- [ 8683.927895] swapper/0/0 is trying to acquire lock: [ 8683.928007]  (slock-AF_INET){+.-...}, at: [<e0fc73ec>] l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121] [ 8683.928121] but task is already holding lock: [ 8683.928121]  (_xmit_ETHER#2){+.-...}, at: [<c02f062d>] sch_direct_xmit+0x36/0x119 [ 8683.928121] [ 8683.928121] which lock already depends on the new lock. [ 8683.928121] [ 8683.928121] [ 8683.928121] the existing dependency chain (in reverse order) is: [ 8683.928121] [ 8683.928121] -> #1 (_xmit_ETHER#2){+.-...}: [ 8683.928121]        [<c015a561>] lock_acquire+0x71/0x85 [ 8683.928121]        [<c034da2d>] _raw_spin_lock+0x33/0x40 [ 8683.928121]        [<c0304e0c>] ip_send_reply+0xf2/0x1ce [ 8683.928121]        [<c0317dbc>] tcp_v4_send_reset+0x153/0x16f [ 8683.928121]        [<c0317f4a>] tcp_v4_do_rcv+0x172/0x194 [ 8683.928121]        [<c031929b>] tcp_v4_rcv+0x387/0x5a0 [ 8683.928121]        [<c03001d0>] ip_local_deliver_finish+0x13a/0x1e9 [ 8683.928121]        [<c0300645>] NF_HOOK.clone.11+0x46/0x4d [ 8683.928121]        [<c030075b>] ip_local_deliver+0x41/0x45 [ 8683.928121]        [<c03005dd>] ip_rcv_finish+0x31a/0x33c [ 8683.928121]        [<c0300645>] NF_HOOK.clone.11+0x46/0x4d [ 8683.928121]        [<c0300960>] ip_rcv+0x201/0x23d [ 8683.928121]        [<c02de91b>] __netif_receive_skb+0x329/0x378 [ 8683.928121]        [<c02deae8>] netif_receive_skb+0x4e/0x7d [ 8683.928121]        [<e08d5ef3>] rtl8139_poll+0x243/0x33d [8139too] [ 8683.928121]        [<c02df103>] net_rx_action+0x90/0x15d [ 8683.928121]        [<c012b2b5>] __do_softirq+0x7b/0x118 [ 8683.928121] [ 8683.928121] -> #0 (slock-AF_INET){+.-...}: [ 8683.928121]        [<c0159f1b>] __lock_acquire+0x9a3/0xc27 [ 8683.928121]        [<c015a561>] lock_acquire+0x71/0x85 [ 8683.928121]        [<c034da2d>] _raw_spin_lock+0x33/0x40 [ 8683.928121]        [<e0fc73ec>] l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]        [<e0fe31fb>] l2tp_eth_dev_xmit+0x1a/0x2f [l2tp_eth] [ 8683.928121]        [<c02e01e7>] dev_hard_start_xmit+0x333/0x3f2 [ 8683.928121]        [<c02f064c>] sch_direct_xmit+0x55/0x119 [ 8683.928121]        [<c02e0528>] dev_queue_xmit+0x282/0x418 [ 8683.928121]        [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]        [<c031f524>] arp_xmit+0x22/0x24 [ 8683.928121]        [<c031f567>] arp_send+0x41/0x48 [ 8683.928121]        [<c031fa7d>] arp_process+0x289/0x491 [ 8683.928121]        [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]        [<c031f7a0>] arp_rcv+0xb1/0xc3 [ 8683.928121]        [<c02de91b>] __netif_receive_skb+0x329/0x378 [ 8683.928121]        [<c02de9d3>] process_backlog+0x69/0x130 [ 8683.928121]        [<c02df103>] net_rx_action+0x90/0x15d [ 8683.928121]        [<c012b2b5>] __do_softirq+0x7b/0x118 [ 8683.928121] [ 8683.928121] other info that might help us debug this: [ 8683.928121] [ 8683.928121]  Possible unsafe locking scenario: [ 8683.928121] [ 8683.928121]        CPU0                    CPU1 [ 8683.928121]        ----                    ---- [ 8683.928121]   lock(_xmit_ETHER#2); [ 8683.928121]                                lock(slock-AF_INET); [ 8683.928121]                                lock(_xmit_ETHER#2); [ 8683.928121]   lock(slock-AF_INET); [ 8683.928121] [ 8683.928121]  *** DEADLOCK *** [ 8683.928121] [ 8683.928121] 3 locks held by swapper/0/0: [ 8683.928121]  #0:  (rcu_read_lock){.+.+..}, at: [<c02dbc10>] rcu_lock_acquire+0x0/0x30 [ 8683.928121]  #1:  (rcu_read_lock_bh){.+....}, at: [<c02dbc10>] rcu_lock_acquire+0x0/0x30 [ 8683.928121]  #2:  (_xmit_ETHER#2){+.-...}, at: [<c02f062d>] sch_direct_xmit+0x36/0x119 [ 8683.928121] [ 8683.928121] stack backtrace: [ 8683.928121] Pid: 0, comm: swapper/0 Not tainted 3.4.1-build-0061 #14 [ 8683.928121] Call Trace: [ 8683.928121]  [<c034bdd2>] ? printk+0x18/0x1a [ 8683.928121]  [<c0158904>] print_circular_bug+0x1ac/0x1b6 [ 8683.928121]  [<c0159f1b>] __lock_acquire+0x9a3/0xc27 [ 8683.928121]  [<c015a561>] lock_acquire+0x71/0x85 [ 8683.928121]  [<e0fc73ec>] ? l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]  [<c034da2d>] _raw_spin_lock+0x33/0x40 [ 8683.928121]  [<e0fc73ec>] ? l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]  [<e0fc73ec>] l2tp_xmit_skb+0x173/0x47e [l2tp_core] [ 8683.928121]  [<e0fe31fb>] l2tp_eth_dev_xmit+0x1a/0x2f [l2tp_eth] [ 8683.928121]  [<c02e01e7>] dev_hard_start_xmit+0x333/0x3f2 [ 8683.928121]  [<c02f064c>] sch_direct_xmit+0x55/0x119 [ 8683.928121]  [<c02e0528>] dev_queue_xmit+0x282/0x418 [ 8683.928121]  [<c02e02a6>] ? dev_hard_start_xmit+0x3f2/0x3f2 [ 8683.928121]  [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]  [<c031f524>] arp_xmit+0x22/0x24 [ 8683.928121]  [<c02e02a6>] ? dev_hard_start_xmit+0x3f2/0x3f2 [ 8683.928121]  [<c031f567>] arp_send+0x41/0x48 [ 8683.928121]  [<c031fa7d>] arp_process+0x289/0x491 [ 8683.928121]  [<c031f7f4>] ? __neigh_lookup.clone.20+0x42/0x42 [ 8683.928121]  [<c031f4fb>] NF_HOOK.clone.19+0x45/0x4c [ 8683.928121]  [<c031f7a0>] arp_rcv+0xb1/0xc3 [ 8683.928121]  [<c031f7f4>] ? __neigh_lookup.clone.20+0x42/0x42 [ 8683.928121]  [<c02de91b>] __netif_receive_skb+0x329/0x378 [ 8683.928121]  [<c02de9d3>] process_backlog+0x69/0x130 [ 8683.928121]  [<c02df103>] net_rx_action+0x90/0x15d [ 8683.928121]  [<c012b2b5>] __do_softirq+0x7b/0x118 [ 8683.928121]  [<c012b23a>] ? local_bh_enable+0xd/0xd [ 8683.928121]  <IRQ>  [<c012b4d0>] ? irq_exit+0x41/0x91 [ 8683.928121]  [<c0103c6f>] ? do_IRQ+0x79/0x8d [ 8683.928121]  [<c0157ea1>] ? trace_hardirqs_off_caller+0x2e/0x86 [ 8683.928121]  [<c034ef6e>] ? common_interrupt+0x2e/0x34 [ 8683.928121]  [<c0108a33>] ? default_idle+0x23/0x38 [ 8683.928121]  [<c01091a8>] ? cpu_idle+0x55/0x6f [ 8683.928121]  [<c033df25>] ? rest_init+0xa1/0xa7 [ 8683.928121]  [<c033de84>] ? __read_lock_failed+0x14/0x14 [ 8683.928121]  [<c0498745>] ? start_kernel+0x303/0x30a [ 8683.928121]  [<c0498209>] ? repair_env_string+0x51/0x51 [ 8683.928121]  [<c04980a8>] ? i386_start_kernel+0xa8/0xaf  It appears that like most virtual devices, l2tp should be converted to LLTX mode.  This patch takes care of statistics using atomic_long in both RX and TX paths, and fix a bug in l2tp_eth_dev_recv(), which was caching skb->data before a pskb_may_pull() call.  Signed-off-by: Eric Dumazet <edumazet@google.com> Reported-by: Denys Fedoryshchenko <denys@visp.net.lb> Cc: James Chapman <jchapman@katalix.com> Cc: Hong zhi guo <honkiko@gmail.com> Cc: Francois Romieu <romieu@fr.zoreil.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | l2tp_core.h | s | 9.1K | 258 | Joe Perches | joe@perches.com | 1337243678 |  | net: l2tp: Standardize logging styles  Use more current logging styles.  Add pr_fmt to prefix output appropriately. Convert printks to pr_<level>. Convert PRINTK macros to new l2tp_<level> macros. Neaten some <foo>_refcount debugging macros. Use print_hex_dump_bytes instead of hand-coded loops. Coalesce formats and align arguments.  Some KERN_DEBUG output is not now emitted unless dynamic_debugging is enabled.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: James Chapman <jchapman@katalix.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | l2tp_core.c | s | 50K | 1600 | Joe Perches | joe@perches.com | 1337243678 |  | net: l2tp: Standardize logging styles  Use more current logging styles.  Add pr_fmt to prefix output appropriately. Convert printks to pr_<level>. Convert PRINTK macros to new l2tp_<level> macros. Neaten some <foo>_refcount debugging macros. Use print_hex_dump_bytes instead of hand-coded loops. Coalesce formats and align arguments.  Some KERN_DEBUG output is not now emitted unless dynamic_debugging is enabled.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: James Chapman <jchapman@katalix.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | Makefile | g | 518B |  | Chris Elston | celston@katalix.com | 1335879055 |  | l2tp: introduce L2TPv3 IP encapsulation support for IPv6  L2TPv3 defines an IP encapsulation packet format where data is carried directly over IP (no UDP). The kernel already has support for L2TP IP encapsulation over IPv4 (l2tp_ip). This patch introduces support for L2TP IP encapsulation over IPv6.  The implementation is derived from ipv6/raw and ipv4/l2tp_ip.  Signed-off-by: Chris Elston <celston@katalix.com> Signed-off-by: James Chapman <jchapman@katalix.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | l2tp_ip.c | s | 15K | 535 | Eric Dumazet | edumazet@google.com | 1339191051 |  | l2tp: fix a race in l2tp_ip_sendmsg()  Commit 081b1b1bb27f (l2tp: fix l2tp_ip_sendmsg() route handling) added a race, in case IP route cache is disabled.  In this case, we should not do the dst_release(&rt->dst), since it'll free the dst immediately, instead of waiting a RCU grace period.  Signed-off-by: Eric Dumazet <edumazet@google.com> Cc: James Chapman <jchapman@katalix.com> Cc: Denys Fedoryshchenko <denys@visp.net.lb> Signed-off-by: David S. Miller <davem@davemloft.net>
f | l2tp_ip6.c | s | 19K | 663 | James Chapman | jchapman@katalix.com | 1338326384 |  | l2tp: fix oops in L2TP IP sockets for connect() AF_UNSPEC case  An application may call connect() to disconnect a socket using an address with family AF_UNSPEC. The L2TP IP sockets were not handling this case when the socket is not bound and an attempt to connect() using AF_UNSPEC in such cases would result in an oops. This patch addresses the problem by protecting the sk_prot->disconnect() call against trying to unhash the socket before it is bound.  The L2TP IPv4 and IPv6 sockets have the same problem. Both are fixed by this patch.  The patch also adds more checks that the sockaddr supplied to bind() and connect() calls is valid.   RIP: 0010:[<ffffffff82e133b0>]  [<ffffffff82e133b0>] inet_unhash+0x50/0xd0  RSP: 0018:ffff88001989be28  EFLAGS: 00010293  Stack:   ffff8800407a8000 0000000000000000 ffff88001989be78 ffffffff82e3a249   ffffffff82e3a050 ffff88001989bec8 ffff88001989be88 ffff8800407a8000   0000000000000010 ffff88001989bec8 ffff88001989bea8 ffffffff82e42639  Call Trace:  [<ffffffff82e3a249>] udp_disconnect+0x1f9/0x290  [<ffffffff82e42639>] inet_dgram_connect+0x29/0x80  [<ffffffff82d012fc>] sys_connect+0x9c/0x100  Reported-by: Sasha Levin <levinsasha928@gmail.com> Signed-off-by: James Chapman <jchapman@katalix.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | l2tp_debugfs.c | s | 9.1K | 296 | Joe Perches | joe@perches.com | 1337243678 |  | net: l2tp: Standardize logging styles  Use more current logging styles.  Add pr_fmt to prefix output appropriately. Convert printks to pr_<level>. Convert PRINTK macros to new l2tp_<level> macros. Neaten some <foo>_refcount debugging macros. Use print_hex_dump_bytes instead of hand-coded loops. Coalesce formats and align arguments.  Some KERN_DEBUG output is not now emitted unless dynamic_debugging is enabled.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: James Chapman <jchapman@katalix.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | l2tp_ppp.c | s | 48K | 1607 | Joe Perches | joe@perches.com | 1337243678 |  | net: l2tp: Standardize logging styles  Use more current logging styles.  Add pr_fmt to prefix output appropriately. Convert printks to pr_<level>. Convert PRINTK macros to new l2tp_<level> macros. Neaten some <foo>_refcount debugging macros. Use print_hex_dump_bytes instead of hand-coded loops. Coalesce formats and align arguments.  Some KERN_DEBUG output is not now emitted unless dynamic_debugging is enabled.  Signed-off-by: Joe Perches <joe@perches.com> Signed-off-by: James Chapman <jchapman@katalix.com> Signed-off-by: David S. Miller <davem@davemloft.net>
f | l2tp_netlink.c | s | 23K | 787 | Neil Horman | nhorman@tuxdriver.com | 1338345236 |  | genetlink: Build a generic netlink family module alias  Generic netlink searches for -type- formatted aliases when requesting a module to fulfill a protocol request (i.e. net-pf-16-proto-16-type-<x>, where x is a type value).  However generic netlink protocols have no well defined type numbers, they have string names.  Modify genl_ctrl_getfamily to request an alias in the format net-pf-16-proto-16-family-<x> instead, where x is a generic string, and add a macro that builds on the previously added MODULE_ALIAS_NET_PF_PROTO_NAME macro to allow modules to specifify those generic strings.  Note, l2tp previously hacked together an net-pf-16-proto-16-type-l2tp alias using the MODULE_ALIAS macro, with these updates we can convert that to use the PROTO_NAME macro.  Signed-off-by: Neil Horman <nhorman@tuxdriver.com> CC: Eric Dumazet <eric.dumazet@gmail.com> CC: James Chapman <jchapman@katalix.com> CC: David Miller <davem@davemloft.net> Signed-off-by: David S. Miller <davem@davemloft.net>
f | Kconfig | g | 3.6K |  | James Chapman | jchapman@katalix.com | 1270331767 |  | l2tp: Add debugfs files for dumping l2tp debug info  The existing pppol2tp driver exports debug info to /proc/net/pppol2tp. Rather than adding info to that file for the new functionality added in this patch series, we add new files in debugfs, leaving the old /proc file for backwards compatibility (L2TPv2 only).  Currently only one file is provided: l2tp/tunnels, which lists internal debug info for all l2tp tunnels and sessions. More files may be added later. The info is for debug and problem analysis only - userspace apps should use netlink to obtain status about l2tp tunnels and sessions.  Although debugfs does not support net namespaces, the tunnels and sessions dumped in l2tp/tunnels are only those in the net namespace of the process reading the file.  Signed-off-by: James Chapman <jchapman@katalix.com> Signed-off-by: David S. Miller <davem@davemloft.net>
