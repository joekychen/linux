f | stallwarn.txt | g | 8.8K |  | Paul E. McKenney | paul.mckenney@linaro.org | 1329843832 |  | rcu: Update stall-warning documentation  Add documentation of CONFIG_RCU_CPU_STALL_VERBOSE, CONFIG_RCU_CPU_STALL_INFO, and RCU_STALL_DELAY_DELTA.  Describe multiple stall-warning messages from a single stall, and the timing of the subsequent messages.  Add headings. Remove RCU_SECONDS_TILL_STALL_RECHECK because this value is now computed at runtime from RCU_CPU_STALL_TIMEOUT, so that sysfs changes to the timeout value now directly affect the RCU_SECONDS_TILL_STALL_RECHECK value.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | lockdep.txt | g | 4.7K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1317271105 |  | rcu: Update documentation for additional RCU lockdep functions  Add documentation for rcu_dereference_bh_check(), rcu_dereference_sched_check(), srcu_dereference_check(), and rcu_dereference_index_check().  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | listRCU.txt | g | 10K |  | Jesper Dangaard Brouer | hawk@comx.dk | 1238661230 |  | Doc: Fix wrong API example usage of call_rcu().  At some point the API of call_rcu() changed from three parameters to two parameters, correct the documentation.  One confusing thing in RCU/listRCU.txt, which is NOT fixed in this patch, is that no reason or explaination is given for using call_rcu() instead of the normal synchronize_rcu() call.  Reviewed-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>  Signed-off-by: Jesper Dangaard Brouer <hawk@comx.dk> Signed-off-by: David S. Miller <davem@davemloft.net>
f | lockdep-splat.txt | g | 4.8K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1317271108 |  | rcu: Document interpretation of RCU-lockdep splats  There has been quite a bit of confusion about what RCU-lockdep splats mean, so this commit adds some documentation describing how to interpret them.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | checklist.txt | g | 19K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1329843968 |  | rcu: Call out dangers of expedited RCU primitives  The expedited RCU primitives can be quite useful, but they have some high costs as well.  This commit updates and creates docbook comments calling out the costs, and updates the RCU documentation as well.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | RTFP.txt | g | 71K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1329843801 |  | rcu: Bring RTFP.txt up to date.  Add publications from 2010 and 2011 to RTFP.txt.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | 00-INDEX | g | 852B |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1304662614 |  | rcu: Remove conditional compilation for RCU CPU stall warnings  The RCU CPU stall warnings can now be controlled using the rcu_cpu_stall_suppress boot-time parameter or via the same parameter from sysfs.  There is therefore no longer any reason to have kernel config parameters for this feature.  This commit therefore removes the RCU_CPU_STALL_DETECTOR and RCU_CPU_STALL_DETECTOR_RUNNABLE kernel config parameters.  The RCU_CPU_STALL_TIMEOUT parameter remains to allow the timeout to be tuned and the RCU_CPU_STALL_VERBOSE parameter remains to allow task-stall information to be suppressed if desired.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Reviewed-by: Josh Triplett <josh@joshtriplett.org>
f | rculist_nulls.txt | g | 5.1K |  | Eric Dumazet | eric.dumazet@gmail.com | 1247745820 |  | netfilter: nf_conntrack: nf_conntrack_alloc() fixes  When a slab cache uses SLAB_DESTROY_BY_RCU, we must be careful when allocating objects, since slab allocator could give a freed object still used by lockless readers.  In particular, nf_conntrack RCU lookups rely on ct->tuplehash[xxx].hnnode.next being always valid (ie containing a valid 'nulls' value, or a valid pointer to next object in hash chain.)  kmem_cache_zalloc() setups object with NULL values, but a NULL value is not valid for ct->tuplehash[xxx].hnnode.next.  Fix is to call kmem_cache_alloc() and do the zeroing ourself.  As spotted by Patrick, we also need to make sure lookup keys are committed to memory before setting refcount to 1, or a lockless reader could get a reference on the old version of the object. Its key re-check could then pass the barrier.  Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com> Signed-off-by: Patrick McHardy <kaber@trash.net>
f | trace.txt | g | 26K |  | Paul E. McKenney | paul.mckenney@linaro.org | 1329843967 |  | rcu: Rework detection of use of RCU by offline CPUs  Because newly offlined CPUs continue executing after completing the CPU_DYING notifiers, they legitimately enter the scheduler and use RCU while appearing to be offline.  This calls for a more sophisticated approach as follows:  1.	RCU marks the CPU online during the CPU_UP_PREPARE phase.  2.	RCU marks the CPU offline during the CPU_DEAD phase.  3.	Diagnostics regarding use of read-side RCU by offline CPUs use 	RCU's accounting rather than the cpu_online_map.  (Note that 	__call_rcu() still uses cpu_online_map to detect illegal 	invocations within CPU_DYING notifiers.)  4.	Offline CPUs are prevented from hanging the system by 	force_quiescent_state(), which pays attention to cpu_online_map. 	Some additional work (in a later commit) will be needed to 	guarantee that force_quiescent_state() waits a full jiffy before 	assuming that a CPU is offline, for example, when called from 	idle entry.  (This commit also makes the one-jiffy wait 	explicit, since the old-style implicit wait can now be defeated 	by RCU_FAST_NO_HZ and by rcutorture.)  This approach avoids the false positives encountered when attempting to use more exact classification of CPU online/offline state.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | rcu.txt | g | 4.0K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1323628301 |  | rcu: Add documentation for raw SRCU read-side primitives  Update various files in Documentation/RCU to reflect srcu_read_lock_raw() and srcu_read_unlock_raw().  Credit to Peter Zijlstra for suggesting use of the existing _raw suffix instead of the earlier bulkref names.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | rcubarrier.txt | g | 12K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1246608149 |  | rcu: Add synchronize_sched_expedited() rcutorture doc + updates  This patch updates the rcutorture documentation to include updated output format.  It also brings the RCU documentation up to date.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Cc: akpm@linux-foundation.org Cc: torvalds@linux-foundation.org Cc: davem@davemloft.net Cc: dada1@cosmosbay.com Cc: zbr@ioremap.net Cc: jeff.chua.linux@gmail.com Cc: paulus@samba.org Cc: laijs@cn.fujitsu.com Cc: jengelh@medozas.de Cc: r000n@r000n.net Cc: benh@kernel.crashing.org Cc: mathieu.desnoyers@polymtl.ca LKML-Reference: <12459460983193-git-send-email-> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | UP.txt | g | 5.6K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1246608149 |  | rcu: Add synchronize_sched_expedited() rcutorture doc + updates  This patch updates the rcutorture documentation to include updated output format.  It also brings the RCU documentation up to date.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Cc: akpm@linux-foundation.org Cc: torvalds@linux-foundation.org Cc: davem@davemloft.net Cc: dada1@cosmosbay.com Cc: zbr@ioremap.net Cc: jeff.chua.linux@gmail.com Cc: paulus@samba.org Cc: laijs@cn.fujitsu.com Cc: jengelh@medozas.de Cc: r000n@r000n.net Cc: benh@kernel.crashing.org Cc: mathieu.desnoyers@polymtl.ca LKML-Reference: <12459460983193-git-send-email-> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | whatisRCU.txt | g | 36K |  | Kees Cook | keescook@chromium.org | 1323628343 |  | docs: Additional LWN links to RCU API  Tyler Hicks pointed me at an additional article on RCU and I figured it should probably be mentioned with the others.  Signed-off-by: Kees Cook <keescook@chromium.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
f | NMI-RCU.txt | g | 4.2K |  | Paul E. McKenney | paulmck@linux.vnet.ibm.com | 1317271004 |  | rcu: Fix RCU's NMI documentation  It has long been the case that the architecture must call nmi_enter() and nmi_exit() rather than irq_enter() and irq_exit() in order to permit RCU read-side critical sections in NMIs.  Catch the documentation up with reality.  Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com> Acked-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
f | rcuref.txt | g | 2.2K |  | Lai Jiangshan | laijs@cn.fujitsu.com | 1221028567 |  | doc/RCU: fix pseudocode in rcuref.txt  atomic_inc_not_zero(v) return 0 if *v = 0. use spin_lock instead of write_lock for update lock.  Signed-off-by: Lai Jiangshan <laijs@cn.fujitsu.com> Cc: "Paul E. McKenney" <paulmck@linux.vnet.ibm.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | arrayRCU.txt | g | 4.4K |  | Linus Torvalds | torvalds@ppc970.osdl.org | 1113690036 |  | Linux-2.6.12-rc2  Initial git repository build. I'm not bothering with the full history, even though we have it. We can create a separate "historical" git archive of that later if we want to, and in the meantime it's about 3.2GB when imported into git - space that would just make the early git days unnecessarily complicated, when we don't have a lot of good infrastructure for it.  Let it rip!
f | torture.txt | g | 13K |  | Paul E. McKenney | paul.mckenney@linaro.org | 1335808098 |  | rcu: Introduce rcutorture testing for rcu_barrier()  Although rcutorture does invoke rcu_barrier() and friends, it cannot really be called a torture test given that it invokes them only once at the end of the test.  This commit therefore introduces heavy-duty rcutorture testing for rcu_barrier(), which may be carried out concurrently with normal rcutorture testing.  Signed-off-by: Paul E. McKenney <paul.mckenney@linaro.org> Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
