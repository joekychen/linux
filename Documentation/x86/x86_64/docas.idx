f | boot-options.txt | g | 11K |  | Joerg Roedel | joerg.roedel@amd.com | 1305040926 |  | x86, gart: Rename pci-gart_64.c to amd_gart_64.c  This file only contains code relevant for the northbridge gart in AMD processors. This patch renames the file to represent this fact in the filename.  Signed-off-by: Joerg Roedel <joerg.roedel@amd.com>
f | machinecheck | g | 3.2K |  | Andi Kleen | andi@firstfloor.org | 1244065512 |  | x86, mce: switch x86 machine check handler to Monarch election.  On Intel platforms machine check exceptions are always broadcast to all CPUs.  This patch makes the machine check handler synchronize all these machine checks, elect a Monarch to handle the event and collect the worst event from all CPUs and then process it first.  This has some advantages:  - When there is a truly data corrupting error the system panics as   quickly as possible. This improves containment of corrupted   data and makes sure the corrupted data never hits stable storage.  - The panics are synchronized and do not reenter the panic code   on multiple CPUs (which currently does not handle this well).  - All the errors are reported. Currently it often happens that   another CPU happens to do the panic first, but reports useless   information (empty machine check) because the real error   happened on another CPU which came in later.   This is a big advantage on Nehalem where the 8 threads per CPU   lead to often the wrong CPU winning the race and dumping   useless information on a machine check.  The problem also occurs   in a less severe form on older CPUs.  - The system can detect when no CPUs detected a machine check   and shut down the system.  This can happen when one CPU is so   badly hung that that it cannot process a machine check anymore   or when some external agent wants to stop the system by   asserting the machine check pin.  This follows Intel hardware   recommendations.  - This matches the recommended error model by the CPU designers.  - The events can be output in true severity order  - When a panic happens on another CPU it makes sure to be actually   be able to process the stop IPI by enabling interrupts.  The code is extremly careful to handle timeouts while waiting for other CPUs. It can't rely on the normal timing mechanisms (jiffies, ktime_get) because of its asynchronous/lockless nature, so it uses own timeouts using ndelay() and a "SPINUNIT"  The timeout is configurable. By default it waits for upto one second for the other CPUs.  This can be also disabled.  From some informal testing AMD systems do not see to broadcast machine checks, so right now it's always disabled by default on non Intel CPUs or also on very old Intel systems.  Includes fixes from Ying Huang Fixed a "ecception" in a comment (H.Seto) Moved global_nwo reset later based on suggestion from H.Seto v2: Avoid duplicate messages  [ Impact: feature, fixes long standing problems. ]  Signed-off-by: Andi Kleen <ak@linux.intel.com> Signed-off-by: Hidetoshi Seto <seto.hidetoshi@jp.fujitsu.com> Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | kernel-stacks | g | 4.3K |  | Christoph Hellwig | hch@lst.de | 1277806379 |  | x86: Always use irq stacks  IRQ stacks provide much better safety against unexpected stack use from interrupts, at the minimal downside of slightly higher memory usage. Enable irq stacks also for the default 8k stack on 32-bit kernels to minimize the problem of stack overflows through interrupt activity.  This is what the 64-bit kernel and various other architectures already do.  Signed-off-by: Christoph Hellwig <hch@lst.de> LKML-Reference: <20100628121554.GA6605@lst.de> Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
f | 00-INDEX | g | 511B |  | H. Peter Anvin | hpa@zytor.com | 1212193143 |  | x86: move x86-specific documentation into Documentation/x86  The current organization of the x86 documentation makes it appear as if the "i386" documentation doesn't apply to x86-64, which is does. Thus, move that documentation into Documentation/x86, and move the x86-64-specific stuff into Documentation/x86/x86_64 with the eventual goal to move stuff that isn't actually 64-bit specific back into Documentation/x86.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
f | mm.txt | g | 1.2K |  | H. Peter Anvin | hpa@zytor.com | 1241575818 |  | x86: fix typo in address space documentation  Fix a trivial typo in Documentation/x86/x86_64/mm.txt.  [ Impact: documentation only ]  Signed-off-by: H. Peter Anvin <hpa@zytor.com> Cc: Rik van Riel <riel@redhat.com>
f | fake-numa-for-cpusets | g | 3.0K |  | Thadeu Lima de Souza Cascardo | cascardo@holoscopio.com | 1238419322 |  | trivial: fix where cgroup documentation is not correctly referred to  cgroup documentation was moved to Documentation/cgroups/. There are some places that still refer to Documentation/controllers/, Documentation/cgroups.txt and Documentation/cpusets.txt. Fix those.  Signed-off-by: Thadeu Lima de Souza Cascardo <cascardo@holoscopio.com> Reviewed-by: Li Zefan <lizf@cn.fujitsu.com> Acked-by: Paul Menage <menage@google.com> Signed-off-by: Jiri Kosina <jkosina@suse.cz>
f | uefi.txt | g | 1.7K |  | Paul Jackson | pj@sgi.com | 1215515441 |  | x86 boot: only pick up additional EFI memmap if add_efi_memmap flag  Applies on top of the previous patch:   x86 boot: add code to add BIOS provided EFI memory entries to kernel  Instead of always adding EFI memory map entries (if present) to the memory map after initially finding either E820 BIOS memory map entries and/or kernel command line memmap entries, -instead- only add such additional EFI memory map entries if the kernel boot option:      add_efi_memmap  is specified.  Requiring this 'add_efi_memmap' option is backward compatible with kernels that didn't load such additional EFI memory map entries in the first place, and it doesn't override a configuration that tries to replace all E820 or EFI BIOS memory map entries with ones given entirely on the kernel command line.  Signed-off-by: Paul Jackson <pj@sgi.com> Cc: "Yinghai Lu" <yhlu.kernel@gmail.com> Cc: "Jack Steiner" <steiner@sgi.com> Cc: "Mike Travis" <travis@sgi.com> Cc: "Huang Cc: Ying" <ying.huang@intel.com> Cc: "Andi Kleen" <andi@firstfloor.org> Cc: "Andrew Morton" <akpm@linux-foundation.org> Cc: Paul Jackson <pj@sgi.com> Signed-off-by: Ingo Molnar <mingo@elte.hu>
f | cpu-hotplug-spec | g | 1.1K |  | H. Peter Anvin | hpa@zytor.com | 1212193143 |  | x86: move x86-specific documentation into Documentation/x86  The current organization of the x86 documentation makes it appear as if the "i386" documentation doesn't apply to x86-64, which is does. Thus, move that documentation into Documentation/x86, and move the x86-64-specific stuff into Documentation/x86/x86_64 with the eventual goal to move stuff that isn't actually 64-bit specific back into Documentation/x86.  Signed-off-by: H. Peter Anvin <hpa@zytor.com>
